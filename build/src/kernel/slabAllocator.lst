GAS LISTING /tmp/ccvL8NpJ.s 			page 1


   1              		.file	"slabAllocator.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN13SlabAllocator11shrinkCacheEP5Cache
   9              	_ZN13SlabAllocator11shrinkCacheEP5Cache:
  10              	.LFB42:
  11              		.file 1 "src/kernel/slabAllocator.cpp"
   1:src/kernel/slabAllocator.cpp **** //
   2:src/kernel/slabAllocator.cpp **** // Created by os on 12/25/22.
   3:src/kernel/slabAllocator.cpp **** //
   4:src/kernel/slabAllocator.cpp **** #include "../../h/kernel/slabAllocator.hpp"
   5:src/kernel/slabAllocator.cpp **** #include "../../h/kernel/utility.hpp"
   6:src/kernel/slabAllocator.cpp **** #include "../../h/kernel/riscv.hpp"
   7:src/kernel/slabAllocator.cpp **** 
   8:src/kernel/slabAllocator.cpp **** Cache* SlabAllocator::cache = nullptr;
   9:src/kernel/slabAllocator.cpp **** Cache* SlabAllocator::largeSlabCache = nullptr;
  10:src/kernel/slabAllocator.cpp **** Cache* SlabAllocator::sizeN[BUCKET_SIZE] = {nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, n
  11:src/kernel/slabAllocator.cpp **** const char* SlabAllocator::names[13] = {"Buffer Cache No. 0", "Buffer Cache No. 1", "Buffer Cache N
  12:src/kernel/slabAllocator.cpp **** 
  13:src/kernel/slabAllocator.cpp **** void SlabAllocator::initialize(void* space, uint64 blockNum) {
  14:src/kernel/slabAllocator.cpp ****     Buddy::initialize(space, blockNum);
  15:src/kernel/slabAllocator.cpp ****     cache = (Cache*)SLAB_META_ADDR_CONST;
  16:src/kernel/slabAllocator.cpp ****     cache->ctor = nullptr;
  17:src/kernel/slabAllocator.cpp ****     cache->dtor = nullptr;
  18:src/kernel/slabAllocator.cpp ****     cache->emptyHead = nullptr;
  19:src/kernel/slabAllocator.cpp ****     cache->partialHead = nullptr;
  20:src/kernel/slabAllocator.cpp ****     cache->fullHead = nullptr;
  21:src/kernel/slabAllocator.cpp ****     cache->objectSize = sizeof(Cache);
  22:src/kernel/slabAllocator.cpp ****     cache->slabSize = DEFAULT_SLAB_SIZE;
  23:src/kernel/slabAllocator.cpp ****     strcpy("Main Cache", cache->name);
  24:src/kernel/slabAllocator.cpp **** 
  25:src/kernel/slabAllocator.cpp ****     largeSlabCache = (Cache*)BUDDY_META_ADDR_CONST;
  26:src/kernel/slabAllocator.cpp ****     largeSlabCache->ctor = nullptr;
  27:src/kernel/slabAllocator.cpp ****     largeSlabCache->dtor = nullptr;
  28:src/kernel/slabAllocator.cpp ****     largeSlabCache->emptyHead = nullptr;
  29:src/kernel/slabAllocator.cpp ****     largeSlabCache->partialHead = nullptr;
  30:src/kernel/slabAllocator.cpp ****     largeSlabCache->fullHead = nullptr;
  31:src/kernel/slabAllocator.cpp ****     largeSlabCache->objectSize = sizeof(Slab);
  32:src/kernel/slabAllocator.cpp ****     largeSlabCache->slabSize = 4;
  33:src/kernel/slabAllocator.cpp ****     strcpy("Large Slab Cache", cache->name);
  34:src/kernel/slabAllocator.cpp **** 
  35:src/kernel/slabAllocator.cpp **** 
  36:src/kernel/slabAllocator.cpp ****     for(int i=0;i<BUCKET_SIZE;i++){
  37:src/kernel/slabAllocator.cpp ****         sizeN[i] = SlabAllocator::createCache(names[i], 1<<(i+CACHE_LOWER_BOUND), nullptr, nullptr)
  38:src/kernel/slabAllocator.cpp ****     }
  39:src/kernel/slabAllocator.cpp **** }
  40:src/kernel/slabAllocator.cpp **** 
  41:src/kernel/slabAllocator.cpp **** bool SlabAllocator::allocateSlab(Cache *cache) {
  42:src/kernel/slabAllocator.cpp ****     Slab* slab = (Slab*)Buddy::alloc(cache->slabSize);
  43:src/kernel/slabAllocator.cpp ****     if(!slab)
  44:src/kernel/slabAllocator.cpp ****         return false;
  45:src/kernel/slabAllocator.cpp ****     SlabAllocator::insertIntoList(cache->emptyHead, slab);
  46:src/kernel/slabAllocator.cpp ****     slab->totalNumOfSlots = slab->numOfFreeSlots = (((1<<cache->slabSize) << BLOCK_SIZE_BITS) - siz
  47:src/kernel/slabAllocator.cpp ****     if(slab->totalNumOfSlots > 1024*8)
GAS LISTING /tmp/ccvL8NpJ.s 			page 2


  48:src/kernel/slabAllocator.cpp ****         slab->totalNumOfSlots = 1024*8;
  49:src/kernel/slabAllocator.cpp ****     slab->objectOffset = (void*)((uint64)slab + sizeof(Slab));
  50:src/kernel/slabAllocator.cpp ****     slab->parent = cache;
  51:src/kernel/slabAllocator.cpp ****     for(uint64 i=0;i<slab->totalNumOfSlots/8 + 1;i++)
  52:src/kernel/slabAllocator.cpp ****         slab->allocated[i] = 0;
  53:src/kernel/slabAllocator.cpp **** 
  54:src/kernel/slabAllocator.cpp ****     if(cache->ctor) {
  55:src/kernel/slabAllocator.cpp ****         for (uint64 i = 0; i < slab->totalNumOfSlots; i++) {
  56:src/kernel/slabAllocator.cpp ****             cache->ctor((void *) ((uint64) slab->objectOffset + i * slab->parent->objectSize));
  57:src/kernel/slabAllocator.cpp ****         }
  58:src/kernel/slabAllocator.cpp ****     }
  59:src/kernel/slabAllocator.cpp ****     return true;
  60:src/kernel/slabAllocator.cpp **** }
  61:src/kernel/slabAllocator.cpp **** 
  62:src/kernel/slabAllocator.cpp **** void* SlabAllocator::allocateSlot(Slab *slab) {
  63:src/kernel/slabAllocator.cpp ****     for(uint64 i=0; i<slab->totalNumOfSlots; i++){
  64:src/kernel/slabAllocator.cpp ****         if(!(slab->allocated[i/8] & (1<<(7 - i%8)))){
  65:src/kernel/slabAllocator.cpp ****             slab->allocated[i/8] |= (1<<(7 - i%8));
  66:src/kernel/slabAllocator.cpp ****             Slab* &headFrom = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead
  67:src/kernel/slabAllocator.cpp ****             slab->numOfFreeSlots--;
  68:src/kernel/slabAllocator.cpp ****             Slab* &headTo = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
  69:src/kernel/slabAllocator.cpp **** 
  70:src/kernel/slabAllocator.cpp ****             if(headTo != headFrom)
  71:src/kernel/slabAllocator.cpp ****                 SlabAllocator::move(headFrom, headTo, slab);
  72:src/kernel/slabAllocator.cpp **** 
  73:src/kernel/slabAllocator.cpp ****             return (void*)((uint64)slab->objectOffset + i*slab->parent->objectSize);
  74:src/kernel/slabAllocator.cpp ****         }
  75:src/kernel/slabAllocator.cpp ****     }
  76:src/kernel/slabAllocator.cpp ****     return nullptr;
  77:src/kernel/slabAllocator.cpp **** }
  78:src/kernel/slabAllocator.cpp **** 
  79:src/kernel/slabAllocator.cpp **** void* SlabAllocator::allocateObject(Cache *cache) {
  80:src/kernel/slabAllocator.cpp ****     void* ret = SlabAllocator::allocateFromList(cache->partialHead);
  81:src/kernel/slabAllocator.cpp ****     if(ret){
  82:src/kernel/slabAllocator.cpp ****         return ret;
  83:src/kernel/slabAllocator.cpp ****     }
  84:src/kernel/slabAllocator.cpp ****     ret = SlabAllocator::allocateFromList(cache->emptyHead);
  85:src/kernel/slabAllocator.cpp ****     if(ret){
  86:src/kernel/slabAllocator.cpp ****         return ret;
  87:src/kernel/slabAllocator.cpp ****     }
  88:src/kernel/slabAllocator.cpp ****     if(cache->objectSize <= sizeof(Slab)) {
  89:src/kernel/slabAllocator.cpp ****         if (!SlabAllocator::allocateSlab(cache))
  90:src/kernel/slabAllocator.cpp ****             return nullptr;
  91:src/kernel/slabAllocator.cpp **** 
  92:src/kernel/slabAllocator.cpp ****         ret = SlabAllocator::allocateSlot(cache->emptyHead);
  93:src/kernel/slabAllocator.cpp ****     }
  94:src/kernel/slabAllocator.cpp ****     else{
  95:src/kernel/slabAllocator.cpp ****         Slab* slab = (Slab*)SlabAllocator::allocateObject(largeSlabCache);
  96:src/kernel/slabAllocator.cpp ****         slab->totalNumOfSlots = slab->numOfFreeSlots = (((1<<cache->slabSize) << BLOCK_SIZE_BITS)) 
  97:src/kernel/slabAllocator.cpp ****         if(slab->totalNumOfSlots > 1024*8)
  98:src/kernel/slabAllocator.cpp ****             slab->totalNumOfSlots = 1024*8;
  99:src/kernel/slabAllocator.cpp ****         void* slabOffset = Buddy::alloc(cache->slabSize);
 100:src/kernel/slabAllocator.cpp ****         slab->objectOffset = slabOffset;
 101:src/kernel/slabAllocator.cpp ****         slab->parent = cache;
 102:src/kernel/slabAllocator.cpp ****         slab->next = nullptr;
 103:src/kernel/slabAllocator.cpp ****         for(uint64 i=0;i<slab->totalNumOfSlots/8 + 1;i++)
 104:src/kernel/slabAllocator.cpp ****             slab->allocated[i] = 0;
GAS LISTING /tmp/ccvL8NpJ.s 			page 3


 105:src/kernel/slabAllocator.cpp **** 
 106:src/kernel/slabAllocator.cpp ****         if(cache->ctor) {
 107:src/kernel/slabAllocator.cpp ****             for (uint64 i = 0; i < slab->totalNumOfSlots; i++) {
 108:src/kernel/slabAllocator.cpp ****                 cache->ctor((void *) ((uint64) slab->objectOffset + i * slab->parent->objectSize));
 109:src/kernel/slabAllocator.cpp ****             }
 110:src/kernel/slabAllocator.cpp ****         }
 111:src/kernel/slabAllocator.cpp **** 
 112:src/kernel/slabAllocator.cpp ****         SlabAllocator::insertIntoList(cache->emptyHead, slab);
 113:src/kernel/slabAllocator.cpp ****         ret = SlabAllocator::allocateSlot(cache->emptyHead);
 114:src/kernel/slabAllocator.cpp ****     }
 115:src/kernel/slabAllocator.cpp **** 
 116:src/kernel/slabAllocator.cpp ****     return ret;
 117:src/kernel/slabAllocator.cpp **** }
 118:src/kernel/slabAllocator.cpp **** 
 119:src/kernel/slabAllocator.cpp **** void* SlabAllocator::allocateBuffer(size_t size) {
 120:src/kernel/slabAllocator.cpp ****     uint64 level = Buddy::getDeg(Buddy::ceil(size));
 121:src/kernel/slabAllocator.cpp ****     if(level < CACHE_LOWER_BOUND || level > CACHE_UPPER_BOUND)
 122:src/kernel/slabAllocator.cpp ****         return nullptr;
 123:src/kernel/slabAllocator.cpp ****     else
 124:src/kernel/slabAllocator.cpp ****         level -= CACHE_LOWER_BOUND;
 125:src/kernel/slabAllocator.cpp ****     return SlabAllocator::allocateObject(sizeN[level]);
 126:src/kernel/slabAllocator.cpp **** }
 127:src/kernel/slabAllocator.cpp **** 
 128:src/kernel/slabAllocator.cpp **** void SlabAllocator::freeSlot(Slab *slab, uint64 index) {
 129:src/kernel/slabAllocator.cpp ****     if(slab->allocated[index/8] & (1<<(7 - index%8))) {
 130:src/kernel/slabAllocator.cpp ****         slab->allocated[index/8] &= ~(1<<(7 - index%8));
 131:src/kernel/slabAllocator.cpp ****         Slab *&headFrom = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 132:src/kernel/slabAllocator.cpp ****         slab->numOfFreeSlots++;
 133:src/kernel/slabAllocator.cpp ****         Slab *&headTo = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead;
 134:src/kernel/slabAllocator.cpp **** 
 135:src/kernel/slabAllocator.cpp ****         if(slab->isEmpty()) {
 136:src/kernel/slabAllocator.cpp ****             SlabAllocator::removeFromList(headFrom, slab);
 137:src/kernel/slabAllocator.cpp ****             if(slab->parent->objectSize <= sizeof(Slab)) {
 138:src/kernel/slabAllocator.cpp ****                 Buddy::free(slab, slab->parent->slabSize);
 139:src/kernel/slabAllocator.cpp ****             }
 140:src/kernel/slabAllocator.cpp ****             else{
 141:src/kernel/slabAllocator.cpp ****                 Buddy::free(slab->objectOffset, slab->parent->slabSize);
 142:src/kernel/slabAllocator.cpp ****                 SlabAllocator::freeObject(largeSlabCache, slab);
 143:src/kernel/slabAllocator.cpp ****             }
 144:src/kernel/slabAllocator.cpp ****         }
 145:src/kernel/slabAllocator.cpp ****         else
 146:src/kernel/slabAllocator.cpp ****             if (headTo != headFrom)
 147:src/kernel/slabAllocator.cpp ****                 SlabAllocator::move(headFrom, headTo, slab);
 148:src/kernel/slabAllocator.cpp ****     }
 149:src/kernel/slabAllocator.cpp **** }
 150:src/kernel/slabAllocator.cpp **** 
 151:src/kernel/slabAllocator.cpp **** bool SlabAllocator::freeObject(Cache* cache, const void *addr) {
 152:src/kernel/slabAllocator.cpp ****     if(cache->dtor)
 153:src/kernel/slabAllocator.cpp ****         cache->dtor((void*)addr);
 154:src/kernel/slabAllocator.cpp ****     if(cache->ctor)
 155:src/kernel/slabAllocator.cpp ****         cache->ctor((void*)addr);
 156:src/kernel/slabAllocator.cpp **** 
 157:src/kernel/slabAllocator.cpp ****     bool deleted = SlabAllocator::freeFromList(cache->fullHead, addr);
 158:src/kernel/slabAllocator.cpp ****     if(deleted)
 159:src/kernel/slabAllocator.cpp ****         return deleted;
 160:src/kernel/slabAllocator.cpp **** 
 161:src/kernel/slabAllocator.cpp ****     deleted = SlabAllocator::freeFromList(cache->partialHead, addr);
GAS LISTING /tmp/ccvL8NpJ.s 			page 4


 162:src/kernel/slabAllocator.cpp **** 
 163:src/kernel/slabAllocator.cpp ****     return deleted;
 164:src/kernel/slabAllocator.cpp **** }
 165:src/kernel/slabAllocator.cpp **** 
 166:src/kernel/slabAllocator.cpp **** void SlabAllocator::freeBuffer(const void *addr) {
 167:src/kernel/slabAllocator.cpp ****     for(int i=0;i<BUCKET_SIZE;i++)
 168:src/kernel/slabAllocator.cpp ****         if(SlabAllocator::freeObject(sizeN[i], addr))
 169:src/kernel/slabAllocator.cpp ****             return;
 170:src/kernel/slabAllocator.cpp **** }
 171:src/kernel/slabAllocator.cpp **** 
 172:src/kernel/slabAllocator.cpp **** Cache* SlabAllocator::createCache(const char *name, size_t size, void (*ctor)(void *), void (*dtor)
 173:src/kernel/slabAllocator.cpp ****     Cache* ret = (Cache*)SlabAllocator::allocateObject(SlabAllocator::cache);
 174:src/kernel/slabAllocator.cpp ****     if(ret == nullptr)
 175:src/kernel/slabAllocator.cpp ****         return nullptr;
 176:src/kernel/slabAllocator.cpp ****     ret->ctor = ctor;
 177:src/kernel/slabAllocator.cpp ****     ret->dtor = dtor;
 178:src/kernel/slabAllocator.cpp ****     ret->emptyHead = ret->partialHead = ret->fullHead = nullptr;
 179:src/kernel/slabAllocator.cpp ****     ret->objectSize = size;
 180:src/kernel/slabAllocator.cpp ****     int deg = Buddy::getDeg(Buddy::ceil(size));
 181:src/kernel/slabAllocator.cpp ****     if(size <= sizeof(Slab)){
 182:src/kernel/slabAllocator.cpp ****         ret->slabSize = DEFAULT_SLAB_SIZE;
 183:src/kernel/slabAllocator.cpp ****     }
 184:src/kernel/slabAllocator.cpp ****     else{
 185:src/kernel/slabAllocator.cpp ****         deg-=10;
 186:src/kernel/slabAllocator.cpp ****         ret->slabSize = deg;
 187:src/kernel/slabAllocator.cpp ****     }
 188:src/kernel/slabAllocator.cpp ****     strcpy(name, ret->name);
 189:src/kernel/slabAllocator.cpp ****     return ret;
 190:src/kernel/slabAllocator.cpp **** }
 191:src/kernel/slabAllocator.cpp **** 
 192:src/kernel/slabAllocator.cpp **** void SlabAllocator::deleteCache(Cache* &cache) {
 193:src/kernel/slabAllocator.cpp ****     deleteList(cache->fullHead);
 194:src/kernel/slabAllocator.cpp ****     deleteList(cache->partialHead);
 195:src/kernel/slabAllocator.cpp ****     deleteList(cache->emptyHead);
 196:src/kernel/slabAllocator.cpp ****     SlabAllocator::freeObject(SlabAllocator::cache, cache);
 197:src/kernel/slabAllocator.cpp ****     cache = nullptr;
 198:src/kernel/slabAllocator.cpp **** }
 199:src/kernel/slabAllocator.cpp **** 
 200:src/kernel/slabAllocator.cpp **** int SlabAllocator::shrinkCache(Cache *cache) {
  12              		.loc 1 200 46
  13              		.cfi_startproc
  14              	.LVL0:
  15 0000 130101FE 		addi	sp,sp,-32
  16              		.cfi_def_cfa_offset 32
  17 0004 233C1100 		sd	ra,24(sp)
  18 0008 23388100 		sd	s0,16(sp)
  19 000c 23349100 		sd	s1,8(sp)
  20 0010 23302101 		sd	s2,0(sp)
  21              		.cfi_offset 1, -8
  22              		.cfi_offset 8, -16
  23              		.cfi_offset 9, -24
  24              		.cfi_offset 18, -32
  25 0014 13040102 		addi	s0,sp,32
  26              		.cfi_def_cfa 8, 0
  27 0018 93040500 		mv	s1,a0
 201:src/kernel/slabAllocator.cpp ****     int ret = 0;
  28              		.loc 1 201 5
GAS LISTING /tmp/ccvL8NpJ.s 			page 5


  29              	.LVL1:
  30              		.loc 1 201 9 is_stmt 0
  31 001c 13090000 		li	s2,0
  32              	.LVL2:
  33              	.L3:
 202:src/kernel/slabAllocator.cpp ****     while(cache->emptyHead){
  34              		.loc 1 202 5 is_stmt 1
  35              		.loc 1 202 18
  36 0020 03B50406 		ld	a0,96(s1)
  37 0024 63040502 		beqz	a0,.L2
 203:src/kernel/slabAllocator.cpp ****         Buddy::free(cache->emptyHead, cache->slabSize);
  38              		.loc 1 203 9
  39              		.loc 1 203 20 is_stmt 0
  40 0028 83B58404 		ld	a1,72(s1)
  41 002c 97000000 		call	_ZN5Buddy4freeEPvm@plt
  41      E7800000 
  42              	.LVL3:
 204:src/kernel/slabAllocator.cpp ****         ret += cache->emptyHead->totalNumOfSlots;
  43              		.loc 1 204 9 is_stmt 1
  44              		.loc 1 204 23 is_stmt 0
  45 0034 83B70406 		ld	a5,96(s1)
  46              		.loc 1 204 34
  47 0038 03B78701 		ld	a4,24(a5)
  48              		.loc 1 204 13
  49 003c 3B092701 		addw	s2,a4,s2
  50              	.LVL4:
 205:src/kernel/slabAllocator.cpp ****         cache->emptyHead = cache->emptyHead->next;
  51              		.loc 1 205 9 is_stmt 1
  52              		.loc 1 205 46 is_stmt 0
  53 0040 83B78700 		ld	a5,8(a5)
  54              		.loc 1 205 26
  55 0044 23B0F406 		sd	a5,96(s1)
 202:src/kernel/slabAllocator.cpp ****         Buddy::free(cache->emptyHead, cache->slabSize);
  56              		.loc 1 202 5
  57 0048 6FF09FFD 		j	.L3
  58              	.LVL5:
  59              	.L2:
 206:src/kernel/slabAllocator.cpp ****     }
 207:src/kernel/slabAllocator.cpp ****     return ret;
  60              		.loc 1 207 5 is_stmt 1
 208:src/kernel/slabAllocator.cpp **** }
  61              		.loc 1 208 1 is_stmt 0
  62 004c 13050900 		mv	a0,s2
  63 0050 83308101 		ld	ra,24(sp)
  64              		.cfi_restore 1
  65 0054 03340101 		ld	s0,16(sp)
  66              		.cfi_restore 8
  67              		.cfi_def_cfa 2, 32
  68 0058 83348100 		ld	s1,8(sp)
  69              		.cfi_restore 9
  70              	.LVL6:
  71 005c 03390100 		ld	s2,0(sp)
  72              		.cfi_restore 18
  73              	.LVL7:
  74 0060 13010102 		addi	sp,sp,32
  75              		.cfi_def_cfa_offset 0
  76 0064 67800000 		jr	ra
GAS LISTING /tmp/ccvL8NpJ.s 			page 6


  77              		.cfi_endproc
  78              	.LFE42:
  80              		.section	.rodata.str1.8,"aMS",@progbits,1
  81              		.align	3
  82              	.LC0:
  83 0000 0A00     		.string	"\n"
  84 0002 00000000 		.align	3
  84      0000
  85              	.LC1:
  86 0008 536C6162 		.string	"Slab address:"
  86      20616464 
  86      72657373 
  86      3A00
  87 0016 0000     		.align	3
  88              	.LC2:
  89 0018 4E756D62 		.string	"Number of slots:"
  89      6572206F 
  89      6620736C 
  89      6F74733A 
  89      00
  90 0029 00000000 		.align	3
  90      000000
  91              	.LC3:
  92 0030 4E756D62 		.string	"Number of free slots:"
  92      6572206F 
  92      66206672 
  92      65652073 
  92      6C6F7473 
  93 0046 0000     		.align	3
  94              	.LC4:
  95 0048 536C6162 		.string	"Slab object size:"
  95      206F626A 
  95      65637420 
  95      73697A65 
  95      3A00
  96 005a 00000000 		.align	3
  96      0000
  97              	.LC5:
  98 0060 4F626A65 		.string	"Object offset:"
  98      6374206F 
  98      66667365 
  98      743A00
  99 006f 00       		.align	3
 100              	.LC6:
 101 0070 536C6162 		.string	"Slab allocated array address:"
 101      20616C6C 
 101      6F636174 
 101      65642061 
 101      72726179 
 102 008e 0000     		.align	3
 103              	.LC7:
 104 0090 416C6C6F 		.string	"Allocated status array:\n"
 104      63617465 
 104      64207374 
 104      61747573 
 104      20617272 
 105 00a9 00000000 		.align	3
GAS LISTING /tmp/ccvL8NpJ.s 			page 7


 105      000000
 106              	.LC8:
 107 00b0 2000     		.string	" "
 108 00b2 00000000 		.align	3
 108      0000
 109              	.LC9:
 110 00b8 00       		.string	""
 111              		.text
 112              		.align	2
 113              		.globl	_ZN13SlabAllocator9printSlabEP4Slab
 115              	_ZN13SlabAllocator9printSlabEP4Slab:
 116              	.LFB43:
 209:src/kernel/slabAllocator.cpp **** 
 210:src/kernel/slabAllocator.cpp **** void SlabAllocator::printSlab(Slab *slab) {
 117              		.loc 1 210 43 is_stmt 1
 118              		.cfi_startproc
 119              	.LVL8:
 211:src/kernel/slabAllocator.cpp ****     if(slab) {
 120              		.loc 1 211 5
 121              	.LBB43:
 122 0068 630C0514 		beqz	a0,.L10
 123              	.LBE43:
 210:src/kernel/slabAllocator.cpp ****     if(slab) {
 124              		.loc 1 210 43 is_stmt 0
 125 006c 130101FE 		addi	sp,sp,-32
 126              		.cfi_def_cfa_offset 32
 127 0070 233C1100 		sd	ra,24(sp)
 128 0074 23388100 		sd	s0,16(sp)
 129 0078 23349100 		sd	s1,8(sp)
 130 007c 23302101 		sd	s2,0(sp)
 131              		.cfi_offset 1, -8
 132              		.cfi_offset 8, -16
 133              		.cfi_offset 9, -24
 134              		.cfi_offset 18, -32
 135 0080 13040102 		addi	s0,sp,32
 136              		.cfi_def_cfa 8, 0
 137 0084 13090500 		mv	s2,a0
 138              	.LBB46:
 139              	.LBB44:
 212:src/kernel/slabAllocator.cpp ****         ConsoleUtil::print("Slab address:", (uint64) slab, "\n");
 140              		.loc 1 212 9 is_stmt 1
 141              		.loc 1 212 27 is_stmt 0
 142 0088 93060001 		li	a3,16
 143 008c 17060000 		lla	a2,.LC0
 143      13060600 
 144 0094 9B050500 		sext.w	a1,a0
 145 0098 17050000 		lla	a0,.LC1
 145      13050500 
 146              	.LVL9:
 147 00a0 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_i@plt
 147      E7800000 
 148              	.LVL10:
 213:src/kernel/slabAllocator.cpp ****         ConsoleUtil::print("Number of slots:", (uint64) slab->totalNumOfSlots, "\n",10);
 149              		.loc 1 213 9 is_stmt 1
 150              		.loc 1 213 27 is_stmt 0
 151 00a8 9306A000 		li	a3,10
 152 00ac 17060000 		lla	a2,.LC0
GAS LISTING /tmp/ccvL8NpJ.s 			page 8


 152      13060600 
 153 00b4 83258901 		lw	a1,24(s2)
 154 00b8 17050000 		lla	a0,.LC2
 154      13050500 
 155 00c0 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_i@plt
 155      E7800000 
 156              	.LVL11:
 214:src/kernel/slabAllocator.cpp ****         ConsoleUtil::print("Number of free slots:", (uint64) slab->numOfFreeSlots, "\n",10);
 157              		.loc 1 214 9 is_stmt 1
 158              		.loc 1 214 27 is_stmt 0
 159 00c8 9306A000 		li	a3,10
 160 00cc 17060000 		lla	a2,.LC0
 160      13060600 
 161 00d4 83250901 		lw	a1,16(s2)
 162 00d8 17050000 		lla	a0,.LC3
 162      13050500 
 163 00e0 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_i@plt
 163      E7800000 
 164              	.LVL12:
 215:src/kernel/slabAllocator.cpp ****         ConsoleUtil::print("Slab object size:", (uint64) sizeof(Slab), "\n",10);
 165              		.loc 1 215 9 is_stmt 1
 166              		.loc 1 215 27 is_stmt 0
 167 00e8 9306A000 		li	a3,10
 168 00ec 17060000 		lla	a2,.LC0
 168      13060600 
 169 00f4 93050043 		li	a1,1072
 170 00f8 17050000 		lla	a0,.LC4
 170      13050500 
 171 0100 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_i@plt
 171      E7800000 
 172              	.LVL13:
 216:src/kernel/slabAllocator.cpp ****         ConsoleUtil::print("Object offset:", (uint64) slab->objectOffset, "\n");
 173              		.loc 1 216 9 is_stmt 1
 174              		.loc 1 216 27 is_stmt 0
 175 0108 93060001 		li	a3,16
 176 010c 17060000 		lla	a2,.LC0
 176      13060600 
 177 0114 83250942 		lw	a1,1056(s2)
 178 0118 17050000 		lla	a0,.LC5
 178      13050500 
 179 0120 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_i@plt
 179      E7800000 
 180              	.LVL14:
 217:src/kernel/slabAllocator.cpp ****         ConsoleUtil::print("Slab allocated array address:", (uint64) (&slab->allocated), "\n");
 181              		.loc 1 217 9 is_stmt 1
 182              		.loc 1 217 27 is_stmt 0
 183 0128 93060001 		li	a3,16
 184 012c 17060000 		lla	a2,.LC0
 184      13060600 
 185 0134 9B050902 		addiw	a1,s2,32
 186 0138 17050000 		lla	a0,.LC6
 186      13050500 
 187 0140 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_i@plt
 187      E7800000 
 188              	.LVL15:
 218:src/kernel/slabAllocator.cpp ****         ConsoleUtil::printString("Allocated status array:\n");
 189              		.loc 1 218 9 is_stmt 1
GAS LISTING /tmp/ccvL8NpJ.s 			page 9


 190              		.loc 1 218 33 is_stmt 0
 191 0148 17050000 		lla	a0,.LC7
 191      13050500 
 192 0150 97000000 		call	_ZN11ConsoleUtil11printStringEPKc@plt
 192      E7800000 
 193              	.LVL16:
 219:src/kernel/slabAllocator.cpp ****         for (uint64 i = 0; i < slab->totalNumOfSlots/8 + 1; i++) {
 194              		.loc 1 219 9 is_stmt 1
 195              	.LBB45:
 196              		.loc 1 219 21 is_stmt 0
 197 0158 93040000 		li	s1,0
 198 015c 6F00C002 		j	.L8
 199              	.LVL17:
 200              	.L13:
 220:src/kernel/slabAllocator.cpp ****             ConsoleUtil::print("", slab->allocated[i], " ");
 201              		.loc 1 220 13 is_stmt 1 discriminator 2
 202              		.loc 1 220 53 is_stmt 0 discriminator 2
 203 0160 B3079900 		add	a5,s2,s1
 204              		.loc 1 220 31 discriminator 2
 205 0164 93060001 		li	a3,16
 206 0168 17060000 		lla	a2,.LC8
 206      13060600 
 207 0170 83C50702 		lbu	a1,32(a5)
 208 0174 17050000 		lla	a0,.LC9
 208      13050500 
 209 017c 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_i@plt
 209      E7800000 
 210              	.LVL18:
 219:src/kernel/slabAllocator.cpp ****         for (uint64 i = 0; i < slab->totalNumOfSlots/8 + 1; i++) {
 211              		.loc 1 219 9 is_stmt 1 discriminator 2
 212 0184 93841400 		addi	s1,s1,1
 213              	.LVL19:
 214              	.L8:
 219:src/kernel/slabAllocator.cpp ****         for (uint64 i = 0; i < slab->totalNumOfSlots/8 + 1; i++) {
 215              		.loc 1 219 30 discriminator 3
 219:src/kernel/slabAllocator.cpp ****         for (uint64 i = 0; i < slab->totalNumOfSlots/8 + 1; i++) {
 216              		.loc 1 219 38 is_stmt 0 discriminator 3
 217 0188 83378901 		ld	a5,24(s2)
 219:src/kernel/slabAllocator.cpp ****         for (uint64 i = 0; i < slab->totalNumOfSlots/8 + 1; i++) {
 218              		.loc 1 219 53 discriminator 3
 219 018c 93D73700 		srli	a5,a5,3
 219:src/kernel/slabAllocator.cpp ****         for (uint64 i = 0; i < slab->totalNumOfSlots/8 + 1; i++) {
 220              		.loc 1 219 56 discriminator 3
 221 0190 93871700 		addi	a5,a5,1
 219:src/kernel/slabAllocator.cpp ****         for (uint64 i = 0; i < slab->totalNumOfSlots/8 + 1; i++) {
 222              		.loc 1 219 30 discriminator 3
 223 0194 E3E6F4FC 		bgtu	a5,s1,.L13
 224              	.LBE45:
 221:src/kernel/slabAllocator.cpp ****         }
 222:src/kernel/slabAllocator.cpp ****         ConsoleUtil::printString("\n");
 225              		.loc 1 222 9 is_stmt 1
 226              		.loc 1 222 33 is_stmt 0
 227 0198 17050000 		lla	a0,.LC0
 227      13050500 
 228 01a0 97000000 		call	_ZN11ConsoleUtil11printStringEPKc@plt
 228      E7800000 
 229              	.LVL20:
GAS LISTING /tmp/ccvL8NpJ.s 			page 10


 230              	.LBE44:
 231              	.LBE46:
 223:src/kernel/slabAllocator.cpp ****     }
 224:src/kernel/slabAllocator.cpp **** }
 232              		.loc 1 224 1
 233 01a8 83308101 		ld	ra,24(sp)
 234              		.cfi_restore 1
 235 01ac 03340101 		ld	s0,16(sp)
 236              		.cfi_restore 8
 237              		.cfi_def_cfa 2, 32
 238 01b0 83348100 		ld	s1,8(sp)
 239              		.cfi_restore 9
 240              	.LVL21:
 241 01b4 03390100 		ld	s2,0(sp)
 242              		.cfi_restore 18
 243              	.LVL22:
 244 01b8 13010102 		addi	sp,sp,32
 245              		.cfi_def_cfa_offset 0
 246 01bc 67800000 		jr	ra
 247              	.LVL23:
 248              	.L10:
 249 01c0 67800000 		ret
 250              		.cfi_endproc
 251              	.LFE43:
 253              		.section	.rodata.str1.8
 254 00b9 00000000 		.align	3
 254      000000
 255              	.LC10:
 256 00c0 43616368 		.string	"Cache name: "
 256      65206E61 
 256      6D653A20 
 256      00
 257 00cd 000000   		.align	3
 258              	.LC11:
 259 00d0 43616368 		.string	"Cache address: "
 259      65206164 
 259      64726573 
 259      733A2000 
 260              		.align	3
 261              	.LC12:
 262 00e0 43616368 		.string	"Cache slab size: "
 262      6520736C 
 262      61622073 
 262      697A653A 
 262      2000
 263 00f2 00000000 		.align	3
 263      0000
 264              	.LC13:
 265 00f8 43616368 		.string	"Cache object size: "
 265      65206F62 
 265      6A656374 
 265      2073697A 
 265      653A2000 
 266 010c 00000000 		.align	3
 267              	.LC14:
 268 0110 456D7074 		.string	"Empty head: "
 268      79206865 
GAS LISTING /tmp/ccvL8NpJ.s 			page 11


 268      61643A20 
 268      00
 269 011d 000000   		.align	3
 270              	.LC15:
 271 0120 50617274 		.string	"Partial head: "
 271      69616C20 
 271      68656164 
 271      3A2000
 272 012f 00       		.align	3
 273              	.LC16:
 274 0130 46756C6C 		.string	"Full head: "
 274      20686561 
 274      643A2000 
 275              		.text
 276              		.align	2
 277              		.globl	_ZN13SlabAllocator10printCacheEP5Cache
 279              	_ZN13SlabAllocator10printCacheEP5Cache:
 280              	.LFB44:
 225:src/kernel/slabAllocator.cpp **** 
 226:src/kernel/slabAllocator.cpp **** void SlabAllocator::printCache(Cache *cache) {
 281              		.loc 1 226 46 is_stmt 1
 282              		.cfi_startproc
 283              	.LVL24:
 284 01c4 130101FE 		addi	sp,sp,-32
 285              		.cfi_def_cfa_offset 32
 286 01c8 233C1100 		sd	ra,24(sp)
 287 01cc 23388100 		sd	s0,16(sp)
 288 01d0 23349100 		sd	s1,8(sp)
 289 01d4 23302101 		sd	s2,0(sp)
 290              		.cfi_offset 1, -8
 291              		.cfi_offset 8, -16
 292              		.cfi_offset 9, -24
 293              		.cfi_offset 18, -32
 294 01d8 13040102 		addi	s0,sp,32
 295              		.cfi_def_cfa 8, 0
 296 01dc 13090500 		mv	s2,a0
 227:src/kernel/slabAllocator.cpp ****     ConsoleUtil::printString("Cache name: ");
 297              		.loc 1 227 5
 298              		.loc 1 227 29 is_stmt 0
 299 01e0 17050000 		lla	a0,.LC10
 299      13050500 
 300              	.LVL25:
 301 01e8 97000000 		call	_ZN11ConsoleUtil11printStringEPKc@plt
 301      E7800000 
 302              	.LVL26:
 228:src/kernel/slabAllocator.cpp ****     ConsoleUtil::printString(cache->name);
 303              		.loc 1 228 5 is_stmt 1
 304              		.loc 1 228 29 is_stmt 0
 305 01f0 13050900 		mv	a0,s2
 306 01f4 97000000 		call	_ZN11ConsoleUtil11printStringEPKc@plt
 306      E7800000 
 307              	.LVL27:
 229:src/kernel/slabAllocator.cpp ****     ConsoleUtil::printString("\n");
 308              		.loc 1 229 5 is_stmt 1
 309              		.loc 1 229 29 is_stmt 0
 310 01fc 17050000 		lla	a0,.LC0
 310      13050500 
GAS LISTING /tmp/ccvL8NpJ.s 			page 12


 311 0204 97000000 		call	_ZN11ConsoleUtil11printStringEPKc@plt
 311      E7800000 
 312              	.LVL28:
 230:src/kernel/slabAllocator.cpp ****     ConsoleUtil::print("Cache address: ", (uint64)cache, "\n");
 313              		.loc 1 230 5 is_stmt 1
 314              		.loc 1 230 23 is_stmt 0
 315 020c 93060001 		li	a3,16
 316 0210 17060000 		lla	a2,.LC0
 316      13060600 
 317 0218 9B050900 		sext.w	a1,s2
 318 021c 17050000 		lla	a0,.LC11
 318      13050500 
 319 0224 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_i@plt
 319      E7800000 
 320              	.LVL29:
 231:src/kernel/slabAllocator.cpp ****     ConsoleUtil::print("Cache slab size: ", (uint64)cache->slabSize, "\n",10);
 321              		.loc 1 231 5 is_stmt 1
 322              		.loc 1 231 23 is_stmt 0
 323 022c 9306A000 		li	a3,10
 324 0230 17060000 		lla	a2,.LC0
 324      13060600 
 325 0238 83258904 		lw	a1,72(s2)
 326 023c 17050000 		lla	a0,.LC12
 326      13050500 
 327 0244 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_i@plt
 327      E7800000 
 328              	.LVL30:
 232:src/kernel/slabAllocator.cpp ****     ConsoleUtil::print("Cache object size: ", (uint64)cache->objectSize, "\n",10);
 329              		.loc 1 232 5 is_stmt 1
 330              		.loc 1 232 23 is_stmt 0
 331 024c 9306A000 		li	a3,10
 332 0250 17060000 		lla	a2,.LC0
 332      13060600 
 333 0258 83250904 		lw	a1,64(s2)
 334 025c 17050000 		lla	a0,.LC13
 334      13050500 
 335 0264 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_i@plt
 335      E7800000 
 336              	.LVL31:
 233:src/kernel/slabAllocator.cpp ****     ConsoleUtil::print("Empty head: ", (uint64)cache->emptyHead, "\n");
 337              		.loc 1 233 5 is_stmt 1
 338              		.loc 1 233 23 is_stmt 0
 339 026c 93060001 		li	a3,16
 340 0270 17060000 		lla	a2,.LC0
 340      13060600 
 341 0278 83250906 		lw	a1,96(s2)
 342 027c 17050000 		lla	a0,.LC14
 342      13050500 
 343 0284 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_i@plt
 343      E7800000 
 344              	.LVL32:
 234:src/kernel/slabAllocator.cpp **** 
 235:src/kernel/slabAllocator.cpp ****     Slab* iter = cache->emptyHead;
 345              		.loc 1 235 5 is_stmt 1
 346              		.loc 1 235 11 is_stmt 0
 347 028c 83340906 		ld	s1,96(s2)
 348              	.LVL33:
GAS LISTING /tmp/ccvL8NpJ.s 			page 13


 349              	.L16:
 236:src/kernel/slabAllocator.cpp ****     while(iter){
 350              		.loc 1 236 5 is_stmt 1
 351              		.loc 1 236 11
 352 0290 63860402 		beqz	s1,.L15
 237:src/kernel/slabAllocator.cpp ****         ConsoleUtil::print("", (uint64)iter, " ");
 353              		.loc 1 237 9
 354              		.loc 1 237 27 is_stmt 0
 355 0294 93060001 		li	a3,16
 356 0298 17060000 		lla	a2,.LC8
 356      13060600 
 357 02a0 9B850400 		sext.w	a1,s1
 358 02a4 17050000 		lla	a0,.LC9
 358      13050500 
 359 02ac 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_i@plt
 359      E7800000 
 360              	.LVL34:
 238:src/kernel/slabAllocator.cpp ****         iter = iter->next;
 361              		.loc 1 238 9 is_stmt 1
 362              		.loc 1 238 14 is_stmt 0
 363 02b4 83B48400 		ld	s1,8(s1)
 364              	.LVL35:
 236:src/kernel/slabAllocator.cpp ****     while(iter){
 365              		.loc 1 236 5
 366 02b8 6FF09FFD 		j	.L16
 367              	.L15:
 239:src/kernel/slabAllocator.cpp ****     }
 240:src/kernel/slabAllocator.cpp ****     ConsoleUtil::printString("\n");
 368              		.loc 1 240 5 is_stmt 1
 369              		.loc 1 240 29 is_stmt 0
 370 02bc 17050000 		lla	a0,.LC0
 370      13050500 
 371 02c4 97000000 		call	_ZN11ConsoleUtil11printStringEPKc@plt
 371      E7800000 
 372              	.LVL36:
 241:src/kernel/slabAllocator.cpp **** 
 242:src/kernel/slabAllocator.cpp ****     ConsoleUtil::print("Partial head: ", (uint64)cache->partialHead, "\n");
 373              		.loc 1 242 5 is_stmt 1
 374              		.loc 1 242 23 is_stmt 0
 375 02cc 93060001 		li	a3,16
 376 02d0 17060000 		lla	a2,.LC0
 376      13060600 
 377 02d8 83258906 		lw	a1,104(s2)
 378 02dc 17050000 		lla	a0,.LC15
 378      13050500 
 379 02e4 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_i@plt
 379      E7800000 
 380              	.LVL37:
 243:src/kernel/slabAllocator.cpp **** 
 244:src/kernel/slabAllocator.cpp ****     iter = cache->partialHead;
 381              		.loc 1 244 5 is_stmt 1
 382              		.loc 1 244 10 is_stmt 0
 383 02ec 83348906 		ld	s1,104(s2)
 384              	.LVL38:
 385              	.L18:
 245:src/kernel/slabAllocator.cpp ****     while(iter){
 386              		.loc 1 245 5 is_stmt 1
GAS LISTING /tmp/ccvL8NpJ.s 			page 14


 387              		.loc 1 245 11
 388 02f0 63860402 		beqz	s1,.L17
 246:src/kernel/slabAllocator.cpp ****         ConsoleUtil::print("", (uint64)iter, " ");
 389              		.loc 1 246 9
 390              		.loc 1 246 27 is_stmt 0
 391 02f4 93060001 		li	a3,16
 392 02f8 17060000 		lla	a2,.LC8
 392      13060600 
 393 0300 9B850400 		sext.w	a1,s1
 394 0304 17050000 		lla	a0,.LC9
 394      13050500 
 395 030c 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_i@plt
 395      E7800000 
 396              	.LVL39:
 247:src/kernel/slabAllocator.cpp ****         iter = iter->next;
 397              		.loc 1 247 9 is_stmt 1
 398              		.loc 1 247 14 is_stmt 0
 399 0314 83B48400 		ld	s1,8(s1)
 400              	.LVL40:
 245:src/kernel/slabAllocator.cpp ****     while(iter){
 401              		.loc 1 245 5
 402 0318 6FF09FFD 		j	.L18
 403              	.L17:
 248:src/kernel/slabAllocator.cpp ****     }
 249:src/kernel/slabAllocator.cpp ****     ConsoleUtil::printString("\n");
 404              		.loc 1 249 5 is_stmt 1
 405              		.loc 1 249 29 is_stmt 0
 406 031c 17050000 		lla	a0,.LC0
 406      13050500 
 407 0324 97000000 		call	_ZN11ConsoleUtil11printStringEPKc@plt
 407      E7800000 
 408              	.LVL41:
 250:src/kernel/slabAllocator.cpp **** 
 251:src/kernel/slabAllocator.cpp ****     ConsoleUtil::print("Full head: ", (uint64)cache->fullHead, "\n");
 409              		.loc 1 251 5 is_stmt 1
 410              		.loc 1 251 23 is_stmt 0
 411 032c 93060001 		li	a3,16
 412 0330 17060000 		lla	a2,.LC0
 412      13060600 
 413 0338 83250907 		lw	a1,112(s2)
 414 033c 17050000 		lla	a0,.LC16
 414      13050500 
 415 0344 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_i@plt
 415      E7800000 
 416              	.LVL42:
 252:src/kernel/slabAllocator.cpp **** 
 253:src/kernel/slabAllocator.cpp ****     iter = cache->fullHead;
 417              		.loc 1 253 5 is_stmt 1
 418              		.loc 1 253 10 is_stmt 0
 419 034c 83340907 		ld	s1,112(s2)
 420              	.LVL43:
 421              	.L20:
 254:src/kernel/slabAllocator.cpp ****     while(iter){
 422              		.loc 1 254 5 is_stmt 1
 423              		.loc 1 254 11
 424 0350 63860402 		beqz	s1,.L19
 255:src/kernel/slabAllocator.cpp ****         ConsoleUtil::print("", (uint64)iter, " ");
GAS LISTING /tmp/ccvL8NpJ.s 			page 15


 425              		.loc 1 255 9
 426              		.loc 1 255 27 is_stmt 0
 427 0354 93060001 		li	a3,16
 428 0358 17060000 		lla	a2,.LC8
 428      13060600 
 429 0360 9B850400 		sext.w	a1,s1
 430 0364 17050000 		lla	a0,.LC9
 430      13050500 
 431 036c 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_i@plt
 431      E7800000 
 432              	.LVL44:
 256:src/kernel/slabAllocator.cpp ****         iter = iter->next;
 433              		.loc 1 256 9 is_stmt 1
 434              		.loc 1 256 14 is_stmt 0
 435 0374 83B48400 		ld	s1,8(s1)
 436              	.LVL45:
 254:src/kernel/slabAllocator.cpp ****     while(iter){
 437              		.loc 1 254 5
 438 0378 6FF09FFD 		j	.L20
 439              	.L19:
 257:src/kernel/slabAllocator.cpp ****     }
 258:src/kernel/slabAllocator.cpp ****     ConsoleUtil::printString("\n");
 440              		.loc 1 258 5 is_stmt 1
 441              		.loc 1 258 29 is_stmt 0
 442 037c 17050000 		lla	a0,.LC0
 442      13050500 
 443 0384 97000000 		call	_ZN11ConsoleUtil11printStringEPKc@plt
 443      E7800000 
 444              	.LVL46:
 259:src/kernel/slabAllocator.cpp **** }
 445              		.loc 1 259 1
 446 038c 83308101 		ld	ra,24(sp)
 447              		.cfi_restore 1
 448 0390 03340101 		ld	s0,16(sp)
 449              		.cfi_restore 8
 450              		.cfi_def_cfa 2, 32
 451 0394 83348100 		ld	s1,8(sp)
 452              		.cfi_restore 9
 453              	.LVL47:
 454 0398 03390100 		ld	s2,0(sp)
 455              		.cfi_restore 18
 456              	.LVL48:
 457 039c 13010102 		addi	sp,sp,32
 458              		.cfi_def_cfa_offset 0
 459 03a0 67800000 		jr	ra
 460              		.cfi_endproc
 461              	.LFE44:
 463              		.align	2
 464              		.globl	_ZN13SlabAllocator14insertIntoListERP4SlabS1_
 466              	_ZN13SlabAllocator14insertIntoListERP4SlabS1_:
 467              	.LFB45:
 260:src/kernel/slabAllocator.cpp **** 
 261:src/kernel/slabAllocator.cpp **** void SlabAllocator::insertIntoList(Slab *&head, Slab *slab) {
 468              		.loc 1 261 61 is_stmt 1
 469              		.cfi_startproc
 470              	.LVL49:
 471 03a4 130101FF 		addi	sp,sp,-16
GAS LISTING /tmp/ccvL8NpJ.s 			page 16


 472              		.cfi_def_cfa_offset 16
 473 03a8 23348100 		sd	s0,8(sp)
 474              		.cfi_offset 8, -8
 475 03ac 13040101 		addi	s0,sp,16
 476              		.cfi_def_cfa 8, 0
 262:src/kernel/slabAllocator.cpp ****     slab->next = head;
 477              		.loc 1 262 5
 478              		.loc 1 262 18 is_stmt 0
 479 03b0 83370500 		ld	a5,0(a0)
 480              		.loc 1 262 16
 481 03b4 23B4F500 		sd	a5,8(a1)
 263:src/kernel/slabAllocator.cpp ****     if(head)
 482              		.loc 1 263 5 is_stmt 1
 483 03b8 63840700 		beqz	a5,.L23
 264:src/kernel/slabAllocator.cpp ****         head->prev = slab;
 484              		.loc 1 264 9
 485              		.loc 1 264 20 is_stmt 0
 486 03bc 23B0B700 		sd	a1,0(a5)
 487              	.L23:
 265:src/kernel/slabAllocator.cpp ****     slab->prev = nullptr;
 488              		.loc 1 265 5 is_stmt 1
 489              		.loc 1 265 16 is_stmt 0
 490 03c0 23B00500 		sd	zero,0(a1)
 266:src/kernel/slabAllocator.cpp ****     head = slab;
 491              		.loc 1 266 5 is_stmt 1
 492              		.loc 1 266 10 is_stmt 0
 493 03c4 2330B500 		sd	a1,0(a0)
 267:src/kernel/slabAllocator.cpp **** }
 494              		.loc 1 267 1
 495 03c8 03348100 		ld	s0,8(sp)
 496              		.cfi_restore 8
 497              		.cfi_def_cfa 2, 16
 498 03cc 13010101 		addi	sp,sp,16
 499              		.cfi_def_cfa_offset 0
 500 03d0 67800000 		jr	ra
 501              		.cfi_endproc
 502              	.LFE45:
 504              		.align	2
 505              		.globl	_ZN13SlabAllocator12allocateSlabEP5Cache
 507              	_ZN13SlabAllocator12allocateSlabEP5Cache:
 508              	.LFB33:
  41:src/kernel/slabAllocator.cpp ****     Slab* slab = (Slab*)Buddy::alloc(cache->slabSize);
 509              		.loc 1 41 48 is_stmt 1
 510              		.cfi_startproc
 511              	.LVL50:
 512 03d4 130101FD 		addi	sp,sp,-48
 513              		.cfi_def_cfa_offset 48
 514 03d8 23341102 		sd	ra,40(sp)
 515 03dc 23308102 		sd	s0,32(sp)
 516 03e0 233C9100 		sd	s1,24(sp)
 517 03e4 23382101 		sd	s2,16(sp)
 518 03e8 23343101 		sd	s3,8(sp)
 519              		.cfi_offset 1, -8
 520              		.cfi_offset 8, -16
 521              		.cfi_offset 9, -24
 522              		.cfi_offset 18, -32
 523              		.cfi_offset 19, -40
GAS LISTING /tmp/ccvL8NpJ.s 			page 17


 524 03ec 13040103 		addi	s0,sp,48
 525              		.cfi_def_cfa 8, 0
 526 03f0 93090500 		mv	s3,a0
  42:src/kernel/slabAllocator.cpp ****     if(!slab)
 527              		.loc 1 42 5
  42:src/kernel/slabAllocator.cpp ****     if(!slab)
 528              		.loc 1 42 37 is_stmt 0
 529 03f4 03358504 		ld	a0,72(a0)
 530              	.LVL51:
 531 03f8 97000000 		call	_ZN5Buddy5allocEm@plt
 531      E7800000 
 532              	.LVL52:
  43:src/kernel/slabAllocator.cpp ****         return false;
 533              		.loc 1 43 5 is_stmt 1
 534 0400 630A050A 		beqz	a0,.L31
 535 0404 93040500 		mv	s1,a0
  45:src/kernel/slabAllocator.cpp ****     slab->totalNumOfSlots = slab->numOfFreeSlots = (((1<<cache->slabSize) << BLOCK_SIZE_BITS) - siz
 536              		.loc 1 45 5
  45:src/kernel/slabAllocator.cpp ****     slab->totalNumOfSlots = slab->numOfFreeSlots = (((1<<cache->slabSize) << BLOCK_SIZE_BITS) - siz
 537              		.loc 1 45 34 is_stmt 0
 538 0408 93050500 		mv	a1,a0
 539 040c 13850906 		addi	a0,s3,96
 540              	.LVL53:
 541 0410 97000000 		call	_ZN13SlabAllocator14insertIntoListERP4SlabS1_
 541      E7800000 
 542              	.LVL54:
  46:src/kernel/slabAllocator.cpp ****     if(slab->totalNumOfSlots > 1024*8)
 543              		.loc 1 46 5 is_stmt 1
  46:src/kernel/slabAllocator.cpp ****     if(slab->totalNumOfSlots > 1024*8)
 544              		.loc 1 46 65 is_stmt 0
 545 0418 03B78904 		ld	a4,72(s3)
  46:src/kernel/slabAllocator.cpp ****     if(slab->totalNumOfSlots > 1024*8)
 546              		.loc 1 46 56
 547 041c 93071000 		li	a5,1
 548 0420 BB97E700 		sllw	a5,a5,a4
  46:src/kernel/slabAllocator.cpp ****     if(slab->totalNumOfSlots > 1024*8)
 549              		.loc 1 46 75
 550 0424 9B97C700 		slliw	a5,a5,12
  46:src/kernel/slabAllocator.cpp ****     if(slab->totalNumOfSlots > 1024*8)
 551              		.loc 1 46 95
 552 0428 938707BD 		addi	a5,a5,-1072
  46:src/kernel/slabAllocator.cpp ****     if(slab->totalNumOfSlots > 1024*8)
 553              		.loc 1 46 120
 554 042c 03B70904 		ld	a4,64(s3)
  46:src/kernel/slabAllocator.cpp ****     if(slab->totalNumOfSlots > 1024*8)
 555              		.loc 1 46 111
 556 0430 B3D7E702 		divu	a5,a5,a4
  46:src/kernel/slabAllocator.cpp ****     if(slab->totalNumOfSlots > 1024*8)
 557              		.loc 1 46 50
 558 0434 23B8F400 		sd	a5,16(s1)
  46:src/kernel/slabAllocator.cpp ****     if(slab->totalNumOfSlots > 1024*8)
 559              		.loc 1 46 27
 560 0438 23BCF400 		sd	a5,24(s1)
  47:src/kernel/slabAllocator.cpp ****         slab->totalNumOfSlots = 1024*8;
 561              		.loc 1 47 5 is_stmt 1
 562 043c 37270000 		li	a4,8192
 563 0440 6376F700 		bleu	a5,a4,.L27
GAS LISTING /tmp/ccvL8NpJ.s 			page 18


  48:src/kernel/slabAllocator.cpp ****     slab->objectOffset = (void*)((uint64)slab + sizeof(Slab));
 564              		.loc 1 48 9
  48:src/kernel/slabAllocator.cpp ****     slab->objectOffset = (void*)((uint64)slab + sizeof(Slab));
 565              		.loc 1 48 31 is_stmt 0
 566 0444 B7270000 		li	a5,8192
 567 0448 23BCF400 		sd	a5,24(s1)
 568              	.L27:
  49:src/kernel/slabAllocator.cpp ****     slab->parent = cache;
 569              		.loc 1 49 5 is_stmt 1
  49:src/kernel/slabAllocator.cpp ****     slab->parent = cache;
 570              		.loc 1 49 47 is_stmt 0
 571 044c 93870443 		addi	a5,s1,1072
  49:src/kernel/slabAllocator.cpp ****     slab->parent = cache;
 572              		.loc 1 49 24
 573 0450 23B0F442 		sd	a5,1056(s1)
  50:src/kernel/slabAllocator.cpp ****     for(uint64 i=0;i<slab->totalNumOfSlots/8 + 1;i++)
 574              		.loc 1 50 5 is_stmt 1
  50:src/kernel/slabAllocator.cpp ****     for(uint64 i=0;i<slab->totalNumOfSlots/8 + 1;i++)
 575              		.loc 1 50 18 is_stmt 0
 576 0454 23B43443 		sd	s3,1064(s1)
  51:src/kernel/slabAllocator.cpp ****         slab->allocated[i] = 0;
 577              		.loc 1 51 5 is_stmt 1
 578              	.LVL55:
 579              	.LBB47:
  51:src/kernel/slabAllocator.cpp ****         slab->allocated[i] = 0;
 580              		.loc 1 51 16 is_stmt 0
 581 0458 13070000 		li	a4,0
 582              	.LVL56:
 583              	.L29:
  51:src/kernel/slabAllocator.cpp ****         slab->allocated[i] = 0;
 584              		.loc 1 51 21 is_stmt 1 discriminator 3
  51:src/kernel/slabAllocator.cpp ****         slab->allocated[i] = 0;
 585              		.loc 1 51 28 is_stmt 0 discriminator 3
 586 045c 83B78401 		ld	a5,24(s1)
  51:src/kernel/slabAllocator.cpp ****         slab->allocated[i] = 0;
 587              		.loc 1 51 43 discriminator 3
 588 0460 93D73700 		srli	a5,a5,3
  51:src/kernel/slabAllocator.cpp ****         slab->allocated[i] = 0;
 589              		.loc 1 51 46 discriminator 3
 590 0464 93871700 		addi	a5,a5,1
  51:src/kernel/slabAllocator.cpp ****         slab->allocated[i] = 0;
 591              		.loc 1 51 21 discriminator 3
 592 0468 637AF700 		bleu	a5,a4,.L28
  52:src/kernel/slabAllocator.cpp **** 
 593              		.loc 1 52 9 is_stmt 1 discriminator 2
  52:src/kernel/slabAllocator.cpp **** 
 594              		.loc 1 52 28 is_stmt 0 discriminator 2
 595 046c B387E400 		add	a5,s1,a4
 596 0470 23800702 		sb	zero,32(a5)
  51:src/kernel/slabAllocator.cpp ****         slab->allocated[i] = 0;
 597              		.loc 1 51 5 is_stmt 1 discriminator 2
 598 0474 13071700 		addi	a4,a4,1
 599              	.LVL57:
 600 0478 6FF05FFE 		j	.L29
 601              	.L28:
 602              	.LBE47:
  54:src/kernel/slabAllocator.cpp ****         for (uint64 i = 0; i < slab->totalNumOfSlots; i++) {
GAS LISTING /tmp/ccvL8NpJ.s 			page 19


 603              		.loc 1 54 5
 604              	.LBB48:
  54:src/kernel/slabAllocator.cpp ****         for (uint64 i = 0; i < slab->totalNumOfSlots; i++) {
 605              		.loc 1 54 15 is_stmt 0
 606 047c 83B70905 		ld	a5,80(s3)
  54:src/kernel/slabAllocator.cpp ****         for (uint64 i = 0; i < slab->totalNumOfSlots; i++) {
 607              		.loc 1 54 5
 608 0480 638E0702 		beqz	a5,.L32
 609              	.LBB49:
  55:src/kernel/slabAllocator.cpp ****             cache->ctor((void *) ((uint64) slab->objectOffset + i * slab->parent->objectSize));
 610              		.loc 1 55 21
 611 0484 13090000 		li	s2,0
 612              	.LVL58:
 613              	.L30:
  55:src/kernel/slabAllocator.cpp ****             cache->ctor((void *) ((uint64) slab->objectOffset + i * slab->parent->objectSize));
 614              		.loc 1 55 30 is_stmt 1 discriminator 3
  55:src/kernel/slabAllocator.cpp ****             cache->ctor((void *) ((uint64) slab->objectOffset + i * slab->parent->objectSize));
 615              		.loc 1 55 38 is_stmt 0 discriminator 3
 616 0488 83B78401 		ld	a5,24(s1)
  55:src/kernel/slabAllocator.cpp ****             cache->ctor((void *) ((uint64) slab->objectOffset + i * slab->parent->objectSize));
 617              		.loc 1 55 30 discriminator 3
 618 048c 637CF902 		bleu	a5,s2,.L33
  56:src/kernel/slabAllocator.cpp ****         }
 619              		.loc 1 56 13 is_stmt 1 discriminator 2
  56:src/kernel/slabAllocator.cpp ****         }
 620              		.loc 1 56 20 is_stmt 0 discriminator 2
 621 0490 03B70905 		ld	a4,80(s3)
  56:src/kernel/slabAllocator.cpp ****         }
 622              		.loc 1 56 50 discriminator 2
 623 0494 03B50442 		ld	a0,1056(s1)
  56:src/kernel/slabAllocator.cpp ****         }
 624              		.loc 1 56 75 discriminator 2
 625 0498 83B78442 		ld	a5,1064(s1)
  56:src/kernel/slabAllocator.cpp ****         }
 626              		.loc 1 56 83 discriminator 2
 627 049c 83B70704 		ld	a5,64(a5)
  56:src/kernel/slabAllocator.cpp ****         }
 628              		.loc 1 56 67 discriminator 2
 629 04a0 B3872703 		mul	a5,a5,s2
  56:src/kernel/slabAllocator.cpp ****         }
 630              		.loc 1 56 24 discriminator 2
 631 04a4 3305F500 		add	a0,a0,a5
 632 04a8 E7000700 		jalr	a4
 633              	.LVL59:
  55:src/kernel/slabAllocator.cpp ****             cache->ctor((void *) ((uint64) slab->objectOffset + i * slab->parent->objectSize));
 634              		.loc 1 55 9 is_stmt 1 discriminator 2
 635 04ac 13091900 		addi	s2,s2,1
 636              	.LVL60:
 637 04b0 6FF09FFD 		j	.L30
 638              	.LVL61:
 639              	.L31:
 640              	.LBE49:
 641              	.LBE48:
  44:src/kernel/slabAllocator.cpp ****     SlabAllocator::insertIntoList(cache->emptyHead, slab);
 642              		.loc 1 44 16 is_stmt 0
 643 04b4 13050000 		li	a0,0
 644              	.LVL62:
GAS LISTING /tmp/ccvL8NpJ.s 			page 20


 645 04b8 6F000001 		j	.L26
 646              	.LVL63:
 647              	.L32:
  59:src/kernel/slabAllocator.cpp **** }
 648              		.loc 1 59 12
 649 04bc 13051000 		li	a0,1
 650 04c0 6F008000 		j	.L26
 651              	.LVL64:
 652              	.L33:
 653 04c4 13051000 		li	a0,1
 654              	.LVL65:
 655              	.L26:
  60:src/kernel/slabAllocator.cpp **** 
 656              		.loc 1 60 1
 657 04c8 83308102 		ld	ra,40(sp)
 658              		.cfi_restore 1
 659 04cc 03340102 		ld	s0,32(sp)
 660              		.cfi_restore 8
 661              		.cfi_def_cfa 2, 48
 662 04d0 83348101 		ld	s1,24(sp)
 663              		.cfi_restore 9
 664 04d4 03390101 		ld	s2,16(sp)
 665              		.cfi_restore 18
 666 04d8 83398100 		ld	s3,8(sp)
 667              		.cfi_restore 19
 668              	.LVL66:
 669 04dc 13010103 		addi	sp,sp,48
 670              		.cfi_def_cfa_offset 0
 671 04e0 67800000 		jr	ra
 672              		.cfi_endproc
 673              	.LFE33:
 675              		.align	2
 676              		.globl	_ZN13SlabAllocator14removeFromListERP4SlabS1_
 678              	_ZN13SlabAllocator14removeFromListERP4SlabS1_:
 679              	.LFB46:
 268:src/kernel/slabAllocator.cpp **** 
 269:src/kernel/slabAllocator.cpp **** void SlabAllocator::removeFromList(Slab* &head, Slab* slab) {
 680              		.loc 1 269 61 is_stmt 1
 681              		.cfi_startproc
 682              	.LVL67:
 683 04e4 130101FF 		addi	sp,sp,-16
 684              		.cfi_def_cfa_offset 16
 685 04e8 23348100 		sd	s0,8(sp)
 686              		.cfi_offset 8, -8
 687 04ec 13040101 		addi	s0,sp,16
 688              		.cfi_def_cfa 8, 0
 270:src/kernel/slabAllocator.cpp ****     if(slab == head)
 689              		.loc 1 270 5
 690              		.loc 1 270 16 is_stmt 0
 691 04f0 83370500 		ld	a5,0(a0)
 692              		.loc 1 270 5
 693 04f4 638CB702 		beq	a5,a1,.L40
 694              	.L36:
 271:src/kernel/slabAllocator.cpp ****         head = slab->next;
 272:src/kernel/slabAllocator.cpp ****     if(slab->next)
 695              		.loc 1 272 5 is_stmt 1
 696              		.loc 1 272 14 is_stmt 0
GAS LISTING /tmp/ccvL8NpJ.s 			page 21


 697 04f8 83B78500 		ld	a5,8(a1)
 698              		.loc 1 272 5
 699 04fc 63860700 		beqz	a5,.L37
 273:src/kernel/slabAllocator.cpp ****         slab->next->prev = slab->prev;
 700              		.loc 1 273 9 is_stmt 1
 701              		.loc 1 273 34 is_stmt 0
 702 0500 03B70500 		ld	a4,0(a1)
 703              		.loc 1 273 26
 704 0504 23B0E700 		sd	a4,0(a5)
 705              	.L37:
 274:src/kernel/slabAllocator.cpp ****     if(slab->prev)
 706              		.loc 1 274 5 is_stmt 1
 707              		.loc 1 274 14 is_stmt 0
 708 0508 83B70500 		ld	a5,0(a1)
 709              		.loc 1 274 5
 710 050c 63860700 		beqz	a5,.L38
 275:src/kernel/slabAllocator.cpp ****         slab->prev->next = slab->next;
 711              		.loc 1 275 9 is_stmt 1
 712              		.loc 1 275 34 is_stmt 0
 713 0510 03B78500 		ld	a4,8(a1)
 714              		.loc 1 275 26
 715 0514 23B4E700 		sd	a4,8(a5)
 716              	.L38:
 276:src/kernel/slabAllocator.cpp ****     slab->prev = nullptr;
 717              		.loc 1 276 5 is_stmt 1
 718              		.loc 1 276 16 is_stmt 0
 719 0518 23B00500 		sd	zero,0(a1)
 277:src/kernel/slabAllocator.cpp ****     slab->next = nullptr;
 720              		.loc 1 277 5 is_stmt 1
 721              		.loc 1 277 16 is_stmt 0
 722 051c 23B40500 		sd	zero,8(a1)
 278:src/kernel/slabAllocator.cpp **** }
 723              		.loc 1 278 1
 724 0520 03348100 		ld	s0,8(sp)
 725              		.cfi_remember_state
 726              		.cfi_restore 8
 727              		.cfi_def_cfa 2, 16
 728 0524 13010101 		addi	sp,sp,16
 729              		.cfi_def_cfa_offset 0
 730 0528 67800000 		jr	ra
 731              	.L40:
 732              		.cfi_restore_state
 271:src/kernel/slabAllocator.cpp ****     if(slab->next)
 733              		.loc 1 271 9 is_stmt 1
 271:src/kernel/slabAllocator.cpp ****     if(slab->next)
 734              		.loc 1 271 22 is_stmt 0
 735 052c 83B78500 		ld	a5,8(a1)
 271:src/kernel/slabAllocator.cpp ****     if(slab->next)
 736              		.loc 1 271 14
 737 0530 2330F500 		sd	a5,0(a0)
 738 0534 6FF05FFC 		j	.L36
 739              		.cfi_endproc
 740              	.LFE46:
 742              		.align	2
 743              		.globl	_ZN13SlabAllocator4moveERP4SlabS2_S1_
 745              	_ZN13SlabAllocator4moveERP4SlabS2_S1_:
 746              	.LFB47:
GAS LISTING /tmp/ccvL8NpJ.s 			page 22


 279:src/kernel/slabAllocator.cpp **** 
 280:src/kernel/slabAllocator.cpp **** void SlabAllocator::move(Slab* &headFrom, Slab* &headTo, Slab* slab) {
 747              		.loc 1 280 70 is_stmt 1
 748              		.cfi_startproc
 749              	.LVL68:
 750 0538 130101FE 		addi	sp,sp,-32
 751              		.cfi_def_cfa_offset 32
 752 053c 233C1100 		sd	ra,24(sp)
 753 0540 23388100 		sd	s0,16(sp)
 754 0544 23349100 		sd	s1,8(sp)
 755 0548 23302101 		sd	s2,0(sp)
 756              		.cfi_offset 1, -8
 757              		.cfi_offset 8, -16
 758              		.cfi_offset 9, -24
 759              		.cfi_offset 18, -32
 760 054c 13040102 		addi	s0,sp,32
 761              		.cfi_def_cfa 8, 0
 762 0550 13890500 		mv	s2,a1
 763 0554 93040600 		mv	s1,a2
 281:src/kernel/slabAllocator.cpp ****     SlabAllocator::removeFromList(headFrom, slab);
 764              		.loc 1 281 5
 765              		.loc 1 281 34 is_stmt 0
 766 0558 93050600 		mv	a1,a2
 767              	.LVL69:
 768 055c 97000000 		call	_ZN13SlabAllocator14removeFromListERP4SlabS1_
 768      E7800000 
 769              	.LVL70:
 282:src/kernel/slabAllocator.cpp ****     SlabAllocator::insertIntoList(headTo, slab);
 770              		.loc 1 282 5 is_stmt 1
 771              		.loc 1 282 34 is_stmt 0
 772 0564 93850400 		mv	a1,s1
 773 0568 13050900 		mv	a0,s2
 774 056c 97000000 		call	_ZN13SlabAllocator14insertIntoListERP4SlabS1_
 774      E7800000 
 775              	.LVL71:
 283:src/kernel/slabAllocator.cpp **** }...
 776              		.loc 1 283 1
 777 0574 83308101 		ld	ra,24(sp)
 778              		.cfi_restore 1
 779 0578 03340101 		ld	s0,16(sp)
 780              		.cfi_restore 8
 781              		.cfi_def_cfa 2, 32
 782 057c 83348100 		ld	s1,8(sp)
 783              		.cfi_restore 9
 784              	.LVL72:
 785 0580 03390100 		ld	s2,0(sp)
 786              		.cfi_restore 18
 787              	.LVL73:
 788 0584 13010102 		addi	sp,sp,32
 789              		.cfi_def_cfa_offset 0
 790 0588 67800000 		jr	ra
 791              		.cfi_endproc
 792              	.LFE47:
 794              		.align	2
 795              		.globl	_ZN13SlabAllocator12allocateSlotEP4Slab
 797              	_ZN13SlabAllocator12allocateSlotEP4Slab:
 798              	.LFB34:
GAS LISTING /tmp/ccvL8NpJ.s 			page 23


  62:src/kernel/slabAllocator.cpp **** void* SlabAllocator::allocateSlot(Slab *slab) {
 799              		.loc 1 62 47 is_stmt 1
 800              		.cfi_startproc
 801              	.LVL74:
 802 058c 130101FE 		addi	sp,sp,-32
 803              		.cfi_def_cfa_offset 32
 804 0590 233C1100 		sd	ra,24(sp)
 805 0594 23388100 		sd	s0,16(sp)
 806 0598 23349100 		sd	s1,8(sp)
 807 059c 23302101 		sd	s2,0(sp)
 808              		.cfi_offset 1, -8
 809              		.cfi_offset 8, -16
 810              		.cfi_offset 9, -24
 811              		.cfi_offset 18, -32
 812 05a0 13040102 		addi	s0,sp,32
 813              		.cfi_def_cfa 8, 0
 814 05a4 13090500 		mv	s2,a0
  63:src/kernel/slabAllocator.cpp ****     for(uint64 i=0; i<slab->totalNumOfSlots; i++){
 815              		.loc 1 63 5
 816              	.LVL75:
 817              	.LBB50:
  63:src/kernel/slabAllocator.cpp ****     for(uint64 i=0; i<slab->totalNumOfSlots; i++){
 818              		.loc 1 63 16 is_stmt 0
 819 05a8 93040000 		li	s1,0
 820              	.LVL76:
 821              	.L51:
  63:src/kernel/slabAllocator.cpp ****     for(uint64 i=0; i<slab->totalNumOfSlots; i++){
 822              		.loc 1 63 22 is_stmt 1 discriminator 1
  63:src/kernel/slabAllocator.cpp ****     for(uint64 i=0; i<slab->totalNumOfSlots; i++){
 823              		.loc 1 63 29 is_stmt 0 discriminator 1
 824 05ac 83368901 		ld	a3,24(s2)
  63:src/kernel/slabAllocator.cpp ****     for(uint64 i=0; i<slab->totalNumOfSlots; i++){
 825              		.loc 1 63 22 discriminator 1
 826 05b0 63F6D40A 		bleu	a3,s1,.L52
 827              	.LBE50:
  64:src/kernel/slabAllocator.cpp ****         if(!(slab->allocated[i/8] & (1<<(7 - i%8)))){
 828              		.loc 1 64 9 is_stmt 1
 829              	.LBB58:
 830              	.LBB51:
  64:src/kernel/slabAllocator.cpp ****         if(!(slab->allocated[i/8] & (1<<(7 - i%8)))){
 831              		.loc 1 64 31 is_stmt 0
 832 05b4 13D63400 		srli	a2,s1,3
  64:src/kernel/slabAllocator.cpp ****         if(!(slab->allocated[i/8] & (1<<(7 - i%8)))){
 833              		.loc 1 64 33
 834 05b8 B307C900 		add	a5,s2,a2
 835 05bc 83C50702 		lbu	a1,32(a5)
  64:src/kernel/slabAllocator.cpp ****         if(!(slab->allocated[i/8] & (1<<(7 - i%8)))){
 836              		.loc 1 64 44
 837 05c0 93C7F4FF 		not	a5,s1
 838 05c4 93F77700 		andi	a5,a5,7
  64:src/kernel/slabAllocator.cpp ****         if(!(slab->allocated[i/8] & (1<<(7 - i%8)))){
 839              		.loc 1 64 12
 840 05c8 3BD7F540 		sraw	a4,a1,a5
 841 05cc 13771700 		andi	a4,a4,1
  64:src/kernel/slabAllocator.cpp ****         if(!(slab->allocated[i/8] & (1<<(7 - i%8)))){
 842              		.loc 1 64 9
 843 05d0 63060700 		beqz	a4,.L54
GAS LISTING /tmp/ccvL8NpJ.s 			page 24


 844              	.LBE51:
  63:src/kernel/slabAllocator.cpp ****     for(uint64 i=0; i<slab->totalNumOfSlots; i++){
 845              		.loc 1 63 5 is_stmt 1 discriminator 2
 846 05d4 93841400 		addi	s1,s1,1
 847              	.LVL77:
 848 05d8 6FF05FFD 		j	.L51
 849              	.L54:
 850              	.LBB56:
 851              	.LBB52:
  65:src/kernel/slabAllocator.cpp ****             slab->allocated[i/8] |= (1<<(7 - i%8));
 852              		.loc 1 65 13
  65:src/kernel/slabAllocator.cpp ****             slab->allocated[i/8] |= (1<<(7 - i%8));
 853              		.loc 1 65 39 is_stmt 0
 854 05dc 13071000 		li	a4,1
 855 05e0 BB17F700 		sllw	a5,a4,a5
  65:src/kernel/slabAllocator.cpp ****             slab->allocated[i/8] |= (1<<(7 - i%8));
 856              		.loc 1 65 34
 857 05e4 3306C900 		add	a2,s2,a2
 858 05e8 B3E5F500 		or	a1,a1,a5
 859 05ec 2300B602 		sb	a1,32(a2)
  66:src/kernel/slabAllocator.cpp ****             Slab* &headFrom = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead
 860              		.loc 1 66 13 is_stmt 1
 861              	.LVL78:
 862              	.LBB53:
 863              	.LBB54:
 864              		.file 2 "src/kernel/../../h/kernel/slab_t.hpp"
   1:src/kernel/../../h/kernel/slab_t.hpp **** //
   2:src/kernel/../../h/kernel/slab_t.hpp **** // Created by os on 1/2/23.
   3:src/kernel/../../h/kernel/slab_t.hpp **** //
   4:src/kernel/../../h/kernel/slab_t.hpp **** 
   5:src/kernel/../../h/kernel/slab_t.hpp **** #ifndef KERNEL_FOR_RISCV_ARCHITECURE_SLAB_T_HPP
   6:src/kernel/../../h/kernel/slab_t.hpp **** #define KERNEL_FOR_RISCV_ARCHITECURE_SLAB_T_HPP
   7:src/kernel/../../h/kernel/slab_t.hpp **** #include "../../lib/hw.h"
   8:src/kernel/../../h/kernel/slab_t.hpp **** 
   9:src/kernel/../../h/kernel/slab_t.hpp **** typedef class Cache kmem_cache_t;
  10:src/kernel/../../h/kernel/slab_t.hpp **** 
  11:src/kernel/../../h/kernel/slab_t.hpp **** typedef class Slab{
  12:src/kernel/../../h/kernel/slab_t.hpp **** public:
  13:src/kernel/../../h/kernel/slab_t.hpp ****     inline bool isFull(){return numOfFreeSlots == 0;}
  14:src/kernel/../../h/kernel/slab_t.hpp ****     inline bool isEmpty(){return numOfFreeSlots == totalNumOfSlots;}
 865              		.loc 2 14 27
 866              		.loc 2 14 34 is_stmt 0
 867 05f0 83370901 		ld	a5,16(s2)
 868              	.LVL79:
 869              	.LBE54:
 870              	.LBE53:
  66:src/kernel/slabAllocator.cpp ****             Slab* &headFrom = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead
 871              		.loc 1 66 89
 872 05f4 6388F604 		beq	a3,a5,.L55
  66:src/kernel/slabAllocator.cpp ****             Slab* &headFrom = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead
 873              		.loc 1 66 81 discriminator 2
 874 05f8 03358942 		ld	a0,1064(s2)
 875              	.LVL80:
  66:src/kernel/slabAllocator.cpp ****             Slab* &headFrom = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead
 876              		.loc 1 66 89 discriminator 2
 877 05fc 13058506 		addi	a0,a0,104
 878              	.L47:
GAS LISTING /tmp/ccvL8NpJ.s 			page 25


 879              	.LVL81:
  67:src/kernel/slabAllocator.cpp ****             slab->numOfFreeSlots--;
 880              		.loc 1 67 13 is_stmt 1 discriminator 4
  67:src/kernel/slabAllocator.cpp ****             slab->numOfFreeSlots--;
 881              		.loc 1 67 33 is_stmt 0 discriminator 4
 882 0600 9387F7FF 		addi	a5,a5,-1
 883 0604 2338F900 		sd	a5,16(s2)
  68:src/kernel/slabAllocator.cpp ****             Slab* &headTo = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 884              		.loc 1 68 13 is_stmt 1 discriminator 4
 885              	.LVL82:
 886              	.LBE52:
 887              	.LBE56:
 888              	.LBE58:
  13:src/kernel/../../h/kernel/slab_t.hpp ****     inline bool isEmpty(){return numOfFreeSlots == totalNumOfSlots;}
 889              		.loc 2 13 26 discriminator 4
 890              	.LBB59:
 891              	.LBB57:
 892              	.LBB55:
  68:src/kernel/slabAllocator.cpp ****             Slab* &headTo = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 893              		.loc 1 68 85 is_stmt 0 discriminator 4
 894 0608 63940704 		bnez	a5,.L48
  68:src/kernel/slabAllocator.cpp ****             Slab* &headTo = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 895              		.loc 1 68 52 discriminator 1
 896 060c 83358942 		ld	a1,1064(s2)
  68:src/kernel/slabAllocator.cpp ****             Slab* &headTo = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 897              		.loc 1 68 85 discriminator 1
 898 0610 93850507 		addi	a1,a1,112
 899              	.L49:
 900              	.LVL83:
  70:src/kernel/slabAllocator.cpp ****             if(headTo != headFrom)
 901              		.loc 1 70 13 is_stmt 1 discriminator 4
  70:src/kernel/slabAllocator.cpp ****             if(headTo != headFrom)
 902              		.loc 1 70 16 is_stmt 0 discriminator 4
 903 0614 03B70500 		ld	a4,0(a1)
  70:src/kernel/slabAllocator.cpp ****             if(headTo != headFrom)
 904              		.loc 1 70 26 discriminator 4
 905 0618 83370500 		ld	a5,0(a0)
  70:src/kernel/slabAllocator.cpp ****             if(headTo != headFrom)
 906              		.loc 1 70 13 discriminator 4
 907 061c 6308F700 		beq	a4,a5,.L50
  71:src/kernel/slabAllocator.cpp ****                 SlabAllocator::move(headFrom, headTo, slab);
 908              		.loc 1 71 17 is_stmt 1
  71:src/kernel/slabAllocator.cpp ****                 SlabAllocator::move(headFrom, headTo, slab);
 909              		.loc 1 71 36 is_stmt 0
 910 0620 13060900 		mv	a2,s2
 911 0624 97000000 		call	_ZN13SlabAllocator4moveERP4SlabS2_S1_
 911      E7800000 
 912              	.LVL84:
 913              	.L50:
  73:src/kernel/slabAllocator.cpp ****             return (void*)((uint64)slab->objectOffset + i*slab->parent->objectSize);
 914              		.loc 1 73 13 is_stmt 1
  73:src/kernel/slabAllocator.cpp ****             return (void*)((uint64)slab->objectOffset + i*slab->parent->objectSize);
 915              		.loc 1 73 42 is_stmt 0
 916 062c 03350942 		ld	a0,1056(s2)
  73:src/kernel/slabAllocator.cpp ****             return (void*)((uint64)slab->objectOffset + i*slab->parent->objectSize);
 917              		.loc 1 73 65
 918 0630 83378942 		ld	a5,1064(s2)
GAS LISTING /tmp/ccvL8NpJ.s 			page 26


  73:src/kernel/slabAllocator.cpp ****             return (void*)((uint64)slab->objectOffset + i*slab->parent->objectSize);
 919              		.loc 1 73 73
 920 0634 83B70704 		ld	a5,64(a5)
  73:src/kernel/slabAllocator.cpp ****             return (void*)((uint64)slab->objectOffset + i*slab->parent->objectSize);
 921              		.loc 1 73 58
 922 0638 B3849702 		mul	s1,a5,s1
 923              	.LVL85:
  73:src/kernel/slabAllocator.cpp ****             return (void*)((uint64)slab->objectOffset + i*slab->parent->objectSize);
 924              		.loc 1 73 55
 925 063c 33059500 		add	a0,a0,s1
  73:src/kernel/slabAllocator.cpp ****             return (void*)((uint64)slab->objectOffset + i*slab->parent->objectSize);
 926              		.loc 1 73 83
 927 0640 6F000002 		j	.L43
 928              	.LVL86:
 929              	.L55:
  66:src/kernel/slabAllocator.cpp ****             Slab* &headFrom = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead
 930              		.loc 1 66 55 discriminator 1
 931 0644 03358942 		ld	a0,1064(s2)
 932              	.LVL87:
  66:src/kernel/slabAllocator.cpp ****             Slab* &headFrom = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead
 933              		.loc 1 66 89 discriminator 1
 934 0648 13050506 		addi	a0,a0,96
 935 064c 6FF05FFB 		j	.L47
 936              	.LVL88:
 937              	.L48:
  68:src/kernel/slabAllocator.cpp ****             Slab* &headTo = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 938              		.loc 1 68 77 discriminator 2
 939 0650 83358942 		ld	a1,1064(s2)
  68:src/kernel/slabAllocator.cpp ****             Slab* &headTo = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 940              		.loc 1 68 85 discriminator 2
 941 0654 93858506 		addi	a1,a1,104
 942 0658 6FF0DFFB 		j	.L49
 943              	.LVL89:
 944              	.L52:
 945              	.LBE55:
 946              	.LBE57:
 947              	.LBE59:
  76:src/kernel/slabAllocator.cpp ****     return nullptr;
 948              		.loc 1 76 12
 949 065c 13050000 		li	a0,0
 950              	.LVL90:
 951              	.L43:
  77:src/kernel/slabAllocator.cpp **** }
 952              		.loc 1 77 1
 953 0660 83308101 		ld	ra,24(sp)
 954              		.cfi_restore 1
 955 0664 03340101 		ld	s0,16(sp)
 956              		.cfi_restore 8
 957              		.cfi_def_cfa 2, 32
 958 0668 83348100 		ld	s1,8(sp)
 959              		.cfi_restore 9
 960 066c 03390100 		ld	s2,0(sp)
 961              		.cfi_restore 18
 962              	.LVL91:
 963 0670 13010102 		addi	sp,sp,32
 964              		.cfi_def_cfa_offset 0
 965 0674 67800000 		jr	ra
GAS LISTING /tmp/ccvL8NpJ.s 			page 27


 966              		.cfi_endproc
 967              	.LFE34:
 969              		.align	2
 970              		.globl	_ZN13SlabAllocator14allocateObjectEP5Cache
 972              	_ZN13SlabAllocator14allocateObjectEP5Cache:
 973              	.LFB35:
  79:src/kernel/slabAllocator.cpp **** void* SlabAllocator::allocateObject(Cache *cache) {
 974              		.loc 1 79 51 is_stmt 1
 975              		.cfi_startproc
 976              	.LVL92:
 977 0678 130101FD 		addi	sp,sp,-48
 978              		.cfi_def_cfa_offset 48
 979 067c 23341102 		sd	ra,40(sp)
 980 0680 23308102 		sd	s0,32(sp)
 981 0684 233C9100 		sd	s1,24(sp)
 982 0688 23382101 		sd	s2,16(sp)
 983 068c 23343101 		sd	s3,8(sp)
 984              		.cfi_offset 1, -8
 985              		.cfi_offset 8, -16
 986              		.cfi_offset 9, -24
 987              		.cfi_offset 18, -32
 988              		.cfi_offset 19, -40
 989 0690 13040103 		addi	s0,sp,48
 990              		.cfi_def_cfa 8, 0
 991 0694 13090500 		mv	s2,a0
  80:src/kernel/slabAllocator.cpp ****     void* ret = SlabAllocator::allocateFromList(cache->partialHead);
 992              		.loc 1 80 5
  80:src/kernel/slabAllocator.cpp ****     void* ret = SlabAllocator::allocateFromList(cache->partialHead);
 993              		.loc 1 80 48 is_stmt 0
 994 0698 83348506 		ld	s1,104(a0)
 995              	.LVL93:
 996              	.L58:
 997              	.LBB60:
 998              	.LBB61:
 999              		.file 3 "src/kernel/../../h/kernel/slabAllocator.hpp"
   1:src/kernel/../../h/kernel/slabAllocator.hpp **** //
   2:src/kernel/../../h/kernel/slabAllocator.hpp **** // Created by os on 12/25/22.
   3:src/kernel/../../h/kernel/slabAllocator.hpp **** //
   4:src/kernel/../../h/kernel/slabAllocator.hpp **** 
   5:src/kernel/../../h/kernel/slabAllocator.hpp **** #ifndef KERNEL_FOR_RISCV_ARCHITECURE_SLAN_HPP
   6:src/kernel/../../h/kernel/slabAllocator.hpp **** #define KERNEL_FOR_RISCV_ARCHITECURE_SLAN_HPP
   7:src/kernel/../../h/kernel/slabAllocator.hpp **** 
   8:src/kernel/../../h/kernel/slabAllocator.hpp **** #include "utility.hpp"
   9:src/kernel/../../h/kernel/slabAllocator.hpp **** #include "buddyAllocator.hpp"
  10:src/kernel/../../h/kernel/slabAllocator.hpp **** #include "consoleUtil.hpp"
  11:src/kernel/../../h/kernel/slabAllocator.hpp **** #include "cache_t.hpp"
  12:src/kernel/../../h/kernel/slabAllocator.hpp **** 
  13:src/kernel/../../h/kernel/slabAllocator.hpp **** class SlabAllocator{
  14:src/kernel/../../h/kernel/slabAllocator.hpp **** public:
  15:src/kernel/../../h/kernel/slabAllocator.hpp **** 
  16:src/kernel/../../h/kernel/slabAllocator.hpp ****     static void initialize(void* space, uint64 blockNum);
  17:src/kernel/../../h/kernel/slabAllocator.hpp **** 
  18:src/kernel/../../h/kernel/slabAllocator.hpp ****     static Cache* createCache(const char* name, size_t size, void (*ctor)(void*), void (*dtor)(void
  19:src/kernel/../../h/kernel/slabAllocator.hpp **** 
  20:src/kernel/../../h/kernel/slabAllocator.hpp ****     static void deleteCache(Cache* &cache);
  21:src/kernel/../../h/kernel/slabAllocator.hpp **** 
  22:src/kernel/../../h/kernel/slabAllocator.hpp ****     static bool allocateSlab(Cache *cache);
GAS LISTING /tmp/ccvL8NpJ.s 			page 28


  23:src/kernel/../../h/kernel/slabAllocator.hpp **** 
  24:src/kernel/../../h/kernel/slabAllocator.hpp ****     static int shrinkCache(Cache* cache);
  25:src/kernel/../../h/kernel/slabAllocator.hpp **** 
  26:src/kernel/../../h/kernel/slabAllocator.hpp ****     static void* allocateSlot(Slab* slab);
  27:src/kernel/../../h/kernel/slabAllocator.hpp **** 
  28:src/kernel/../../h/kernel/slabAllocator.hpp ****     static void* allocateObject(Cache *cache);
  29:src/kernel/../../h/kernel/slabAllocator.hpp **** 
  30:src/kernel/../../h/kernel/slabAllocator.hpp ****     static void* allocateBuffer(size_t size);
  31:src/kernel/../../h/kernel/slabAllocator.hpp **** 
  32:src/kernel/../../h/kernel/slabAllocator.hpp ****     static void freeSlot(Slab* slab, uint64 index);
  33:src/kernel/../../h/kernel/slabAllocator.hpp **** 
  34:src/kernel/../../h/kernel/slabAllocator.hpp ****     static bool freeObject(Cache* cache,const void* addr);
  35:src/kernel/../../h/kernel/slabAllocator.hpp **** 
  36:src/kernel/../../h/kernel/slabAllocator.hpp ****     static void freeBuffer(const void* addr);
  37:src/kernel/../../h/kernel/slabAllocator.hpp **** 
  38:src/kernel/../../h/kernel/slabAllocator.hpp ****     static void printSlab(Slab *slab);
  39:src/kernel/../../h/kernel/slabAllocator.hpp **** 
  40:src/kernel/../../h/kernel/slabAllocator.hpp ****     static void printCache(Cache *cache);
  41:src/kernel/../../h/kernel/slabAllocator.hpp **** 
  42:src/kernel/../../h/kernel/slabAllocator.hpp ****     static Cache *sizeN[13];
  43:src/kernel/../../h/kernel/slabAllocator.hpp ****     static Cache *cache;
  44:src/kernel/../../h/kernel/slabAllocator.hpp ****     static Cache *largeSlabCache;
  45:src/kernel/../../h/kernel/slabAllocator.hpp **** 
  46:src/kernel/../../h/kernel/slabAllocator.hpp **** private:
  47:src/kernel/../../h/kernel/slabAllocator.hpp ****     static void insertIntoList(Slab* &head, Slab* slab);
  48:src/kernel/../../h/kernel/slabAllocator.hpp ****     static void removeFromList(Slab* &head, Slab* slab);
  49:src/kernel/../../h/kernel/slabAllocator.hpp ****     static void move(Slab* &headFrom, Slab* &headTo, Slab* slab);
  50:src/kernel/../../h/kernel/slabAllocator.hpp ****     static inline uint64 getUpperBound(Slab* slab){return (uint64)slab->objectOffset + slab->totalN
  51:src/kernel/../../h/kernel/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
  52:src/kernel/../../h/kernel/slabAllocator.hpp **** 
  53:src/kernel/../../h/kernel/slabAllocator.hpp ****     static inline void* allocateFromList(Slab* head){
  54:src/kernel/../../h/kernel/slabAllocator.hpp ****         while(head != nullptr){
 1000              		.loc 3 54 9 is_stmt 1
 1001              		.loc 3 54 20
 1002 069c 638C0400 		beqz	s1,.L57
 1003              	.LBB62:
  55:src/kernel/../../h/kernel/slabAllocator.hpp ****             void* ret = allocateSlot(head);
 1004              		.loc 3 55 13
 1005              		.loc 3 55 37 is_stmt 0
 1006 06a0 13850400 		mv	a0,s1
 1007 06a4 97000000 		call	_ZN13SlabAllocator12allocateSlotEP4Slab
 1007      E7800000 
 1008              	.LVL94:
  56:src/kernel/../../h/kernel/slabAllocator.hpp ****             if(ret != nullptr)
 1009              		.loc 3 56 13 is_stmt 1
 1010 06ac E30805FE 		beqz	a0,.L58
  57:src/kernel/../../h/kernel/slabAllocator.hpp ****                 return ret;
 1011              		.loc 3 57 24 is_stmt 0
 1012 06b0 93040500 		mv	s1,a0
 1013              	.LVL95:
 1014              	.L57:
 1015              	.LBE62:
 1016              	.LBE61:
 1017              	.LBE60:
  81:src/kernel/slabAllocator.cpp ****     if(ret){
 1018              		.loc 1 81 5 is_stmt 1
 1019 06b4 63820402 		beqz	s1,.L69
GAS LISTING /tmp/ccvL8NpJ.s 			page 29


 1020              	.LVL96:
 1021              	.L56:
 117:src/kernel/slabAllocator.cpp **** }
 1022              		.loc 1 117 1 is_stmt 0
 1023 06b8 13850400 		mv	a0,s1
 1024 06bc 83308102 		ld	ra,40(sp)
 1025              		.cfi_remember_state
 1026              		.cfi_restore 1
 1027 06c0 03340102 		ld	s0,32(sp)
 1028              		.cfi_restore 8
 1029              		.cfi_def_cfa 2, 48
 1030 06c4 83348101 		ld	s1,24(sp)
 1031              		.cfi_restore 9
 1032 06c8 03390101 		ld	s2,16(sp)
 1033              		.cfi_restore 18
 1034              	.LVL97:
 1035 06cc 83398100 		ld	s3,8(sp)
 1036              		.cfi_restore 19
 1037 06d0 13010103 		addi	sp,sp,48
 1038              		.cfi_def_cfa_offset 0
 1039 06d4 67800000 		jr	ra
 1040              	.LVL98:
 1041              	.L69:
 1042              		.cfi_restore_state
  84:src/kernel/slabAllocator.cpp ****     ret = SlabAllocator::allocateFromList(cache->emptyHead);
 1043              		.loc 1 84 5 is_stmt 1
  84:src/kernel/slabAllocator.cpp ****     ret = SlabAllocator::allocateFromList(cache->emptyHead);
 1044              		.loc 1 84 42 is_stmt 0
 1045 06d8 83340906 		ld	s1,96(s2)
 1046              	.LVL99:
 1047              	.L61:
 1048              	.LBB63:
 1049              	.LBB64:
  54:src/kernel/../../h/kernel/slabAllocator.hpp ****             void* ret = allocateSlot(head);
 1050              		.loc 3 54 9 is_stmt 1
  54:src/kernel/../../h/kernel/slabAllocator.hpp ****             void* ret = allocateSlot(head);
 1051              		.loc 3 54 20
 1052 06dc 638C0400 		beqz	s1,.L60
 1053              	.LBB65:
  55:src/kernel/../../h/kernel/slabAllocator.hpp ****             if(ret != nullptr)
 1054              		.loc 3 55 13
  55:src/kernel/../../h/kernel/slabAllocator.hpp ****             if(ret != nullptr)
 1055              		.loc 3 55 37 is_stmt 0
 1056 06e0 13850400 		mv	a0,s1
 1057 06e4 97000000 		call	_ZN13SlabAllocator12allocateSlotEP4Slab
 1057      E7800000 
 1058              	.LVL100:
  56:src/kernel/../../h/kernel/slabAllocator.hpp ****                 return ret;
 1059              		.loc 3 56 13 is_stmt 1
 1060 06ec E30805FE 		beqz	a0,.L61
 1061              		.loc 3 57 24 is_stmt 0
 1062 06f0 93040500 		mv	s1,a0
 1063              	.LVL101:
 1064              	.L60:
 1065              	.LBE65:
 1066              	.LBE64:
 1067              	.LBE63:
GAS LISTING /tmp/ccvL8NpJ.s 			page 30


  85:src/kernel/slabAllocator.cpp ****     if(ret){
 1068              		.loc 1 85 5 is_stmt 1
 1069 06f4 E39204FC 		bnez	s1,.L56
  88:src/kernel/slabAllocator.cpp ****     if(cache->objectSize <= sizeof(Slab)) {
 1070              		.loc 1 88 5
 1071              	.LBB66:
  88:src/kernel/slabAllocator.cpp ****     if(cache->objectSize <= sizeof(Slab)) {
 1072              		.loc 1 88 15 is_stmt 0
 1073 06f8 03370904 		ld	a4,64(s2)
  88:src/kernel/slabAllocator.cpp ****     if(cache->objectSize <= sizeof(Slab)) {
 1074              		.loc 1 88 5
 1075 06fc 93070043 		li	a5,1072
 1076 0700 63E4E702 		bgtu	a4,a5,.L62
  89:src/kernel/slabAllocator.cpp ****         if (!SlabAllocator::allocateSlab(cache))
 1077              		.loc 1 89 9 is_stmt 1
  89:src/kernel/slabAllocator.cpp ****         if (!SlabAllocator::allocateSlab(cache))
 1078              		.loc 1 89 41 is_stmt 0
 1079 0704 13050900 		mv	a0,s2
 1080 0708 97000000 		call	_ZN13SlabAllocator12allocateSlabEP5Cache
 1080      E7800000 
 1081              	.LVL102:
  89:src/kernel/slabAllocator.cpp ****         if (!SlabAllocator::allocateSlab(cache))
 1082              		.loc 1 89 9
 1083 0710 E30405FA 		beqz	a0,.L56
  92:src/kernel/slabAllocator.cpp ****         ret = SlabAllocator::allocateSlot(cache->emptyHead);
 1084              		.loc 1 92 9 is_stmt 1
  92:src/kernel/slabAllocator.cpp ****         ret = SlabAllocator::allocateSlot(cache->emptyHead);
 1085              		.loc 1 92 42 is_stmt 0
 1086 0714 03350906 		ld	a0,96(s2)
 1087 0718 97000000 		call	_ZN13SlabAllocator12allocateSlotEP4Slab
 1087      E7800000 
 1088              	.LVL103:
 1089 0720 93040500 		mv	s1,a0
 1090              	.LVL104:
 1091 0724 6FF05FF9 		j	.L56
 1092              	.L62:
 1093              	.LBB67:
  95:src/kernel/slabAllocator.cpp ****         Slab* slab = (Slab*)SlabAllocator::allocateObject(largeSlabCache);
 1094              		.loc 1 95 9 is_stmt 1
  95:src/kernel/slabAllocator.cpp ****         Slab* slab = (Slab*)SlabAllocator::allocateObject(largeSlabCache);
 1095              		.loc 1 95 58 is_stmt 0
 1096 0728 17050000 		ld	a0,.LANCHOR0
 1096      03350500 
 1097 0730 97000000 		call	_ZN13SlabAllocator14allocateObjectEP5Cache
 1097      E7800000 
 1098              	.LVL105:
 1099 0738 93040500 		mv	s1,a0
 1100              	.LVL106:
  96:src/kernel/slabAllocator.cpp ****         slab->totalNumOfSlots = slab->numOfFreeSlots = (((1<<cache->slabSize) << BLOCK_SIZE_BITS)) 
 1101              		.loc 1 96 9 is_stmt 1
  96:src/kernel/slabAllocator.cpp ****         slab->totalNumOfSlots = slab->numOfFreeSlots = (((1<<cache->slabSize) << BLOCK_SIZE_BITS)) 
 1102              		.loc 1 96 69 is_stmt 0
 1103 073c 03378904 		ld	a4,72(s2)
  96:src/kernel/slabAllocator.cpp ****         slab->totalNumOfSlots = slab->numOfFreeSlots = (((1<<cache->slabSize) << BLOCK_SIZE_BITS)) 
 1104              		.loc 1 96 60
 1105 0740 93071000 		li	a5,1
 1106 0744 BB97E700 		sllw	a5,a5,a4
GAS LISTING /tmp/ccvL8NpJ.s 			page 31


  96:src/kernel/slabAllocator.cpp ****         slab->totalNumOfSlots = slab->numOfFreeSlots = (((1<<cache->slabSize) << BLOCK_SIZE_BITS)) 
 1107              		.loc 1 96 79
 1108 0748 9B97C700 		slliw	a5,a5,12
  96:src/kernel/slabAllocator.cpp ****         slab->totalNumOfSlots = slab->numOfFreeSlots = (((1<<cache->slabSize) << BLOCK_SIZE_BITS)) 
 1109              		.loc 1 96 109
 1110 074c 03370904 		ld	a4,64(s2)
  96:src/kernel/slabAllocator.cpp ****         slab->totalNumOfSlots = slab->numOfFreeSlots = (((1<<cache->slabSize) << BLOCK_SIZE_BITS)) 
 1111              		.loc 1 96 100
 1112 0750 B3D7E702 		divu	a5,a5,a4
  96:src/kernel/slabAllocator.cpp ****         slab->totalNumOfSlots = slab->numOfFreeSlots = (((1<<cache->slabSize) << BLOCK_SIZE_BITS)) 
 1113              		.loc 1 96 54
 1114 0754 2338F500 		sd	a5,16(a0)
  96:src/kernel/slabAllocator.cpp ****         slab->totalNumOfSlots = slab->numOfFreeSlots = (((1<<cache->slabSize) << BLOCK_SIZE_BITS)) 
 1115              		.loc 1 96 31
 1116 0758 233CF500 		sd	a5,24(a0)
  97:src/kernel/slabAllocator.cpp ****         if(slab->totalNumOfSlots > 1024*8)
 1117              		.loc 1 97 9 is_stmt 1
 1118 075c 37270000 		li	a4,8192
 1119 0760 6376F700 		bleu	a5,a4,.L63
  98:src/kernel/slabAllocator.cpp ****             slab->totalNumOfSlots = 1024*8;
 1120              		.loc 1 98 13
  98:src/kernel/slabAllocator.cpp ****             slab->totalNumOfSlots = 1024*8;
 1121              		.loc 1 98 35 is_stmt 0
 1122 0764 B7270000 		li	a5,8192
 1123 0768 233CF500 		sd	a5,24(a0)
 1124              	.L63:
  99:src/kernel/slabAllocator.cpp ****         void* slabOffset = Buddy::alloc(cache->slabSize);
 1125              		.loc 1 99 9 is_stmt 1
  99:src/kernel/slabAllocator.cpp ****         void* slabOffset = Buddy::alloc(cache->slabSize);
 1126              		.loc 1 99 40 is_stmt 0
 1127 076c 03358904 		ld	a0,72(s2)
 1128 0770 97000000 		call	_ZN5Buddy5allocEm@plt
 1128      E7800000 
 1129              	.LVL107:
 100:src/kernel/slabAllocator.cpp ****         slab->objectOffset = slabOffset;
 1130              		.loc 1 100 9 is_stmt 1
 100:src/kernel/slabAllocator.cpp ****         slab->objectOffset = slabOffset;
 1131              		.loc 1 100 28 is_stmt 0
 1132 0778 23B0A442 		sd	a0,1056(s1)
 101:src/kernel/slabAllocator.cpp ****         slab->parent = cache;
 1133              		.loc 1 101 9 is_stmt 1
 101:src/kernel/slabAllocator.cpp ****         slab->parent = cache;
 1134              		.loc 1 101 22 is_stmt 0
 1135 077c 23B42443 		sd	s2,1064(s1)
 102:src/kernel/slabAllocator.cpp ****         slab->next = nullptr;
 1136              		.loc 1 102 9 is_stmt 1
 102:src/kernel/slabAllocator.cpp ****         slab->next = nullptr;
 1137              		.loc 1 102 20 is_stmt 0
 1138 0780 23B40400 		sd	zero,8(s1)
 103:src/kernel/slabAllocator.cpp ****         for(uint64 i=0;i<slab->totalNumOfSlots/8 + 1;i++)
 1139              		.loc 1 103 9 is_stmt 1
 1140              	.LVL108:
 1141              	.LBB68:
 103:src/kernel/slabAllocator.cpp ****         for(uint64 i=0;i<slab->totalNumOfSlots/8 + 1;i++)
 1142              		.loc 1 103 20 is_stmt 0
 1143 0784 13070000 		li	a4,0
 1144              	.LVL109:
GAS LISTING /tmp/ccvL8NpJ.s 			page 32


 1145              	.L65:
 103:src/kernel/slabAllocator.cpp ****         for(uint64 i=0;i<slab->totalNumOfSlots/8 + 1;i++)
 1146              		.loc 1 103 25 is_stmt 1 discriminator 3
 103:src/kernel/slabAllocator.cpp ****         for(uint64 i=0;i<slab->totalNumOfSlots/8 + 1;i++)
 1147              		.loc 1 103 32 is_stmt 0 discriminator 3
 1148 0788 83B78401 		ld	a5,24(s1)
 103:src/kernel/slabAllocator.cpp ****         for(uint64 i=0;i<slab->totalNumOfSlots/8 + 1;i++)
 1149              		.loc 1 103 47 discriminator 3
 1150 078c 93D73700 		srli	a5,a5,3
 103:src/kernel/slabAllocator.cpp ****         for(uint64 i=0;i<slab->totalNumOfSlots/8 + 1;i++)
 1151              		.loc 1 103 50 discriminator 3
 1152 0790 93871700 		addi	a5,a5,1
 103:src/kernel/slabAllocator.cpp ****         for(uint64 i=0;i<slab->totalNumOfSlots/8 + 1;i++)
 1153              		.loc 1 103 25 discriminator 3
 1154 0794 637AF700 		bleu	a5,a4,.L64
 104:src/kernel/slabAllocator.cpp ****             slab->allocated[i] = 0;
 1155              		.loc 1 104 13 is_stmt 1 discriminator 2
 104:src/kernel/slabAllocator.cpp ****             slab->allocated[i] = 0;
 1156              		.loc 1 104 32 is_stmt 0 discriminator 2
 1157 0798 B387E400 		add	a5,s1,a4
 1158 079c 23800702 		sb	zero,32(a5)
 103:src/kernel/slabAllocator.cpp ****         for(uint64 i=0;i<slab->totalNumOfSlots/8 + 1;i++)
 1159              		.loc 1 103 9 is_stmt 1 discriminator 2
 1160 07a0 13071700 		addi	a4,a4,1
 1161              	.LVL110:
 1162 07a4 6FF05FFE 		j	.L65
 1163              	.L64:
 1164              	.LBE68:
 106:src/kernel/slabAllocator.cpp ****         if(cache->ctor) {
 1165              		.loc 1 106 9
 1166              	.LBB69:
 106:src/kernel/slabAllocator.cpp ****         if(cache->ctor) {
 1167              		.loc 1 106 19 is_stmt 0
 1168 07a8 83370905 		ld	a5,80(s2)
 106:src/kernel/slabAllocator.cpp ****         if(cache->ctor) {
 1169              		.loc 1 106 9
 1170 07ac 638A0702 		beqz	a5,.L66
 1171              	.LBB70:
 107:src/kernel/slabAllocator.cpp ****             for (uint64 i = 0; i < slab->totalNumOfSlots; i++) {
 1172              		.loc 1 107 25
 1173 07b0 93090000 		li	s3,0
 1174              	.LVL111:
 1175              	.L67:
 107:src/kernel/slabAllocator.cpp ****             for (uint64 i = 0; i < slab->totalNumOfSlots; i++) {
 1176              		.loc 1 107 34 is_stmt 1 discriminator 3
 107:src/kernel/slabAllocator.cpp ****             for (uint64 i = 0; i < slab->totalNumOfSlots; i++) {
 1177              		.loc 1 107 42 is_stmt 0 discriminator 3
 1178 07b4 83B78401 		ld	a5,24(s1)
 107:src/kernel/slabAllocator.cpp ****             for (uint64 i = 0; i < slab->totalNumOfSlots; i++) {
 1179              		.loc 1 107 34 discriminator 3
 1180 07b8 63F4F902 		bleu	a5,s3,.L66
 108:src/kernel/slabAllocator.cpp ****                 cache->ctor((void *) ((uint64) slab->objectOffset + i * slab->parent->objectSize));
 1181              		.loc 1 108 17 is_stmt 1 discriminator 2
 108:src/kernel/slabAllocator.cpp ****                 cache->ctor((void *) ((uint64) slab->objectOffset + i * slab->parent->objectSize));
 1182              		.loc 1 108 24 is_stmt 0 discriminator 2
 1183 07bc 03370905 		ld	a4,80(s2)
 108:src/kernel/slabAllocator.cpp ****                 cache->ctor((void *) ((uint64) slab->objectOffset + i * slab->parent->objectSize));
GAS LISTING /tmp/ccvL8NpJ.s 			page 33


 1184              		.loc 1 108 54 discriminator 2
 1185 07c0 03B50442 		ld	a0,1056(s1)
 108:src/kernel/slabAllocator.cpp ****                 cache->ctor((void *) ((uint64) slab->objectOffset + i * slab->parent->objectSize));
 1186              		.loc 1 108 79 discriminator 2
 1187 07c4 83B78442 		ld	a5,1064(s1)
 108:src/kernel/slabAllocator.cpp ****                 cache->ctor((void *) ((uint64) slab->objectOffset + i * slab->parent->objectSize));
 1188              		.loc 1 108 87 discriminator 2
 1189 07c8 83B70704 		ld	a5,64(a5)
 108:src/kernel/slabAllocator.cpp ****                 cache->ctor((void *) ((uint64) slab->objectOffset + i * slab->parent->objectSize));
 1190              		.loc 1 108 71 discriminator 2
 1191 07cc B3873703 		mul	a5,a5,s3
 108:src/kernel/slabAllocator.cpp ****                 cache->ctor((void *) ((uint64) slab->objectOffset + i * slab->parent->objectSize));
 1192              		.loc 1 108 28 discriminator 2
 1193 07d0 3305F500 		add	a0,a0,a5
 1194 07d4 E7000700 		jalr	a4
 1195              	.LVL112:
 107:src/kernel/slabAllocator.cpp ****             for (uint64 i = 0; i < slab->totalNumOfSlots; i++) {
 1196              		.loc 1 107 13 is_stmt 1 discriminator 2
 1197 07d8 93891900 		addi	s3,s3,1
 1198              	.LVL113:
 1199 07dc 6FF09FFD 		j	.L67
 1200              	.LVL114:
 1201              	.L66:
 1202              	.LBE70:
 1203              	.LBE69:
 112:src/kernel/slabAllocator.cpp ****         SlabAllocator::insertIntoList(cache->emptyHead, slab);
 1204              		.loc 1 112 9
 112:src/kernel/slabAllocator.cpp ****         SlabAllocator::insertIntoList(cache->emptyHead, slab);
 1205              		.loc 1 112 38 is_stmt 0
 1206 07e0 93850400 		mv	a1,s1
 1207 07e4 13050906 		addi	a0,s2,96
 1208 07e8 97000000 		call	_ZN13SlabAllocator14insertIntoListERP4SlabS1_
 1208      E7800000 
 1209              	.LVL115:
 113:src/kernel/slabAllocator.cpp ****         ret = SlabAllocator::allocateSlot(cache->emptyHead);
 1210              		.loc 1 113 9 is_stmt 1
 113:src/kernel/slabAllocator.cpp ****         ret = SlabAllocator::allocateSlot(cache->emptyHead);
 1211              		.loc 1 113 42 is_stmt 0
 1212 07f0 03350906 		ld	a0,96(s2)
 1213 07f4 97000000 		call	_ZN13SlabAllocator12allocateSlotEP4Slab
 1213      E7800000 
 1214              	.LVL116:
 1215 07fc 93040500 		mv	s1,a0
 1216              	.LVL117:
 1217 0800 6FF09FEB 		j	.L56
 1218              	.LBE67:
 1219              	.LBE66:
 1220              		.cfi_endproc
 1221              	.LFE35:
 1223              		.align	2
 1224              		.globl	_ZN13SlabAllocator14allocateBufferEm
 1226              	_ZN13SlabAllocator14allocateBufferEm:
 1227              	.LFB36:
 119:src/kernel/slabAllocator.cpp **** void* SlabAllocator::allocateBuffer(size_t size) {
 1228              		.loc 1 119 50 is_stmt 1
 1229              		.cfi_startproc
 1230              	.LVL118:
GAS LISTING /tmp/ccvL8NpJ.s 			page 34


 120:src/kernel/slabAllocator.cpp ****     uint64 level = Buddy::getDeg(Buddy::ceil(size));
 1231              		.loc 1 120 5
 1232              	.LBB71:
 1233              	.LBB72:
 1234              		.file 4 "src/kernel/../../h/kernel/buddyAllocator.hpp"
   1:src/kernel/../../h/kernel/buddyAllocator.hpp **** //
   2:src/kernel/../../h/kernel/buddyAllocator.hpp **** // Created by os on 12/24/22.
   3:src/kernel/../../h/kernel/buddyAllocator.hpp **** //
   4:src/kernel/../../h/kernel/buddyAllocator.hpp **** 
   5:src/kernel/../../h/kernel/buddyAllocator.hpp **** #ifndef KERNEL_FOR_RISCV_ARCHITECURE_BUDDYALLOCATOR_HPP
   6:src/kernel/../../h/kernel/buddyAllocator.hpp **** #define KERNEL_FOR_RISCV_ARCHITECURE_BUDDYALLOCATOR_HPP
   7:src/kernel/../../h/kernel/buddyAllocator.hpp **** 
   8:src/kernel/../../h/kernel/buddyAllocator.hpp **** #include "../../lib/hw.h"
   9:src/kernel/../../h/kernel/buddyAllocator.hpp **** #include "utility.hpp"
  10:src/kernel/../../h/kernel/buddyAllocator.hpp **** 
  11:src/kernel/../../h/kernel/buddyAllocator.hpp **** class SlabAllocator;
  12:src/kernel/../../h/kernel/buddyAllocator.hpp **** 
  13:src/kernel/../../h/kernel/buddyAllocator.hpp **** class Buddy{
  14:src/kernel/../../h/kernel/buddyAllocator.hpp **** public:
  15:src/kernel/../../h/kernel/buddyAllocator.hpp ****     static void initialize(void* addr, uint64 block_num);
  16:src/kernel/../../h/kernel/buddyAllocator.hpp **** 
  17:src/kernel/../../h/kernel/buddyAllocator.hpp ****     static void* alloc(uint64 num);
  18:src/kernel/../../h/kernel/buddyAllocator.hpp **** 
  19:src/kernel/../../h/kernel/buddyAllocator.hpp ****     static void free(void *addr, uint64 size);
  20:src/kernel/../../h/kernel/buddyAllocator.hpp **** 
  21:src/kernel/../../h/kernel/buddyAllocator.hpp ****     typedef struct Block{
  22:src/kernel/../../h/kernel/buddyAllocator.hpp ****         Block *next;
  23:src/kernel/../../h/kernel/buddyAllocator.hpp ****     }Bucket;
  24:src/kernel/../../h/kernel/buddyAllocator.hpp **** 
  25:src/kernel/../../h/kernel/buddyAllocator.hpp ****     static void printList();
  26:src/kernel/../../h/kernel/buddyAllocator.hpp **** 
  27:src/kernel/../../h/kernel/buddyAllocator.hpp ****     static inline bool canAllocate(uint64 size){
  28:src/kernel/../../h/kernel/buddyAllocator.hpp ****         return head[size] != nullptr;
  29:src/kernel/../../h/kernel/buddyAllocator.hpp ****     };
  30:src/kernel/../../h/kernel/buddyAllocator.hpp **** 
  31:src/kernel/../../h/kernel/buddyAllocator.hpp **** private:
  32:src/kernel/../../h/kernel/buddyAllocator.hpp ****     static void* BUDDY_META_DATA_ADDR;
  33:src/kernel/../../h/kernel/buddyAllocator.hpp ****     static void* BUDDY_START_ADDR;
  34:src/kernel/../../h/kernel/buddyAllocator.hpp ****     static uint64 BLOCKS_AVAILABLE;
  35:src/kernel/../../h/kernel/buddyAllocator.hpp ****     static Bucket *head[BUCKET_SIZE], *tail[BUCKET_SIZE];
  36:src/kernel/../../h/kernel/buddyAllocator.hpp **** 
  37:src/kernel/../../h/kernel/buddyAllocator.hpp ****     static inline uint64 ceil(uint64 num){
  38:src/kernel/../../h/kernel/buddyAllocator.hpp ****         num--;
 1235              		.loc 4 38 9
 1236              		.loc 4 38 12 is_stmt 0
 1237 0804 9307F5FF 		addi	a5,a0,-1
 1238              	.LVL119:
  39:src/kernel/../../h/kernel/buddyAllocator.hpp ****         num |= num>>1;
 1239              		.loc 4 39 9 is_stmt 1
 1240              		.loc 4 39 19 is_stmt 0
 1241 0808 13D51700 		srli	a0,a5,1
 1242              	.LVL120:
 1243              		.loc 4 39 13
 1244 080c B3E7A700 		or	a5,a5,a0
 1245              	.LVL121:
  40:src/kernel/../../h/kernel/buddyAllocator.hpp ****         num |= num>>2;
 1246              		.loc 4 40 9 is_stmt 1
GAS LISTING /tmp/ccvL8NpJ.s 			page 35


 1247              		.loc 4 40 19 is_stmt 0
 1248 0810 13D72700 		srli	a4,a5,2
 1249              		.loc 4 40 13
 1250 0814 B3E7E700 		or	a5,a5,a4
 1251              	.LVL122:
  41:src/kernel/../../h/kernel/buddyAllocator.hpp ****         num |= num>>4;
 1252              		.loc 4 41 9 is_stmt 1
 1253              		.loc 4 41 19 is_stmt 0
 1254 0818 13D74700 		srli	a4,a5,4
 1255              		.loc 4 41 13
 1256 081c B3E7E700 		or	a5,a5,a4
 1257              	.LVL123:
  42:src/kernel/../../h/kernel/buddyAllocator.hpp ****         num |= num>>8;
 1258              		.loc 4 42 9 is_stmt 1
 1259              		.loc 4 42 19 is_stmt 0
 1260 0820 13D78700 		srli	a4,a5,8
 1261              		.loc 4 42 13
 1262 0824 B3E7E700 		or	a5,a5,a4
 1263              	.LVL124:
  43:src/kernel/../../h/kernel/buddyAllocator.hpp ****         num |= num>>16;
 1264              		.loc 4 43 9 is_stmt 1
 1265              		.loc 4 43 19 is_stmt 0
 1266 0828 13D70701 		srli	a4,a5,16
 1267              		.loc 4 43 13
 1268 082c B3E7E700 		or	a5,a5,a4
 1269              	.LVL125:
  44:src/kernel/../../h/kernel/buddyAllocator.hpp ****         num |= num>>32;
 1270              		.loc 4 44 9 is_stmt 1
 1271              		.loc 4 44 19 is_stmt 0
 1272 0830 13D70702 		srli	a4,a5,32
 1273              		.loc 4 44 13
 1274 0834 B3E7E700 		or	a5,a5,a4
 1275              	.LVL126:
  45:src/kernel/../../h/kernel/buddyAllocator.hpp ****         return ++num;
 1276              		.loc 4 45 9 is_stmt 1
 1277              		.loc 4 45 18 is_stmt 0
 1278 0838 93871700 		addi	a5,a5,1
 1279              	.LVL127:
 1280              	.LBE72:
 1281              	.LBE71:
 1282              	.LBB73:
 1283              	.LBB74:
  46:src/kernel/../../h/kernel/buddyAllocator.hpp ****     }
  47:src/kernel/../../h/kernel/buddyAllocator.hpp **** 
  48:src/kernel/../../h/kernel/buddyAllocator.hpp ****     static inline uint64 getDeg(uint64 num){
  49:src/kernel/../../h/kernel/buddyAllocator.hpp ****         uint64 deg = 0;
 1284              		.loc 4 49 16
 1285 083c 13070000 		li	a4,0
 1286              	.L72:
 1287              	.LVL128:
  50:src/kernel/../../h/kernel/buddyAllocator.hpp ****         while(num>1){
 1288              		.loc 4 50 9 is_stmt 1
 1289              		.loc 4 50 18
 1290 0840 93061000 		li	a3,1
 1291 0844 63F8F600 		bleu	a5,a3,.L71
  51:src/kernel/../../h/kernel/buddyAllocator.hpp ****             num/=2;
 1292              		.loc 4 51 13
GAS LISTING /tmp/ccvL8NpJ.s 			page 36


 1293              		.loc 4 51 16 is_stmt 0
 1294 0848 93D71700 		srli	a5,a5,1
 1295              	.LVL129:
  52:src/kernel/../../h/kernel/buddyAllocator.hpp ****             deg++;
 1296              		.loc 4 52 13 is_stmt 1
 1297              		.loc 4 52 16 is_stmt 0
 1298 084c 13071700 		addi	a4,a4,1
 1299              	.LVL130:
  50:src/kernel/../../h/kernel/buddyAllocator.hpp ****         while(num>1){
 1300              		.loc 4 50 9
 1301 0850 6FF01FFF 		j	.L72
 1302              	.L71:
  53:src/kernel/../../h/kernel/buddyAllocator.hpp ****         }
  54:src/kernel/../../h/kernel/buddyAllocator.hpp ****         return deg;
 1303              		.loc 4 54 9 is_stmt 1
 1304              	.LVL131:
 1305              	.LBE74:
 1306              	.LBE73:
 121:src/kernel/slabAllocator.cpp ****     if(level < CACHE_LOWER_BOUND || level > CACHE_UPPER_BOUND)
 1307              		.loc 1 121 5
 121:src/kernel/slabAllocator.cpp ****     if(level < CACHE_LOWER_BOUND || level > CACHE_UPPER_BOUND)
 1308              		.loc 1 121 34 is_stmt 0
 1309 0854 1307B7FF 		addi	a4,a4,-5
 1310              	.LVL132:
 121:src/kernel/slabAllocator.cpp ****     if(level < CACHE_LOWER_BOUND || level > CACHE_UPPER_BOUND)
 1311              		.loc 1 121 5
 1312 0858 9307C000 		li	a5,12
 1313 085c 63E0E704 		bgtu	a4,a5,.L74
 119:src/kernel/slabAllocator.cpp **** void* SlabAllocator::allocateBuffer(size_t size) {
 1314              		.loc 1 119 50
 1315 0860 130101FF 		addi	sp,sp,-16
 1316              		.cfi_def_cfa_offset 16
 1317 0864 23341100 		sd	ra,8(sp)
 1318 0868 23308100 		sd	s0,0(sp)
 1319              		.cfi_offset 1, -8
 1320              		.cfi_offset 8, -16
 1321 086c 13040101 		addi	s0,sp,16
 1322              		.cfi_def_cfa 8, 0
 124:src/kernel/slabAllocator.cpp ****         level -= CACHE_LOWER_BOUND;
 1323              		.loc 1 124 9 is_stmt 1
 1324              	.LVL133:
 125:src/kernel/slabAllocator.cpp ****     return SlabAllocator::allocateObject(sizeN[level]);
 1325              		.loc 1 125 5
 125:src/kernel/slabAllocator.cpp ****     return SlabAllocator::allocateObject(sizeN[level]);
 1326              		.loc 1 125 41 is_stmt 0
 1327 0870 13173700 		slli	a4,a4,3
 1328              	.LVL134:
 1329 0874 97070000 		lla	a5,.LANCHOR0
 1329      93870700 
 1330 087c 3387E700 		add	a4,a5,a4
 1331 0880 03358700 		ld	a0,8(a4)
 1332 0884 97000000 		call	_ZN13SlabAllocator14allocateObjectEP5Cache
 1332      E7800000 
 1333              	.LVL135:
 126:src/kernel/slabAllocator.cpp **** }
 1334              		.loc 1 126 1
 1335 088c 83308100 		ld	ra,8(sp)
GAS LISTING /tmp/ccvL8NpJ.s 			page 37


 1336              		.cfi_restore 1
 1337 0890 03340100 		ld	s0,0(sp)
 1338              		.cfi_restore 8
 1339              		.cfi_def_cfa 2, 16
 1340 0894 13010101 		addi	sp,sp,16
 1341              		.cfi_def_cfa_offset 0
 1342 0898 67800000 		jr	ra
 1343              	.LVL136:
 1344              	.L74:
 122:src/kernel/slabAllocator.cpp ****         return nullptr;
 1345              		.loc 1 122 16
 1346 089c 13050000 		li	a0,0
 126:src/kernel/slabAllocator.cpp **** }
 1347              		.loc 1 126 1
 1348 08a0 67800000 		ret
 1349              		.cfi_endproc
 1350              	.LFE36:
 1352              		.align	2
 1353              		.globl	_ZN13SlabAllocator11createCacheEPKcmPFvPvES4_
 1355              	_ZN13SlabAllocator11createCacheEPKcmPFvPvES4_:
 1356              	.LFB40:
 172:src/kernel/slabAllocator.cpp **** Cache* SlabAllocator::createCache(const char *name, size_t size, void (*ctor)(void *), void (*dtor)
 1357              		.loc 1 172 110 is_stmt 1
 1358              		.cfi_startproc
 1359              	.LVL137:
 1360 08a4 130101FC 		addi	sp,sp,-64
 1361              		.cfi_def_cfa_offset 64
 1362 08a8 233C1102 		sd	ra,56(sp)
 1363 08ac 23388102 		sd	s0,48(sp)
 1364 08b0 23349102 		sd	s1,40(sp)
 1365 08b4 23302103 		sd	s2,32(sp)
 1366 08b8 233C3101 		sd	s3,24(sp)
 1367 08bc 23384101 		sd	s4,16(sp)
 1368 08c0 23345101 		sd	s5,8(sp)
 1369              		.cfi_offset 1, -8
 1370              		.cfi_offset 8, -16
 1371              		.cfi_offset 9, -24
 1372              		.cfi_offset 18, -32
 1373              		.cfi_offset 19, -40
 1374              		.cfi_offset 20, -48
 1375              		.cfi_offset 21, -56
 1376 08c4 13040104 		addi	s0,sp,64
 1377              		.cfi_def_cfa 8, 0
 1378 08c8 93090500 		mv	s3,a0
 1379 08cc 13890500 		mv	s2,a1
 1380 08d0 930A0600 		mv	s5,a2
 1381 08d4 138A0600 		mv	s4,a3
 173:src/kernel/slabAllocator.cpp ****     Cache* ret = (Cache*)SlabAllocator::allocateObject(SlabAllocator::cache);
 1382              		.loc 1 173 5
 173:src/kernel/slabAllocator.cpp ****     Cache* ret = (Cache*)SlabAllocator::allocateObject(SlabAllocator::cache);
 1383              		.loc 1 173 55 is_stmt 0
 1384 08d8 17050000 		ld	a0,.LANCHOR0+112
 1384      03350500 
 1385              	.LVL138:
 1386 08e0 97000000 		call	_ZN13SlabAllocator14allocateObjectEP5Cache
 1386      E7800000 
 1387              	.LVL139:
GAS LISTING /tmp/ccvL8NpJ.s 			page 38


 1388 08e8 93040500 		mv	s1,a0
 1389              	.LVL140:
 174:src/kernel/slabAllocator.cpp ****     if(ret == nullptr)
 1390              		.loc 1 174 5 is_stmt 1
 1391 08ec 63080508 		beqz	a0,.L79
 176:src/kernel/slabAllocator.cpp ****     ret->ctor = ctor;
 1392              		.loc 1 176 5
 176:src/kernel/slabAllocator.cpp ****     ret->ctor = ctor;
 1393              		.loc 1 176 15 is_stmt 0
 1394 08f0 23385505 		sd	s5,80(a0)
 177:src/kernel/slabAllocator.cpp ****     ret->dtor = dtor;
 1395              		.loc 1 177 5 is_stmt 1
 177:src/kernel/slabAllocator.cpp ****     ret->dtor = dtor;
 1396              		.loc 1 177 15 is_stmt 0
 1397 08f4 233C4505 		sd	s4,88(a0)
 178:src/kernel/slabAllocator.cpp ****     ret->emptyHead = ret->partialHead = ret->fullHead = nullptr;
 1398              		.loc 1 178 5 is_stmt 1
 178:src/kernel/slabAllocator.cpp ****     ret->emptyHead = ret->partialHead = ret->fullHead = nullptr;
 1399              		.loc 1 178 55 is_stmt 0
 1400 08f8 23380506 		sd	zero,112(a0)
 178:src/kernel/slabAllocator.cpp ****     ret->emptyHead = ret->partialHead = ret->fullHead = nullptr;
 1401              		.loc 1 178 39
 1402 08fc 23340506 		sd	zero,104(a0)
 178:src/kernel/slabAllocator.cpp ****     ret->emptyHead = ret->partialHead = ret->fullHead = nullptr;
 1403              		.loc 1 178 20
 1404 0900 23300506 		sd	zero,96(a0)
 179:src/kernel/slabAllocator.cpp ****     ret->objectSize = size;
 1405              		.loc 1 179 5 is_stmt 1
 179:src/kernel/slabAllocator.cpp ****     ret->objectSize = size;
 1406              		.loc 1 179 21 is_stmt 0
 1407 0904 23302505 		sd	s2,64(a0)
 180:src/kernel/slabAllocator.cpp ****     int deg = Buddy::getDeg(Buddy::ceil(size));
 1408              		.loc 1 180 5 is_stmt 1
 1409              	.LVL141:
 1410              	.LBB75:
 1411              	.LBB76:
  38:src/kernel/../../h/kernel/buddyAllocator.hpp ****         num |= num>>1;
 1412              		.loc 4 38 9
  38:src/kernel/../../h/kernel/buddyAllocator.hpp ****         num |= num>>1;
 1413              		.loc 4 38 12 is_stmt 0
 1414 0908 9307F9FF 		addi	a5,s2,-1
 1415              	.LVL142:
  39:src/kernel/../../h/kernel/buddyAllocator.hpp ****         num |= num>>2;
 1416              		.loc 4 39 9 is_stmt 1
  39:src/kernel/../../h/kernel/buddyAllocator.hpp ****         num |= num>>2;
 1417              		.loc 4 39 19 is_stmt 0
 1418 090c 13D71700 		srli	a4,a5,1
  39:src/kernel/../../h/kernel/buddyAllocator.hpp ****         num |= num>>2;
 1419              		.loc 4 39 13
 1420 0910 B3E7E700 		or	a5,a5,a4
 1421              	.LVL143:
  40:src/kernel/../../h/kernel/buddyAllocator.hpp ****         num |= num>>4;
 1422              		.loc 4 40 9 is_stmt 1
  40:src/kernel/../../h/kernel/buddyAllocator.hpp ****         num |= num>>4;
 1423              		.loc 4 40 19 is_stmt 0
 1424 0914 13D72700 		srli	a4,a5,2
  40:src/kernel/../../h/kernel/buddyAllocator.hpp ****         num |= num>>4;
GAS LISTING /tmp/ccvL8NpJ.s 			page 39


 1425              		.loc 4 40 13
 1426 0918 B3E7E700 		or	a5,a5,a4
 1427              	.LVL144:
  41:src/kernel/../../h/kernel/buddyAllocator.hpp ****         num |= num>>8;
 1428              		.loc 4 41 9 is_stmt 1
  41:src/kernel/../../h/kernel/buddyAllocator.hpp ****         num |= num>>8;
 1429              		.loc 4 41 19 is_stmt 0
 1430 091c 13D74700 		srli	a4,a5,4
  41:src/kernel/../../h/kernel/buddyAllocator.hpp ****         num |= num>>8;
 1431              		.loc 4 41 13
 1432 0920 B3E7E700 		or	a5,a5,a4
 1433              	.LVL145:
  42:src/kernel/../../h/kernel/buddyAllocator.hpp ****         num |= num>>16;
 1434              		.loc 4 42 9 is_stmt 1
  42:src/kernel/../../h/kernel/buddyAllocator.hpp ****         num |= num>>16;
 1435              		.loc 4 42 19 is_stmt 0
 1436 0924 13D78700 		srli	a4,a5,8
  42:src/kernel/../../h/kernel/buddyAllocator.hpp ****         num |= num>>16;
 1437              		.loc 4 42 13
 1438 0928 B3E7E700 		or	a5,a5,a4
 1439              	.LVL146:
  43:src/kernel/../../h/kernel/buddyAllocator.hpp ****         num |= num>>32;
 1440              		.loc 4 43 9 is_stmt 1
  43:src/kernel/../../h/kernel/buddyAllocator.hpp ****         num |= num>>32;
 1441              		.loc 4 43 19 is_stmt 0
 1442 092c 13D70701 		srli	a4,a5,16
  43:src/kernel/../../h/kernel/buddyAllocator.hpp ****         num |= num>>32;
 1443              		.loc 4 43 13
 1444 0930 B3E7E700 		or	a5,a5,a4
 1445              	.LVL147:
  44:src/kernel/../../h/kernel/buddyAllocator.hpp ****         return ++num;
 1446              		.loc 4 44 9 is_stmt 1
  44:src/kernel/../../h/kernel/buddyAllocator.hpp ****         return ++num;
 1447              		.loc 4 44 19 is_stmt 0
 1448 0934 13D70702 		srli	a4,a5,32
  44:src/kernel/../../h/kernel/buddyAllocator.hpp ****         return ++num;
 1449              		.loc 4 44 13
 1450 0938 B3E7E700 		or	a5,a5,a4
 1451              	.LVL148:
  45:src/kernel/../../h/kernel/buddyAllocator.hpp ****     }
 1452              		.loc 4 45 9 is_stmt 1
  45:src/kernel/../../h/kernel/buddyAllocator.hpp ****     }
 1453              		.loc 4 45 18 is_stmt 0
 1454 093c 93871700 		addi	a5,a5,1
 1455              	.LVL149:
 1456              	.LBE76:
 1457              	.LBE75:
 1458              	.LBB77:
 1459              	.LBB78:
  49:src/kernel/../../h/kernel/buddyAllocator.hpp ****         while(num>1){
 1460              		.loc 4 49 16
 1461 0940 13070000 		li	a4,0
 1462              	.L82:
 1463              	.LVL150:
  50:src/kernel/../../h/kernel/buddyAllocator.hpp ****             num/=2;
 1464              		.loc 4 50 9 is_stmt 1
  50:src/kernel/../../h/kernel/buddyAllocator.hpp ****             num/=2;
GAS LISTING /tmp/ccvL8NpJ.s 			page 40


 1465              		.loc 4 50 18
 1466 0944 93061000 		li	a3,1
 1467 0948 63F8F600 		bleu	a5,a3,.L81
  51:src/kernel/../../h/kernel/buddyAllocator.hpp ****             deg++;
 1468              		.loc 4 51 13
  51:src/kernel/../../h/kernel/buddyAllocator.hpp ****             deg++;
 1469              		.loc 4 51 16 is_stmt 0
 1470 094c 93D71700 		srli	a5,a5,1
 1471              	.LVL151:
  52:src/kernel/../../h/kernel/buddyAllocator.hpp ****         }
 1472              		.loc 4 52 13 is_stmt 1
  52:src/kernel/../../h/kernel/buddyAllocator.hpp ****         }
 1473              		.loc 4 52 16 is_stmt 0
 1474 0950 13071700 		addi	a4,a4,1
 1475              	.LVL152:
  50:src/kernel/../../h/kernel/buddyAllocator.hpp ****             num/=2;
 1476              		.loc 4 50 9
 1477 0954 6FF01FFF 		j	.L82
 1478              	.L81:
 1479              		.loc 4 54 9 is_stmt 1
 1480              	.LVL153:
 1481              	.LBE78:
 1482              	.LBE77:
 180:src/kernel/slabAllocator.cpp ****     int deg = Buddy::getDeg(Buddy::ceil(size));
 1483              		.loc 1 180 46 is_stmt 0
 1484 0958 1B070700 		sext.w	a4,a4
 1485              	.LVL154:
 181:src/kernel/slabAllocator.cpp ****     if(size <= sizeof(Slab)){
 1486              		.loc 1 181 5 is_stmt 1
 1487 095c 93070043 		li	a5,1072
 1488 0960 63E22705 		bgtu	s2,a5,.L83
 182:src/kernel/slabAllocator.cpp ****         ret->slabSize = DEFAULT_SLAB_SIZE;
 1489              		.loc 1 182 9
 182:src/kernel/slabAllocator.cpp ****         ret->slabSize = DEFAULT_SLAB_SIZE;
 1490              		.loc 1 182 23 is_stmt 0
 1491 0964 93072000 		li	a5,2
 1492 0968 23B4F404 		sd	a5,72(s1)
 1493              	.LVL155:
 1494              	.L84:
 188:src/kernel/slabAllocator.cpp ****     strcpy(name, ret->name);
 1495              		.loc 1 188 5 is_stmt 1
 188:src/kernel/slabAllocator.cpp ****     strcpy(name, ret->name);
 1496              		.loc 1 188 11 is_stmt 0
 1497 096c 93850400 		mv	a1,s1
 1498 0970 13850900 		mv	a0,s3
 1499 0974 97000000 		call	_Z6strcpyPKcPc@plt
 1499      E7800000 
 1500              	.LVL156:
 189:src/kernel/slabAllocator.cpp ****     return ret;
 1501              		.loc 1 189 5 is_stmt 1
 1502              	.L79:
 190:src/kernel/slabAllocator.cpp **** }
 1503              		.loc 1 190 1 is_stmt 0
 1504 097c 13850400 		mv	a0,s1
 1505 0980 83308103 		ld	ra,56(sp)
 1506              		.cfi_remember_state
 1507              		.cfi_restore 1
GAS LISTING /tmp/ccvL8NpJ.s 			page 41


 1508 0984 03340103 		ld	s0,48(sp)
 1509              		.cfi_restore 8
 1510              		.cfi_def_cfa 2, 64
 1511 0988 83348102 		ld	s1,40(sp)
 1512              		.cfi_restore 9
 1513              	.LVL157:
 1514 098c 03390102 		ld	s2,32(sp)
 1515              		.cfi_restore 18
 1516              	.LVL158:
 1517 0990 83398101 		ld	s3,24(sp)
 1518              		.cfi_restore 19
 1519              	.LVL159:
 1520 0994 033A0101 		ld	s4,16(sp)
 1521              		.cfi_restore 20
 1522              	.LVL160:
 1523 0998 833A8100 		ld	s5,8(sp)
 1524              		.cfi_restore 21
 1525              	.LVL161:
 1526 099c 13010104 		addi	sp,sp,64
 1527              		.cfi_def_cfa_offset 0
 1528 09a0 67800000 		jr	ra
 1529              	.LVL162:
 1530              	.L83:
 1531              		.cfi_restore_state
 185:src/kernel/slabAllocator.cpp ****         deg-=10;
 1532              		.loc 1 185 9 is_stmt 1
 185:src/kernel/slabAllocator.cpp ****         deg-=10;
 1533              		.loc 1 185 12 is_stmt 0
 1534 09a4 1B0767FF 		addiw	a4,a4,-10
 1535              	.LVL163:
 186:src/kernel/slabAllocator.cpp ****         ret->slabSize = deg;
 1536              		.loc 1 186 9 is_stmt 1
 186:src/kernel/slabAllocator.cpp ****         ret->slabSize = deg;
 1537              		.loc 1 186 23 is_stmt 0
 1538 09a8 23B4E404 		sd	a4,72(s1)
 1539 09ac 6FF01FFC 		j	.L84
 1540              		.cfi_endproc
 1541              	.LFE40:
 1543              		.section	.rodata.str1.8
 1544 013c 00000000 		.align	3
 1545              	.LC17:
 1546 0140 4D61696E 		.string	"Main Cache"
 1546      20436163 
 1546      686500
 1547 014b 00000000 		.align	3
 1547      00
 1548              	.LC18:
 1549 0150 4C617267 		.string	"Large Slab Cache"
 1549      6520536C 
 1549      61622043 
 1549      61636865 
 1549      00
 1550              		.text
 1551              		.align	2
 1552              		.globl	_ZN13SlabAllocator10initializeEPvm
 1554              	_ZN13SlabAllocator10initializeEPvm:
 1555              	.LFB32:
GAS LISTING /tmp/ccvL8NpJ.s 			page 42


  13:src/kernel/slabAllocator.cpp **** void SlabAllocator::initialize(void* space, uint64 blockNum) {
 1556              		.loc 1 13 62 is_stmt 1
 1557              		.cfi_startproc
 1558              	.LVL164:
 1559 09b0 130101FE 		addi	sp,sp,-32
 1560              		.cfi_def_cfa_offset 32
 1561 09b4 233C1100 		sd	ra,24(sp)
 1562 09b8 23388100 		sd	s0,16(sp)
 1563 09bc 23349100 		sd	s1,8(sp)
 1564 09c0 23302101 		sd	s2,0(sp)
 1565              		.cfi_offset 1, -8
 1566              		.cfi_offset 8, -16
 1567              		.cfi_offset 9, -24
 1568              		.cfi_offset 18, -32
 1569 09c4 13040102 		addi	s0,sp,32
 1570              		.cfi_def_cfa 8, 0
  14:src/kernel/slabAllocator.cpp ****     Buddy::initialize(space, blockNum);
 1571              		.loc 1 14 5
  14:src/kernel/slabAllocator.cpp ****     Buddy::initialize(space, blockNum);
 1572              		.loc 1 14 22 is_stmt 0
 1573 09c8 97000000 		call	_ZN5Buddy10initializeEPvm@plt
 1573      E7800000 
 1574              	.LVL165:
  15:src/kernel/slabAllocator.cpp ****     cache = (Cache*)SLAB_META_ADDR_CONST;
 1575              		.loc 1 15 5 is_stmt 1
  15:src/kernel/slabAllocator.cpp ****     cache = (Cache*)SLAB_META_ADDR_CONST;
 1576              		.loc 1 15 21 is_stmt 0
 1577 09d0 17090000 		la	s2,HEAP_START_ADDR
 1577      03390900 
 1578 09d8 83350900 		ld	a1,0(s2)
 1579 09dc 93D5C500 		srli	a1,a1,12
 1580 09e0 93851500 		addi	a1,a1,1
 1581 09e4 9395C500 		slli	a1,a1,12
  15:src/kernel/slabAllocator.cpp ****     cache = (Cache*)SLAB_META_ADDR_CONST;
 1582              		.loc 1 15 11
 1583 09e8 97040000 		lla	s1,.LANCHOR0
 1583      93840400 
 1584 09f0 23B8B406 		sd	a1,112(s1)
  16:src/kernel/slabAllocator.cpp ****     cache->ctor = nullptr;
 1585              		.loc 1 16 5 is_stmt 1
  16:src/kernel/slabAllocator.cpp ****     cache->ctor = nullptr;
 1586              		.loc 1 16 17 is_stmt 0
 1587 09f4 23B80504 		sd	zero,80(a1)
  17:src/kernel/slabAllocator.cpp ****     cache->dtor = nullptr;
 1588              		.loc 1 17 5 is_stmt 1
  17:src/kernel/slabAllocator.cpp ****     cache->dtor = nullptr;
 1589              		.loc 1 17 17 is_stmt 0
 1590 09f8 23BC0504 		sd	zero,88(a1)
  18:src/kernel/slabAllocator.cpp ****     cache->emptyHead = nullptr;
 1591              		.loc 1 18 5 is_stmt 1
  18:src/kernel/slabAllocator.cpp ****     cache->emptyHead = nullptr;
 1592              		.loc 1 18 22 is_stmt 0
 1593 09fc 23B00506 		sd	zero,96(a1)
  19:src/kernel/slabAllocator.cpp ****     cache->partialHead = nullptr;
 1594              		.loc 1 19 5 is_stmt 1
  19:src/kernel/slabAllocator.cpp ****     cache->partialHead = nullptr;
 1595              		.loc 1 19 24 is_stmt 0
GAS LISTING /tmp/ccvL8NpJ.s 			page 43


 1596 0a00 23B40506 		sd	zero,104(a1)
  20:src/kernel/slabAllocator.cpp ****     cache->fullHead = nullptr;
 1597              		.loc 1 20 5 is_stmt 1
  20:src/kernel/slabAllocator.cpp ****     cache->fullHead = nullptr;
 1598              		.loc 1 20 21 is_stmt 0
 1599 0a04 23B80506 		sd	zero,112(a1)
  21:src/kernel/slabAllocator.cpp ****     cache->objectSize = sizeof(Cache);
 1600              		.loc 1 21 5 is_stmt 1
  21:src/kernel/slabAllocator.cpp ****     cache->objectSize = sizeof(Cache);
 1601              		.loc 1 21 23 is_stmt 0
 1602 0a08 93078007 		li	a5,120
 1603 0a0c 23B0F504 		sd	a5,64(a1)
  22:src/kernel/slabAllocator.cpp ****     cache->slabSize = DEFAULT_SLAB_SIZE;
 1604              		.loc 1 22 5 is_stmt 1
  22:src/kernel/slabAllocator.cpp ****     cache->slabSize = DEFAULT_SLAB_SIZE;
 1605              		.loc 1 22 21 is_stmt 0
 1606 0a10 93072000 		li	a5,2
 1607 0a14 23B4F504 		sd	a5,72(a1)
  23:src/kernel/slabAllocator.cpp ****     strcpy("Main Cache", cache->name);
 1608              		.loc 1 23 5 is_stmt 1
  23:src/kernel/slabAllocator.cpp ****     strcpy("Main Cache", cache->name);
 1609              		.loc 1 23 11 is_stmt 0
 1610 0a18 17050000 		lla	a0,.LC17
 1610      13050500 
 1611 0a20 97000000 		call	_Z6strcpyPKcPc@plt
 1611      E7800000 
 1612              	.LVL166:
  25:src/kernel/slabAllocator.cpp ****     largeSlabCache = (Cache*)BUDDY_META_ADDR_CONST;
 1613              		.loc 1 25 5 is_stmt 1
  25:src/kernel/slabAllocator.cpp ****     largeSlabCache = (Cache*)BUDDY_META_ADDR_CONST;
 1614              		.loc 1 25 30 is_stmt 0
 1615 0a28 83370900 		ld	a5,0(s2)
 1616 0a2c 37F7FFFF 		li	a4,-4096
 1617 0a30 B3F7E700 		and	a5,a5,a4
  25:src/kernel/slabAllocator.cpp ****     largeSlabCache = (Cache*)BUDDY_META_ADDR_CONST;
 1618              		.loc 1 25 20
 1619 0a34 23B0F400 		sd	a5,0(s1)
  26:src/kernel/slabAllocator.cpp ****     largeSlabCache->ctor = nullptr;
 1620              		.loc 1 26 5 is_stmt 1
  26:src/kernel/slabAllocator.cpp ****     largeSlabCache->ctor = nullptr;
 1621              		.loc 1 26 26 is_stmt 0
 1622 0a38 23B80704 		sd	zero,80(a5)
  27:src/kernel/slabAllocator.cpp ****     largeSlabCache->dtor = nullptr;
 1623              		.loc 1 27 5 is_stmt 1
  27:src/kernel/slabAllocator.cpp ****     largeSlabCache->dtor = nullptr;
 1624              		.loc 1 27 26 is_stmt 0
 1625 0a3c 23BC0704 		sd	zero,88(a5)
  28:src/kernel/slabAllocator.cpp ****     largeSlabCache->emptyHead = nullptr;
 1626              		.loc 1 28 5 is_stmt 1
  28:src/kernel/slabAllocator.cpp ****     largeSlabCache->emptyHead = nullptr;
 1627              		.loc 1 28 31 is_stmt 0
 1628 0a40 23B00706 		sd	zero,96(a5)
  29:src/kernel/slabAllocator.cpp ****     largeSlabCache->partialHead = nullptr;
 1629              		.loc 1 29 5 is_stmt 1
  29:src/kernel/slabAllocator.cpp ****     largeSlabCache->partialHead = nullptr;
 1630              		.loc 1 29 33 is_stmt 0
 1631 0a44 23B40706 		sd	zero,104(a5)
GAS LISTING /tmp/ccvL8NpJ.s 			page 44


  30:src/kernel/slabAllocator.cpp ****     largeSlabCache->fullHead = nullptr;
 1632              		.loc 1 30 5 is_stmt 1
  30:src/kernel/slabAllocator.cpp ****     largeSlabCache->fullHead = nullptr;
 1633              		.loc 1 30 30 is_stmt 0
 1634 0a48 23B80706 		sd	zero,112(a5)
  31:src/kernel/slabAllocator.cpp ****     largeSlabCache->objectSize = sizeof(Slab);
 1635              		.loc 1 31 5 is_stmt 1
  31:src/kernel/slabAllocator.cpp ****     largeSlabCache->objectSize = sizeof(Slab);
 1636              		.loc 1 31 32 is_stmt 0
 1637 0a4c 13070043 		li	a4,1072
 1638 0a50 23B0E704 		sd	a4,64(a5)
  32:src/kernel/slabAllocator.cpp ****     largeSlabCache->slabSize = 4;
 1639              		.loc 1 32 5 is_stmt 1
  32:src/kernel/slabAllocator.cpp ****     largeSlabCache->slabSize = 4;
 1640              		.loc 1 32 30 is_stmt 0
 1641 0a54 13074000 		li	a4,4
 1642 0a58 23B4E704 		sd	a4,72(a5)
  33:src/kernel/slabAllocator.cpp ****     strcpy("Large Slab Cache", cache->name);
 1643              		.loc 1 33 5 is_stmt 1
  33:src/kernel/slabAllocator.cpp ****     strcpy("Large Slab Cache", cache->name);
 1644              		.loc 1 33 11 is_stmt 0
 1645 0a5c 83B50407 		ld	a1,112(s1)
 1646 0a60 17050000 		lla	a0,.LC18
 1646      13050500 
 1647 0a68 97000000 		call	_Z6strcpyPKcPc@plt
 1647      E7800000 
 1648              	.LVL167:
  36:src/kernel/slabAllocator.cpp ****     for(int i=0;i<BUCKET_SIZE;i++){
 1649              		.loc 1 36 5 is_stmt 1
 1650              	.LBB79:
  36:src/kernel/slabAllocator.cpp ****     for(int i=0;i<BUCKET_SIZE;i++){
 1651              		.loc 1 36 13 is_stmt 0
 1652 0a70 93040000 		li	s1,0
 1653 0a74 6F008004 		j	.L88
 1654              	.LVL168:
 1655              	.L90:
  37:src/kernel/slabAllocator.cpp ****         sizeN[i] = SlabAllocator::createCache(names[i], 1<<(i+CACHE_LOWER_BOUND), nullptr, nullptr)
 1656              		.loc 1 37 9 is_stmt 1 discriminator 2
  37:src/kernel/slabAllocator.cpp ****         sizeN[i] = SlabAllocator::createCache(names[i], 1<<(i+CACHE_LOWER_BOUND), nullptr, nullptr)
 1657              		.loc 1 37 62 is_stmt 0 discriminator 2
 1658 0a78 1B875400 		addiw	a4,s1,5
  37:src/kernel/slabAllocator.cpp ****         sizeN[i] = SlabAllocator::createCache(names[i], 1<<(i+CACHE_LOWER_BOUND), nullptr, nullptr)
 1659              		.loc 1 37 46 discriminator 2
 1660 0a7c 13993400 		slli	s2,s1,3
 1661 0a80 97070000 		lla	a5,.LANCHOR1
 1661      93870700 
 1662 0a88 B3872701 		add	a5,a5,s2
 1663 0a8c 93060000 		li	a3,0
 1664 0a90 13060000 		li	a2,0
 1665 0a94 93051000 		li	a1,1
 1666 0a98 BB95E500 		sllw	a1,a1,a4
 1667 0a9c 03B50700 		ld	a0,0(a5)
 1668 0aa0 97000000 		call	_ZN13SlabAllocator11createCacheEPKcmPFvPvES4_
 1668      E7800000 
 1669              	.LVL169:
  37:src/kernel/slabAllocator.cpp ****         sizeN[i] = SlabAllocator::createCache(names[i], 1<<(i+CACHE_LOWER_BOUND), nullptr, nullptr)
 1670              		.loc 1 37 18 discriminator 2
GAS LISTING /tmp/ccvL8NpJ.s 			page 45


 1671 0aa8 97070000 		lla	a5,.LANCHOR0
 1671      93870700 
 1672 0ab0 B3872701 		add	a5,a5,s2
 1673 0ab4 23B4A700 		sd	a0,8(a5)
  36:src/kernel/slabAllocator.cpp ****     for(int i=0;i<BUCKET_SIZE;i++){
 1674              		.loc 1 36 5 is_stmt 1 discriminator 2
 1675 0ab8 9B841400 		addiw	s1,s1,1
 1676              	.LVL170:
 1677              	.L88:
  36:src/kernel/slabAllocator.cpp ****     for(int i=0;i<BUCKET_SIZE;i++){
 1678              		.loc 1 36 18 discriminator 3
 1679 0abc 9307C000 		li	a5,12
 1680 0ac0 E3DC97FA 		ble	s1,a5,.L90
 1681              	.LBE79:
  39:src/kernel/slabAllocator.cpp **** }
 1682              		.loc 1 39 1 is_stmt 0
 1683 0ac4 83308101 		ld	ra,24(sp)
 1684              		.cfi_restore 1
 1685 0ac8 03340101 		ld	s0,16(sp)
 1686              		.cfi_restore 8
 1687              		.cfi_def_cfa 2, 32
 1688 0acc 83348100 		ld	s1,8(sp)
 1689              		.cfi_restore 9
 1690              	.LVL171:
 1691 0ad0 03390100 		ld	s2,0(sp)
 1692              		.cfi_restore 18
 1693 0ad4 13010102 		addi	sp,sp,32
 1694              		.cfi_def_cfa_offset 0
 1695 0ad8 67800000 		jr	ra
 1696              		.cfi_endproc
 1697              	.LFE32:
 1699              		.align	2
 1700              		.globl	_ZN13SlabAllocator8freeSlotEP4Slabm
 1702              	_ZN13SlabAllocator8freeSlotEP4Slabm:
 1703              	.LFB37:
 128:src/kernel/slabAllocator.cpp **** void SlabAllocator::freeSlot(Slab *slab, uint64 index) {
 1704              		.loc 1 128 56 is_stmt 1
 1705              		.cfi_startproc
 1706              	.LVL172:
 129:src/kernel/slabAllocator.cpp ****     if(slab->allocated[index/8] & (1<<(7 - index%8))) {
 1707              		.loc 1 129 5
 1708              	.LBB80:
 129:src/kernel/slabAllocator.cpp ****     if(slab->allocated[index/8] & (1<<(7 - index%8))) {
 1709              		.loc 1 129 29 is_stmt 0
 1710 0adc 13D73500 		srli	a4,a1,3
 129:src/kernel/slabAllocator.cpp ****     if(slab->allocated[index/8] & (1<<(7 - index%8))) {
 1711              		.loc 1 129 31
 1712 0ae0 B307E500 		add	a5,a0,a4
 1713 0ae4 83C60702 		lbu	a3,32(a5)
 129:src/kernel/slabAllocator.cpp ****     if(slab->allocated[index/8] & (1<<(7 - index%8))) {
 1714              		.loc 1 129 42
 1715 0ae8 93C5F5FF 		not	a1,a1
 1716              	.LVL173:
 1717 0aec 93F57500 		andi	a1,a1,7
 1718              	.LVL174:
 129:src/kernel/slabAllocator.cpp ****     if(slab->allocated[index/8] & (1<<(7 - index%8))) {
 1719              		.loc 1 129 53
GAS LISTING /tmp/ccvL8NpJ.s 			page 46


 1720 0af0 BBD7B640 		sraw	a5,a3,a1
 1721 0af4 93F71700 		andi	a5,a5,1
 129:src/kernel/slabAllocator.cpp ****     if(slab->allocated[index/8] & (1<<(7 - index%8))) {
 1722              		.loc 1 129 5
 1723 0af8 638E070E 		beqz	a5,.L100
 1724              	.LBE80:
 128:src/kernel/slabAllocator.cpp **** void SlabAllocator::freeSlot(Slab *slab, uint64 index) {
 1725              		.loc 1 128 56
 1726 0afc 130101FE 		addi	sp,sp,-32
 1727              		.cfi_def_cfa_offset 32
 1728 0b00 233C1100 		sd	ra,24(sp)
 1729 0b04 23388100 		sd	s0,16(sp)
 1730 0b08 23349100 		sd	s1,8(sp)
 1731              		.cfi_offset 1, -8
 1732              		.cfi_offset 8, -16
 1733              		.cfi_offset 9, -24
 1734 0b0c 13040102 		addi	s0,sp,32
 1735              		.cfi_def_cfa 8, 0
 1736 0b10 93040500 		mv	s1,a0
 1737              	.LBB88:
 1738              	.LBB81:
 130:src/kernel/slabAllocator.cpp ****         slab->allocated[index/8] &= ~(1<<(7 - index%8));
 1739              		.loc 1 130 9 is_stmt 1
 130:src/kernel/slabAllocator.cpp ****         slab->allocated[index/8] &= ~(1<<(7 - index%8));
 1740              		.loc 1 130 40 is_stmt 0
 1741 0b14 93071000 		li	a5,1
 1742 0b18 BB95B700 		sllw	a1,a5,a1
 130:src/kernel/slabAllocator.cpp ****         slab->allocated[index/8] &= ~(1<<(7 - index%8));
 1743              		.loc 1 130 34
 1744 0b1c 3307E500 		add	a4,a0,a4
 1745 0b20 93C5F5FF 		not	a1,a1
 1746 0b24 B3F5D500 		and	a1,a1,a3
 1747 0b28 2300B702 		sb	a1,32(a4)
 131:src/kernel/slabAllocator.cpp ****         Slab *&headFrom = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 1748              		.loc 1 131 9 is_stmt 1
 1749              	.LVL175:
 1750              	.LBB82:
 1751              	.LBB83:
  13:src/kernel/../../h/kernel/slab_t.hpp ****     inline bool isEmpty(){return numOfFreeSlots == totalNumOfSlots;}
 1752              		.loc 2 13 26
  13:src/kernel/../../h/kernel/slab_t.hpp ****     inline bool isEmpty(){return numOfFreeSlots == totalNumOfSlots;}
 1753              		.loc 2 13 33 is_stmt 0
 1754 0b2c 83370501 		ld	a5,16(a0)
 1755              	.LVL176:
 1756              	.LBE83:
 1757              	.LBE82:
 131:src/kernel/slabAllocator.cpp ****         Slab *&headFrom = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 1758              		.loc 1 131 83
 1759 0b30 639A0704 		bnez	a5,.L93
 131:src/kernel/slabAllocator.cpp ****         Slab *&headFrom = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 1760              		.loc 1 131 50 discriminator 1
 1761 0b34 03358542 		ld	a0,1064(a0)
 1762              	.LVL177:
 131:src/kernel/slabAllocator.cpp ****         Slab *&headFrom = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 1763              		.loc 1 131 83 discriminator 1
 1764 0b38 13050507 		addi	a0,a0,112
 1765              	.L94:
GAS LISTING /tmp/ccvL8NpJ.s 			page 47


 1766              	.LVL178:
 132:src/kernel/slabAllocator.cpp ****         slab->numOfFreeSlots++;
 1767              		.loc 1 132 9 is_stmt 1 discriminator 4
 132:src/kernel/slabAllocator.cpp ****         slab->numOfFreeSlots++;
 1768              		.loc 1 132 29 is_stmt 0 discriminator 4
 1769 0b3c 93871700 		addi	a5,a5,1
 1770 0b40 23B8F400 		sd	a5,16(s1)
 133:src/kernel/slabAllocator.cpp ****         Slab *&headTo = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead;
 1771              		.loc 1 133 9 is_stmt 1 discriminator 4
 1772              	.LVL179:
 1773              	.LBB84:
 1774              	.LBB85:
 1775              		.loc 2 14 27 discriminator 4
 1776              		.loc 2 14 52 is_stmt 0 discriminator 4
 1777 0b44 03B78401 		ld	a4,24(s1)
 1778              	.LVL180:
 1779              	.LBE85:
 1780              	.LBE84:
 133:src/kernel/slabAllocator.cpp ****         Slab *&headTo = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead;
 1781              		.loc 1 133 83 discriminator 4
 1782 0b48 6384E704 		beq	a5,a4,.L103
 133:src/kernel/slabAllocator.cpp ****         Slab *&headTo = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead;
 1783              		.loc 1 133 75 discriminator 2
 1784 0b4c 83B58442 		ld	a1,1064(s1)
 133:src/kernel/slabAllocator.cpp ****         Slab *&headTo = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead;
 1785              		.loc 1 133 83 discriminator 2
 1786 0b50 93858506 		addi	a1,a1,104
 1787              	.L96:
 1788              	.LVL181:
 135:src/kernel/slabAllocator.cpp ****         if(slab->isEmpty()) {
 1789              		.loc 1 135 9 is_stmt 1 discriminator 4
 1790              	.LBE81:
 1791              	.LBE88:
 1792              		.loc 2 14 27 discriminator 4
 1793              	.LBB89:
 1794              	.LBB86:
 135:src/kernel/slabAllocator.cpp ****         if(slab->isEmpty()) {
 1795              		.loc 1 135 9 is_stmt 0 discriminator 4
 1796 0b54 6384E704 		beq	a5,a4,.L104
 146:src/kernel/slabAllocator.cpp ****             if (headTo != headFrom)
 1797              		.loc 1 146 13 is_stmt 1
 146:src/kernel/slabAllocator.cpp ****             if (headTo != headFrom)
 1798              		.loc 1 146 17 is_stmt 0
 1799 0b58 03B70500 		ld	a4,0(a1)
 146:src/kernel/slabAllocator.cpp ****             if (headTo != headFrom)
 1800              		.loc 1 146 27
 1801 0b5c 83370500 		ld	a5,0(a0)
 146:src/kernel/slabAllocator.cpp ****             if (headTo != headFrom)
 1802              		.loc 1 146 13
 1803 0b60 6308F700 		beq	a4,a5,.L91
 147:src/kernel/slabAllocator.cpp ****                 SlabAllocator::move(headFrom, headTo, slab);
 1804              		.loc 1 147 17 is_stmt 1
 147:src/kernel/slabAllocator.cpp ****                 SlabAllocator::move(headFrom, headTo, slab);
 1805              		.loc 1 147 36 is_stmt 0
 1806 0b64 13860400 		mv	a2,s1
 1807 0b68 97000000 		call	_ZN13SlabAllocator4moveERP4SlabS2_S1_
 1807      E7800000 
GAS LISTING /tmp/ccvL8NpJ.s 			page 48


 1808              	.LVL182:
 1809              	.L91:
 1810              	.LBE86:
 1811              	.LBE89:
 149:src/kernel/slabAllocator.cpp **** }
 1812              		.loc 1 149 1
 1813 0b70 83308101 		ld	ra,24(sp)
 1814              		.cfi_remember_state
 1815              		.cfi_restore 1
 1816 0b74 03340101 		ld	s0,16(sp)
 1817              		.cfi_restore 8
 1818              		.cfi_def_cfa 2, 32
 1819 0b78 83348100 		ld	s1,8(sp)
 1820              		.cfi_restore 9
 1821              	.LVL183:
 1822 0b7c 13010102 		addi	sp,sp,32
 1823              		.cfi_def_cfa_offset 0
 1824 0b80 67800000 		jr	ra
 1825              	.LVL184:
 1826              	.L93:
 1827              		.cfi_restore_state
 1828              	.LBB90:
 1829              	.LBB87:
 131:src/kernel/slabAllocator.cpp ****         Slab *&headFrom = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 1830              		.loc 1 131 75 discriminator 2
 1831 0b84 03358542 		ld	a0,1064(a0)
 131:src/kernel/slabAllocator.cpp ****         Slab *&headFrom = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 1832              		.loc 1 131 83 discriminator 2
 1833 0b88 13058506 		addi	a0,a0,104
 1834 0b8c 6FF01FFB 		j	.L94
 1835              	.LVL185:
 1836              	.L103:
 133:src/kernel/slabAllocator.cpp ****         Slab *&headTo = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead;
 1837              		.loc 1 133 49 discriminator 1
 1838 0b90 83B58442 		ld	a1,1064(s1)
 133:src/kernel/slabAllocator.cpp ****         Slab *&headTo = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead;
 1839              		.loc 1 133 83 discriminator 1
 1840 0b94 93850506 		addi	a1,a1,96
 1841 0b98 6FF0DFFB 		j	.L96
 1842              	.LVL186:
 1843              	.L104:
 136:src/kernel/slabAllocator.cpp ****             SlabAllocator::removeFromList(headFrom, slab);
 1844              		.loc 1 136 13 is_stmt 1
 136:src/kernel/slabAllocator.cpp ****             SlabAllocator::removeFromList(headFrom, slab);
 1845              		.loc 1 136 42 is_stmt 0
 1846 0b9c 93850400 		mv	a1,s1
 1847              	.LVL187:
 1848 0ba0 97000000 		call	_ZN13SlabAllocator14removeFromListERP4SlabS1_
 1848      E7800000 
 1849              	.LVL188:
 137:src/kernel/slabAllocator.cpp ****             if(slab->parent->objectSize <= sizeof(Slab)) {
 1850              		.loc 1 137 13 is_stmt 1
 137:src/kernel/slabAllocator.cpp ****             if(slab->parent->objectSize <= sizeof(Slab)) {
 1851              		.loc 1 137 22 is_stmt 0
 1852 0ba8 83B78442 		ld	a5,1064(s1)
 137:src/kernel/slabAllocator.cpp ****             if(slab->parent->objectSize <= sizeof(Slab)) {
 1853              		.loc 1 137 30
GAS LISTING /tmp/ccvL8NpJ.s 			page 49


 1854 0bac 83B60704 		ld	a3,64(a5)
 137:src/kernel/slabAllocator.cpp ****             if(slab->parent->objectSize <= sizeof(Slab)) {
 1855              		.loc 1 137 13
 1856 0bb0 13070043 		li	a4,1072
 1857 0bb4 636CD700 		bgtu	a3,a4,.L98
 138:src/kernel/slabAllocator.cpp ****                 Buddy::free(slab, slab->parent->slabSize);
 1858              		.loc 1 138 17 is_stmt 1
 138:src/kernel/slabAllocator.cpp ****                 Buddy::free(slab, slab->parent->slabSize);
 1859              		.loc 1 138 28 is_stmt 0
 1860 0bb8 83B58704 		ld	a1,72(a5)
 1861 0bbc 13850400 		mv	a0,s1
 1862 0bc0 97000000 		call	_ZN5Buddy4freeEPvm@plt
 1862      E7800000 
 1863              	.LVL189:
 1864 0bc8 6FF09FFA 		j	.L91
 1865              	.L98:
 141:src/kernel/slabAllocator.cpp ****                 Buddy::free(slab->objectOffset, slab->parent->slabSize);
 1866              		.loc 1 141 17 is_stmt 1
 141:src/kernel/slabAllocator.cpp ****                 Buddy::free(slab->objectOffset, slab->parent->slabSize);
 1867              		.loc 1 141 28 is_stmt 0
 1868 0bcc 83B58704 		ld	a1,72(a5)
 1869 0bd0 03B50442 		ld	a0,1056(s1)
 1870 0bd4 97000000 		call	_ZN5Buddy4freeEPvm@plt
 1870      E7800000 
 1871              	.LVL190:
 142:src/kernel/slabAllocator.cpp ****                 SlabAllocator::freeObject(largeSlabCache, slab);
 1872              		.loc 1 142 17 is_stmt 1
 142:src/kernel/slabAllocator.cpp ****                 SlabAllocator::freeObject(largeSlabCache, slab);
 1873              		.loc 1 142 42 is_stmt 0
 1874 0bdc 93850400 		mv	a1,s1
 1875 0be0 17050000 		ld	a0,.LANCHOR0
 1875      03350500 
 1876 0be8 97000000 		call	_ZN13SlabAllocator10freeObjectEP5CachePKv
 1876      E7800000 
 1877              	.LVL191:
 1878 0bf0 6FF01FF8 		j	.L91
 1879              	.LVL192:
 1880              	.L100:
 1881              		.cfi_def_cfa_register 2
 1882              		.cfi_restore 1
 1883              		.cfi_restore 8
 1884              		.cfi_restore 9
 1885 0bf4 67800000 		ret
 1886              	.LBE87:
 1887              	.LBE90:
 1888              		.cfi_endproc
 1889              	.LFE37:
 1891              		.align	2
 1892              		.globl	_ZN13SlabAllocator10freeObjectEP5CachePKv
 1894              	_ZN13SlabAllocator10freeObjectEP5CachePKv:
 1895              	.LFB38:
 151:src/kernel/slabAllocator.cpp **** bool SlabAllocator::freeObject(Cache* cache, const void *addr) {
 1896              		.loc 1 151 64 is_stmt 1
 1897              		.cfi_startproc
 1898              	.LVL193:
 1899 0bf8 130101FE 		addi	sp,sp,-32
 1900              		.cfi_def_cfa_offset 32
GAS LISTING /tmp/ccvL8NpJ.s 			page 50


 1901 0bfc 233C1100 		sd	ra,24(sp)
 1902 0c00 23388100 		sd	s0,16(sp)
 1903 0c04 23349100 		sd	s1,8(sp)
 1904 0c08 23302101 		sd	s2,0(sp)
 1905              		.cfi_offset 1, -8
 1906              		.cfi_offset 8, -16
 1907              		.cfi_offset 9, -24
 1908              		.cfi_offset 18, -32
 1909 0c0c 13040102 		addi	s0,sp,32
 1910              		.cfi_def_cfa 8, 0
 1911 0c10 13090500 		mv	s2,a0
 1912 0c14 93840500 		mv	s1,a1
 152:src/kernel/slabAllocator.cpp ****     if(cache->dtor)
 1913              		.loc 1 152 5
 152:src/kernel/slabAllocator.cpp ****     if(cache->dtor)
 1914              		.loc 1 152 15 is_stmt 0
 1915 0c18 83378505 		ld	a5,88(a0)
 152:src/kernel/slabAllocator.cpp ****     if(cache->dtor)
 1916              		.loc 1 152 5
 1917 0c1c 63860700 		beqz	a5,.L106
 153:src/kernel/slabAllocator.cpp ****         cache->dtor((void*)addr);
 1918              		.loc 1 153 9 is_stmt 1
 153:src/kernel/slabAllocator.cpp ****         cache->dtor((void*)addr);
 1919              		.loc 1 153 20 is_stmt 0
 1920 0c20 13850500 		mv	a0,a1
 1921              	.LVL194:
 1922 0c24 E7800700 		jalr	a5
 1923              	.LVL195:
 1924              	.L106:
 154:src/kernel/slabAllocator.cpp ****     if(cache->ctor)
 1925              		.loc 1 154 5 is_stmt 1
 154:src/kernel/slabAllocator.cpp ****     if(cache->ctor)
 1926              		.loc 1 154 15 is_stmt 0
 1927 0c28 83370905 		ld	a5,80(s2)
 154:src/kernel/slabAllocator.cpp ****     if(cache->ctor)
 1928              		.loc 1 154 5
 1929 0c2c 63860700 		beqz	a5,.L107
 155:src/kernel/slabAllocator.cpp ****         cache->ctor((void*)addr);
 1930              		.loc 1 155 9 is_stmt 1
 155:src/kernel/slabAllocator.cpp ****         cache->ctor((void*)addr);
 1931              		.loc 1 155 20 is_stmt 0
 1932 0c30 13850400 		mv	a0,s1
 1933 0c34 E7800700 		jalr	a5
 1934              	.LVL196:
 1935              	.L107:
 157:src/kernel/slabAllocator.cpp ****     bool deleted = SlabAllocator::freeFromList(cache->fullHead, addr);
 1936              		.loc 1 157 5 is_stmt 1
 157:src/kernel/slabAllocator.cpp ****     bool deleted = SlabAllocator::freeFromList(cache->fullHead, addr);
 1937              		.loc 1 157 47 is_stmt 0
 1938 0c38 03350907 		ld	a0,112(s2)
 1939              	.LVL197:
 1940 0c3c 6F008000 		j	.L110
 1941              	.LVL198:
 1942              	.L109:
 1943              	.LBB105:
 1944              	.LBB106:
 1945              	.LBB107:
GAS LISTING /tmp/ccvL8NpJ.s 			page 51


  58:src/kernel/../../h/kernel/slabAllocator.hpp ****         }
  59:src/kernel/../../h/kernel/slabAllocator.hpp ****         return nullptr;
  60:src/kernel/../../h/kernel/slabAllocator.hpp ****     }
  61:src/kernel/../../h/kernel/slabAllocator.hpp **** 
  62:src/kernel/../../h/kernel/slabAllocator.hpp ****     static inline bool freeFromList(Slab* head,const void* addr){
  63:src/kernel/../../h/kernel/slabAllocator.hpp ****         while(head){
  64:src/kernel/../../h/kernel/slabAllocator.hpp ****             uint64 upperBound = SlabAllocator::getUpperBound(head);
  65:src/kernel/../../h/kernel/slabAllocator.hpp ****             uint64 lowerBound = SlabAllocator::getLowerBound(head);
  66:src/kernel/../../h/kernel/slabAllocator.hpp ****             if((uint64)addr < upperBound && (uint64)addr >= lowerBound){
  67:src/kernel/../../h/kernel/slabAllocator.hpp ****                 uint64 index = ((uint64)addr - lowerBound) / head->parent->objectSize;
  68:src/kernel/../../h/kernel/slabAllocator.hpp ****                 freeSlot(head, index);
  69:src/kernel/../../h/kernel/slabAllocator.hpp ****                 return true;
  70:src/kernel/../../h/kernel/slabAllocator.hpp ****             }
  71:src/kernel/../../h/kernel/slabAllocator.hpp ****             head = head->next;
 1946              		.loc 3 71 13 is_stmt 1
 1947              		.loc 3 71 18 is_stmt 0
 1948 0c40 03358500 		ld	a0,8(a0)
 1949              	.LVL199:
 1950              	.L110:
 1951              	.LBE107:
  63:src/kernel/../../h/kernel/slabAllocator.hpp ****             uint64 upperBound = SlabAllocator::getUpperBound(head);
 1952              		.loc 3 63 9 is_stmt 1
  63:src/kernel/../../h/kernel/slabAllocator.hpp ****             uint64 upperBound = SlabAllocator::getUpperBound(head);
 1953              		.loc 3 63 15
 1954 0c44 630E0502 		beqz	a0,.L115
 1955              	.LBB112:
  64:src/kernel/../../h/kernel/slabAllocator.hpp ****             uint64 lowerBound = SlabAllocator::getLowerBound(head);
 1956              		.loc 3 64 13
 1957              	.LVL200:
 1958              	.LBB108:
 1959              	.LBB109:
  50:src/kernel/../../h/kernel/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1960              		.loc 3 50 52
  50:src/kernel/../../h/kernel/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1961              		.loc 3 50 73 is_stmt 0
 1962 0c48 03370542 		ld	a4,1056(a0)
  50:src/kernel/../../h/kernel/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1963              		.loc 3 50 94
 1964 0c4c 83378501 		ld	a5,24(a0)
  50:src/kernel/../../h/kernel/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1965              		.loc 3 50 116
 1966 0c50 83368542 		ld	a3,1064(a0)
  50:src/kernel/../../h/kernel/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1967              		.loc 3 50 124
 1968 0c54 83B50604 		ld	a1,64(a3)
  50:src/kernel/../../h/kernel/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1969              		.loc 3 50 109
 1970 0c58 B387B702 		mul	a5,a5,a1
  50:src/kernel/../../h/kernel/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1971              		.loc 3 50 124
 1972 0c5c B307F700 		add	a5,a4,a5
 1973              	.LVL201:
 1974              	.LBE109:
 1975              	.LBE108:
  65:src/kernel/../../h/kernel/slabAllocator.hpp ****             if((uint64)addr < upperBound && (uint64)addr >= lowerBound){
 1976              		.loc 3 65 13 is_stmt 1
 1977              	.LBE112:
GAS LISTING /tmp/ccvL8NpJ.s 			page 52


 1978              	.LBE106:
 1979              	.LBE105:
  51:src/kernel/../../h/kernel/slabAllocator.hpp **** 
 1980              		.loc 3 51 52
 1981              	.LBB115:
 1982              	.LBB114:
 1983              	.LBB113:
  66:src/kernel/../../h/kernel/slabAllocator.hpp ****                 uint64 index = ((uint64)addr - lowerBound) / head->parent->objectSize;
 1984              		.loc 3 66 13
 1985              	.LBB110:
 1986 0c60 E3F0F4FE 		bleu	a5,s1,.L109
  66:src/kernel/../../h/kernel/slabAllocator.hpp ****                 uint64 index = ((uint64)addr - lowerBound) / head->parent->objectSize;
 1987              		.loc 3 66 42 is_stmt 0
 1988 0c64 E3EEE4FC 		bgtu	a4,s1,.L109
 1989              	.LBB111:
  67:src/kernel/../../h/kernel/slabAllocator.hpp ****                 freeSlot(head, index);
 1990              		.loc 3 67 17 is_stmt 1
  67:src/kernel/../../h/kernel/slabAllocator.hpp ****                 freeSlot(head, index);
 1991              		.loc 3 67 46 is_stmt 0
 1992 0c68 3387E440 		sub	a4,s1,a4
 1993              	.LVL202:
  68:src/kernel/../../h/kernel/slabAllocator.hpp ****                 return true;
 1994              		.loc 3 68 17 is_stmt 1
  68:src/kernel/../../h/kernel/slabAllocator.hpp ****                 return true;
 1995              		.loc 3 68 25 is_stmt 0
 1996 0c6c B355B702 		divu	a1,a4,a1
 1997              	.LVL203:
 1998 0c70 97000000 		call	_ZN13SlabAllocator8freeSlotEP4Slabm
 1998      E7800000 
 1999              	.LVL204:
  69:src/kernel/../../h/kernel/slabAllocator.hpp ****             }
 2000              		.loc 3 69 17 is_stmt 1
  69:src/kernel/../../h/kernel/slabAllocator.hpp ****             }
 2001              		.loc 3 69 24 is_stmt 0
 2002 0c78 13051000 		li	a0,1
 2003 0c7c 6F008000 		j	.L108
 2004              	.LVL205:
 2005              	.L115:
 2006              	.LBE111:
 2007              	.LBE110:
 2008              	.LBE113:
  72:src/kernel/../../h/kernel/slabAllocator.hpp ****         }
  73:src/kernel/../../h/kernel/slabAllocator.hpp ****         return false;
 2009              		.loc 3 73 16
 2010 0c80 13050000 		li	a0,0
 2011              	.LVL206:
 2012              	.L108:
 2013              	.LBE114:
 2014              	.LBE115:
 158:src/kernel/slabAllocator.cpp ****     if(deleted)
 2015              		.loc 1 158 5 is_stmt 1
 2016 0c84 630E0500 		beqz	a0,.L117
 2017              	.LVL207:
 2018              	.L111:
 164:src/kernel/slabAllocator.cpp **** }
 2019              		.loc 1 164 1 is_stmt 0
 2020 0c88 83308101 		ld	ra,24(sp)
GAS LISTING /tmp/ccvL8NpJ.s 			page 53


 2021              		.cfi_remember_state
 2022              		.cfi_restore 1
 2023 0c8c 03340101 		ld	s0,16(sp)
 2024              		.cfi_restore 8
 2025              		.cfi_def_cfa 2, 32
 2026 0c90 83348100 		ld	s1,8(sp)
 2027              		.cfi_restore 9
 2028              	.LVL208:
 2029 0c94 03390100 		ld	s2,0(sp)
 2030              		.cfi_restore 18
 2031              	.LVL209:
 2032 0c98 13010102 		addi	sp,sp,32
 2033              		.cfi_def_cfa_offset 0
 2034 0c9c 67800000 		jr	ra
 2035              	.LVL210:
 2036              	.L117:
 2037              		.cfi_restore_state
 161:src/kernel/slabAllocator.cpp ****     deleted = SlabAllocator::freeFromList(cache->partialHead, addr);
 2038              		.loc 1 161 5 is_stmt 1
 161:src/kernel/slabAllocator.cpp ****     deleted = SlabAllocator::freeFromList(cache->partialHead, addr);
 2039              		.loc 1 161 42 is_stmt 0
 2040 0ca0 83378906 		ld	a5,104(s2)
 2041              	.LVL211:
 2042 0ca4 6F008000 		j	.L114
 2043              	.LVL212:
 2044              	.L113:
 2045              	.LBB116:
 2046              	.LBB117:
 2047              	.LBB118:
  71:src/kernel/../../h/kernel/slabAllocator.hpp ****         }
 2048              		.loc 3 71 13 is_stmt 1
  71:src/kernel/../../h/kernel/slabAllocator.hpp ****         }
 2049              		.loc 3 71 18 is_stmt 0
 2050 0ca8 83B78700 		ld	a5,8(a5)
 2051              	.LVL213:
 2052              	.L114:
 2053              	.LBE118:
  63:src/kernel/../../h/kernel/slabAllocator.hpp ****             uint64 upperBound = SlabAllocator::getUpperBound(head);
 2054              		.loc 3 63 9 is_stmt 1
  63:src/kernel/../../h/kernel/slabAllocator.hpp ****             uint64 upperBound = SlabAllocator::getUpperBound(head);
 2055              		.loc 3 63 15
 2056 0cac E38E07FC 		beqz	a5,.L111
 2057              	.LBB123:
  64:src/kernel/../../h/kernel/slabAllocator.hpp ****             uint64 lowerBound = SlabAllocator::getLowerBound(head);
 2058              		.loc 3 64 13
 2059              	.LVL214:
 2060              	.LBB119:
 2061              	.LBB120:
  50:src/kernel/../../h/kernel/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 2062              		.loc 3 50 52
  50:src/kernel/../../h/kernel/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 2063              		.loc 3 50 73 is_stmt 0
 2064 0cb0 83B60742 		ld	a3,1056(a5)
  50:src/kernel/../../h/kernel/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 2065              		.loc 3 50 94
 2066 0cb4 03B78701 		ld	a4,24(a5)
  50:src/kernel/../../h/kernel/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
GAS LISTING /tmp/ccvL8NpJ.s 			page 54


 2067              		.loc 3 50 116
 2068 0cb8 03B68742 		ld	a2,1064(a5)
  50:src/kernel/../../h/kernel/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 2069              		.loc 3 50 124
 2070 0cbc 83350604 		ld	a1,64(a2)
  50:src/kernel/../../h/kernel/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 2071              		.loc 3 50 109
 2072 0cc0 3307B702 		mul	a4,a4,a1
  50:src/kernel/../../h/kernel/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 2073              		.loc 3 50 124
 2074 0cc4 3387E600 		add	a4,a3,a4
 2075              	.LVL215:
 2076              	.LBE120:
 2077              	.LBE119:
  65:src/kernel/../../h/kernel/slabAllocator.hpp ****             if((uint64)addr < upperBound && (uint64)addr >= lowerBound){
 2078              		.loc 3 65 13 is_stmt 1
 2079              	.LBE123:
 2080              	.LBE117:
 2081              	.LBE116:
  51:src/kernel/../../h/kernel/slabAllocator.hpp **** 
 2082              		.loc 3 51 52
 2083              	.LBB126:
 2084              	.LBB125:
 2085              	.LBB124:
  66:src/kernel/../../h/kernel/slabAllocator.hpp ****                 uint64 index = ((uint64)addr - lowerBound) / head->parent->objectSize;
 2086              		.loc 3 66 13
 2087              	.LBB121:
 2088 0cc8 E3F0E4FE 		bleu	a4,s1,.L113
  66:src/kernel/../../h/kernel/slabAllocator.hpp ****                 uint64 index = ((uint64)addr - lowerBound) / head->parent->objectSize;
 2089              		.loc 3 66 42 is_stmt 0
 2090 0ccc E3EED4FC 		bgtu	a3,s1,.L113
 2091              	.LBB122:
  67:src/kernel/../../h/kernel/slabAllocator.hpp ****                 freeSlot(head, index);
 2092              		.loc 3 67 17 is_stmt 1
  67:src/kernel/../../h/kernel/slabAllocator.hpp ****                 freeSlot(head, index);
 2093              		.loc 3 67 46 is_stmt 0
 2094 0cd0 B386D440 		sub	a3,s1,a3
 2095              	.LVL216:
  68:src/kernel/../../h/kernel/slabAllocator.hpp ****                 return true;
 2096              		.loc 3 68 17 is_stmt 1
  68:src/kernel/../../h/kernel/slabAllocator.hpp ****                 return true;
 2097              		.loc 3 68 25 is_stmt 0
 2098 0cd4 B3D5B602 		divu	a1,a3,a1
 2099              	.LVL217:
 2100 0cd8 13850700 		mv	a0,a5
 2101              	.LVL218:
 2102 0cdc 97000000 		call	_ZN13SlabAllocator8freeSlotEP4Slabm
 2102      E7800000 
 2103              	.LVL219:
  69:src/kernel/../../h/kernel/slabAllocator.hpp ****             }
 2104              		.loc 3 69 17 is_stmt 1
  69:src/kernel/../../h/kernel/slabAllocator.hpp ****             }
 2105              		.loc 3 69 24 is_stmt 0
 2106 0ce4 13051000 		li	a0,1
 2107 0ce8 6FF01FFA 		j	.L111
 2108              	.LBE122:
 2109              	.LBE121:
GAS LISTING /tmp/ccvL8NpJ.s 			page 55


 2110              	.LBE124:
 2111              	.LBE125:
 2112              	.LBE126:
 2113              		.cfi_endproc
 2114              	.LFE38:
 2116              		.align	2
 2117              		.globl	_ZN13SlabAllocator10freeBufferEPKv
 2119              	_ZN13SlabAllocator10freeBufferEPKv:
 2120              	.LFB39:
 166:src/kernel/slabAllocator.cpp **** void SlabAllocator::freeBuffer(const void *addr) {
 2121              		.loc 1 166 50 is_stmt 1
 2122              		.cfi_startproc
 2123              	.LVL220:
 2124 0cec 130101FE 		addi	sp,sp,-32
 2125              		.cfi_def_cfa_offset 32
 2126 0cf0 233C1100 		sd	ra,24(sp)
 2127 0cf4 23388100 		sd	s0,16(sp)
 2128 0cf8 23349100 		sd	s1,8(sp)
 2129 0cfc 23302101 		sd	s2,0(sp)
 2130              		.cfi_offset 1, -8
 2131              		.cfi_offset 8, -16
 2132              		.cfi_offset 9, -24
 2133              		.cfi_offset 18, -32
 2134 0d00 13040102 		addi	s0,sp,32
 2135              		.cfi_def_cfa 8, 0
 2136 0d04 13090500 		mv	s2,a0
 167:src/kernel/slabAllocator.cpp ****     for(int i=0;i<BUCKET_SIZE;i++)
 2137              		.loc 1 167 5
 2138              	.LVL221:
 2139              	.LBB127:
 167:src/kernel/slabAllocator.cpp ****     for(int i=0;i<BUCKET_SIZE;i++)
 2140              		.loc 1 167 13 is_stmt 0
 2141 0d08 93040000 		li	s1,0
 2142              	.LVL222:
 2143              	.L120:
 167:src/kernel/slabAllocator.cpp ****     for(int i=0;i<BUCKET_SIZE;i++)
 2144              		.loc 1 167 18 is_stmt 1 discriminator 1
 2145 0d0c 9307C000 		li	a5,12
 2146 0d10 63C89702 		bgt	s1,a5,.L118
 168:src/kernel/slabAllocator.cpp ****         if(SlabAllocator::freeObject(sizeN[i], addr))
 2147              		.loc 1 168 9
 168:src/kernel/slabAllocator.cpp ****         if(SlabAllocator::freeObject(sizeN[i], addr))
 2148              		.loc 1 168 37 is_stmt 0
 2149 0d14 13973400 		slli	a4,s1,3
 2150 0d18 97070000 		lla	a5,.LANCHOR0
 2150      93870700 
 2151 0d20 B387E700 		add	a5,a5,a4
 2152 0d24 93050900 		mv	a1,s2
 2153 0d28 03B58700 		ld	a0,8(a5)
 2154 0d2c 97000000 		call	_ZN13SlabAllocator10freeObjectEP5CachePKv
 2154      E7800000 
 2155              	.LVL223:
 168:src/kernel/slabAllocator.cpp ****         if(SlabAllocator::freeObject(sizeN[i], addr))
 2156              		.loc 1 168 9
 2157 0d34 63160500 		bnez	a0,.L118
 167:src/kernel/slabAllocator.cpp ****     for(int i=0;i<BUCKET_SIZE;i++)
 2158              		.loc 1 167 5 is_stmt 1 discriminator 2
GAS LISTING /tmp/ccvL8NpJ.s 			page 56


 2159 0d38 9B841400 		addiw	s1,s1,1
 2160              	.LVL224:
 2161 0d3c 6FF01FFD 		j	.L120
 2162              	.LVL225:
 2163              	.L118:
 2164              	.LBE127:
 170:src/kernel/slabAllocator.cpp **** }
 2165              		.loc 1 170 1 is_stmt 0
 2166 0d40 83308101 		ld	ra,24(sp)
 2167              		.cfi_restore 1
 2168 0d44 03340101 		ld	s0,16(sp)
 2169              		.cfi_restore 8
 2170              		.cfi_def_cfa 2, 32
 2171 0d48 83348100 		ld	s1,8(sp)
 2172              		.cfi_restore 9
 2173              	.LVL226:
 2174 0d4c 03390100 		ld	s2,0(sp)
 2175              		.cfi_restore 18
 2176              	.LVL227:
 2177 0d50 13010102 		addi	sp,sp,32
 2178              		.cfi_def_cfa_offset 0
 2179 0d54 67800000 		jr	ra
 2180              		.cfi_endproc
 2181              	.LFE39:
 2183              		.align	2
 2184              		.globl	_ZN13SlabAllocator11deleteCacheERP5Cache
 2186              	_ZN13SlabAllocator11deleteCacheERP5Cache:
 2187              	.LFB41:
 192:src/kernel/slabAllocator.cpp **** void SlabAllocator::deleteCache(Cache* &cache) {
 2188              		.loc 1 192 48 is_stmt 1
 2189              		.cfi_startproc
 2190              	.LVL228:
 2191 0d58 130101FE 		addi	sp,sp,-32
 2192              		.cfi_def_cfa_offset 32
 2193 0d5c 233C1100 		sd	ra,24(sp)
 2194 0d60 23388100 		sd	s0,16(sp)
 2195 0d64 23349100 		sd	s1,8(sp)
 2196 0d68 23302101 		sd	s2,0(sp)
 2197              		.cfi_offset 1, -8
 2198              		.cfi_offset 8, -16
 2199              		.cfi_offset 9, -24
 2200              		.cfi_offset 18, -32
 2201 0d6c 13040102 		addi	s0,sp,32
 2202              		.cfi_def_cfa 8, 0
 2203 0d70 93040500 		mv	s1,a0
 193:src/kernel/slabAllocator.cpp ****     deleteList(cache->fullHead);
 2204              		.loc 1 193 5
 193:src/kernel/slabAllocator.cpp ****     deleteList(cache->fullHead);
 2205              		.loc 1 193 16 is_stmt 0
 2206 0d74 03390500 		ld	s2,0(a0)
 193:src/kernel/slabAllocator.cpp ****     deleteList(cache->fullHead);
 2207              		.loc 1 193 23
 2208 0d78 13090907 		addi	s2,s2,112
 2209              	.LVL229:
 2210              	.L124:
 2211              	.LBB137:
 2212              	.LBB138:
GAS LISTING /tmp/ccvL8NpJ.s 			page 57


  74:src/kernel/../../h/kernel/slabAllocator.hpp ****     }
  75:src/kernel/../../h/kernel/slabAllocator.hpp **** 
  76:src/kernel/../../h/kernel/slabAllocator.hpp ****     static inline void deleteList(Slab* &head){
  77:src/kernel/../../h/kernel/slabAllocator.hpp ****         while(head){
 2213              		.loc 3 77 9 is_stmt 1
 2214              		.loc 3 77 15
 2215 0d7c 03350900 		ld	a0,0(s2)
 2216 0d80 63020502 		beqz	a0,.L123
 2217              	.LBB139:
  78:src/kernel/../../h/kernel/slabAllocator.hpp ****             Slab* tmp = head;
 2218              		.loc 3 78 13
 2219              	.LVL230:
  79:src/kernel/../../h/kernel/slabAllocator.hpp ****             Buddy::free(tmp, head->parent->slabSize);
 2220              		.loc 3 79 13
 2221              		.loc 3 79 36 is_stmt 0
 2222 0d84 83378542 		ld	a5,1064(a0)
 2223              		.loc 3 79 24
 2224 0d88 83B58704 		ld	a1,72(a5)
 2225 0d8c 97000000 		call	_ZN5Buddy4freeEPvm@plt
 2225      E7800000 
 2226              	.LVL231:
  80:src/kernel/../../h/kernel/slabAllocator.hpp ****             head = head->next;
 2227              		.loc 3 80 13 is_stmt 1
 2228              		.loc 3 80 20 is_stmt 0
 2229 0d94 83370900 		ld	a5,0(s2)
 2230              		.loc 3 80 26
 2231 0d98 83B78700 		ld	a5,8(a5)
 2232              		.loc 3 80 18
 2233 0d9c 2330F900 		sd	a5,0(s2)
 2234              	.LBE139:
  77:src/kernel/../../h/kernel/slabAllocator.hpp ****             Slab* tmp = head;
 2235              		.loc 3 77 9
 2236 0da0 6FF0DFFD 		j	.L124
 2237              	.L123:
 2238              	.LVL232:
 2239              	.LBE138:
 2240              	.LBE137:
 194:src/kernel/slabAllocator.cpp ****     deleteList(cache->partialHead);
 2241              		.loc 1 194 5 is_stmt 1
 194:src/kernel/slabAllocator.cpp ****     deleteList(cache->partialHead);
 2242              		.loc 1 194 16 is_stmt 0
 2243 0da4 03B90400 		ld	s2,0(s1)
 194:src/kernel/slabAllocator.cpp ****     deleteList(cache->partialHead);
 2244              		.loc 1 194 23
 2245 0da8 13098906 		addi	s2,s2,104
 2246              	.LVL233:
 2247              	.L126:
 2248              	.LBB140:
 2249              	.LBB141:
  77:src/kernel/../../h/kernel/slabAllocator.hpp ****             Slab* tmp = head;
 2250              		.loc 3 77 9 is_stmt 1
  77:src/kernel/../../h/kernel/slabAllocator.hpp ****             Slab* tmp = head;
 2251              		.loc 3 77 15
 2252 0dac 03350900 		ld	a0,0(s2)
 2253 0db0 63020502 		beqz	a0,.L125
 2254              	.LBB142:
  78:src/kernel/../../h/kernel/slabAllocator.hpp ****             Buddy::free(tmp, head->parent->slabSize);
GAS LISTING /tmp/ccvL8NpJ.s 			page 58


 2255              		.loc 3 78 13
 2256              	.LVL234:
  79:src/kernel/../../h/kernel/slabAllocator.hpp ****             head = head->next;
 2257              		.loc 3 79 13
  79:src/kernel/../../h/kernel/slabAllocator.hpp ****             head = head->next;
 2258              		.loc 3 79 36 is_stmt 0
 2259 0db4 83378542 		ld	a5,1064(a0)
  79:src/kernel/../../h/kernel/slabAllocator.hpp ****             head = head->next;
 2260              		.loc 3 79 24
 2261 0db8 83B58704 		ld	a1,72(a5)
 2262 0dbc 97000000 		call	_ZN5Buddy4freeEPvm@plt
 2262      E7800000 
 2263              	.LVL235:
 2264              		.loc 3 80 13 is_stmt 1
 2265              		.loc 3 80 20 is_stmt 0
 2266 0dc4 83370900 		ld	a5,0(s2)
 2267              		.loc 3 80 26
 2268 0dc8 83B78700 		ld	a5,8(a5)
 2269              		.loc 3 80 18
 2270 0dcc 2330F900 		sd	a5,0(s2)
 2271              	.LBE142:
  77:src/kernel/../../h/kernel/slabAllocator.hpp ****             Slab* tmp = head;
 2272              		.loc 3 77 9
 2273 0dd0 6FF0DFFD 		j	.L126
 2274              	.L125:
 2275              	.LVL236:
 2276              	.LBE141:
 2277              	.LBE140:
 195:src/kernel/slabAllocator.cpp ****     deleteList(cache->emptyHead);
 2278              		.loc 1 195 5 is_stmt 1
 195:src/kernel/slabAllocator.cpp ****     deleteList(cache->emptyHead);
 2279              		.loc 1 195 16 is_stmt 0
 2280 0dd4 03B90400 		ld	s2,0(s1)
 195:src/kernel/slabAllocator.cpp ****     deleteList(cache->emptyHead);
 2281              		.loc 1 195 23
 2282 0dd8 13090906 		addi	s2,s2,96
 2283              	.LVL237:
 2284              	.L128:
 2285              	.LBB143:
 2286              	.LBB144:
  77:src/kernel/../../h/kernel/slabAllocator.hpp ****             Slab* tmp = head;
 2287              		.loc 3 77 9 is_stmt 1
  77:src/kernel/../../h/kernel/slabAllocator.hpp ****             Slab* tmp = head;
 2288              		.loc 3 77 15
 2289 0ddc 03350900 		ld	a0,0(s2)
 2290 0de0 63020502 		beqz	a0,.L127
 2291              	.LBB145:
  78:src/kernel/../../h/kernel/slabAllocator.hpp ****             Buddy::free(tmp, head->parent->slabSize);
 2292              		.loc 3 78 13
 2293              	.LVL238:
  79:src/kernel/../../h/kernel/slabAllocator.hpp ****             head = head->next;
 2294              		.loc 3 79 13
  79:src/kernel/../../h/kernel/slabAllocator.hpp ****             head = head->next;
 2295              		.loc 3 79 36 is_stmt 0
 2296 0de4 83378542 		ld	a5,1064(a0)
  79:src/kernel/../../h/kernel/slabAllocator.hpp ****             head = head->next;
 2297              		.loc 3 79 24
GAS LISTING /tmp/ccvL8NpJ.s 			page 59


 2298 0de8 83B58704 		ld	a1,72(a5)
 2299 0dec 97000000 		call	_ZN5Buddy4freeEPvm@plt
 2299      E7800000 
 2300              	.LVL239:
 2301              		.loc 3 80 13 is_stmt 1
 2302              		.loc 3 80 20 is_stmt 0
 2303 0df4 83370900 		ld	a5,0(s2)
 2304              		.loc 3 80 26
 2305 0df8 83B78700 		ld	a5,8(a5)
 2306              		.loc 3 80 18
 2307 0dfc 2330F900 		sd	a5,0(s2)
 2308              	.LBE145:
  77:src/kernel/../../h/kernel/slabAllocator.hpp ****             Slab* tmp = head;
 2309              		.loc 3 77 9
 2310 0e00 6FF0DFFD 		j	.L128
 2311              	.L127:
 2312              	.LVL240:
 2313              	.LBE144:
 2314              	.LBE143:
 196:src/kernel/slabAllocator.cpp ****     SlabAllocator::freeObject(SlabAllocator::cache, cache);
 2315              		.loc 1 196 5 is_stmt 1
 196:src/kernel/slabAllocator.cpp ****     SlabAllocator::freeObject(SlabAllocator::cache, cache);
 2316              		.loc 1 196 30 is_stmt 0
 2317 0e04 83B50400 		ld	a1,0(s1)
 2318 0e08 17050000 		ld	a0,.LANCHOR0+112
 2318      03350500 
 2319 0e10 97000000 		call	_ZN13SlabAllocator10freeObjectEP5CachePKv
 2319      E7800000 
 2320              	.LVL241:
 197:src/kernel/slabAllocator.cpp ****     cache = nullptr;
 2321              		.loc 1 197 5 is_stmt 1
 197:src/kernel/slabAllocator.cpp ****     cache = nullptr;
 2322              		.loc 1 197 11 is_stmt 0
 2323 0e18 23B00400 		sd	zero,0(s1)
 198:src/kernel/slabAllocator.cpp **** }
 2324              		.loc 1 198 1
 2325 0e1c 83308101 		ld	ra,24(sp)
 2326              		.cfi_restore 1
 2327 0e20 03340101 		ld	s0,16(sp)
 2328              		.cfi_restore 8
 2329              		.cfi_def_cfa 2, 32
 2330 0e24 83348100 		ld	s1,8(sp)
 2331              		.cfi_restore 9
 2332              	.LVL242:
 2333 0e28 03390100 		ld	s2,0(sp)
 2334              		.cfi_restore 18
 2335 0e2c 13010102 		addi	sp,sp,32
 2336              		.cfi_def_cfa_offset 0
 2337 0e30 67800000 		jr	ra
 2338              		.cfi_endproc
 2339              	.LFE41:
 2341              		.globl	_ZN13SlabAllocator5namesE
 2342              		.section	.rodata.str1.8
 2343 0161 00000000 		.align	3
 2343      000000
 2344              	.LC19:
 2345 0168 42756666 		.string	"Buffer Cache No. 0"
GAS LISTING /tmp/ccvL8NpJ.s 			page 60


 2345      65722043 
 2345      61636865 
 2345      204E6F2E 
 2345      203000
 2346 017b 00000000 		.align	3
 2346      00
 2347              	.LC20:
 2348 0180 42756666 		.string	"Buffer Cache No. 1"
 2348      65722043 
 2348      61636865 
 2348      204E6F2E 
 2348      203100
 2349 0193 00000000 		.align	3
 2349      00
 2350              	.LC21:
 2351 0198 42756666 		.string	"Buffer Cache No. 2"
 2351      65722043 
 2351      61636865 
 2351      204E6F2E 
 2351      203200
 2352 01ab 00000000 		.align	3
 2352      00
 2353              	.LC22:
 2354 01b0 42756666 		.string	"Buffer Cache No. 3"
 2354      65722043 
 2354      61636865 
 2354      204E6F2E 
 2354      203300
 2355 01c3 00000000 		.align	3
 2355      00
 2356              	.LC23:
 2357 01c8 42756666 		.string	"Buffer Cache No. 4"
 2357      65722043 
 2357      61636865 
 2357      204E6F2E 
 2357      203400
 2358 01db 00000000 		.align	3
 2358      00
 2359              	.LC24:
 2360 01e0 42756666 		.string	"Buffer Cache No. 5"
 2360      65722043 
 2360      61636865 
 2360      204E6F2E 
 2360      203500
 2361 01f3 00000000 		.align	3
 2361      00
 2362              	.LC25:
 2363 01f8 42756666 		.string	"Buffer Cache No. 6"
 2363      65722043 
 2363      61636865 
 2363      204E6F2E 
 2363      203600
 2364 020b 00000000 		.align	3
 2364      00
 2365              	.LC26:
 2366 0210 42756666 		.string	"Buffer Cache No. 7"
 2366      65722043 
GAS LISTING /tmp/ccvL8NpJ.s 			page 61


 2366      61636865 
 2366      204E6F2E 
 2366      203700
 2367 0223 00000000 		.align	3
 2367      00
 2368              	.LC27:
 2369 0228 42756666 		.string	"Buffer Cache No. 8"
 2369      65722043 
 2369      61636865 
 2369      204E6F2E 
 2369      203800
 2370 023b 00000000 		.align	3
 2370      00
 2371              	.LC28:
 2372 0240 42756666 		.string	"Buffer Cache No. 9"
 2372      65722043 
 2372      61636865 
 2372      204E6F2E 
 2372      203900
 2373 0253 00000000 		.align	3
 2373      00
 2374              	.LC29:
 2375 0258 42756666 		.string	"Buffer Cache No. 10"
 2375      65722043 
 2375      61636865 
 2375      204E6F2E 
 2375      20313000 
 2376 026c 00000000 		.align	3
 2377              	.LC30:
 2378 0270 42756666 		.string	"Buffer Cache No. 11"
 2378      65722043 
 2378      61636865 
 2378      204E6F2E 
 2378      20313100 
 2379 0284 00000000 		.align	3
 2380              	.LC31:
 2381 0288 42756666 		.string	"Buffer Cache No. 12"
 2381      65722043 
 2381      61636865 
 2381      204E6F2E 
 2381      20313200 
 2382              		.globl	_ZN13SlabAllocator5sizeNE
 2383              		.globl	_ZN13SlabAllocator14largeSlabCacheE
 2384              		.globl	_ZN13SlabAllocator5cacheE
 2385              		.bss
 2386              		.align	3
 2387              		.set	.LANCHOR0,. + 0
 2390              	_ZN13SlabAllocator14largeSlabCacheE:
 2391 0000 00000000 		.zero	8
 2391      00000000 
 2394              	_ZN13SlabAllocator5sizeNE:
 2395 0008 00000000 		.zero	104
 2395      00000000 
 2395      00000000 
 2395      00000000 
 2395      00000000 
 2398              	_ZN13SlabAllocator5cacheE:
GAS LISTING /tmp/ccvL8NpJ.s 			page 62


 2399 0070 00000000 		.zero	8
 2399      00000000 
 2400              		.section	.data.rel.local,"aw"
 2401              		.align	3
 2402              		.set	.LANCHOR1,. + 0
 2405              	_ZN13SlabAllocator5namesE:
 2406 0000 00000000 		.dword	.LC19
 2406      00000000 
 2407 0008 00000000 		.dword	.LC20
 2407      00000000 
 2408 0010 00000000 		.dword	.LC21
 2408      00000000 
 2409 0018 00000000 		.dword	.LC22
 2409      00000000 
 2410 0020 00000000 		.dword	.LC23
 2410      00000000 
 2411 0028 00000000 		.dword	.LC24
 2411      00000000 
 2412 0030 00000000 		.dword	.LC25
 2412      00000000 
 2413 0038 00000000 		.dword	.LC26
 2413      00000000 
 2414 0040 00000000 		.dword	.LC27
 2414      00000000 
 2415 0048 00000000 		.dword	.LC28
 2415      00000000 
 2416 0050 00000000 		.dword	.LC29
 2416      00000000 
 2417 0058 00000000 		.dword	.LC30
 2417      00000000 
 2418 0060 00000000 		.dword	.LC31
 2418      00000000 
 2419              		.text
 2420              	.Letext0:
 2421              		.file 5 "src/kernel/../../h/kernel/../../lib/hw.h"
 2422              		.file 6 "src/kernel/../../h/kernel/utility.hpp"
 2423              		.file 7 "src/kernel/../../h/kernel/consoleUtil.hpp"
 2424              		.file 8 "src/kernel/../../h/kernel/cache_t.hpp"
GAS LISTING /tmp/ccvL8NpJ.s 			page 63


DEFINED SYMBOLS
                            *ABS*:0000000000000000 slabAllocator.cpp
     /tmp/ccvL8NpJ.s:9      .text:0000000000000000 _ZN13SlabAllocator11shrinkCacheEP5Cache
     /tmp/ccvL8NpJ.s:13     .text:0000000000000000 .L0 
     /tmp/ccvL8NpJ.s:15     .text:0000000000000000 .L0 
     /tmp/ccvL8NpJ.s:16     .text:0000000000000004 .L0 
     /tmp/ccvL8NpJ.s:21     .text:0000000000000014 .L0 
     /tmp/ccvL8NpJ.s:22     .text:0000000000000014 .L0 
     /tmp/ccvL8NpJ.s:23     .text:0000000000000014 .L0 
     /tmp/ccvL8NpJ.s:24     .text:0000000000000014 .L0 
     /tmp/ccvL8NpJ.s:26     .text:0000000000000018 .L0 
     /tmp/ccvL8NpJ.s:30     .text:000000000000001c .L0 
     /tmp/ccvL8NpJ.s:31     .text:000000000000001c .L0 
     /tmp/ccvL8NpJ.s:35     .text:0000000000000020 .L0 
     /tmp/ccvL8NpJ.s:36     .text:0000000000000020 .L0 
     /tmp/ccvL8NpJ.s:39     .text:0000000000000028 .L0 
     /tmp/ccvL8NpJ.s:40     .text:0000000000000028 .L0 
     /tmp/ccvL8NpJ.s:44     .text:0000000000000034 .L0 
     /tmp/ccvL8NpJ.s:45     .text:0000000000000034 .L0 
     /tmp/ccvL8NpJ.s:47     .text:0000000000000038 .L0 
     /tmp/ccvL8NpJ.s:49     .text:000000000000003c .L0 
     /tmp/ccvL8NpJ.s:52     .text:0000000000000040 .L0 
     /tmp/ccvL8NpJ.s:53     .text:0000000000000040 .L0 
     /tmp/ccvL8NpJ.s:55     .text:0000000000000044 .L0 
     /tmp/ccvL8NpJ.s:57     .text:0000000000000048 .L0 
     /tmp/ccvL8NpJ.s:61     .text:000000000000004c .L0 
     /tmp/ccvL8NpJ.s:62     .text:000000000000004c .L0 
     /tmp/ccvL8NpJ.s:64     .text:0000000000000054 .L0 
     /tmp/ccvL8NpJ.s:66     .text:0000000000000058 .L0 
     /tmp/ccvL8NpJ.s:67     .text:0000000000000058 .L0 
     /tmp/ccvL8NpJ.s:69     .text:000000000000005c .L0 
     /tmp/ccvL8NpJ.s:72     .text:0000000000000060 .L0 
     /tmp/ccvL8NpJ.s:75     .text:0000000000000064 .L0 
     /tmp/ccvL8NpJ.s:77     .text:0000000000000068 .L0 
     /tmp/ccvL8NpJ.s:115    .text:0000000000000068 _ZN13SlabAllocator9printSlabEP4Slab
     /tmp/ccvL8NpJ.s:118    .text:0000000000000068 .L0 
     /tmp/ccvL8NpJ.s:120    .text:0000000000000068 .L0 
     /tmp/ccvL8NpJ.s:122    .text:0000000000000068 .L0 
     /tmp/ccvL8NpJ.s:125    .text:000000000000006c .L0 
     /tmp/ccvL8NpJ.s:126    .text:0000000000000070 .L0 
     /tmp/ccvL8NpJ.s:131    .text:0000000000000080 .L0 
     /tmp/ccvL8NpJ.s:132    .text:0000000000000080 .L0 
     /tmp/ccvL8NpJ.s:133    .text:0000000000000080 .L0 
     /tmp/ccvL8NpJ.s:134    .text:0000000000000080 .L0 
     /tmp/ccvL8NpJ.s:136    .text:0000000000000084 .L0 
     /tmp/ccvL8NpJ.s:141    .text:0000000000000088 .L0 
     /tmp/ccvL8NpJ.s:142    .text:0000000000000088 .L0 
     /tmp/ccvL8NpJ.s:150    .text:00000000000000a8 .L0 
     /tmp/ccvL8NpJ.s:151    .text:00000000000000a8 .L0 
     /tmp/ccvL8NpJ.s:158    .text:00000000000000c8 .L0 
     /tmp/ccvL8NpJ.s:159    .text:00000000000000c8 .L0 
     /tmp/ccvL8NpJ.s:166    .text:00000000000000e8 .L0 
     /tmp/ccvL8NpJ.s:167    .text:00000000000000e8 .L0 
     /tmp/ccvL8NpJ.s:174    .text:0000000000000108 .L0 
     /tmp/ccvL8NpJ.s:175    .text:0000000000000108 .L0 
     /tmp/ccvL8NpJ.s:182    .text:0000000000000128 .L0 
     /tmp/ccvL8NpJ.s:183    .text:0000000000000128 .L0 
GAS LISTING /tmp/ccvL8NpJ.s 			page 64


     /tmp/ccvL8NpJ.s:190    .text:0000000000000148 .L0 
     /tmp/ccvL8NpJ.s:191    .text:0000000000000148 .L0 
     /tmp/ccvL8NpJ.s:196    .text:0000000000000158 .L0 
     /tmp/ccvL8NpJ.s:197    .text:0000000000000158 .L0 
     /tmp/ccvL8NpJ.s:202    .text:0000000000000160 .L0 
     /tmp/ccvL8NpJ.s:203    .text:0000000000000160 .L0 
     /tmp/ccvL8NpJ.s:205    .text:0000000000000164 .L0 
     /tmp/ccvL8NpJ.s:212    .text:0000000000000184 .L0 
     /tmp/ccvL8NpJ.s:216    .text:0000000000000188 .L0 
     /tmp/ccvL8NpJ.s:217    .text:0000000000000188 .L0 
     /tmp/ccvL8NpJ.s:219    .text:000000000000018c .L0 
     /tmp/ccvL8NpJ.s:221    .text:0000000000000190 .L0 
     /tmp/ccvL8NpJ.s:223    .text:0000000000000194 .L0 
     /tmp/ccvL8NpJ.s:226    .text:0000000000000198 .L0 
     /tmp/ccvL8NpJ.s:227    .text:0000000000000198 .L0 
     /tmp/ccvL8NpJ.s:233    .text:00000000000001a8 .L0 
     /tmp/ccvL8NpJ.s:234    .text:00000000000001ac .L0 
     /tmp/ccvL8NpJ.s:236    .text:00000000000001b0 .L0 
     /tmp/ccvL8NpJ.s:237    .text:00000000000001b0 .L0 
     /tmp/ccvL8NpJ.s:239    .text:00000000000001b4 .L0 
     /tmp/ccvL8NpJ.s:242    .text:00000000000001b8 .L0 
     /tmp/ccvL8NpJ.s:245    .text:00000000000001bc .L0 
     /tmp/ccvL8NpJ.s:250    .text:00000000000001c4 .L0 
     /tmp/ccvL8NpJ.s:279    .text:00000000000001c4 _ZN13SlabAllocator10printCacheEP5Cache
     /tmp/ccvL8NpJ.s:282    .text:00000000000001c4 .L0 
     /tmp/ccvL8NpJ.s:284    .text:00000000000001c4 .L0 
     /tmp/ccvL8NpJ.s:285    .text:00000000000001c8 .L0 
     /tmp/ccvL8NpJ.s:290    .text:00000000000001d8 .L0 
     /tmp/ccvL8NpJ.s:291    .text:00000000000001d8 .L0 
     /tmp/ccvL8NpJ.s:292    .text:00000000000001d8 .L0 
     /tmp/ccvL8NpJ.s:293    .text:00000000000001d8 .L0 
     /tmp/ccvL8NpJ.s:295    .text:00000000000001dc .L0 
     /tmp/ccvL8NpJ.s:298    .text:00000000000001e0 .L0 
     /tmp/ccvL8NpJ.s:299    .text:00000000000001e0 .L0 
     /tmp/ccvL8NpJ.s:304    .text:00000000000001f0 .L0 
     /tmp/ccvL8NpJ.s:305    .text:00000000000001f0 .L0 
     /tmp/ccvL8NpJ.s:309    .text:00000000000001fc .L0 
     /tmp/ccvL8NpJ.s:310    .text:00000000000001fc .L0 
     /tmp/ccvL8NpJ.s:314    .text:000000000000020c .L0 
     /tmp/ccvL8NpJ.s:315    .text:000000000000020c .L0 
     /tmp/ccvL8NpJ.s:322    .text:000000000000022c .L0 
     /tmp/ccvL8NpJ.s:323    .text:000000000000022c .L0 
     /tmp/ccvL8NpJ.s:330    .text:000000000000024c .L0 
     /tmp/ccvL8NpJ.s:331    .text:000000000000024c .L0 
     /tmp/ccvL8NpJ.s:338    .text:000000000000026c .L0 
     /tmp/ccvL8NpJ.s:339    .text:000000000000026c .L0 
     /tmp/ccvL8NpJ.s:346    .text:000000000000028c .L0 
     /tmp/ccvL8NpJ.s:347    .text:000000000000028c .L0 
     /tmp/ccvL8NpJ.s:351    .text:0000000000000290 .L0 
     /tmp/ccvL8NpJ.s:352    .text:0000000000000290 .L0 
     /tmp/ccvL8NpJ.s:354    .text:0000000000000294 .L0 
     /tmp/ccvL8NpJ.s:355    .text:0000000000000294 .L0 
     /tmp/ccvL8NpJ.s:362    .text:00000000000002b4 .L0 
     /tmp/ccvL8NpJ.s:363    .text:00000000000002b4 .L0 
     /tmp/ccvL8NpJ.s:366    .text:00000000000002b8 .L0 
     /tmp/ccvL8NpJ.s:369    .text:00000000000002bc .L0 
     /tmp/ccvL8NpJ.s:370    .text:00000000000002bc .L0 
GAS LISTING /tmp/ccvL8NpJ.s 			page 65


     /tmp/ccvL8NpJ.s:374    .text:00000000000002cc .L0 
     /tmp/ccvL8NpJ.s:375    .text:00000000000002cc .L0 
     /tmp/ccvL8NpJ.s:382    .text:00000000000002ec .L0 
     /tmp/ccvL8NpJ.s:383    .text:00000000000002ec .L0 
     /tmp/ccvL8NpJ.s:387    .text:00000000000002f0 .L0 
     /tmp/ccvL8NpJ.s:388    .text:00000000000002f0 .L0 
     /tmp/ccvL8NpJ.s:390    .text:00000000000002f4 .L0 
     /tmp/ccvL8NpJ.s:391    .text:00000000000002f4 .L0 
     /tmp/ccvL8NpJ.s:398    .text:0000000000000314 .L0 
     /tmp/ccvL8NpJ.s:399    .text:0000000000000314 .L0 
     /tmp/ccvL8NpJ.s:402    .text:0000000000000318 .L0 
     /tmp/ccvL8NpJ.s:405    .text:000000000000031c .L0 
     /tmp/ccvL8NpJ.s:406    .text:000000000000031c .L0 
     /tmp/ccvL8NpJ.s:410    .text:000000000000032c .L0 
     /tmp/ccvL8NpJ.s:411    .text:000000000000032c .L0 
     /tmp/ccvL8NpJ.s:418    .text:000000000000034c .L0 
     /tmp/ccvL8NpJ.s:419    .text:000000000000034c .L0 
     /tmp/ccvL8NpJ.s:423    .text:0000000000000350 .L0 
     /tmp/ccvL8NpJ.s:424    .text:0000000000000350 .L0 
     /tmp/ccvL8NpJ.s:426    .text:0000000000000354 .L0 
     /tmp/ccvL8NpJ.s:427    .text:0000000000000354 .L0 
     /tmp/ccvL8NpJ.s:434    .text:0000000000000374 .L0 
     /tmp/ccvL8NpJ.s:435    .text:0000000000000374 .L0 
     /tmp/ccvL8NpJ.s:438    .text:0000000000000378 .L0 
     /tmp/ccvL8NpJ.s:441    .text:000000000000037c .L0 
     /tmp/ccvL8NpJ.s:442    .text:000000000000037c .L0 
     /tmp/ccvL8NpJ.s:446    .text:000000000000038c .L0 
     /tmp/ccvL8NpJ.s:447    .text:0000000000000390 .L0 
     /tmp/ccvL8NpJ.s:449    .text:0000000000000394 .L0 
     /tmp/ccvL8NpJ.s:450    .text:0000000000000394 .L0 
     /tmp/ccvL8NpJ.s:452    .text:0000000000000398 .L0 
     /tmp/ccvL8NpJ.s:455    .text:000000000000039c .L0 
     /tmp/ccvL8NpJ.s:458    .text:00000000000003a0 .L0 
     /tmp/ccvL8NpJ.s:460    .text:00000000000003a4 .L0 
     /tmp/ccvL8NpJ.s:466    .text:00000000000003a4 _ZN13SlabAllocator14insertIntoListERP4SlabS1_
     /tmp/ccvL8NpJ.s:469    .text:00000000000003a4 .L0 
     /tmp/ccvL8NpJ.s:471    .text:00000000000003a4 .L0 
     /tmp/ccvL8NpJ.s:472    .text:00000000000003a8 .L0 
     /tmp/ccvL8NpJ.s:474    .text:00000000000003ac .L0 
     /tmp/ccvL8NpJ.s:476    .text:00000000000003b0 .L0 
     /tmp/ccvL8NpJ.s:478    .text:00000000000003b0 .L0 
     /tmp/ccvL8NpJ.s:479    .text:00000000000003b0 .L0 
     /tmp/ccvL8NpJ.s:481    .text:00000000000003b4 .L0 
     /tmp/ccvL8NpJ.s:483    .text:00000000000003b8 .L0 
     /tmp/ccvL8NpJ.s:485    .text:00000000000003bc .L0 
     /tmp/ccvL8NpJ.s:486    .text:00000000000003bc .L0 
     /tmp/ccvL8NpJ.s:489    .text:00000000000003c0 .L0 
     /tmp/ccvL8NpJ.s:490    .text:00000000000003c0 .L0 
     /tmp/ccvL8NpJ.s:492    .text:00000000000003c4 .L0 
     /tmp/ccvL8NpJ.s:493    .text:00000000000003c4 .L0 
     /tmp/ccvL8NpJ.s:495    .text:00000000000003c8 .L0 
     /tmp/ccvL8NpJ.s:496    .text:00000000000003cc .L0 
     /tmp/ccvL8NpJ.s:497    .text:00000000000003cc .L0 
     /tmp/ccvL8NpJ.s:499    .text:00000000000003d0 .L0 
     /tmp/ccvL8NpJ.s:501    .text:00000000000003d4 .L0 
     /tmp/ccvL8NpJ.s:507    .text:00000000000003d4 _ZN13SlabAllocator12allocateSlabEP5Cache
     /tmp/ccvL8NpJ.s:510    .text:00000000000003d4 .L0 
GAS LISTING /tmp/ccvL8NpJ.s 			page 66


     /tmp/ccvL8NpJ.s:512    .text:00000000000003d4 .L0 
     /tmp/ccvL8NpJ.s:513    .text:00000000000003d8 .L0 
     /tmp/ccvL8NpJ.s:519    .text:00000000000003ec .L0 
     /tmp/ccvL8NpJ.s:520    .text:00000000000003ec .L0 
     /tmp/ccvL8NpJ.s:521    .text:00000000000003ec .L0 
     /tmp/ccvL8NpJ.s:522    .text:00000000000003ec .L0 
     /tmp/ccvL8NpJ.s:523    .text:00000000000003ec .L0 
     /tmp/ccvL8NpJ.s:525    .text:00000000000003f0 .L0 
     /tmp/ccvL8NpJ.s:528    .text:00000000000003f4 .L0 
     /tmp/ccvL8NpJ.s:529    .text:00000000000003f4 .L0 
     /tmp/ccvL8NpJ.s:534    .text:0000000000000400 .L0 
     /tmp/ccvL8NpJ.s:537    .text:0000000000000408 .L0 
     /tmp/ccvL8NpJ.s:538    .text:0000000000000408 .L0 
     /tmp/ccvL8NpJ.s:544    .text:0000000000000418 .L0 
     /tmp/ccvL8NpJ.s:545    .text:0000000000000418 .L0 
     /tmp/ccvL8NpJ.s:547    .text:000000000000041c .L0 
     /tmp/ccvL8NpJ.s:550    .text:0000000000000424 .L0 
     /tmp/ccvL8NpJ.s:552    .text:0000000000000428 .L0 
     /tmp/ccvL8NpJ.s:554    .text:000000000000042c .L0 
     /tmp/ccvL8NpJ.s:556    .text:0000000000000430 .L0 
     /tmp/ccvL8NpJ.s:558    .text:0000000000000434 .L0 
     /tmp/ccvL8NpJ.s:560    .text:0000000000000438 .L0 
     /tmp/ccvL8NpJ.s:562    .text:000000000000043c .L0 
     /tmp/ccvL8NpJ.s:565    .text:0000000000000444 .L0 
     /tmp/ccvL8NpJ.s:566    .text:0000000000000444 .L0 
     /tmp/ccvL8NpJ.s:570    .text:000000000000044c .L0 
     /tmp/ccvL8NpJ.s:571    .text:000000000000044c .L0 
     /tmp/ccvL8NpJ.s:573    .text:0000000000000450 .L0 
     /tmp/ccvL8NpJ.s:575    .text:0000000000000454 .L0 
     /tmp/ccvL8NpJ.s:576    .text:0000000000000454 .L0 
     /tmp/ccvL8NpJ.s:580    .text:0000000000000458 .L0 
     /tmp/ccvL8NpJ.s:581    .text:0000000000000458 .L0 
     /tmp/ccvL8NpJ.s:585    .text:000000000000045c .L0 
     /tmp/ccvL8NpJ.s:586    .text:000000000000045c .L0 
     /tmp/ccvL8NpJ.s:588    .text:0000000000000460 .L0 
     /tmp/ccvL8NpJ.s:590    .text:0000000000000464 .L0 
     /tmp/ccvL8NpJ.s:592    .text:0000000000000468 .L0 
     /tmp/ccvL8NpJ.s:594    .text:000000000000046c .L0 
     /tmp/ccvL8NpJ.s:595    .text:000000000000046c .L0 
     /tmp/ccvL8NpJ.s:598    .text:0000000000000474 .L0 
     /tmp/ccvL8NpJ.s:605    .text:000000000000047c .L0 
     /tmp/ccvL8NpJ.s:606    .text:000000000000047c .L0 
     /tmp/ccvL8NpJ.s:608    .text:0000000000000480 .L0 
     /tmp/ccvL8NpJ.s:611    .text:0000000000000484 .L0 
     /tmp/ccvL8NpJ.s:615    .text:0000000000000488 .L0 
     /tmp/ccvL8NpJ.s:616    .text:0000000000000488 .L0 
     /tmp/ccvL8NpJ.s:618    .text:000000000000048c .L0 
     /tmp/ccvL8NpJ.s:620    .text:0000000000000490 .L0 
     /tmp/ccvL8NpJ.s:621    .text:0000000000000490 .L0 
     /tmp/ccvL8NpJ.s:623    .text:0000000000000494 .L0 
     /tmp/ccvL8NpJ.s:625    .text:0000000000000498 .L0 
     /tmp/ccvL8NpJ.s:627    .text:000000000000049c .L0 
     /tmp/ccvL8NpJ.s:629    .text:00000000000004a0 .L0 
     /tmp/ccvL8NpJ.s:631    .text:00000000000004a4 .L0 
     /tmp/ccvL8NpJ.s:635    .text:00000000000004ac .L0 
     /tmp/ccvL8NpJ.s:643    .text:00000000000004b4 .L0 
     /tmp/ccvL8NpJ.s:649    .text:00000000000004bc .L0 
GAS LISTING /tmp/ccvL8NpJ.s 			page 67


     /tmp/ccvL8NpJ.s:657    .text:00000000000004c8 .L0 
     /tmp/ccvL8NpJ.s:658    .text:00000000000004cc .L0 
     /tmp/ccvL8NpJ.s:660    .text:00000000000004d0 .L0 
     /tmp/ccvL8NpJ.s:661    .text:00000000000004d0 .L0 
     /tmp/ccvL8NpJ.s:663    .text:00000000000004d4 .L0 
     /tmp/ccvL8NpJ.s:665    .text:00000000000004d8 .L0 
     /tmp/ccvL8NpJ.s:667    .text:00000000000004dc .L0 
     /tmp/ccvL8NpJ.s:670    .text:00000000000004e0 .L0 
     /tmp/ccvL8NpJ.s:672    .text:00000000000004e4 .L0 
     /tmp/ccvL8NpJ.s:678    .text:00000000000004e4 _ZN13SlabAllocator14removeFromListERP4SlabS1_
     /tmp/ccvL8NpJ.s:681    .text:00000000000004e4 .L0 
     /tmp/ccvL8NpJ.s:683    .text:00000000000004e4 .L0 
     /tmp/ccvL8NpJ.s:684    .text:00000000000004e8 .L0 
     /tmp/ccvL8NpJ.s:686    .text:00000000000004ec .L0 
     /tmp/ccvL8NpJ.s:688    .text:00000000000004f0 .L0 
     /tmp/ccvL8NpJ.s:690    .text:00000000000004f0 .L0 
     /tmp/ccvL8NpJ.s:691    .text:00000000000004f0 .L0 
     /tmp/ccvL8NpJ.s:693    .text:00000000000004f4 .L0 
     /tmp/ccvL8NpJ.s:696    .text:00000000000004f8 .L0 
     /tmp/ccvL8NpJ.s:697    .text:00000000000004f8 .L0 
     /tmp/ccvL8NpJ.s:699    .text:00000000000004fc .L0 
     /tmp/ccvL8NpJ.s:701    .text:0000000000000500 .L0 
     /tmp/ccvL8NpJ.s:702    .text:0000000000000500 .L0 
     /tmp/ccvL8NpJ.s:704    .text:0000000000000504 .L0 
     /tmp/ccvL8NpJ.s:707    .text:0000000000000508 .L0 
     /tmp/ccvL8NpJ.s:708    .text:0000000000000508 .L0 
     /tmp/ccvL8NpJ.s:710    .text:000000000000050c .L0 
     /tmp/ccvL8NpJ.s:712    .text:0000000000000510 .L0 
     /tmp/ccvL8NpJ.s:713    .text:0000000000000510 .L0 
     /tmp/ccvL8NpJ.s:715    .text:0000000000000514 .L0 
     /tmp/ccvL8NpJ.s:718    .text:0000000000000518 .L0 
     /tmp/ccvL8NpJ.s:719    .text:0000000000000518 .L0 
     /tmp/ccvL8NpJ.s:721    .text:000000000000051c .L0 
     /tmp/ccvL8NpJ.s:722    .text:000000000000051c .L0 
     /tmp/ccvL8NpJ.s:724    .text:0000000000000520 .L0 
     /tmp/ccvL8NpJ.s:725    .text:0000000000000524 .L0 
     /tmp/ccvL8NpJ.s:726    .text:0000000000000524 .L0 
     /tmp/ccvL8NpJ.s:727    .text:0000000000000524 .L0 
     /tmp/ccvL8NpJ.s:729    .text:0000000000000528 .L0 
     /tmp/ccvL8NpJ.s:732    .text:000000000000052c .L0 
     /tmp/ccvL8NpJ.s:734    .text:000000000000052c .L0 
     /tmp/ccvL8NpJ.s:735    .text:000000000000052c .L0 
     /tmp/ccvL8NpJ.s:737    .text:0000000000000530 .L0 
     /tmp/ccvL8NpJ.s:739    .text:0000000000000538 .L0 
     /tmp/ccvL8NpJ.s:745    .text:0000000000000538 _ZN13SlabAllocator4moveERP4SlabS2_S1_
     /tmp/ccvL8NpJ.s:748    .text:0000000000000538 .L0 
     /tmp/ccvL8NpJ.s:750    .text:0000000000000538 .L0 
     /tmp/ccvL8NpJ.s:751    .text:000000000000053c .L0 
     /tmp/ccvL8NpJ.s:756    .text:000000000000054c .L0 
     /tmp/ccvL8NpJ.s:757    .text:000000000000054c .L0 
     /tmp/ccvL8NpJ.s:758    .text:000000000000054c .L0 
     /tmp/ccvL8NpJ.s:759    .text:000000000000054c .L0 
     /tmp/ccvL8NpJ.s:761    .text:0000000000000550 .L0 
     /tmp/ccvL8NpJ.s:765    .text:0000000000000558 .L0 
     /tmp/ccvL8NpJ.s:766    .text:0000000000000558 .L0 
     /tmp/ccvL8NpJ.s:771    .text:0000000000000564 .L0 
     /tmp/ccvL8NpJ.s:772    .text:0000000000000564 .L0 
GAS LISTING /tmp/ccvL8NpJ.s 			page 68


     /tmp/ccvL8NpJ.s:777    .text:0000000000000574 .L0 
     /tmp/ccvL8NpJ.s:778    .text:0000000000000578 .L0 
     /tmp/ccvL8NpJ.s:780    .text:000000000000057c .L0 
     /tmp/ccvL8NpJ.s:781    .text:000000000000057c .L0 
     /tmp/ccvL8NpJ.s:783    .text:0000000000000580 .L0 
     /tmp/ccvL8NpJ.s:786    .text:0000000000000584 .L0 
     /tmp/ccvL8NpJ.s:789    .text:0000000000000588 .L0 
     /tmp/ccvL8NpJ.s:791    .text:000000000000058c .L0 
     /tmp/ccvL8NpJ.s:797    .text:000000000000058c _ZN13SlabAllocator12allocateSlotEP4Slab
     /tmp/ccvL8NpJ.s:800    .text:000000000000058c .L0 
     /tmp/ccvL8NpJ.s:802    .text:000000000000058c .L0 
     /tmp/ccvL8NpJ.s:803    .text:0000000000000590 .L0 
     /tmp/ccvL8NpJ.s:808    .text:00000000000005a0 .L0 
     /tmp/ccvL8NpJ.s:809    .text:00000000000005a0 .L0 
     /tmp/ccvL8NpJ.s:810    .text:00000000000005a0 .L0 
     /tmp/ccvL8NpJ.s:811    .text:00000000000005a0 .L0 
     /tmp/ccvL8NpJ.s:813    .text:00000000000005a4 .L0 
     /tmp/ccvL8NpJ.s:818    .text:00000000000005a8 .L0 
     /tmp/ccvL8NpJ.s:819    .text:00000000000005a8 .L0 
     /tmp/ccvL8NpJ.s:823    .text:00000000000005ac .L0 
     /tmp/ccvL8NpJ.s:824    .text:00000000000005ac .L0 
     /tmp/ccvL8NpJ.s:826    .text:00000000000005b0 .L0 
     /tmp/ccvL8NpJ.s:831    .text:00000000000005b4 .L0 
     /tmp/ccvL8NpJ.s:832    .text:00000000000005b4 .L0 
     /tmp/ccvL8NpJ.s:834    .text:00000000000005b8 .L0 
     /tmp/ccvL8NpJ.s:837    .text:00000000000005c0 .L0 
     /tmp/ccvL8NpJ.s:840    .text:00000000000005c8 .L0 
     /tmp/ccvL8NpJ.s:843    .text:00000000000005d0 .L0 
     /tmp/ccvL8NpJ.s:846    .text:00000000000005d4 .L0 
     /tmp/ccvL8NpJ.s:853    .text:00000000000005dc .L0 
     /tmp/ccvL8NpJ.s:854    .text:00000000000005dc .L0 
     /tmp/ccvL8NpJ.s:857    .text:00000000000005e4 .L0 
     /tmp/ccvL8NpJ.s:865    .text:00000000000005f0 .L0 
     /tmp/ccvL8NpJ.s:866    .text:00000000000005f0 .L0 
     /tmp/ccvL8NpJ.s:867    .text:00000000000005f0 .L0 
     /tmp/ccvL8NpJ.s:872    .text:00000000000005f4 .L0 
     /tmp/ccvL8NpJ.s:874    .text:00000000000005f8 .L0 
     /tmp/ccvL8NpJ.s:877    .text:00000000000005fc .L0 
     /tmp/ccvL8NpJ.s:881    .text:0000000000000600 .L0 
     /tmp/ccvL8NpJ.s:882    .text:0000000000000600 .L0 
     /tmp/ccvL8NpJ.s:889    .text:0000000000000608 .L0 
     /tmp/ccvL8NpJ.s:893    .text:0000000000000608 .L0 
     /tmp/ccvL8NpJ.s:894    .text:0000000000000608 .L0 
     /tmp/ccvL8NpJ.s:896    .text:000000000000060c .L0 
     /tmp/ccvL8NpJ.s:898    .text:0000000000000610 .L0 
     /tmp/ccvL8NpJ.s:902    .text:0000000000000614 .L0 
     /tmp/ccvL8NpJ.s:903    .text:0000000000000614 .L0 
     /tmp/ccvL8NpJ.s:905    .text:0000000000000618 .L0 
     /tmp/ccvL8NpJ.s:907    .text:000000000000061c .L0 
     /tmp/ccvL8NpJ.s:909    .text:0000000000000620 .L0 
     /tmp/ccvL8NpJ.s:910    .text:0000000000000620 .L0 
     /tmp/ccvL8NpJ.s:915    .text:000000000000062c .L0 
     /tmp/ccvL8NpJ.s:916    .text:000000000000062c .L0 
     /tmp/ccvL8NpJ.s:918    .text:0000000000000630 .L0 
     /tmp/ccvL8NpJ.s:920    .text:0000000000000634 .L0 
     /tmp/ccvL8NpJ.s:922    .text:0000000000000638 .L0 
     /tmp/ccvL8NpJ.s:925    .text:000000000000063c .L0 
GAS LISTING /tmp/ccvL8NpJ.s 			page 69


     /tmp/ccvL8NpJ.s:927    .text:0000000000000640 .L0 
     /tmp/ccvL8NpJ.s:931    .text:0000000000000644 .L0 
     /tmp/ccvL8NpJ.s:934    .text:0000000000000648 .L0 
     /tmp/ccvL8NpJ.s:939    .text:0000000000000650 .L0 
     /tmp/ccvL8NpJ.s:941    .text:0000000000000654 .L0 
     /tmp/ccvL8NpJ.s:949    .text:000000000000065c .L0 
     /tmp/ccvL8NpJ.s:953    .text:0000000000000660 .L0 
     /tmp/ccvL8NpJ.s:954    .text:0000000000000664 .L0 
     /tmp/ccvL8NpJ.s:956    .text:0000000000000668 .L0 
     /tmp/ccvL8NpJ.s:957    .text:0000000000000668 .L0 
     /tmp/ccvL8NpJ.s:959    .text:000000000000066c .L0 
     /tmp/ccvL8NpJ.s:961    .text:0000000000000670 .L0 
     /tmp/ccvL8NpJ.s:964    .text:0000000000000674 .L0 
     /tmp/ccvL8NpJ.s:966    .text:0000000000000678 .L0 
     /tmp/ccvL8NpJ.s:972    .text:0000000000000678 _ZN13SlabAllocator14allocateObjectEP5Cache
     /tmp/ccvL8NpJ.s:975    .text:0000000000000678 .L0 
     /tmp/ccvL8NpJ.s:977    .text:0000000000000678 .L0 
     /tmp/ccvL8NpJ.s:978    .text:000000000000067c .L0 
     /tmp/ccvL8NpJ.s:984    .text:0000000000000690 .L0 
     /tmp/ccvL8NpJ.s:985    .text:0000000000000690 .L0 
     /tmp/ccvL8NpJ.s:986    .text:0000000000000690 .L0 
     /tmp/ccvL8NpJ.s:987    .text:0000000000000690 .L0 
     /tmp/ccvL8NpJ.s:988    .text:0000000000000690 .L0 
     /tmp/ccvL8NpJ.s:990    .text:0000000000000694 .L0 
     /tmp/ccvL8NpJ.s:993    .text:0000000000000698 .L0 
     /tmp/ccvL8NpJ.s:994    .text:0000000000000698 .L0 
     /tmp/ccvL8NpJ.s:1001   .text:000000000000069c .L0 
     /tmp/ccvL8NpJ.s:1002   .text:000000000000069c .L0 
     /tmp/ccvL8NpJ.s:1005   .text:00000000000006a0 .L0 
     /tmp/ccvL8NpJ.s:1006   .text:00000000000006a0 .L0 
     /tmp/ccvL8NpJ.s:1010   .text:00000000000006ac .L0 
     /tmp/ccvL8NpJ.s:1012   .text:00000000000006b0 .L0 
     /tmp/ccvL8NpJ.s:1019   .text:00000000000006b4 .L0 
     /tmp/ccvL8NpJ.s:1023   .text:00000000000006b8 .L0 
     /tmp/ccvL8NpJ.s:1025   .text:00000000000006c0 .L0 
     /tmp/ccvL8NpJ.s:1026   .text:00000000000006c0 .L0 
     /tmp/ccvL8NpJ.s:1028   .text:00000000000006c4 .L0 
     /tmp/ccvL8NpJ.s:1029   .text:00000000000006c4 .L0 
     /tmp/ccvL8NpJ.s:1031   .text:00000000000006c8 .L0 
     /tmp/ccvL8NpJ.s:1033   .text:00000000000006cc .L0 
     /tmp/ccvL8NpJ.s:1036   .text:00000000000006d0 .L0 
     /tmp/ccvL8NpJ.s:1038   .text:00000000000006d4 .L0 
     /tmp/ccvL8NpJ.s:1042   .text:00000000000006d8 .L0 
     /tmp/ccvL8NpJ.s:1044   .text:00000000000006d8 .L0 
     /tmp/ccvL8NpJ.s:1045   .text:00000000000006d8 .L0 
     /tmp/ccvL8NpJ.s:1051   .text:00000000000006dc .L0 
     /tmp/ccvL8NpJ.s:1052   .text:00000000000006dc .L0 
     /tmp/ccvL8NpJ.s:1055   .text:00000000000006e0 .L0 
     /tmp/ccvL8NpJ.s:1056   .text:00000000000006e0 .L0 
     /tmp/ccvL8NpJ.s:1060   .text:00000000000006ec .L0 
     /tmp/ccvL8NpJ.s:1062   .text:00000000000006f0 .L0 
     /tmp/ccvL8NpJ.s:1069   .text:00000000000006f4 .L0 
     /tmp/ccvL8NpJ.s:1072   .text:00000000000006f8 .L0 
     /tmp/ccvL8NpJ.s:1073   .text:00000000000006f8 .L0 
     /tmp/ccvL8NpJ.s:1075   .text:00000000000006fc .L0 
     /tmp/ccvL8NpJ.s:1078   .text:0000000000000704 .L0 
     /tmp/ccvL8NpJ.s:1079   .text:0000000000000704 .L0 
GAS LISTING /tmp/ccvL8NpJ.s 			page 70


     /tmp/ccvL8NpJ.s:1083   .text:0000000000000710 .L0 
     /tmp/ccvL8NpJ.s:1085   .text:0000000000000714 .L0 
     /tmp/ccvL8NpJ.s:1086   .text:0000000000000714 .L0 
     /tmp/ccvL8NpJ.s:1095   .text:0000000000000728 .L0 
     /tmp/ccvL8NpJ.s:1096   .text:0000000000000728 .L0 
     /tmp/ccvL8NpJ.s:1102   .text:000000000000073c .L0 
     /tmp/ccvL8NpJ.s:1103   .text:000000000000073c .L0 
     /tmp/ccvL8NpJ.s:1105   .text:0000000000000740 .L0 
     /tmp/ccvL8NpJ.s:1108   .text:0000000000000748 .L0 
     /tmp/ccvL8NpJ.s:1110   .text:000000000000074c .L0 
     /tmp/ccvL8NpJ.s:1112   .text:0000000000000750 .L0 
     /tmp/ccvL8NpJ.s:1114   .text:0000000000000754 .L0 
     /tmp/ccvL8NpJ.s:1116   .text:0000000000000758 .L0 
     /tmp/ccvL8NpJ.s:1118   .text:000000000000075c .L0 
     /tmp/ccvL8NpJ.s:1121   .text:0000000000000764 .L0 
     /tmp/ccvL8NpJ.s:1122   .text:0000000000000764 .L0 
     /tmp/ccvL8NpJ.s:1126   .text:000000000000076c .L0 
     /tmp/ccvL8NpJ.s:1127   .text:000000000000076c .L0 
     /tmp/ccvL8NpJ.s:1131   .text:0000000000000778 .L0 
     /tmp/ccvL8NpJ.s:1132   .text:0000000000000778 .L0 
     /tmp/ccvL8NpJ.s:1134   .text:000000000000077c .L0 
     /tmp/ccvL8NpJ.s:1135   .text:000000000000077c .L0 
     /tmp/ccvL8NpJ.s:1137   .text:0000000000000780 .L0 
     /tmp/ccvL8NpJ.s:1138   .text:0000000000000780 .L0 
     /tmp/ccvL8NpJ.s:1142   .text:0000000000000784 .L0 
     /tmp/ccvL8NpJ.s:1143   .text:0000000000000784 .L0 
     /tmp/ccvL8NpJ.s:1147   .text:0000000000000788 .L0 
     /tmp/ccvL8NpJ.s:1148   .text:0000000000000788 .L0 
     /tmp/ccvL8NpJ.s:1150   .text:000000000000078c .L0 
     /tmp/ccvL8NpJ.s:1152   .text:0000000000000790 .L0 
     /tmp/ccvL8NpJ.s:1154   .text:0000000000000794 .L0 
     /tmp/ccvL8NpJ.s:1156   .text:0000000000000798 .L0 
     /tmp/ccvL8NpJ.s:1157   .text:0000000000000798 .L0 
     /tmp/ccvL8NpJ.s:1160   .text:00000000000007a0 .L0 
     /tmp/ccvL8NpJ.s:1167   .text:00000000000007a8 .L0 
     /tmp/ccvL8NpJ.s:1168   .text:00000000000007a8 .L0 
     /tmp/ccvL8NpJ.s:1170   .text:00000000000007ac .L0 
     /tmp/ccvL8NpJ.s:1173   .text:00000000000007b0 .L0 
     /tmp/ccvL8NpJ.s:1177   .text:00000000000007b4 .L0 
     /tmp/ccvL8NpJ.s:1178   .text:00000000000007b4 .L0 
     /tmp/ccvL8NpJ.s:1180   .text:00000000000007b8 .L0 
     /tmp/ccvL8NpJ.s:1182   .text:00000000000007bc .L0 
     /tmp/ccvL8NpJ.s:1183   .text:00000000000007bc .L0 
     /tmp/ccvL8NpJ.s:1185   .text:00000000000007c0 .L0 
     /tmp/ccvL8NpJ.s:1187   .text:00000000000007c4 .L0 
     /tmp/ccvL8NpJ.s:1189   .text:00000000000007c8 .L0 
     /tmp/ccvL8NpJ.s:1191   .text:00000000000007cc .L0 
     /tmp/ccvL8NpJ.s:1193   .text:00000000000007d0 .L0 
     /tmp/ccvL8NpJ.s:1197   .text:00000000000007d8 .L0 
     /tmp/ccvL8NpJ.s:1205   .text:00000000000007e0 .L0 
     /tmp/ccvL8NpJ.s:1206   .text:00000000000007e0 .L0 
     /tmp/ccvL8NpJ.s:1211   .text:00000000000007f0 .L0 
     /tmp/ccvL8NpJ.s:1212   .text:00000000000007f0 .L0 
     /tmp/ccvL8NpJ.s:1220   .text:0000000000000804 .L0 
     /tmp/ccvL8NpJ.s:1226   .text:0000000000000804 _ZN13SlabAllocator14allocateBufferEm
     /tmp/ccvL8NpJ.s:1229   .text:0000000000000804 .L0 
     /tmp/ccvL8NpJ.s:1231   .text:0000000000000804 .L0 
GAS LISTING /tmp/ccvL8NpJ.s 			page 71


     /tmp/ccvL8NpJ.s:1235   .text:0000000000000804 .L0 
     /tmp/ccvL8NpJ.s:1236   .text:0000000000000804 .L0 
     /tmp/ccvL8NpJ.s:1237   .text:0000000000000804 .L0 
     /tmp/ccvL8NpJ.s:1240   .text:0000000000000808 .L0 
     /tmp/ccvL8NpJ.s:1241   .text:0000000000000808 .L0 
     /tmp/ccvL8NpJ.s:1244   .text:000000000000080c .L0 
     /tmp/ccvL8NpJ.s:1247   .text:0000000000000810 .L0 
     /tmp/ccvL8NpJ.s:1248   .text:0000000000000810 .L0 
     /tmp/ccvL8NpJ.s:1250   .text:0000000000000814 .L0 
     /tmp/ccvL8NpJ.s:1253   .text:0000000000000818 .L0 
     /tmp/ccvL8NpJ.s:1254   .text:0000000000000818 .L0 
     /tmp/ccvL8NpJ.s:1256   .text:000000000000081c .L0 
     /tmp/ccvL8NpJ.s:1259   .text:0000000000000820 .L0 
     /tmp/ccvL8NpJ.s:1260   .text:0000000000000820 .L0 
     /tmp/ccvL8NpJ.s:1262   .text:0000000000000824 .L0 
     /tmp/ccvL8NpJ.s:1265   .text:0000000000000828 .L0 
     /tmp/ccvL8NpJ.s:1266   .text:0000000000000828 .L0 
     /tmp/ccvL8NpJ.s:1268   .text:000000000000082c .L0 
     /tmp/ccvL8NpJ.s:1271   .text:0000000000000830 .L0 
     /tmp/ccvL8NpJ.s:1272   .text:0000000000000830 .L0 
     /tmp/ccvL8NpJ.s:1274   .text:0000000000000834 .L0 
     /tmp/ccvL8NpJ.s:1277   .text:0000000000000838 .L0 
     /tmp/ccvL8NpJ.s:1278   .text:0000000000000838 .L0 
     /tmp/ccvL8NpJ.s:1285   .text:000000000000083c .L0 
     /tmp/ccvL8NpJ.s:1289   .text:0000000000000840 .L0 
     /tmp/ccvL8NpJ.s:1290   .text:0000000000000840 .L0 
     /tmp/ccvL8NpJ.s:1293   .text:0000000000000848 .L0 
     /tmp/ccvL8NpJ.s:1294   .text:0000000000000848 .L0 
     /tmp/ccvL8NpJ.s:1297   .text:000000000000084c .L0 
     /tmp/ccvL8NpJ.s:1298   .text:000000000000084c .L0 
     /tmp/ccvL8NpJ.s:1301   .text:0000000000000850 .L0 
     /tmp/ccvL8NpJ.s:1307   .text:0000000000000854 .L0 
     /tmp/ccvL8NpJ.s:1308   .text:0000000000000854 .L0 
     /tmp/ccvL8NpJ.s:1309   .text:0000000000000854 .L0 
     /tmp/ccvL8NpJ.s:1312   .text:0000000000000858 .L0 
     /tmp/ccvL8NpJ.s:1315   .text:0000000000000860 .L0 
     /tmp/ccvL8NpJ.s:1316   .text:0000000000000864 .L0 
     /tmp/ccvL8NpJ.s:1319   .text:000000000000086c .L0 
     /tmp/ccvL8NpJ.s:1320   .text:000000000000086c .L0 
     /tmp/ccvL8NpJ.s:1322   .text:0000000000000870 .L0 
     /tmp/ccvL8NpJ.s:1325   .text:0000000000000870 .L0 
     /tmp/ccvL8NpJ.s:1326   .text:0000000000000870 .L0 
     /tmp/ccvL8NpJ.s:1327   .text:0000000000000870 .L0 
     /tmp/ccvL8NpJ.s:1335   .text:000000000000088c .L0 
     /tmp/ccvL8NpJ.s:1336   .text:0000000000000890 .L0 
     /tmp/ccvL8NpJ.s:1338   .text:0000000000000894 .L0 
     /tmp/ccvL8NpJ.s:1339   .text:0000000000000894 .L0 
     /tmp/ccvL8NpJ.s:1341   .text:0000000000000898 .L0 
     /tmp/ccvL8NpJ.s:1346   .text:000000000000089c .L0 
     /tmp/ccvL8NpJ.s:1348   .text:00000000000008a0 .L0 
     /tmp/ccvL8NpJ.s:1349   .text:00000000000008a4 .L0 
     /tmp/ccvL8NpJ.s:1355   .text:00000000000008a4 _ZN13SlabAllocator11createCacheEPKcmPFvPvES4_
     /tmp/ccvL8NpJ.s:1358   .text:00000000000008a4 .L0 
     /tmp/ccvL8NpJ.s:1360   .text:00000000000008a4 .L0 
     /tmp/ccvL8NpJ.s:1361   .text:00000000000008a8 .L0 
     /tmp/ccvL8NpJ.s:1369   .text:00000000000008c4 .L0 
     /tmp/ccvL8NpJ.s:1370   .text:00000000000008c4 .L0 
GAS LISTING /tmp/ccvL8NpJ.s 			page 72


     /tmp/ccvL8NpJ.s:1371   .text:00000000000008c4 .L0 
     /tmp/ccvL8NpJ.s:1372   .text:00000000000008c4 .L0 
     /tmp/ccvL8NpJ.s:1373   .text:00000000000008c4 .L0 
     /tmp/ccvL8NpJ.s:1374   .text:00000000000008c4 .L0 
     /tmp/ccvL8NpJ.s:1375   .text:00000000000008c4 .L0 
     /tmp/ccvL8NpJ.s:1377   .text:00000000000008c8 .L0 
     /tmp/ccvL8NpJ.s:1383   .text:00000000000008d8 .L0 
     /tmp/ccvL8NpJ.s:1384   .text:00000000000008d8 .L0 
     /tmp/ccvL8NpJ.s:1391   .text:00000000000008ec .L0 
     /tmp/ccvL8NpJ.s:1393   .text:00000000000008f0 .L0 
     /tmp/ccvL8NpJ.s:1394   .text:00000000000008f0 .L0 
     /tmp/ccvL8NpJ.s:1396   .text:00000000000008f4 .L0 
     /tmp/ccvL8NpJ.s:1397   .text:00000000000008f4 .L0 
     /tmp/ccvL8NpJ.s:1399   .text:00000000000008f8 .L0 
     /tmp/ccvL8NpJ.s:1400   .text:00000000000008f8 .L0 
     /tmp/ccvL8NpJ.s:1402   .text:00000000000008fc .L0 
     /tmp/ccvL8NpJ.s:1404   .text:0000000000000900 .L0 
     /tmp/ccvL8NpJ.s:1406   .text:0000000000000904 .L0 
     /tmp/ccvL8NpJ.s:1407   .text:0000000000000904 .L0 
     /tmp/ccvL8NpJ.s:1412   .text:0000000000000908 .L0 
     /tmp/ccvL8NpJ.s:1413   .text:0000000000000908 .L0 
     /tmp/ccvL8NpJ.s:1414   .text:0000000000000908 .L0 
     /tmp/ccvL8NpJ.s:1417   .text:000000000000090c .L0 
     /tmp/ccvL8NpJ.s:1418   .text:000000000000090c .L0 
     /tmp/ccvL8NpJ.s:1420   .text:0000000000000910 .L0 
     /tmp/ccvL8NpJ.s:1423   .text:0000000000000914 .L0 
     /tmp/ccvL8NpJ.s:1424   .text:0000000000000914 .L0 
     /tmp/ccvL8NpJ.s:1426   .text:0000000000000918 .L0 
     /tmp/ccvL8NpJ.s:1429   .text:000000000000091c .L0 
     /tmp/ccvL8NpJ.s:1430   .text:000000000000091c .L0 
     /tmp/ccvL8NpJ.s:1432   .text:0000000000000920 .L0 
     /tmp/ccvL8NpJ.s:1435   .text:0000000000000924 .L0 
     /tmp/ccvL8NpJ.s:1436   .text:0000000000000924 .L0 
     /tmp/ccvL8NpJ.s:1438   .text:0000000000000928 .L0 
     /tmp/ccvL8NpJ.s:1441   .text:000000000000092c .L0 
     /tmp/ccvL8NpJ.s:1442   .text:000000000000092c .L0 
     /tmp/ccvL8NpJ.s:1444   .text:0000000000000930 .L0 
     /tmp/ccvL8NpJ.s:1447   .text:0000000000000934 .L0 
     /tmp/ccvL8NpJ.s:1448   .text:0000000000000934 .L0 
     /tmp/ccvL8NpJ.s:1450   .text:0000000000000938 .L0 
     /tmp/ccvL8NpJ.s:1453   .text:000000000000093c .L0 
     /tmp/ccvL8NpJ.s:1454   .text:000000000000093c .L0 
     /tmp/ccvL8NpJ.s:1461   .text:0000000000000940 .L0 
     /tmp/ccvL8NpJ.s:1465   .text:0000000000000944 .L0 
     /tmp/ccvL8NpJ.s:1466   .text:0000000000000944 .L0 
     /tmp/ccvL8NpJ.s:1469   .text:000000000000094c .L0 
     /tmp/ccvL8NpJ.s:1470   .text:000000000000094c .L0 
     /tmp/ccvL8NpJ.s:1473   .text:0000000000000950 .L0 
     /tmp/ccvL8NpJ.s:1474   .text:0000000000000950 .L0 
     /tmp/ccvL8NpJ.s:1477   .text:0000000000000954 .L0 
     /tmp/ccvL8NpJ.s:1483   .text:0000000000000958 .L0 
     /tmp/ccvL8NpJ.s:1484   .text:0000000000000958 .L0 
     /tmp/ccvL8NpJ.s:1487   .text:000000000000095c .L0 
     /tmp/ccvL8NpJ.s:1490   .text:0000000000000964 .L0 
     /tmp/ccvL8NpJ.s:1491   .text:0000000000000964 .L0 
     /tmp/ccvL8NpJ.s:1496   .text:000000000000096c .L0 
     /tmp/ccvL8NpJ.s:1497   .text:000000000000096c .L0 
GAS LISTING /tmp/ccvL8NpJ.s 			page 73


     /tmp/ccvL8NpJ.s:1503   .text:000000000000097c .L0 
     /tmp/ccvL8NpJ.s:1504   .text:000000000000097c .L0 
     /tmp/ccvL8NpJ.s:1506   .text:0000000000000984 .L0 
     /tmp/ccvL8NpJ.s:1507   .text:0000000000000984 .L0 
     /tmp/ccvL8NpJ.s:1509   .text:0000000000000988 .L0 
     /tmp/ccvL8NpJ.s:1510   .text:0000000000000988 .L0 
     /tmp/ccvL8NpJ.s:1512   .text:000000000000098c .L0 
     /tmp/ccvL8NpJ.s:1515   .text:0000000000000990 .L0 
     /tmp/ccvL8NpJ.s:1518   .text:0000000000000994 .L0 
     /tmp/ccvL8NpJ.s:1521   .text:0000000000000998 .L0 
     /tmp/ccvL8NpJ.s:1524   .text:000000000000099c .L0 
     /tmp/ccvL8NpJ.s:1527   .text:00000000000009a0 .L0 
     /tmp/ccvL8NpJ.s:1531   .text:00000000000009a4 .L0 
     /tmp/ccvL8NpJ.s:1533   .text:00000000000009a4 .L0 
     /tmp/ccvL8NpJ.s:1534   .text:00000000000009a4 .L0 
     /tmp/ccvL8NpJ.s:1537   .text:00000000000009a8 .L0 
     /tmp/ccvL8NpJ.s:1538   .text:00000000000009a8 .L0 
     /tmp/ccvL8NpJ.s:1540   .text:00000000000009b0 .L0 
     /tmp/ccvL8NpJ.s:1554   .text:00000000000009b0 _ZN13SlabAllocator10initializeEPvm
     /tmp/ccvL8NpJ.s:1557   .text:00000000000009b0 .L0 
     /tmp/ccvL8NpJ.s:1559   .text:00000000000009b0 .L0 
     /tmp/ccvL8NpJ.s:1560   .text:00000000000009b4 .L0 
     /tmp/ccvL8NpJ.s:1565   .text:00000000000009c4 .L0 
     /tmp/ccvL8NpJ.s:1566   .text:00000000000009c4 .L0 
     /tmp/ccvL8NpJ.s:1567   .text:00000000000009c4 .L0 
     /tmp/ccvL8NpJ.s:1568   .text:00000000000009c4 .L0 
     /tmp/ccvL8NpJ.s:1570   .text:00000000000009c8 .L0 
     /tmp/ccvL8NpJ.s:1572   .text:00000000000009c8 .L0 
     /tmp/ccvL8NpJ.s:1573   .text:00000000000009c8 .L0 
     /tmp/ccvL8NpJ.s:1576   .text:00000000000009d0 .L0 
     /tmp/ccvL8NpJ.s:1577   .text:00000000000009d0 .L0 
     /tmp/ccvL8NpJ.s:1583   .text:00000000000009e8 .L0 
     /tmp/ccvL8NpJ.s:1586   .text:00000000000009f4 .L0 
     /tmp/ccvL8NpJ.s:1587   .text:00000000000009f4 .L0 
     /tmp/ccvL8NpJ.s:1589   .text:00000000000009f8 .L0 
     /tmp/ccvL8NpJ.s:1590   .text:00000000000009f8 .L0 
     /tmp/ccvL8NpJ.s:1592   .text:00000000000009fc .L0 
     /tmp/ccvL8NpJ.s:1593   .text:00000000000009fc .L0 
     /tmp/ccvL8NpJ.s:1595   .text:0000000000000a00 .L0 
     /tmp/ccvL8NpJ.s:1596   .text:0000000000000a00 .L0 
     /tmp/ccvL8NpJ.s:1598   .text:0000000000000a04 .L0 
     /tmp/ccvL8NpJ.s:1599   .text:0000000000000a04 .L0 
     /tmp/ccvL8NpJ.s:1601   .text:0000000000000a08 .L0 
     /tmp/ccvL8NpJ.s:1602   .text:0000000000000a08 .L0 
     /tmp/ccvL8NpJ.s:1605   .text:0000000000000a10 .L0 
     /tmp/ccvL8NpJ.s:1606   .text:0000000000000a10 .L0 
     /tmp/ccvL8NpJ.s:1609   .text:0000000000000a18 .L0 
     /tmp/ccvL8NpJ.s:1610   .text:0000000000000a18 .L0 
     /tmp/ccvL8NpJ.s:1614   .text:0000000000000a28 .L0 
     /tmp/ccvL8NpJ.s:1615   .text:0000000000000a28 .L0 
     /tmp/ccvL8NpJ.s:1619   .text:0000000000000a34 .L0 
     /tmp/ccvL8NpJ.s:1621   .text:0000000000000a38 .L0 
     /tmp/ccvL8NpJ.s:1622   .text:0000000000000a38 .L0 
     /tmp/ccvL8NpJ.s:1624   .text:0000000000000a3c .L0 
     /tmp/ccvL8NpJ.s:1625   .text:0000000000000a3c .L0 
     /tmp/ccvL8NpJ.s:1627   .text:0000000000000a40 .L0 
     /tmp/ccvL8NpJ.s:1628   .text:0000000000000a40 .L0 
GAS LISTING /tmp/ccvL8NpJ.s 			page 74


     /tmp/ccvL8NpJ.s:1630   .text:0000000000000a44 .L0 
     /tmp/ccvL8NpJ.s:1631   .text:0000000000000a44 .L0 
     /tmp/ccvL8NpJ.s:1633   .text:0000000000000a48 .L0 
     /tmp/ccvL8NpJ.s:1634   .text:0000000000000a48 .L0 
     /tmp/ccvL8NpJ.s:1636   .text:0000000000000a4c .L0 
     /tmp/ccvL8NpJ.s:1637   .text:0000000000000a4c .L0 
     /tmp/ccvL8NpJ.s:1640   .text:0000000000000a54 .L0 
     /tmp/ccvL8NpJ.s:1641   .text:0000000000000a54 .L0 
     /tmp/ccvL8NpJ.s:1644   .text:0000000000000a5c .L0 
     /tmp/ccvL8NpJ.s:1645   .text:0000000000000a5c .L0 
     /tmp/ccvL8NpJ.s:1651   .text:0000000000000a70 .L0 
     /tmp/ccvL8NpJ.s:1652   .text:0000000000000a70 .L0 
     /tmp/ccvL8NpJ.s:1657   .text:0000000000000a78 .L0 
     /tmp/ccvL8NpJ.s:1658   .text:0000000000000a78 .L0 
     /tmp/ccvL8NpJ.s:1660   .text:0000000000000a7c .L0 
     /tmp/ccvL8NpJ.s:1671   .text:0000000000000aa8 .L0 
     /tmp/ccvL8NpJ.s:1675   .text:0000000000000ab8 .L0 
     /tmp/ccvL8NpJ.s:1679   .text:0000000000000abc .L0 
     /tmp/ccvL8NpJ.s:1683   .text:0000000000000ac4 .L0 
     /tmp/ccvL8NpJ.s:1684   .text:0000000000000ac8 .L0 
     /tmp/ccvL8NpJ.s:1686   .text:0000000000000acc .L0 
     /tmp/ccvL8NpJ.s:1687   .text:0000000000000acc .L0 
     /tmp/ccvL8NpJ.s:1689   .text:0000000000000ad0 .L0 
     /tmp/ccvL8NpJ.s:1692   .text:0000000000000ad4 .L0 
     /tmp/ccvL8NpJ.s:1694   .text:0000000000000ad8 .L0 
     /tmp/ccvL8NpJ.s:1696   .text:0000000000000adc .L0 
     /tmp/ccvL8NpJ.s:1702   .text:0000000000000adc _ZN13SlabAllocator8freeSlotEP4Slabm
     /tmp/ccvL8NpJ.s:1705   .text:0000000000000adc .L0 
     /tmp/ccvL8NpJ.s:1707   .text:0000000000000adc .L0 
     /tmp/ccvL8NpJ.s:1709   .text:0000000000000adc .L0 
     /tmp/ccvL8NpJ.s:1710   .text:0000000000000adc .L0 
     /tmp/ccvL8NpJ.s:1712   .text:0000000000000ae0 .L0 
     /tmp/ccvL8NpJ.s:1715   .text:0000000000000ae8 .L0 
     /tmp/ccvL8NpJ.s:1720   .text:0000000000000af0 .L0 
     /tmp/ccvL8NpJ.s:1723   .text:0000000000000af8 .L0 
     /tmp/ccvL8NpJ.s:1726   .text:0000000000000afc .L0 
     /tmp/ccvL8NpJ.s:1727   .text:0000000000000b00 .L0 
     /tmp/ccvL8NpJ.s:1731   .text:0000000000000b0c .L0 
     /tmp/ccvL8NpJ.s:1732   .text:0000000000000b0c .L0 
     /tmp/ccvL8NpJ.s:1733   .text:0000000000000b0c .L0 
     /tmp/ccvL8NpJ.s:1735   .text:0000000000000b10 .L0 
     /tmp/ccvL8NpJ.s:1740   .text:0000000000000b14 .L0 
     /tmp/ccvL8NpJ.s:1741   .text:0000000000000b14 .L0 
     /tmp/ccvL8NpJ.s:1744   .text:0000000000000b1c .L0 
     /tmp/ccvL8NpJ.s:1752   .text:0000000000000b2c .L0 
     /tmp/ccvL8NpJ.s:1753   .text:0000000000000b2c .L0 
     /tmp/ccvL8NpJ.s:1754   .text:0000000000000b2c .L0 
     /tmp/ccvL8NpJ.s:1759   .text:0000000000000b30 .L0 
     /tmp/ccvL8NpJ.s:1761   .text:0000000000000b34 .L0 
     /tmp/ccvL8NpJ.s:1764   .text:0000000000000b38 .L0 
     /tmp/ccvL8NpJ.s:1768   .text:0000000000000b3c .L0 
     /tmp/ccvL8NpJ.s:1769   .text:0000000000000b3c .L0 
     /tmp/ccvL8NpJ.s:1775   .text:0000000000000b44 .L0 
     /tmp/ccvL8NpJ.s:1776   .text:0000000000000b44 .L0 
     /tmp/ccvL8NpJ.s:1777   .text:0000000000000b44 .L0 
     /tmp/ccvL8NpJ.s:1782   .text:0000000000000b48 .L0 
     /tmp/ccvL8NpJ.s:1784   .text:0000000000000b4c .L0 
GAS LISTING /tmp/ccvL8NpJ.s 			page 75


     /tmp/ccvL8NpJ.s:1786   .text:0000000000000b50 .L0 
     /tmp/ccvL8NpJ.s:1792   .text:0000000000000b54 .L0 
     /tmp/ccvL8NpJ.s:1795   .text:0000000000000b54 .L0 
     /tmp/ccvL8NpJ.s:1796   .text:0000000000000b54 .L0 
     /tmp/ccvL8NpJ.s:1798   .text:0000000000000b58 .L0 
     /tmp/ccvL8NpJ.s:1799   .text:0000000000000b58 .L0 
     /tmp/ccvL8NpJ.s:1801   .text:0000000000000b5c .L0 
     /tmp/ccvL8NpJ.s:1803   .text:0000000000000b60 .L0 
     /tmp/ccvL8NpJ.s:1805   .text:0000000000000b64 .L0 
     /tmp/ccvL8NpJ.s:1806   .text:0000000000000b64 .L0 
     /tmp/ccvL8NpJ.s:1813   .text:0000000000000b70 .L0 
     /tmp/ccvL8NpJ.s:1814   .text:0000000000000b74 .L0 
     /tmp/ccvL8NpJ.s:1815   .text:0000000000000b74 .L0 
     /tmp/ccvL8NpJ.s:1817   .text:0000000000000b78 .L0 
     /tmp/ccvL8NpJ.s:1818   .text:0000000000000b78 .L0 
     /tmp/ccvL8NpJ.s:1820   .text:0000000000000b7c .L0 
     /tmp/ccvL8NpJ.s:1823   .text:0000000000000b80 .L0 
     /tmp/ccvL8NpJ.s:1827   .text:0000000000000b84 .L0 
     /tmp/ccvL8NpJ.s:1831   .text:0000000000000b84 .L0 
     /tmp/ccvL8NpJ.s:1833   .text:0000000000000b88 .L0 
     /tmp/ccvL8NpJ.s:1838   .text:0000000000000b90 .L0 
     /tmp/ccvL8NpJ.s:1840   .text:0000000000000b94 .L0 
     /tmp/ccvL8NpJ.s:1845   .text:0000000000000b9c .L0 
     /tmp/ccvL8NpJ.s:1846   .text:0000000000000b9c .L0 
     /tmp/ccvL8NpJ.s:1851   .text:0000000000000ba8 .L0 
     /tmp/ccvL8NpJ.s:1852   .text:0000000000000ba8 .L0 
     /tmp/ccvL8NpJ.s:1854   .text:0000000000000bac .L0 
     /tmp/ccvL8NpJ.s:1856   .text:0000000000000bb0 .L0 
     /tmp/ccvL8NpJ.s:1859   .text:0000000000000bb8 .L0 
     /tmp/ccvL8NpJ.s:1860   .text:0000000000000bb8 .L0 
     /tmp/ccvL8NpJ.s:1867   .text:0000000000000bcc .L0 
     /tmp/ccvL8NpJ.s:1868   .text:0000000000000bcc .L0 
     /tmp/ccvL8NpJ.s:1873   .text:0000000000000bdc .L0 
     /tmp/ccvL8NpJ.s:1874   .text:0000000000000bdc .L0 
     /tmp/ccvL8NpJ.s:1894   .text:0000000000000bf8 _ZN13SlabAllocator10freeObjectEP5CachePKv
     /tmp/ccvL8NpJ.s:1881   .text:0000000000000bf4 .L0 
     /tmp/ccvL8NpJ.s:1882   .text:0000000000000bf4 .L0 
     /tmp/ccvL8NpJ.s:1883   .text:0000000000000bf4 .L0 
     /tmp/ccvL8NpJ.s:1884   .text:0000000000000bf4 .L0 
     /tmp/ccvL8NpJ.s:1888   .text:0000000000000bf8 .L0 
     /tmp/ccvL8NpJ.s:1897   .text:0000000000000bf8 .L0 
     /tmp/ccvL8NpJ.s:1899   .text:0000000000000bf8 .L0 
     /tmp/ccvL8NpJ.s:1900   .text:0000000000000bfc .L0 
     /tmp/ccvL8NpJ.s:1905   .text:0000000000000c0c .L0 
     /tmp/ccvL8NpJ.s:1906   .text:0000000000000c0c .L0 
     /tmp/ccvL8NpJ.s:1907   .text:0000000000000c0c .L0 
     /tmp/ccvL8NpJ.s:1908   .text:0000000000000c0c .L0 
     /tmp/ccvL8NpJ.s:1910   .text:0000000000000c10 .L0 
     /tmp/ccvL8NpJ.s:1914   .text:0000000000000c18 .L0 
     /tmp/ccvL8NpJ.s:1915   .text:0000000000000c18 .L0 
     /tmp/ccvL8NpJ.s:1917   .text:0000000000000c1c .L0 
     /tmp/ccvL8NpJ.s:1919   .text:0000000000000c20 .L0 
     /tmp/ccvL8NpJ.s:1920   .text:0000000000000c20 .L0 
     /tmp/ccvL8NpJ.s:1926   .text:0000000000000c28 .L0 
     /tmp/ccvL8NpJ.s:1927   .text:0000000000000c28 .L0 
     /tmp/ccvL8NpJ.s:1929   .text:0000000000000c2c .L0 
     /tmp/ccvL8NpJ.s:1931   .text:0000000000000c30 .L0 
GAS LISTING /tmp/ccvL8NpJ.s 			page 76


     /tmp/ccvL8NpJ.s:1932   .text:0000000000000c30 .L0 
     /tmp/ccvL8NpJ.s:1937   .text:0000000000000c38 .L0 
     /tmp/ccvL8NpJ.s:1938   .text:0000000000000c38 .L0 
     /tmp/ccvL8NpJ.s:1947   .text:0000000000000c40 .L0 
     /tmp/ccvL8NpJ.s:1948   .text:0000000000000c40 .L0 
     /tmp/ccvL8NpJ.s:1953   .text:0000000000000c44 .L0 
     /tmp/ccvL8NpJ.s:1954   .text:0000000000000c44 .L0 
     /tmp/ccvL8NpJ.s:1960   .text:0000000000000c48 .L0 
     /tmp/ccvL8NpJ.s:1961   .text:0000000000000c48 .L0 
     /tmp/ccvL8NpJ.s:1962   .text:0000000000000c48 .L0 
     /tmp/ccvL8NpJ.s:1964   .text:0000000000000c4c .L0 
     /tmp/ccvL8NpJ.s:1966   .text:0000000000000c50 .L0 
     /tmp/ccvL8NpJ.s:1968   .text:0000000000000c54 .L0 
     /tmp/ccvL8NpJ.s:1970   .text:0000000000000c58 .L0 
     /tmp/ccvL8NpJ.s:1972   .text:0000000000000c5c .L0 
     /tmp/ccvL8NpJ.s:1980   .text:0000000000000c60 .L0 
     /tmp/ccvL8NpJ.s:1984   .text:0000000000000c60 .L0 
     /tmp/ccvL8NpJ.s:1986   .text:0000000000000c60 .L0 
     /tmp/ccvL8NpJ.s:1988   .text:0000000000000c64 .L0 
     /tmp/ccvL8NpJ.s:1991   .text:0000000000000c68 .L0 
     /tmp/ccvL8NpJ.s:1992   .text:0000000000000c68 .L0 
     /tmp/ccvL8NpJ.s:1995   .text:0000000000000c6c .L0 
     /tmp/ccvL8NpJ.s:1996   .text:0000000000000c6c .L0 
     /tmp/ccvL8NpJ.s:2001   .text:0000000000000c78 .L0 
     /tmp/ccvL8NpJ.s:2002   .text:0000000000000c78 .L0 
     /tmp/ccvL8NpJ.s:2010   .text:0000000000000c80 .L0 
     /tmp/ccvL8NpJ.s:2016   .text:0000000000000c84 .L0 
     /tmp/ccvL8NpJ.s:2020   .text:0000000000000c88 .L0 
     /tmp/ccvL8NpJ.s:2021   .text:0000000000000c8c .L0 
     /tmp/ccvL8NpJ.s:2022   .text:0000000000000c8c .L0 
     /tmp/ccvL8NpJ.s:2024   .text:0000000000000c90 .L0 
     /tmp/ccvL8NpJ.s:2025   .text:0000000000000c90 .L0 
     /tmp/ccvL8NpJ.s:2027   .text:0000000000000c94 .L0 
     /tmp/ccvL8NpJ.s:2030   .text:0000000000000c98 .L0 
     /tmp/ccvL8NpJ.s:2033   .text:0000000000000c9c .L0 
     /tmp/ccvL8NpJ.s:2037   .text:0000000000000ca0 .L0 
     /tmp/ccvL8NpJ.s:2039   .text:0000000000000ca0 .L0 
     /tmp/ccvL8NpJ.s:2040   .text:0000000000000ca0 .L0 
     /tmp/ccvL8NpJ.s:2049   .text:0000000000000ca8 .L0 
     /tmp/ccvL8NpJ.s:2050   .text:0000000000000ca8 .L0 
     /tmp/ccvL8NpJ.s:2055   .text:0000000000000cac .L0 
     /tmp/ccvL8NpJ.s:2056   .text:0000000000000cac .L0 
     /tmp/ccvL8NpJ.s:2062   .text:0000000000000cb0 .L0 
     /tmp/ccvL8NpJ.s:2063   .text:0000000000000cb0 .L0 
     /tmp/ccvL8NpJ.s:2064   .text:0000000000000cb0 .L0 
     /tmp/ccvL8NpJ.s:2066   .text:0000000000000cb4 .L0 
     /tmp/ccvL8NpJ.s:2068   .text:0000000000000cb8 .L0 
     /tmp/ccvL8NpJ.s:2070   .text:0000000000000cbc .L0 
     /tmp/ccvL8NpJ.s:2072   .text:0000000000000cc0 .L0 
     /tmp/ccvL8NpJ.s:2074   .text:0000000000000cc4 .L0 
     /tmp/ccvL8NpJ.s:2082   .text:0000000000000cc8 .L0 
     /tmp/ccvL8NpJ.s:2086   .text:0000000000000cc8 .L0 
     /tmp/ccvL8NpJ.s:2088   .text:0000000000000cc8 .L0 
     /tmp/ccvL8NpJ.s:2090   .text:0000000000000ccc .L0 
     /tmp/ccvL8NpJ.s:2093   .text:0000000000000cd0 .L0 
     /tmp/ccvL8NpJ.s:2094   .text:0000000000000cd0 .L0 
     /tmp/ccvL8NpJ.s:2097   .text:0000000000000cd4 .L0 
GAS LISTING /tmp/ccvL8NpJ.s 			page 77


     /tmp/ccvL8NpJ.s:2098   .text:0000000000000cd4 .L0 
     /tmp/ccvL8NpJ.s:2105   .text:0000000000000ce4 .L0 
     /tmp/ccvL8NpJ.s:2106   .text:0000000000000ce4 .L0 
     /tmp/ccvL8NpJ.s:2113   .text:0000000000000cec .L0 
     /tmp/ccvL8NpJ.s:2119   .text:0000000000000cec _ZN13SlabAllocator10freeBufferEPKv
     /tmp/ccvL8NpJ.s:2122   .text:0000000000000cec .L0 
     /tmp/ccvL8NpJ.s:2124   .text:0000000000000cec .L0 
     /tmp/ccvL8NpJ.s:2125   .text:0000000000000cf0 .L0 
     /tmp/ccvL8NpJ.s:2130   .text:0000000000000d00 .L0 
     /tmp/ccvL8NpJ.s:2131   .text:0000000000000d00 .L0 
     /tmp/ccvL8NpJ.s:2132   .text:0000000000000d00 .L0 
     /tmp/ccvL8NpJ.s:2133   .text:0000000000000d00 .L0 
     /tmp/ccvL8NpJ.s:2135   .text:0000000000000d04 .L0 
     /tmp/ccvL8NpJ.s:2140   .text:0000000000000d08 .L0 
     /tmp/ccvL8NpJ.s:2141   .text:0000000000000d08 .L0 
     /tmp/ccvL8NpJ.s:2145   .text:0000000000000d0c .L0 
     /tmp/ccvL8NpJ.s:2148   .text:0000000000000d14 .L0 
     /tmp/ccvL8NpJ.s:2149   .text:0000000000000d14 .L0 
     /tmp/ccvL8NpJ.s:2157   .text:0000000000000d34 .L0 
     /tmp/ccvL8NpJ.s:2159   .text:0000000000000d38 .L0 
     /tmp/ccvL8NpJ.s:2166   .text:0000000000000d40 .L0 
     /tmp/ccvL8NpJ.s:2167   .text:0000000000000d44 .L0 
     /tmp/ccvL8NpJ.s:2169   .text:0000000000000d48 .L0 
     /tmp/ccvL8NpJ.s:2170   .text:0000000000000d48 .L0 
     /tmp/ccvL8NpJ.s:2172   .text:0000000000000d4c .L0 
     /tmp/ccvL8NpJ.s:2175   .text:0000000000000d50 .L0 
     /tmp/ccvL8NpJ.s:2178   .text:0000000000000d54 .L0 
     /tmp/ccvL8NpJ.s:2180   .text:0000000000000d58 .L0 
     /tmp/ccvL8NpJ.s:2186   .text:0000000000000d58 _ZN13SlabAllocator11deleteCacheERP5Cache
     /tmp/ccvL8NpJ.s:2189   .text:0000000000000d58 .L0 
     /tmp/ccvL8NpJ.s:2191   .text:0000000000000d58 .L0 
     /tmp/ccvL8NpJ.s:2192   .text:0000000000000d5c .L0 
     /tmp/ccvL8NpJ.s:2197   .text:0000000000000d6c .L0 
     /tmp/ccvL8NpJ.s:2198   .text:0000000000000d6c .L0 
     /tmp/ccvL8NpJ.s:2199   .text:0000000000000d6c .L0 
     /tmp/ccvL8NpJ.s:2200   .text:0000000000000d6c .L0 
     /tmp/ccvL8NpJ.s:2202   .text:0000000000000d70 .L0 
     /tmp/ccvL8NpJ.s:2205   .text:0000000000000d74 .L0 
     /tmp/ccvL8NpJ.s:2206   .text:0000000000000d74 .L0 
     /tmp/ccvL8NpJ.s:2208   .text:0000000000000d78 .L0 
     /tmp/ccvL8NpJ.s:2214   .text:0000000000000d7c .L0 
     /tmp/ccvL8NpJ.s:2215   .text:0000000000000d7c .L0 
     /tmp/ccvL8NpJ.s:2220   .text:0000000000000d84 .L0 
     /tmp/ccvL8NpJ.s:2221   .text:0000000000000d84 .L0 
     /tmp/ccvL8NpJ.s:2222   .text:0000000000000d84 .L0 
     /tmp/ccvL8NpJ.s:2224   .text:0000000000000d88 .L0 
     /tmp/ccvL8NpJ.s:2228   .text:0000000000000d94 .L0 
     /tmp/ccvL8NpJ.s:2229   .text:0000000000000d94 .L0 
     /tmp/ccvL8NpJ.s:2231   .text:0000000000000d98 .L0 
     /tmp/ccvL8NpJ.s:2233   .text:0000000000000d9c .L0 
     /tmp/ccvL8NpJ.s:2236   .text:0000000000000da0 .L0 
     /tmp/ccvL8NpJ.s:2242   .text:0000000000000da4 .L0 
     /tmp/ccvL8NpJ.s:2243   .text:0000000000000da4 .L0 
     /tmp/ccvL8NpJ.s:2245   .text:0000000000000da8 .L0 
     /tmp/ccvL8NpJ.s:2251   .text:0000000000000dac .L0 
     /tmp/ccvL8NpJ.s:2252   .text:0000000000000dac .L0 
     /tmp/ccvL8NpJ.s:2257   .text:0000000000000db4 .L0 
GAS LISTING /tmp/ccvL8NpJ.s 			page 78


     /tmp/ccvL8NpJ.s:2258   .text:0000000000000db4 .L0 
     /tmp/ccvL8NpJ.s:2259   .text:0000000000000db4 .L0 
     /tmp/ccvL8NpJ.s:2261   .text:0000000000000db8 .L0 
     /tmp/ccvL8NpJ.s:2265   .text:0000000000000dc4 .L0 
     /tmp/ccvL8NpJ.s:2266   .text:0000000000000dc4 .L0 
     /tmp/ccvL8NpJ.s:2268   .text:0000000000000dc8 .L0 
     /tmp/ccvL8NpJ.s:2270   .text:0000000000000dcc .L0 
     /tmp/ccvL8NpJ.s:2273   .text:0000000000000dd0 .L0 
     /tmp/ccvL8NpJ.s:2279   .text:0000000000000dd4 .L0 
     /tmp/ccvL8NpJ.s:2280   .text:0000000000000dd4 .L0 
     /tmp/ccvL8NpJ.s:2282   .text:0000000000000dd8 .L0 
     /tmp/ccvL8NpJ.s:2288   .text:0000000000000ddc .L0 
     /tmp/ccvL8NpJ.s:2289   .text:0000000000000ddc .L0 
     /tmp/ccvL8NpJ.s:2294   .text:0000000000000de4 .L0 
     /tmp/ccvL8NpJ.s:2295   .text:0000000000000de4 .L0 
     /tmp/ccvL8NpJ.s:2296   .text:0000000000000de4 .L0 
     /tmp/ccvL8NpJ.s:2298   .text:0000000000000de8 .L0 
     /tmp/ccvL8NpJ.s:2302   .text:0000000000000df4 .L0 
     /tmp/ccvL8NpJ.s:2303   .text:0000000000000df4 .L0 
     /tmp/ccvL8NpJ.s:2305   .text:0000000000000df8 .L0 
     /tmp/ccvL8NpJ.s:2307   .text:0000000000000dfc .L0 
     /tmp/ccvL8NpJ.s:2310   .text:0000000000000e00 .L0 
     /tmp/ccvL8NpJ.s:2316   .text:0000000000000e04 .L0 
     /tmp/ccvL8NpJ.s:2317   .text:0000000000000e04 .L0 
     /tmp/ccvL8NpJ.s:2322   .text:0000000000000e18 .L0 
     /tmp/ccvL8NpJ.s:2323   .text:0000000000000e18 .L0 
     /tmp/ccvL8NpJ.s:2325   .text:0000000000000e1c .L0 
     /tmp/ccvL8NpJ.s:2326   .text:0000000000000e20 .L0 
     /tmp/ccvL8NpJ.s:2328   .text:0000000000000e24 .L0 
     /tmp/ccvL8NpJ.s:2329   .text:0000000000000e24 .L0 
     /tmp/ccvL8NpJ.s:2331   .text:0000000000000e28 .L0 
     /tmp/ccvL8NpJ.s:2334   .text:0000000000000e2c .L0 
     /tmp/ccvL8NpJ.s:2336   .text:0000000000000e30 .L0 
     /tmp/ccvL8NpJ.s:2338   .text:0000000000000e34 .L0 
     /tmp/ccvL8NpJ.s:2405   .data.rel.local:0000000000000000 _ZN13SlabAllocator5namesE
     /tmp/ccvL8NpJ.s:2394   .bss:0000000000000008 _ZN13SlabAllocator5sizeNE
     /tmp/ccvL8NpJ.s:2390   .bss:0000000000000000 _ZN13SlabAllocator14largeSlabCacheE
     /tmp/ccvL8NpJ.s:2398   .bss:0000000000000070 _ZN13SlabAllocator5cacheE
     /tmp/ccvL8NpJ.s:2387   .bss:0000000000000000 .LANCHOR0
     /tmp/ccvL8NpJ.s:2402   .data.rel.local:0000000000000000 .LANCHOR1
     /tmp/ccvL8NpJ.s:2425   .text:0000000000000e34 .L0 
     /tmp/ccvL8NpJ.s:82     .rodata.str1.8:0000000000000000 .LC0
     /tmp/ccvL8NpJ.s:143    .text:000000000000008c .L0 
     /tmp/ccvL8NpJ.s:85     .rodata.str1.8:0000000000000008 .LC1
     /tmp/ccvL8NpJ.s:145    .text:0000000000000098 .L0 
     /tmp/ccvL8NpJ.s:152    .text:00000000000000ac .L0 
     /tmp/ccvL8NpJ.s:88     .rodata.str1.8:0000000000000018 .LC2
     /tmp/ccvL8NpJ.s:154    .text:00000000000000b8 .L0 
     /tmp/ccvL8NpJ.s:160    .text:00000000000000cc .L0 
     /tmp/ccvL8NpJ.s:91     .rodata.str1.8:0000000000000030 .LC3
     /tmp/ccvL8NpJ.s:162    .text:00000000000000d8 .L0 
     /tmp/ccvL8NpJ.s:168    .text:00000000000000ec .L0 
     /tmp/ccvL8NpJ.s:94     .rodata.str1.8:0000000000000048 .LC4
     /tmp/ccvL8NpJ.s:170    .text:00000000000000f8 .L0 
     /tmp/ccvL8NpJ.s:176    .text:000000000000010c .L0 
     /tmp/ccvL8NpJ.s:97     .rodata.str1.8:0000000000000060 .LC5
     /tmp/ccvL8NpJ.s:178    .text:0000000000000118 .L0 
GAS LISTING /tmp/ccvL8NpJ.s 			page 79


     /tmp/ccvL8NpJ.s:184    .text:000000000000012c .L0 
     /tmp/ccvL8NpJ.s:100    .rodata.str1.8:0000000000000070 .LC6
     /tmp/ccvL8NpJ.s:186    .text:0000000000000138 .L0 
     /tmp/ccvL8NpJ.s:103    .rodata.str1.8:0000000000000090 .LC7
     /tmp/ccvL8NpJ.s:191    .text:0000000000000148 .L0 
     /tmp/ccvL8NpJ.s:106    .rodata.str1.8:00000000000000b0 .LC8
     /tmp/ccvL8NpJ.s:206    .text:0000000000000168 .L0 
     /tmp/ccvL8NpJ.s:109    .rodata.str1.8:00000000000000b8 .LC9
     /tmp/ccvL8NpJ.s:208    .text:0000000000000174 .L0 
     /tmp/ccvL8NpJ.s:227    .text:0000000000000198 .L0 
     /tmp/ccvL8NpJ.s:255    .rodata.str1.8:00000000000000c0 .LC10
     /tmp/ccvL8NpJ.s:299    .text:00000000000001e0 .L0 
     /tmp/ccvL8NpJ.s:310    .text:00000000000001fc .L0 
     /tmp/ccvL8NpJ.s:316    .text:0000000000000210 .L0 
     /tmp/ccvL8NpJ.s:258    .rodata.str1.8:00000000000000d0 .LC11
     /tmp/ccvL8NpJ.s:318    .text:000000000000021c .L0 
     /tmp/ccvL8NpJ.s:324    .text:0000000000000230 .L0 
     /tmp/ccvL8NpJ.s:261    .rodata.str1.8:00000000000000e0 .LC12
     /tmp/ccvL8NpJ.s:326    .text:000000000000023c .L0 
     /tmp/ccvL8NpJ.s:332    .text:0000000000000250 .L0 
     /tmp/ccvL8NpJ.s:264    .rodata.str1.8:00000000000000f8 .LC13
     /tmp/ccvL8NpJ.s:334    .text:000000000000025c .L0 
     /tmp/ccvL8NpJ.s:340    .text:0000000000000270 .L0 
     /tmp/ccvL8NpJ.s:267    .rodata.str1.8:0000000000000110 .LC14
     /tmp/ccvL8NpJ.s:342    .text:000000000000027c .L0 
     /tmp/ccvL8NpJ.s:356    .text:0000000000000298 .L0 
     /tmp/ccvL8NpJ.s:358    .text:00000000000002a4 .L0 
     /tmp/ccvL8NpJ.s:370    .text:00000000000002bc .L0 
     /tmp/ccvL8NpJ.s:376    .text:00000000000002d0 .L0 
     /tmp/ccvL8NpJ.s:270    .rodata.str1.8:0000000000000120 .LC15
     /tmp/ccvL8NpJ.s:378    .text:00000000000002dc .L0 
     /tmp/ccvL8NpJ.s:392    .text:00000000000002f8 .L0 
     /tmp/ccvL8NpJ.s:394    .text:0000000000000304 .L0 
     /tmp/ccvL8NpJ.s:406    .text:000000000000031c .L0 
     /tmp/ccvL8NpJ.s:412    .text:0000000000000330 .L0 
     /tmp/ccvL8NpJ.s:273    .rodata.str1.8:0000000000000130 .LC16
     /tmp/ccvL8NpJ.s:414    .text:000000000000033c .L0 
     /tmp/ccvL8NpJ.s:428    .text:0000000000000358 .L0 
     /tmp/ccvL8NpJ.s:430    .text:0000000000000364 .L0 
     /tmp/ccvL8NpJ.s:442    .text:000000000000037c .L0 
     /tmp/ccvL8NpJ.s:1096   .text:0000000000000728 .L0 
     /tmp/ccvL8NpJ.s:1329   .text:0000000000000874 .L0 
     /tmp/ccvL8NpJ.s:1384   .text:00000000000008d8 .L0 
     /tmp/ccvL8NpJ.s:1577   .text:00000000000009d0 .L0 
     /tmp/ccvL8NpJ.s:1583   .text:00000000000009e8 .L0 
     /tmp/ccvL8NpJ.s:1545   .rodata.str1.8:0000000000000140 .LC17
     /tmp/ccvL8NpJ.s:1610   .text:0000000000000a18 .L0 
     /tmp/ccvL8NpJ.s:1548   .rodata.str1.8:0000000000000150 .LC18
     /tmp/ccvL8NpJ.s:1646   .text:0000000000000a60 .L0 
     /tmp/ccvL8NpJ.s:1661   .text:0000000000000a80 .L0 
     /tmp/ccvL8NpJ.s:1671   .text:0000000000000aa8 .L0 
     /tmp/ccvL8NpJ.s:1875   .text:0000000000000be0 .L0 
     /tmp/ccvL8NpJ.s:2150   .text:0000000000000d18 .L0 
     /tmp/ccvL8NpJ.s:2318   .text:0000000000000e08 .L0 
     /tmp/ccvL8NpJ.s:59     .text:000000000000004c .L2
     /tmp/ccvL8NpJ.s:33     .text:0000000000000020 .L3
     /tmp/ccvL8NpJ.s:248    .text:00000000000001c0 .L10
GAS LISTING /tmp/ccvL8NpJ.s 			page 80


     /tmp/ccvL8NpJ.s:214    .text:0000000000000188 .L8
     /tmp/ccvL8NpJ.s:200    .text:0000000000000160 .L13
     /tmp/ccvL8NpJ.s:367    .text:00000000000002bc .L15
     /tmp/ccvL8NpJ.s:349    .text:0000000000000290 .L16
     /tmp/ccvL8NpJ.s:403    .text:000000000000031c .L17
     /tmp/ccvL8NpJ.s:385    .text:00000000000002f0 .L18
     /tmp/ccvL8NpJ.s:439    .text:000000000000037c .L19
     /tmp/ccvL8NpJ.s:421    .text:0000000000000350 .L20
     /tmp/ccvL8NpJ.s:487    .text:00000000000003c0 .L23
     /tmp/ccvL8NpJ.s:639    .text:00000000000004b4 .L31
     /tmp/ccvL8NpJ.s:568    .text:000000000000044c .L27
     /tmp/ccvL8NpJ.s:601    .text:000000000000047c .L28
     /tmp/ccvL8NpJ.s:583    .text:000000000000045c .L29
     /tmp/ccvL8NpJ.s:647    .text:00000000000004bc .L32
     /tmp/ccvL8NpJ.s:652    .text:00000000000004c4 .L33
     /tmp/ccvL8NpJ.s:613    .text:0000000000000488 .L30
     /tmp/ccvL8NpJ.s:655    .text:00000000000004c8 .L26
     /tmp/ccvL8NpJ.s:731    .text:000000000000052c .L40
     /tmp/ccvL8NpJ.s:705    .text:0000000000000508 .L37
     /tmp/ccvL8NpJ.s:716    .text:0000000000000518 .L38
     /tmp/ccvL8NpJ.s:694    .text:00000000000004f8 .L36
     /tmp/ccvL8NpJ.s:944    .text:000000000000065c .L52
     /tmp/ccvL8NpJ.s:849    .text:00000000000005dc .L54
     /tmp/ccvL8NpJ.s:821    .text:00000000000005ac .L51
     /tmp/ccvL8NpJ.s:929    .text:0000000000000644 .L55
     /tmp/ccvL8NpJ.s:937    .text:0000000000000650 .L48
     /tmp/ccvL8NpJ.s:913    .text:000000000000062c .L50
     /tmp/ccvL8NpJ.s:951    .text:0000000000000660 .L43
     /tmp/ccvL8NpJ.s:878    .text:0000000000000600 .L47
     /tmp/ccvL8NpJ.s:899    .text:0000000000000614 .L49
     /tmp/ccvL8NpJ.s:1014   .text:00000000000006b4 .L57
     /tmp/ccvL8NpJ.s:996    .text:000000000000069c .L58
     /tmp/ccvL8NpJ.s:1041   .text:00000000000006d8 .L69
     /tmp/ccvL8NpJ.s:1064   .text:00000000000006f4 .L60
     /tmp/ccvL8NpJ.s:1047   .text:00000000000006dc .L61
     /tmp/ccvL8NpJ.s:1021   .text:00000000000006b8 .L56
     /tmp/ccvL8NpJ.s:1092   .text:0000000000000728 .L62
     /tmp/ccvL8NpJ.s:1124   .text:000000000000076c .L63
     /tmp/ccvL8NpJ.s:1163   .text:00000000000007a8 .L64
     /tmp/ccvL8NpJ.s:1145   .text:0000000000000788 .L65
     /tmp/ccvL8NpJ.s:1201   .text:00000000000007e0 .L66
     /tmp/ccvL8NpJ.s:1175   .text:00000000000007b4 .L67
     /tmp/ccvL8NpJ.s:1302   .text:0000000000000854 .L71
     /tmp/ccvL8NpJ.s:1286   .text:0000000000000840 .L72
     /tmp/ccvL8NpJ.s:1344   .text:000000000000089c .L74
     /tmp/ccvL8NpJ.s:1502   .text:000000000000097c .L79
     /tmp/ccvL8NpJ.s:1478   .text:0000000000000958 .L81
     /tmp/ccvL8NpJ.s:1462   .text:0000000000000944 .L82
     /tmp/ccvL8NpJ.s:1530   .text:00000000000009a4 .L83
     /tmp/ccvL8NpJ.s:1494   .text:000000000000096c .L84
     /tmp/ccvL8NpJ.s:1677   .text:0000000000000abc .L88
     /tmp/ccvL8NpJ.s:1655   .text:0000000000000a78 .L90
     /tmp/ccvL8NpJ.s:1880   .text:0000000000000bf4 .L100
     /tmp/ccvL8NpJ.s:1826   .text:0000000000000b84 .L93
     /tmp/ccvL8NpJ.s:1836   .text:0000000000000b90 .L103
     /tmp/ccvL8NpJ.s:1843   .text:0000000000000b9c .L104
     /tmp/ccvL8NpJ.s:1809   .text:0000000000000b70 .L91
GAS LISTING /tmp/ccvL8NpJ.s 			page 81


     /tmp/ccvL8NpJ.s:1765   .text:0000000000000b3c .L94
     /tmp/ccvL8NpJ.s:1787   .text:0000000000000b54 .L96
     /tmp/ccvL8NpJ.s:1865   .text:0000000000000bcc .L98
     /tmp/ccvL8NpJ.s:1924   .text:0000000000000c28 .L106
     /tmp/ccvL8NpJ.s:1935   .text:0000000000000c38 .L107
     /tmp/ccvL8NpJ.s:1950   .text:0000000000000c44 .L110
     /tmp/ccvL8NpJ.s:2005   .text:0000000000000c80 .L115
     /tmp/ccvL8NpJ.s:1942   .text:0000000000000c40 .L109
     /tmp/ccvL8NpJ.s:2012   .text:0000000000000c84 .L108
     /tmp/ccvL8NpJ.s:2036   .text:0000000000000ca0 .L117
     /tmp/ccvL8NpJ.s:2052   .text:0000000000000cac .L114
     /tmp/ccvL8NpJ.s:2018   .text:0000000000000c88 .L111
     /tmp/ccvL8NpJ.s:2044   .text:0000000000000ca8 .L113
     /tmp/ccvL8NpJ.s:2163   .text:0000000000000d40 .L118
     /tmp/ccvL8NpJ.s:2143   .text:0000000000000d0c .L120
     /tmp/ccvL8NpJ.s:2237   .text:0000000000000da4 .L123
     /tmp/ccvL8NpJ.s:2210   .text:0000000000000d7c .L124
     /tmp/ccvL8NpJ.s:2274   .text:0000000000000dd4 .L125
     /tmp/ccvL8NpJ.s:2247   .text:0000000000000dac .L126
     /tmp/ccvL8NpJ.s:2311   .text:0000000000000e04 .L127
     /tmp/ccvL8NpJ.s:2284   .text:0000000000000ddc .L128
     /tmp/ccvL8NpJ.s:2344   .rodata.str1.8:0000000000000168 .LC19
     /tmp/ccvL8NpJ.s:2347   .rodata.str1.8:0000000000000180 .LC20
     /tmp/ccvL8NpJ.s:2350   .rodata.str1.8:0000000000000198 .LC21
     /tmp/ccvL8NpJ.s:2353   .rodata.str1.8:00000000000001b0 .LC22
     /tmp/ccvL8NpJ.s:2356   .rodata.str1.8:00000000000001c8 .LC23
     /tmp/ccvL8NpJ.s:2359   .rodata.str1.8:00000000000001e0 .LC24
     /tmp/ccvL8NpJ.s:2362   .rodata.str1.8:00000000000001f8 .LC25
     /tmp/ccvL8NpJ.s:2365   .rodata.str1.8:0000000000000210 .LC26
     /tmp/ccvL8NpJ.s:2368   .rodata.str1.8:0000000000000228 .LC27
     /tmp/ccvL8NpJ.s:2371   .rodata.str1.8:0000000000000240 .LC28
     /tmp/ccvL8NpJ.s:2374   .rodata.str1.8:0000000000000258 .LC29
     /tmp/ccvL8NpJ.s:2377   .rodata.str1.8:0000000000000270 .LC30
     /tmp/ccvL8NpJ.s:2380   .rodata.str1.8:0000000000000288 .LC31
     /tmp/ccvL8NpJ.s:5287   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccvL8NpJ.s:7477   .debug_str:0000000000000099 .LASF162
     /tmp/ccvL8NpJ.s:7617   .debug_str:00000000000005ea .LASF163
     /tmp/ccvL8NpJ.s:7483   .debug_str:000000000000017b .LASF164
     /tmp/ccvL8NpJ.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccvL8NpJ.s:2420   .text:0000000000000e34 .Letext0
     /tmp/ccvL8NpJ.s:7461   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccvL8NpJ.s:7585   .debug_str:00000000000004d8 .LASF0
     /tmp/ccvL8NpJ.s:7571   .debug_str:0000000000000452 .LASF1
     /tmp/ccvL8NpJ.s:7599   .debug_str:0000000000000537 .LASF2
     /tmp/ccvL8NpJ.s:7683   .debug_str:00000000000007ee .LASF3
     /tmp/ccvL8NpJ.s:7691   .debug_str:0000000000000827 .LASF4
     /tmp/ccvL8NpJ.s:7469   .debug_str:000000000000004d .LASF5
     /tmp/ccvL8NpJ.s:7663   .debug_str:000000000000076a .LASF6
     /tmp/ccvL8NpJ.s:7591   .debug_str:00000000000004f5 .LASF7
     /tmp/ccvL8NpJ.s:7539   .debug_str:0000000000000348 .LASF8
     /tmp/ccvL8NpJ.s:7551   .debug_str:00000000000003cd .LASF9
     /tmp/ccvL8NpJ.s:7497   .debug_str:0000000000000220 .LASF10
     /tmp/ccvL8NpJ.s:7533   .debug_str:0000000000000315 .LASF11
     /tmp/ccvL8NpJ.s:7507   .debug_str:000000000000024e .LASF12
     /tmp/ccvL8NpJ.s:7495   .debug_str:0000000000000210 .LASF13
     /tmp/ccvL8NpJ.s:7717   .debug_str:00000000000008e1 .LASF14
     /tmp/ccvL8NpJ.s:7523   .debug_str:00000000000002cb .LASF15
GAS LISTING /tmp/ccvL8NpJ.s 			page 82


     /tmp/ccvL8NpJ.s:7705   .debug_str:00000000000008a7 .LASF16
     /tmp/ccvL8NpJ.s:7725   .debug_str:000000000000092f .LASF17
     /tmp/ccvL8NpJ.s:7695   .debug_str:000000000000083c .LASF18
     /tmp/ccvL8NpJ.s:7657   .debug_str:000000000000073e .LASF19
     /tmp/ccvL8NpJ.s:7769   .debug_str:0000000000000a71 .LASF20
     /tmp/ccvL8NpJ.s:7685   .debug_str:00000000000007fc .LASF21
     /tmp/ccvL8NpJ.s:7579   .debug_str:00000000000004ba .LASF22
     /tmp/ccvL8NpJ.s:7587   .debug_str:00000000000004ea .LASF45
     /tmp/ccvL8NpJ.s:7739   .debug_str:0000000000000995 .LASF165
     /tmp/ccvL8NpJ.s:7499   .debug_str:000000000000022f .LASF91
     /tmp/ccvL8NpJ.s:7701   .debug_str:0000000000000874 .LASF23
     /tmp/ccvL8NpJ.s:7775   .debug_str:0000000000000a99 .LASF25
     /tmp/ccvL8NpJ.s:7745   .debug_str:00000000000009b2 .LASF27
     /tmp/ccvL8NpJ.s:7659   .debug_str:000000000000074c .LASF29
     /tmp/ccvL8NpJ.s:7755   .debug_str:0000000000000a0a .LASF24
     /tmp/ccvL8NpJ.s:7753   .debug_str:00000000000009f7 .LASF26
     /tmp/ccvL8NpJ.s:7503   .debug_str:000000000000023f .LASF60
     /tmp/ccvL8NpJ.s:7723   .debug_str:0000000000000919 .LASF62
     /tmp/ccvL8NpJ.s:7735   .debug_str:0000000000000983 .LASF28
     /tmp/ccvL8NpJ.s:7537   .debug_str:000000000000032f .LASF30
     /tmp/ccvL8NpJ.s:7561   .debug_str:000000000000040d .LASF31
     /tmp/ccvL8NpJ.s:7777   .debug_str:0000000000000ab3 .LASF32
     /tmp/ccvL8NpJ.s:7517   .debug_str:0000000000000284 .LASF33
     /tmp/ccvL8NpJ.s:7559   .debug_str:0000000000000406 .LASF166
     /tmp/ccvL8NpJ.s:7713   .debug_str:00000000000008d6 .LASF34
     /tmp/ccvL8NpJ.s:7639   .debug_str:00000000000006da .LASF35
     /tmp/ccvL8NpJ.s:7583   .debug_str:00000000000004d3 .LASF36
     /tmp/ccvL8NpJ.s:7689   .debug_str:0000000000000816 .LASF37
     /tmp/ccvL8NpJ.s:7529   .debug_str:0000000000000301 .LASF38
     /tmp/ccvL8NpJ.s:7557   .debug_str:00000000000003f3 .LASF39
     /tmp/ccvL8NpJ.s:7525   .debug_str:00000000000002e1 .LASF40
     /tmp/ccvL8NpJ.s:7463   .debug_str:0000000000000000 .LASF42
     /tmp/ccvL8NpJ.s:7565   .debug_str:0000000000000437 .LASF41
     /tmp/ccvL8NpJ.s:7733   .debug_str:000000000000096e .LASF43
     /tmp/ccvL8NpJ.s:7785   .debug_str:0000000000000b3a .LASF167
     /tmp/ccvL8NpJ.s:7563   .debug_str:0000000000000422 .LASF168
     /tmp/ccvL8NpJ.s:7677   .debug_str:00000000000007bd .LASF44
     /tmp/ccvL8NpJ.s:7741   .debug_str:000000000000099b .LASF46
     /tmp/ccvL8NpJ.s:7631   .debug_str:0000000000000690 .LASF47
     /tmp/ccvL8NpJ.s:7669   .debug_str:000000000000078f .LASF48
     /tmp/ccvL8NpJ.s:7787   .debug_str:0000000000000b43 .LASF49
     /tmp/ccvL8NpJ.s:7511   .debug_str:0000000000000265 .LASF50
     /tmp/ccvL8NpJ.s:7729   .debug_str:0000000000000954 .LASF51
     /tmp/ccvL8NpJ.s:7761   .debug_str:0000000000000a35 .LASF52
     /tmp/ccvL8NpJ.s:7771   .debug_str:0000000000000a7f .LASF53
     /tmp/ccvL8NpJ.s:7573   .debug_str:000000000000045f .LASF54
     /tmp/ccvL8NpJ.s:7671   .debug_str:000000000000079b .LASF55
     /tmp/ccvL8NpJ.s:7601   .debug_str:000000000000054a .LASF56
     /tmp/ccvL8NpJ.s:7765   .debug_str:0000000000000a47 .LASF57
     /tmp/ccvL8NpJ.s:7545   .debug_str:000000000000038d .LASF58
     /tmp/ccvL8NpJ.s:7757   .debug_str:0000000000000a0f .LASF59
     /tmp/ccvL8NpJ.s:7641   .debug_str:00000000000006df .LASF61
     /tmp/ccvL8NpJ.s:7721   .debug_str:00000000000008fd .LASF63
     /tmp/ccvL8NpJ.s:7675   .debug_str:00000000000007b3 .LASF64
     /tmp/ccvL8NpJ.s:7679   .debug_str:00000000000007c2 .LASF65
     /tmp/ccvL8NpJ.s:7749   .debug_str:00000000000009db .LASF66
     /tmp/ccvL8NpJ.s:7799   .debug_str:0000000000000b9a .LASF67
GAS LISTING /tmp/ccvL8NpJ.s 			page 83


     /tmp/ccvL8NpJ.s:7767   .debug_str:0000000000000a52 .LASF169
     /tmp/ccvL8NpJ.s:7719   .debug_str:00000000000008ed .LASF68
     /tmp/ccvL8NpJ.s:7805   .debug_str:0000000000000be6 .LASF69
     /tmp/ccvL8NpJ.s:7665   .debug_str:000000000000077d .LASF70
     /tmp/ccvL8NpJ.s:7629   .debug_str:0000000000000672 .LASF71
     /tmp/ccvL8NpJ.s:7791   .debug_str:0000000000000b60 .LASF72
     /tmp/ccvL8NpJ.s:7613   .debug_str:00000000000005c3 .LASF73
     /tmp/ccvL8NpJ.s:7467   .debug_str:0000000000000047 .LASF74
     /tmp/ccvL8NpJ.s:7727   .debug_str:0000000000000934 .LASF75
     /tmp/ccvL8NpJ.s:7763   .debug_str:0000000000000a41 .LASF76
     /tmp/ccvL8NpJ.s:7589   .debug_str:00000000000004f0 .LASF77
     /tmp/ccvL8NpJ.s:7795   .debug_str:0000000000000b86 .LASF78
     /tmp/ccvL8NpJ.s:7647   .debug_str:00000000000006fb .LASF79
     /tmp/ccvL8NpJ.s:7615   .debug_str:00000000000005e5 .LASF80
     /tmp/ccvL8NpJ.s:7569   .debug_str:000000000000044d .LASF81
     /tmp/ccvL8NpJ.s:7759   .debug_str:0000000000000a2b .LASF82
     /tmp/ccvL8NpJ.s:7661   .debug_str:000000000000075e .LASF83
     /tmp/ccvL8NpJ.s:7547   .debug_str:0000000000000396 .LASF84
     /tmp/ccvL8NpJ.s:7627   .debug_str:000000000000066d .LASF85
     /tmp/ccvL8NpJ.s:7709   .debug_str:00000000000008c9 .LASF86
     /tmp/ccvL8NpJ.s:7751   .debug_str:00000000000009e5 .LASF88
     /tmp/ccvL8NpJ.s:7519   .debug_str:0000000000000295 .LASF87
     /tmp/ccvL8NpJ.s:7789   .debug_str:0000000000000b4d .LASF89
     /tmp/ccvL8NpJ.s:7479   .debug_str:0000000000000169 .LASF90
     /tmp/ccvL8NpJ.s:7513   .debug_str:000000000000026e .LASF92
     /tmp/ccvL8NpJ.s:7471   .debug_str:0000000000000054 .LASF93
     /tmp/ccvL8NpJ.s:7643   .debug_str:00000000000006e8 .LASF94
     /tmp/ccvL8NpJ.s:7773   .debug_str:0000000000000a8c .LASF95
     /tmp/ccvL8NpJ.s:7515   .debug_str:000000000000027d .LASF96
     /tmp/ccvL8NpJ.s:7693   .debug_str:000000000000082e .LASF97
     /tmp/ccvL8NpJ.s:7747   .debug_str:00000000000009b8 .LASF98
     /tmp/ccvL8NpJ.s:7699   .debug_str:0000000000000868 .LASF99
     /tmp/ccvL8NpJ.s:7521   .debug_str:000000000000029d .LASF100
     /tmp/ccvL8NpJ.s:7649   .debug_str:0000000000000704 .LASF101
     /tmp/ccvL8NpJ.s:7803   .debug_str:0000000000000bbd .LASF102
     /tmp/ccvL8NpJ.s:7637   .debug_str:00000000000006cd .LASF103
     /tmp/ccvL8NpJ.s:7635   .debug_str:00000000000006a4 .LASF104
     /tmp/ccvL8NpJ.s:7707   .debug_str:00000000000008bd .LASF105
     /tmp/ccvL8NpJ.s:7783   .debug_str:0000000000000b12 .LASF106
     /tmp/ccvL8NpJ.s:7481   .debug_str:000000000000016e .LASF107
     /tmp/ccvL8NpJ.s:7703   .debug_str:000000000000087f .LASF108
     /tmp/ccvL8NpJ.s:7731   .debug_str:000000000000095f .LASF109
     /tmp/ccvL8NpJ.s:7493   .debug_str:00000000000001e5 .LASF110
     /tmp/ccvL8NpJ.s:7619   .debug_str:0000000000000607 .LASF111
     /tmp/ccvL8NpJ.s:7779   .debug_str:0000000000000ac4 .LASF112
     /tmp/ccvL8NpJ.s:7797   .debug_str:0000000000000b91 .LASF113
     /tmp/ccvL8NpJ.s:7485   .debug_str:00000000000001ac .LASF114
     /tmp/ccvL8NpJ.s:7743   .debug_str:00000000000009a7 .LASF115
     /tmp/ccvL8NpJ.s:7475   .debug_str:000000000000006f .LASF116
     /tmp/ccvL8NpJ.s:7501   .debug_str:0000000000000234 .LASF117
     /tmp/ccvL8NpJ.s:7577   .debug_str:0000000000000497 .LASF118
     /tmp/ccvL8NpJ.s:7611   .debug_str:00000000000005b9 .LASF119
     /tmp/ccvL8NpJ.s:7697   .debug_str:0000000000000844 .LASF120
     /tmp/ccvL8NpJ.s:7535   .debug_str:0000000000000324 .LASF121
     /tmp/ccvL8NpJ.s:7623   .debug_str:0000000000000641 .LASF122
     /tmp/ccvL8NpJ.s:7715   .debug_str:00000000000008db .LASF123
     /tmp/ccvL8NpJ.s:7801   .debug_str:0000000000000bb7 .LASF124
GAS LISTING /tmp/ccvL8NpJ.s 			page 84


     /tmp/ccvL8NpJ.s:7653   .debug_str:000000000000072a .LASF125
     /tmp/ccvL8NpJ.s:7567   .debug_str:000000000000043e .LASF126
     /tmp/ccvL8NpJ.s:7575   .debug_str:0000000000000469 .LASF127
     /tmp/ccvL8NpJ.s:7681   .debug_str:00000000000007df .LASF128
     /tmp/ccvL8NpJ.s:7549   .debug_str:000000000000039f .LASF129
     /tmp/ccvL8NpJ.s:7505   .debug_str:0000000000000249 .LASF130
     /tmp/ccvL8NpJ.s:7541   .debug_str:0000000000000358 .LASF131
     /tmp/ccvL8NpJ.s:7687   .debug_str:0000000000000808 .LASF132
     /tmp/ccvL8NpJ.s:7781   .debug_str:0000000000000ae9 .LASF133
     /tmp/ccvL8NpJ.s:7673   .debug_str:00000000000007a5 .LASF134
     /tmp/ccvL8NpJ.s:7465   .debug_str:000000000000001e .LASF135
     /tmp/ccvL8NpJ.s:7553   .debug_str:00000000000003db .LASF136
     /tmp/ccvL8NpJ.s:7605   .debug_str:000000000000055b .LASF137
     /tmp/ccvL8NpJ.s:7531   .debug_str:0000000000000308 .LASF138
     /tmp/ccvL8NpJ.s:7621   .debug_str:0000000000000616 .LASF139
     /tmp/ccvL8NpJ.s:7491   .debug_str:00000000000001da .LASF140
     /tmp/ccvL8NpJ.s:7607   .debug_str:0000000000000587 .LASF141
     /tmp/ccvL8NpJ.s:7711   .debug_str:00000000000008d0 .LASF142
     /tmp/ccvL8NpJ.s:7651   .debug_str:0000000000000710 .LASF143
     /tmp/ccvL8NpJ.s:7593   .debug_str:0000000000000508 .LASF144
     /tmp/ccvL8NpJ.s:7793   .debug_str:0000000000000b6c .LASF145
     /tmp/ccvL8NpJ.s:7527   .debug_str:00000000000002e7 .LASF146
     /tmp/ccvL8NpJ.s:746    .text:0000000000000538 .LFB47
     /tmp/ccvL8NpJ.s:792    .text:000000000000058c .LFE47
     /tmp/ccvL8NpJ.s:7667   .debug_str:0000000000000786 .LASF147
     /tmp/ccvL8NpJ.s:6400   .debug_loc:0000000000000000 .LLST10
     /tmp/ccvL8NpJ.s:7509   .debug_str:000000000000025e .LASF148
     /tmp/ccvL8NpJ.s:6414   .debug_loc:0000000000000039 .LLST11
     /tmp/ccvL8NpJ.s:7655   .debug_str:0000000000000739 .LASF149
     /tmp/ccvL8NpJ.s:6432   .debug_loc:0000000000000085 .LLST12
     /tmp/ccvL8NpJ.s:769    .text:0000000000000564 .LVL70
     /tmp/ccvL8NpJ.s:775    .text:0000000000000574 .LVL71
     /tmp/ccvL8NpJ.s:679    .text:00000000000004e4 .LFB46
     /tmp/ccvL8NpJ.s:740    .text:0000000000000538 .LFE46
     /tmp/ccvL8NpJ.s:467    .text:00000000000003a4 .LFB45
     /tmp/ccvL8NpJ.s:502    .text:00000000000003d4 .LFE45
     /tmp/ccvL8NpJ.s:280    .text:00000000000001c4 .LFB44
     /tmp/ccvL8NpJ.s:461    .text:00000000000003a4 .LFE44
     /tmp/ccvL8NpJ.s:6450   .debug_loc:00000000000000d1 .LLST4
     /tmp/ccvL8NpJ.s:7625   .debug_str:0000000000000668 .LASF150
     /tmp/ccvL8NpJ.s:6468   .debug_loc:000000000000011d .LLST5
     /tmp/ccvL8NpJ.s:302    .text:00000000000001f0 .LVL26
     /tmp/ccvL8NpJ.s:307    .text:00000000000001fc .LVL27
     /tmp/ccvL8NpJ.s:312    .text:000000000000020c .LVL28
     /tmp/ccvL8NpJ.s:320    .text:000000000000022c .LVL29
     /tmp/ccvL8NpJ.s:328    .text:000000000000024c .LVL30
     /tmp/ccvL8NpJ.s:336    .text:000000000000026c .LVL31
     /tmp/ccvL8NpJ.s:344    .text:000000000000028c .LVL32
     /tmp/ccvL8NpJ.s:360    .text:00000000000002b4 .LVL34
     /tmp/ccvL8NpJ.s:372    .text:00000000000002cc .LVL36
     /tmp/ccvL8NpJ.s:380    .text:00000000000002ec .LVL37
     /tmp/ccvL8NpJ.s:396    .text:0000000000000314 .LVL39
     /tmp/ccvL8NpJ.s:408    .text:000000000000032c .LVL41
     /tmp/ccvL8NpJ.s:416    .text:000000000000034c .LVL42
     /tmp/ccvL8NpJ.s:432    .text:0000000000000374 .LVL44
     /tmp/ccvL8NpJ.s:444    .text:000000000000038c .LVL46
     /tmp/ccvL8NpJ.s:116    .text:0000000000000068 .LFB43
GAS LISTING /tmp/ccvL8NpJ.s 			page 85


     /tmp/ccvL8NpJ.s:251    .text:00000000000001c4 .LFE43
     /tmp/ccvL8NpJ.s:6475   .debug_loc:0000000000000140 .LLST2
     /tmp/ccvL8NpJ.s:195    .text:0000000000000158 .LBB45
     /tmp/ccvL8NpJ.s:224    .text:0000000000000198 .LBE45
     /tmp/ccvL8NpJ.s:6497   .debug_loc:000000000000019f .LLST3
     /tmp/ccvL8NpJ.s:210    .text:0000000000000184 .LVL18
     /tmp/ccvL8NpJ.s:148    .text:00000000000000a8 .LVL10
     /tmp/ccvL8NpJ.s:156    .text:00000000000000c8 .LVL11
     /tmp/ccvL8NpJ.s:164    .text:00000000000000e8 .LVL12
     /tmp/ccvL8NpJ.s:172    .text:0000000000000108 .LVL13
     /tmp/ccvL8NpJ.s:180    .text:0000000000000128 .LVL14
     /tmp/ccvL8NpJ.s:188    .text:0000000000000148 .LVL15
     /tmp/ccvL8NpJ.s:193    .text:0000000000000158 .LVL16
     /tmp/ccvL8NpJ.s:229    .text:00000000000001a8 .LVL20
     /tmp/ccvL8NpJ.s:10     .text:0000000000000000 .LFB42
     /tmp/ccvL8NpJ.s:78     .text:0000000000000068 .LFE42
     /tmp/ccvL8NpJ.s:6509   .debug_loc:00000000000001d6 .LLST0
     /tmp/ccvL8NpJ.s:6527   .debug_loc:0000000000000222 .LLST1
     /tmp/ccvL8NpJ.s:42     .text:0000000000000034 .LVL3
     /tmp/ccvL8NpJ.s:2187   .text:0000000000000d58 .LFB41
     /tmp/ccvL8NpJ.s:2339   .text:0000000000000e34 .LFE41
     /tmp/ccvL8NpJ.s:6543   .debug_loc:000000000000026c .LLST67
     /tmp/ccvL8NpJ.s:2211   .text:0000000000000d7c .LBB137
     /tmp/ccvL8NpJ.s:2240   .text:0000000000000da4 .LBE137
     /tmp/ccvL8NpJ.s:6561   .debug_loc:00000000000002b8 .LLST68
     /tmp/ccvL8NpJ.s:2217   .text:0000000000000d84 .LBB139
     /tmp/ccvL8NpJ.s:2234   .text:0000000000000da0 .LBE139
     /tmp/ccvL8NpJ.s:6568   .debug_loc:00000000000002db .LLST69
     /tmp/ccvL8NpJ.s:2226   .text:0000000000000d94 .LVL231
     /tmp/ccvL8NpJ.s:2248   .text:0000000000000dac .LBB140
     /tmp/ccvL8NpJ.s:2277   .text:0000000000000dd4 .LBE140
     /tmp/ccvL8NpJ.s:6575   .debug_loc:00000000000002fe .LLST70
     /tmp/ccvL8NpJ.s:2254   .text:0000000000000db4 .LBB142
     /tmp/ccvL8NpJ.s:2271   .text:0000000000000dd0 .LBE142
     /tmp/ccvL8NpJ.s:6582   .debug_loc:0000000000000321 .LLST71
     /tmp/ccvL8NpJ.s:2263   .text:0000000000000dc4 .LVL235
     /tmp/ccvL8NpJ.s:2285   .text:0000000000000ddc .LBB143
     /tmp/ccvL8NpJ.s:2314   .text:0000000000000e04 .LBE143
     /tmp/ccvL8NpJ.s:6589   .debug_loc:0000000000000344 .LLST72
     /tmp/ccvL8NpJ.s:2291   .text:0000000000000de4 .LBB145
     /tmp/ccvL8NpJ.s:2308   .text:0000000000000e00 .LBE145
     /tmp/ccvL8NpJ.s:6596   .debug_loc:0000000000000367 .LLST73
     /tmp/ccvL8NpJ.s:2300   .text:0000000000000df4 .LVL239
     /tmp/ccvL8NpJ.s:2320   .text:0000000000000e18 .LVL241
     /tmp/ccvL8NpJ.s:1356   .text:00000000000008a4 .LFB40
     /tmp/ccvL8NpJ.s:1541   .text:00000000000009b0 .LFE40
     /tmp/ccvL8NpJ.s:6603   .debug_loc:000000000000038a .LLST33
     /tmp/ccvL8NpJ.s:7597   .debug_str:0000000000000532 .LASF151
     /tmp/ccvL8NpJ.s:6625   .debug_loc:00000000000003e9 .LLST34
     /tmp/ccvL8NpJ.s:6647   .debug_loc:0000000000000448 .LLST35
     /tmp/ccvL8NpJ.s:6669   .debug_loc:00000000000004a7 .LLST36
     /tmp/ccvL8NpJ.s:6691   .debug_loc:0000000000000506 .LLST37
     /tmp/ccvL8NpJ.s:6706   .debug_loc:000000000000054f .LLST38
     /tmp/ccvL8NpJ.s:1410   .text:0000000000000908 .LBB75
     /tmp/ccvL8NpJ.s:1457   .text:0000000000000940 .LBE75
     /tmp/ccvL8NpJ.s:6717   .debug_loc:0000000000000585 .LLST39
     /tmp/ccvL8NpJ.s:1458   .text:0000000000000940 .LBB77
GAS LISTING /tmp/ccvL8NpJ.s 			page 86


     /tmp/ccvL8NpJ.s:1482   .text:0000000000000958 .LBE77
     /tmp/ccvL8NpJ.s:6728   .debug_loc:00000000000005bb .LLST40
     /tmp/ccvL8NpJ.s:6735   .debug_loc:00000000000005de .LLST41
     /tmp/ccvL8NpJ.s:1387   .text:00000000000008e8 .LVL139
     /tmp/ccvL8NpJ.s:1500   .text:000000000000097c .LVL156
     /tmp/ccvL8NpJ.s:2120   .text:0000000000000cec .LFB39
     /tmp/ccvL8NpJ.s:2181   .text:0000000000000d58 .LFE39
     /tmp/ccvL8NpJ.s:7489   .debug_str:00000000000001d5 .LASF152
     /tmp/ccvL8NpJ.s:6742   .debug_loc:0000000000000601 .LLST65
     /tmp/ccvL8NpJ.s:2139   .text:0000000000000d08 .LBB127
     /tmp/ccvL8NpJ.s:2164   .text:0000000000000d40 .LBE127
     /tmp/ccvL8NpJ.s:6760   .debug_loc:000000000000064d .LLST66
     /tmp/ccvL8NpJ.s:2155   .text:0000000000000d34 .LVL223
     /tmp/ccvL8NpJ.s:1895   .text:0000000000000bf8 .LFB38
     /tmp/ccvL8NpJ.s:2114   .text:0000000000000cec .LFE38
     /tmp/ccvL8NpJ.s:6776   .debug_loc:0000000000000697 .LLST51
     /tmp/ccvL8NpJ.s:6798   .debug_loc:00000000000006f6 .LLST52
     /tmp/ccvL8NpJ.s:7633   .debug_str:000000000000069c .LASF153
     /tmp/ccvL8NpJ.s:6820   .debug_loc:0000000000000755 .LLST53
     /tmp/ccvL8NpJ.s:1943   .text:0000000000000c40 .LBB105
     /tmp/ccvL8NpJ.s:7409   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccvL8NpJ.s:6831   .debug_loc:000000000000078b .LLST54
     /tmp/ccvL8NpJ.s:6838   .debug_loc:00000000000007ae .LLST55
     /tmp/ccvL8NpJ.s:6849   .debug_loc:00000000000007e4 .LLST56
     /tmp/ccvL8NpJ.s:6860   .debug_loc:000000000000081a .LLST57
     /tmp/ccvL8NpJ.s:1958   .text:0000000000000c48 .LBB108
     /tmp/ccvL8NpJ.s:1975   .text:0000000000000c60 .LBE108
     /tmp/ccvL8NpJ.s:6876   .debug_loc:0000000000000865 .LLST58
     /tmp/ccvL8NpJ.s:1989   .text:0000000000000c68 .LBB111
     /tmp/ccvL8NpJ.s:2006   .text:0000000000000c80 .LBE111
     /tmp/ccvL8NpJ.s:6883   .debug_loc:0000000000000888 .LLST59
     /tmp/ccvL8NpJ.s:1999   .text:0000000000000c78 .LVL204
     /tmp/ccvL8NpJ.s:2045   .text:0000000000000ca8 .LBB116
     /tmp/ccvL8NpJ.s:6905   .debug_loc:00000000000008c9 .LLST60
     /tmp/ccvL8NpJ.s:6912   .debug_loc:00000000000008ec .LLST61
     /tmp/ccvL8NpJ.s:6923   .debug_loc:0000000000000922 .LLST62
     /tmp/ccvL8NpJ.s:2060   .text:0000000000000cb0 .LBB119
     /tmp/ccvL8NpJ.s:2077   .text:0000000000000cc8 .LBE119
     /tmp/ccvL8NpJ.s:6939   .debug_loc:000000000000096d .LLST63
     /tmp/ccvL8NpJ.s:2091   .text:0000000000000cd0 .LBB122
     /tmp/ccvL8NpJ.s:2108   .text:0000000000000cec .LBE122
     /tmp/ccvL8NpJ.s:6946   .debug_loc:0000000000000990 .LLST64
     /tmp/ccvL8NpJ.s:2103   .text:0000000000000ce4 .LVL219
     /tmp/ccvL8NpJ.s:1923   .text:0000000000000c28 .LVL195
     /tmp/ccvL8NpJ.s:1934   .text:0000000000000c38 .LVL196
     /tmp/ccvL8NpJ.s:1703   .text:0000000000000adc .LFB37
     /tmp/ccvL8NpJ.s:1889   .text:0000000000000bf8 .LFE37
     /tmp/ccvL8NpJ.s:6968   .debug_loc:00000000000009d1 .LLST45
     /tmp/ccvL8NpJ.s:7737   .debug_str:000000000000098f .LASF154
     /tmp/ccvL8NpJ.s:6994   .debug_loc:0000000000000a43 .LLST46
     /tmp/ccvL8NpJ.s:7015   .debug_loc:0000000000000a92 .LLST47
     /tmp/ccvL8NpJ.s:7026   .debug_loc:0000000000000ac8 .LLST48
     /tmp/ccvL8NpJ.s:1750   .text:0000000000000b2c .LBB82
     /tmp/ccvL8NpJ.s:1757   .text:0000000000000b30 .LBE82
     /tmp/ccvL8NpJ.s:7037   .debug_loc:0000000000000afe .LLST49
     /tmp/ccvL8NpJ.s:1773   .text:0000000000000b44 .LBB84
     /tmp/ccvL8NpJ.s:1780   .text:0000000000000b48 .LBE84
GAS LISTING /tmp/ccvL8NpJ.s 			page 87


     /tmp/ccvL8NpJ.s:7044   .debug_loc:0000000000000b21 .LLST50
     /tmp/ccvL8NpJ.s:1808   .text:0000000000000b70 .LVL182
     /tmp/ccvL8NpJ.s:1849   .text:0000000000000ba8 .LVL188
     /tmp/ccvL8NpJ.s:1863   .text:0000000000000bc8 .LVL189
     /tmp/ccvL8NpJ.s:1871   .text:0000000000000bdc .LVL190
     /tmp/ccvL8NpJ.s:1877   .text:0000000000000bf0 .LVL191
     /tmp/ccvL8NpJ.s:1227   .text:0000000000000804 .LFB36
     /tmp/ccvL8NpJ.s:1350   .text:00000000000008a4 .LFE36
     /tmp/ccvL8NpJ.s:7051   .debug_loc:0000000000000b44 .LLST28
     /tmp/ccvL8NpJ.s:7595   .debug_str:000000000000052c .LASF155
     /tmp/ccvL8NpJ.s:7071   .debug_loc:0000000000000b92 .LLST29
     /tmp/ccvL8NpJ.s:1232   .text:0000000000000804 .LBB71
     /tmp/ccvL8NpJ.s:1281   .text:000000000000083c .LBE71
     /tmp/ccvL8NpJ.s:7094   .debug_loc:0000000000000bf2 .LLST30
     /tmp/ccvL8NpJ.s:1282   .text:000000000000083c .LBB73
     /tmp/ccvL8NpJ.s:1306   .text:0000000000000854 .LBE73
     /tmp/ccvL8NpJ.s:7105   .debug_loc:0000000000000c28 .LLST31
     /tmp/ccvL8NpJ.s:7112   .debug_loc:0000000000000c4b .LLST32
     /tmp/ccvL8NpJ.s:1333   .text:000000000000088c .LVL135
     /tmp/ccvL8NpJ.s:973    .text:0000000000000678 .LFB35
     /tmp/ccvL8NpJ.s:1221   .text:0000000000000804 .LFE35
     /tmp/ccvL8NpJ.s:7119   .debug_loc:0000000000000c6e .LLST18
     /tmp/ccvL8NpJ.s:7141   .debug_loc:0000000000000ccd .LLST19
     /tmp/ccvL8NpJ.s:1093   .text:0000000000000728 .LBB67
     /tmp/ccvL8NpJ.s:1218   .text:0000000000000804 .LBE67
     /tmp/ccvL8NpJ.s:7156   .debug_loc:0000000000000d16 .LLST24
     /tmp/ccvL8NpJ.s:7609   .debug_str:00000000000005ae .LASF156
     /tmp/ccvL8NpJ.s:7163   .debug_loc:0000000000000d39 .LLST25
     /tmp/ccvL8NpJ.s:1141   .text:0000000000000784 .LBB68
     /tmp/ccvL8NpJ.s:1164   .text:00000000000007a8 .LBE68
     /tmp/ccvL8NpJ.s:7170   .debug_loc:0000000000000d5c .LLST26
     /tmp/ccvL8NpJ.s:1171   .text:00000000000007b0 .LBB70
     /tmp/ccvL8NpJ.s:1202   .text:00000000000007e0 .LBE70
     /tmp/ccvL8NpJ.s:7182   .debug_loc:0000000000000d93 .LLST27
     /tmp/ccvL8NpJ.s:1098   .text:0000000000000738 .LVL105
     /tmp/ccvL8NpJ.s:1129   .text:0000000000000778 .LVL107
     /tmp/ccvL8NpJ.s:1209   .text:00000000000007f0 .LVL115
     /tmp/ccvL8NpJ.s:1214   .text:00000000000007fc .LVL116
     /tmp/ccvL8NpJ.s:997    .text:000000000000069c .LBB60
     /tmp/ccvL8NpJ.s:1017   .text:00000000000006b4 .LBE60
     /tmp/ccvL8NpJ.s:7189   .debug_loc:0000000000000db6 .LLST20
     /tmp/ccvL8NpJ.s:1003   .text:00000000000006a0 .LBB62
     /tmp/ccvL8NpJ.s:1015   .text:00000000000006b4 .LBE62
     /tmp/ccvL8NpJ.s:7196   .debug_loc:0000000000000dd9 .LLST21
     /tmp/ccvL8NpJ.s:1008   .text:00000000000006ac .LVL94
     /tmp/ccvL8NpJ.s:1048   .text:00000000000006dc .LBB63
     /tmp/ccvL8NpJ.s:1067   .text:00000000000006f4 .LBE63
     /tmp/ccvL8NpJ.s:7203   .debug_loc:0000000000000dfc .LLST22
     /tmp/ccvL8NpJ.s:1053   .text:00000000000006e0 .LBB65
     /tmp/ccvL8NpJ.s:1065   .text:00000000000006f4 .LBE65
     /tmp/ccvL8NpJ.s:7210   .debug_loc:0000000000000e1f .LLST23
     /tmp/ccvL8NpJ.s:1058   .text:00000000000006ec .LVL100
     /tmp/ccvL8NpJ.s:1081   .text:0000000000000710 .LVL102
     /tmp/ccvL8NpJ.s:1088   .text:0000000000000720 .LVL103
     /tmp/ccvL8NpJ.s:798    .text:000000000000058c .LFB34
     /tmp/ccvL8NpJ.s:967    .text:0000000000000678 .LFE34
     /tmp/ccvL8NpJ.s:7217   .debug_loc:0000000000000e42 .LLST13
GAS LISTING /tmp/ccvL8NpJ.s 			page 88


     /tmp/ccvL8NpJ.s:7251   .debug_loc:0000000000000eda .LLST14
     /tmp/ccvL8NpJ.s:7267   .debug_loc:0000000000000f24 .LLST15
     /tmp/ccvL8NpJ.s:7278   .debug_loc:0000000000000f5a .LLST16
     /tmp/ccvL8NpJ.s:862    .text:00000000000005f0 .LBB53
     /tmp/ccvL8NpJ.s:870    .text:00000000000005f4 .LBE53
     /tmp/ccvL8NpJ.s:7285   .debug_loc:0000000000000f7d .LLST17
     /tmp/ccvL8NpJ.s:912    .text:000000000000062c .LVL84
     /tmp/ccvL8NpJ.s:508    .text:00000000000003d4 .LFB33
     /tmp/ccvL8NpJ.s:673    .text:00000000000004e4 .LFE33
     /tmp/ccvL8NpJ.s:7292   .debug_loc:0000000000000fa0 .LLST6
     /tmp/ccvL8NpJ.s:7310   .debug_loc:0000000000000fec .LLST7
     /tmp/ccvL8NpJ.s:579    .text:0000000000000458 .LBB47
     /tmp/ccvL8NpJ.s:602    .text:000000000000047c .LBE47
     /tmp/ccvL8NpJ.s:7329   .debug_loc:0000000000001048 .LLST8
     /tmp/ccvL8NpJ.s:609    .text:0000000000000484 .LBB49
     /tmp/ccvL8NpJ.s:640    .text:00000000000004b4 .LBE49
     /tmp/ccvL8NpJ.s:7345   .debug_loc:0000000000001092 .LLST9
     /tmp/ccvL8NpJ.s:532    .text:0000000000000400 .LVL52
     /tmp/ccvL8NpJ.s:542    .text:0000000000000418 .LVL54
     /tmp/ccvL8NpJ.s:1555   .text:00000000000009b0 .LFB32
     /tmp/ccvL8NpJ.s:1697   .text:0000000000000adc .LFE32
     /tmp/ccvL8NpJ.s:7603   .debug_str:0000000000000555 .LASF157
     /tmp/ccvL8NpJ.s:7356   .debug_loc:00000000000010c8 .LLST42
     /tmp/ccvL8NpJ.s:7645   .debug_str:00000000000006f2 .LASF158
     /tmp/ccvL8NpJ.s:7370   .debug_loc:0000000000001101 .LLST43
     /tmp/ccvL8NpJ.s:1650   .text:0000000000000a70 .LBB79
     /tmp/ccvL8NpJ.s:1681   .text:0000000000000ac4 .LBE79
     /tmp/ccvL8NpJ.s:7384   .debug_loc:000000000000113a .LLST44
     /tmp/ccvL8NpJ.s:1669   .text:0000000000000aa8 .LVL169
     /tmp/ccvL8NpJ.s:1574   .text:00000000000009d0 .LVL165
     /tmp/ccvL8NpJ.s:1612   .text:0000000000000a28 .LVL166
     /tmp/ccvL8NpJ.s:1648   .text:0000000000000a70 .LVL167
     /tmp/ccvL8NpJ.s:7473   .debug_str:0000000000000064 .LASF159
     /tmp/ccvL8NpJ.s:7581   .debug_str:00000000000004c8 .LASF160
     /tmp/ccvL8NpJ.s:7487   .debug_str:00000000000001d0 .LASF161
     /tmp/ccvL8NpJ.s:7543   .debug_str:000000000000037e .LASF170
     /tmp/ccvL8NpJ.s:7555   .debug_str:00000000000003ec .LASF171
     /tmp/ccvL8NpJ.s:749    .text:0000000000000538 .LVL68
     /tmp/ccvL8NpJ.s:767    .text:000000000000055c .LVL69
     /tmp/ccvL8NpJ.s:787    .text:0000000000000584 .LVL73
     /tmp/ccvL8NpJ.s:784    .text:0000000000000580 .LVL72
     /tmp/ccvL8NpJ.s:283    .text:00000000000001c4 .LVL24
     /tmp/ccvL8NpJ.s:300    .text:00000000000001e8 .LVL25
     /tmp/ccvL8NpJ.s:456    .text:000000000000039c .LVL48
     /tmp/ccvL8NpJ.s:348    .text:0000000000000290 .LVL33
     /tmp/ccvL8NpJ.s:453    .text:0000000000000398 .LVL47
     /tmp/ccvL8NpJ.s:119    .text:0000000000000068 .LVL8
     /tmp/ccvL8NpJ.s:146    .text:00000000000000a0 .LVL9
     /tmp/ccvL8NpJ.s:243    .text:00000000000001b8 .LVL22
     /tmp/ccvL8NpJ.s:247    .text:00000000000001c0 .LVL23
     /tmp/ccvL8NpJ.s:199    .text:0000000000000160 .LVL17
     /tmp/ccvL8NpJ.s:240    .text:00000000000001b4 .LVL21
     /tmp/ccvL8NpJ.s:14     .text:0000000000000000 .LVL0
     /tmp/ccvL8NpJ.s:32     .text:0000000000000020 .LVL2
     /tmp/ccvL8NpJ.s:70     .text:000000000000005c .LVL6
     /tmp/ccvL8NpJ.s:29     .text:000000000000001c .LVL1
     /tmp/ccvL8NpJ.s:50     .text:0000000000000040 .LVL4
GAS LISTING /tmp/ccvL8NpJ.s 			page 89


     /tmp/ccvL8NpJ.s:58     .text:000000000000004c .LVL5
     /tmp/ccvL8NpJ.s:73     .text:0000000000000060 .LVL7
     /tmp/ccvL8NpJ.s:2190   .text:0000000000000d58 .LVL228
     /tmp/ccvL8NpJ.s:2209   .text:0000000000000d7c .LVL229
     /tmp/ccvL8NpJ.s:2332   .text:0000000000000e28 .LVL242
     /tmp/ccvL8NpJ.s:2238   .text:0000000000000da4 .LVL232
     /tmp/ccvL8NpJ.s:2219   .text:0000000000000d84 .LVL230
     /tmp/ccvL8NpJ.s:2246   .text:0000000000000dac .LVL233
     /tmp/ccvL8NpJ.s:2275   .text:0000000000000dd4 .LVL236
     /tmp/ccvL8NpJ.s:2256   .text:0000000000000db4 .LVL234
     /tmp/ccvL8NpJ.s:2283   .text:0000000000000ddc .LVL237
     /tmp/ccvL8NpJ.s:2312   .text:0000000000000e04 .LVL240
     /tmp/ccvL8NpJ.s:2293   .text:0000000000000de4 .LVL238
     /tmp/ccvL8NpJ.s:1359   .text:00000000000008a4 .LVL137
     /tmp/ccvL8NpJ.s:1385   .text:00000000000008e0 .LVL138
     /tmp/ccvL8NpJ.s:1519   .text:0000000000000994 .LVL159
     /tmp/ccvL8NpJ.s:1529   .text:00000000000009a4 .LVL162
     /tmp/ccvL8NpJ.s:1516   .text:0000000000000990 .LVL158
     /tmp/ccvL8NpJ.s:1525   .text:000000000000099c .LVL161
     /tmp/ccvL8NpJ.s:1522   .text:0000000000000998 .LVL160
     /tmp/ccvL8NpJ.s:1389   .text:00000000000008ec .LVL140
     /tmp/ccvL8NpJ.s:1513   .text:000000000000098c .LVL157
     /tmp/ccvL8NpJ.s:1485   .text:000000000000095c .LVL154
     /tmp/ccvL8NpJ.s:1493   .text:000000000000096c .LVL155
     /tmp/ccvL8NpJ.s:1535   .text:00000000000009a8 .LVL163
     /tmp/ccvL8NpJ.s:1409   .text:0000000000000908 .LVL141
     /tmp/ccvL8NpJ.s:1415   .text:000000000000090c .LVL142
     /tmp/ccvL8NpJ.s:1455   .text:0000000000000940 .LVL149
     /tmp/ccvL8NpJ.s:1480   .text:0000000000000958 .LVL153
     /tmp/ccvL8NpJ.s:1463   .text:0000000000000944 .LVL150
     /tmp/ccvL8NpJ.s:2123   .text:0000000000000cec .LVL220
     /tmp/ccvL8NpJ.s:2142   .text:0000000000000d0c .LVL222
     /tmp/ccvL8NpJ.s:2176   .text:0000000000000d50 .LVL227
     /tmp/ccvL8NpJ.s:2138   .text:0000000000000d08 .LVL221
     /tmp/ccvL8NpJ.s:2160   .text:0000000000000d3c .LVL224
     /tmp/ccvL8NpJ.s:2162   .text:0000000000000d40 .LVL225
     /tmp/ccvL8NpJ.s:2173   .text:0000000000000d4c .LVL226
     /tmp/ccvL8NpJ.s:1898   .text:0000000000000bf8 .LVL193
     /tmp/ccvL8NpJ.s:1921   .text:0000000000000c24 .LVL194
     /tmp/ccvL8NpJ.s:2031   .text:0000000000000c98 .LVL209
     /tmp/ccvL8NpJ.s:2035   .text:0000000000000ca0 .LVL210
     /tmp/ccvL8NpJ.s:2028   .text:0000000000000c94 .LVL208
     /tmp/ccvL8NpJ.s:2011   .text:0000000000000c84 .LVL206
     /tmp/ccvL8NpJ.s:2017   .text:0000000000000c88 .LVL207
     /tmp/ccvL8NpJ.s:2101   .text:0000000000000cdc .LVL218
     /tmp/ccvL8NpJ.s:1939   .text:0000000000000c3c .LVL197
     /tmp/ccvL8NpJ.s:2004   .text:0000000000000c80 .LVL205
     /tmp/ccvL8NpJ.s:1941   .text:0000000000000c40 .LVL198
     /tmp/ccvL8NpJ.s:1949   .text:0000000000000c44 .LVL199
     /tmp/ccvL8NpJ.s:1973   .text:0000000000000c60 .LVL201
     /tmp/ccvL8NpJ.s:1993   .text:0000000000000c6c .LVL202
     /tmp/ccvL8NpJ.s:1957   .text:0000000000000c48 .LVL200
     /tmp/ccvL8NpJ.s:1997   .text:0000000000000c70 .LVL203
     /tmp/ccvL8NpJ.s:2041   .text:0000000000000ca4 .LVL211
     /tmp/ccvL8NpJ.s:2043   .text:0000000000000ca8 .LVL212
     /tmp/ccvL8NpJ.s:2051   .text:0000000000000cac .LVL213
     /tmp/ccvL8NpJ.s:2075   .text:0000000000000cc8 .LVL215
GAS LISTING /tmp/ccvL8NpJ.s 			page 90


     /tmp/ccvL8NpJ.s:2095   .text:0000000000000cd4 .LVL216
     /tmp/ccvL8NpJ.s:2059   .text:0000000000000cb0 .LVL214
     /tmp/ccvL8NpJ.s:2099   .text:0000000000000cd8 .LVL217
     /tmp/ccvL8NpJ.s:1706   .text:0000000000000adc .LVL172
     /tmp/ccvL8NpJ.s:1762   .text:0000000000000b38 .LVL177
     /tmp/ccvL8NpJ.s:1821   .text:0000000000000b7c .LVL183
     /tmp/ccvL8NpJ.s:1825   .text:0000000000000b84 .LVL184
     /tmp/ccvL8NpJ.s:1879   .text:0000000000000bf4 .LVL192
     /tmp/ccvL8NpJ.s:1716   .text:0000000000000aec .LVL173
     /tmp/ccvL8NpJ.s:1718   .text:0000000000000af0 .LVL174
     /tmp/ccvL8NpJ.s:1766   .text:0000000000000b3c .LVL178
     /tmp/ccvL8NpJ.s:1835   .text:0000000000000b90 .LVL185
     /tmp/ccvL8NpJ.s:1788   .text:0000000000000b54 .LVL181
     /tmp/ccvL8NpJ.s:1842   .text:0000000000000b9c .LVL186
     /tmp/ccvL8NpJ.s:1847   .text:0000000000000ba0 .LVL187
     /tmp/ccvL8NpJ.s:1749   .text:0000000000000b2c .LVL175
     /tmp/ccvL8NpJ.s:1755   .text:0000000000000b30 .LVL176
     /tmp/ccvL8NpJ.s:1772   .text:0000000000000b44 .LVL179
     /tmp/ccvL8NpJ.s:1778   .text:0000000000000b48 .LVL180
     /tmp/ccvL8NpJ.s:1230   .text:0000000000000804 .LVL118
     /tmp/ccvL8NpJ.s:1242   .text:000000000000080c .LVL120
     /tmp/ccvL8NpJ.s:1245   .text:0000000000000810 .LVL121
     /tmp/ccvL8NpJ.s:1304   .text:0000000000000854 .LVL131
     /tmp/ccvL8NpJ.s:1310   .text:0000000000000858 .LVL132
     /tmp/ccvL8NpJ.s:1324   .text:0000000000000870 .LVL133
     /tmp/ccvL8NpJ.s:1328   .text:0000000000000874 .LVL134
     /tmp/ccvL8NpJ.s:1343   .text:000000000000089c .LVL136
     /tmp/ccvL8NpJ.s:1238   .text:0000000000000808 .LVL119
     /tmp/ccvL8NpJ.s:1279   .text:000000000000083c .LVL127
     /tmp/ccvL8NpJ.s:1287   .text:0000000000000840 .LVL128
     /tmp/ccvL8NpJ.s:976    .text:0000000000000678 .LVL92
     /tmp/ccvL8NpJ.s:995    .text:000000000000069c .LVL93
     /tmp/ccvL8NpJ.s:1034   .text:00000000000006cc .LVL97
     /tmp/ccvL8NpJ.s:1040   .text:00000000000006d8 .LVL98
     /tmp/ccvL8NpJ.s:1013   .text:00000000000006b4 .LVL95
     /tmp/ccvL8NpJ.s:1020   .text:00000000000006b8 .LVL96
     /tmp/ccvL8NpJ.s:1046   .text:00000000000006dc .LVL99
     /tmp/ccvL8NpJ.s:1063   .text:00000000000006f4 .LVL101
     /tmp/ccvL8NpJ.s:1100   .text:000000000000073c .LVL106
     /tmp/ccvL8NpJ.s:1216   .text:0000000000000800 .LVL117
     /tmp/ccvL8NpJ.s:1174   .text:00000000000007b4 .LVL111
     /tmp/ccvL8NpJ.s:1140   .text:0000000000000784 .LVL108
     /tmp/ccvL8NpJ.s:1144   .text:0000000000000788 .LVL109
     /tmp/ccvL8NpJ.s:1200   .text:00000000000007e0 .LVL114
     /tmp/ccvL8NpJ.s:801    .text:000000000000058c .LVL74
     /tmp/ccvL8NpJ.s:875    .text:00000000000005fc .LVL80
     /tmp/ccvL8NpJ.s:928    .text:0000000000000644 .LVL86
     /tmp/ccvL8NpJ.s:932    .text:0000000000000648 .LVL87
     /tmp/ccvL8NpJ.s:943    .text:000000000000065c .LVL89
     /tmp/ccvL8NpJ.s:950    .text:0000000000000660 .LVL90
     /tmp/ccvL8NpJ.s:962    .text:0000000000000670 .LVL91
     /tmp/ccvL8NpJ.s:816    .text:00000000000005a8 .LVL75
     /tmp/ccvL8NpJ.s:820    .text:00000000000005ac .LVL76
     /tmp/ccvL8NpJ.s:923    .text:000000000000063c .LVL85
     /tmp/ccvL8NpJ.s:879    .text:0000000000000600 .LVL81
     /tmp/ccvL8NpJ.s:936    .text:0000000000000650 .LVL88
     /tmp/ccvL8NpJ.s:900    .text:0000000000000614 .LVL83
GAS LISTING /tmp/ccvL8NpJ.s 			page 91


     /tmp/ccvL8NpJ.s:861    .text:00000000000005f0 .LVL78
     /tmp/ccvL8NpJ.s:868    .text:00000000000005f4 .LVL79
     /tmp/ccvL8NpJ.s:511    .text:00000000000003d4 .LVL50
     /tmp/ccvL8NpJ.s:530    .text:00000000000003f8 .LVL51
     /tmp/ccvL8NpJ.s:668    .text:00000000000004dc .LVL66
     /tmp/ccvL8NpJ.s:540    .text:0000000000000410 .LVL53
     /tmp/ccvL8NpJ.s:638    .text:00000000000004b4 .LVL61
     /tmp/ccvL8NpJ.s:644    .text:00000000000004b8 .LVL62
     /tmp/ccvL8NpJ.s:646    .text:00000000000004bc .LVL63
     /tmp/ccvL8NpJ.s:654    .text:00000000000004c8 .LVL65
     /tmp/ccvL8NpJ.s:578    .text:0000000000000458 .LVL55
     /tmp/ccvL8NpJ.s:582    .text:000000000000045c .LVL56
     /tmp/ccvL8NpJ.s:612    .text:0000000000000488 .LVL58
     /tmp/ccvL8NpJ.s:651    .text:00000000000004c4 .LVL64
     /tmp/ccvL8NpJ.s:1558   .text:00000000000009b0 .LVL164
     /tmp/ccvL8NpJ.s:1654   .text:0000000000000a78 .LVL168
     /tmp/ccvL8NpJ.s:1690   .text:0000000000000ad0 .LVL171
     /tmp/ccvL8NpJ.s:2426   .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccvL8NpJ.s:817    .text:00000000000005a8 .LBB50
     /tmp/ccvL8NpJ.s:827    .text:00000000000005b4 .LBE50
     /tmp/ccvL8NpJ.s:829    .text:00000000000005b4 .LBB58
     /tmp/ccvL8NpJ.s:888    .text:0000000000000608 .LBE58
     /tmp/ccvL8NpJ.s:890    .text:0000000000000608 .LBB59
     /tmp/ccvL8NpJ.s:947    .text:000000000000065c .LBE59
     /tmp/ccvL8NpJ.s:851    .text:00000000000005dc .LBB52
     /tmp/ccvL8NpJ.s:886    .text:0000000000000608 .LBE52
     /tmp/ccvL8NpJ.s:892    .text:0000000000000608 .LBB55
     /tmp/ccvL8NpJ.s:945    .text:000000000000065c .LBE55
     /tmp/ccvL8NpJ.s:1738   .text:0000000000000b14 .LBB81
     /tmp/ccvL8NpJ.s:1790   .text:0000000000000b54 .LBE81
     /tmp/ccvL8NpJ.s:1794   .text:0000000000000b54 .LBB86
     /tmp/ccvL8NpJ.s:1810   .text:0000000000000b70 .LBE86
     /tmp/ccvL8NpJ.s:1829   .text:0000000000000b84 .LBB87
     /tmp/ccvL8NpJ.s:1886   .text:0000000000000bf8 .LBE87
     /tmp/ccvL8NpJ.s:1979   .text:0000000000000c60 .LBE105
     /tmp/ccvL8NpJ.s:1981   .text:0000000000000c60 .LBB115
     /tmp/ccvL8NpJ.s:2014   .text:0000000000000c84 .LBE115
     /tmp/ccvL8NpJ.s:1945   .text:0000000000000c40 .LBB107
     /tmp/ccvL8NpJ.s:1951   .text:0000000000000c44 .LBE107
     /tmp/ccvL8NpJ.s:1955   .text:0000000000000c48 .LBB112
     /tmp/ccvL8NpJ.s:1977   .text:0000000000000c60 .LBE112
     /tmp/ccvL8NpJ.s:1983   .text:0000000000000c60 .LBB113
     /tmp/ccvL8NpJ.s:2008   .text:0000000000000c80 .LBE113
     /tmp/ccvL8NpJ.s:2081   .text:0000000000000cc8 .LBE116
     /tmp/ccvL8NpJ.s:2083   .text:0000000000000cc8 .LBB126
     /tmp/ccvL8NpJ.s:2112   .text:0000000000000cec .LBE126
     /tmp/ccvL8NpJ.s:2047   .text:0000000000000ca8 .LBB118
     /tmp/ccvL8NpJ.s:2053   .text:0000000000000cac .LBE118
     /tmp/ccvL8NpJ.s:2057   .text:0000000000000cb0 .LBB123
     /tmp/ccvL8NpJ.s:2079   .text:0000000000000cc8 .LBE123
     /tmp/ccvL8NpJ.s:2085   .text:0000000000000cc8 .LBB124
     /tmp/ccvL8NpJ.s:2110   .text:0000000000000cec .LBE124

UNDEFINED SYMBOLS
_ZN5Buddy4freeEPvm
_ZN11ConsoleUtil5printEPKciS1_i
_ZN11ConsoleUtil11printStringEPKc
GAS LISTING /tmp/ccvL8NpJ.s 			page 92


_ZN5Buddy5allocEm
_Z6strcpyPKcPc
_ZN5Buddy10initializeEPvm
HEAP_START_ADDR
