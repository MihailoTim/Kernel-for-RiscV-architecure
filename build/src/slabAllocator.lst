GAS LISTING /tmp/ccgsFZb0.s 			page 1


   1              		.file	"slabAllocator.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN13SlabAllocator11shrinkCacheEP5Cache
   9              	_ZN13SlabAllocator11shrinkCacheEP5Cache:
  10              	.LFB40:
  11              		.file 1 "src/slabAllocator.cpp"
   1:src/slabAllocator.cpp **** //
   2:src/slabAllocator.cpp **** // Created by os on 12/25/22.
   3:src/slabAllocator.cpp **** //
   4:src/slabAllocator.cpp **** #include "../h/slabAllocator.hpp"
   5:src/slabAllocator.cpp **** 
   6:src/slabAllocator.cpp **** Cache* SlabAllocator::cache = nullptr;
   7:src/slabAllocator.cpp **** Cache* SlabAllocator::sizeN[BUCKET_SIZE] = {nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, n
   8:src/slabAllocator.cpp **** const char* SlabAllocator::names[13] = {"Buffer Cache No. 0", "Buffer Cache No. 1", "Buffer Cache N
   9:src/slabAllocator.cpp **** void* SlabAllocator::startAddr = nullptr;
  10:src/slabAllocator.cpp **** uint64 SlabAllocator::blocksResponsibleFor = 0;
  11:src/slabAllocator.cpp **** 
  12:src/slabAllocator.cpp **** void SlabAllocator::initialize(void* space, uint64 blockNum) {
  13:src/slabAllocator.cpp ****     Buddy::initialize(space, blockNum);
  14:src/slabAllocator.cpp ****     startAddr = space;
  15:src/slabAllocator.cpp ****     blocksResponsibleFor = blockNum;
  16:src/slabAllocator.cpp ****     cache = (Cache*)SLAB_META_ADDR_CONST;
  17:src/slabAllocator.cpp ****     cache->ctor = nullptr;
  18:src/slabAllocator.cpp ****     cache->dtor = nullptr;
  19:src/slabAllocator.cpp ****     cache->emptyHead = nullptr;
  20:src/slabAllocator.cpp ****     cache->partialHead = nullptr;
  21:src/slabAllocator.cpp ****     cache->fullHead = nullptr;
  22:src/slabAllocator.cpp ****     cache->objectSize = sizeof(Cache);
  23:src/slabAllocator.cpp ****     cache->slabSize = DEFAULT_SLAB_SIZE;
  24:src/slabAllocator.cpp ****     strcpy("Main Cache", cache->name);
  25:src/slabAllocator.cpp ****     for(int i=0;i<BUCKET_SIZE;i++){
  26:src/slabAllocator.cpp ****         sizeN[i] = SlabAllocator::createCache(names[i], 2<<i, nullptr, nullptr);
  27:src/slabAllocator.cpp ****         printCache(sizeN[i]);
  28:src/slabAllocator.cpp ****     }
  29:src/slabAllocator.cpp **** }
  30:src/slabAllocator.cpp **** 
  31:src/slabAllocator.cpp **** bool SlabAllocator::allocateSlab(Cache *cache) {
  32:src/slabAllocator.cpp ****     Slab* slab = (Slab*)Buddy::alloc(cache->slabSize);
  33:src/slabAllocator.cpp ****     if(!slab)
  34:src/slabAllocator.cpp ****         return false;
  35:src/slabAllocator.cpp ****     SlabAllocator::insertIntoList(cache->emptyHead, slab);
  36:src/slabAllocator.cpp ****     slab->totalNumOfSlots = slab->numOfFreeSlots = ((cache->slabSize << BLOCK_SIZE_BITS) - sizeof(S
  37:src/slabAllocator.cpp ****     slab->objectOffset = (void*)((uint64)slab + sizeof(Slab) + (slab->totalNumOfSlots>>3) + 1);
  38:src/slabAllocator.cpp ****     slab->allocated = (bool*)((uint64)slab + sizeof(Slab));
  39:src/slabAllocator.cpp ****     slab->parent = cache;
  40:src/slabAllocator.cpp ****     for(uint64 i=0;i<slab->totalNumOfSlots;i++)
  41:src/slabAllocator.cpp ****         slab->allocated[i] = false;
  42:src/slabAllocator.cpp ****     return true;
  43:src/slabAllocator.cpp **** }
  44:src/slabAllocator.cpp **** 
  45:src/slabAllocator.cpp **** void* SlabAllocator::allocateSlot(Slab *slab) {
  46:src/slabAllocator.cpp ****     for(uint64 i=0; i<slab->totalNumOfSlots; i++){
  47:src/slabAllocator.cpp ****         if(!slab->allocated[i]){
GAS LISTING /tmp/ccgsFZb0.s 			page 2


  48:src/slabAllocator.cpp ****             slab->allocated[i] = true;
  49:src/slabAllocator.cpp ****             Slab* &headFrom = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead
  50:src/slabAllocator.cpp ****             slab->numOfFreeSlots--;
  51:src/slabAllocator.cpp ****             Slab* &headTo = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
  52:src/slabAllocator.cpp **** 
  53:src/slabAllocator.cpp ****             if(headTo != headFrom)
  54:src/slabAllocator.cpp ****                 SlabAllocator::move(headFrom, headTo, slab);
  55:src/slabAllocator.cpp **** 
  56:src/slabAllocator.cpp ****             return (void*)((uint64)slab->objectOffset + i*slab->parent->objectSize);
  57:src/slabAllocator.cpp ****         }
  58:src/slabAllocator.cpp ****     }
  59:src/slabAllocator.cpp ****     return nullptr;
  60:src/slabAllocator.cpp **** }
  61:src/slabAllocator.cpp **** 
  62:src/slabAllocator.cpp **** void* SlabAllocator::allocateObject(Cache *cache) {
  63:src/slabAllocator.cpp ****     void* ret = SlabAllocator::allocateFromList(cache->partialHead);
  64:src/slabAllocator.cpp ****     if(ret)
  65:src/slabAllocator.cpp ****         return ret;
  66:src/slabAllocator.cpp ****     ret = SlabAllocator::allocateFromList(cache->emptyHead);
  67:src/slabAllocator.cpp ****     if(ret)
  68:src/slabAllocator.cpp ****         return ret;
  69:src/slabAllocator.cpp ****     if(!SlabAllocator::allocateSlab(cache))
  70:src/slabAllocator.cpp ****         return nullptr;
  71:src/slabAllocator.cpp **** 
  72:src/slabAllocator.cpp ****     ret = SlabAllocator::allocateSlot(cache->emptyHead);
  73:src/slabAllocator.cpp **** 
  74:src/slabAllocator.cpp ****     return ret;
  75:src/slabAllocator.cpp **** }
  76:src/slabAllocator.cpp **** 
  77:src/slabAllocator.cpp **** void* SlabAllocator::allocateBuffer(size_t size) {
  78:src/slabAllocator.cpp ****     uint64 level = Buddy::getDeg(Buddy::ceil(size));
  79:src/slabAllocator.cpp ****     if(level < CACHE_LOWER_BOUND || level > CACHE_UPPER_BOUND)
  80:src/slabAllocator.cpp ****         return nullptr;
  81:src/slabAllocator.cpp ****     else
  82:src/slabAllocator.cpp ****         level -= CACHE_LOWER_BOUND;
  83:src/slabAllocator.cpp ****     SlabAllocator::allocateObject(sizeN[level]);
  84:src/slabAllocator.cpp **** return nullptr;
  85:src/slabAllocator.cpp **** }
  86:src/slabAllocator.cpp **** 
  87:src/slabAllocator.cpp **** void SlabAllocator::freeSlot(Slab *slab, uint64 index) {
  88:src/slabAllocator.cpp ****     if(slab->allocated[index]) {
  89:src/slabAllocator.cpp ****         slab->allocated[index] = false;
  90:src/slabAllocator.cpp ****         Slab *&headFrom = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
  91:src/slabAllocator.cpp ****         slab->numOfFreeSlots++;
  92:src/slabAllocator.cpp ****         Slab *&headTo = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead;
  93:src/slabAllocator.cpp **** 
  94:src/slabAllocator.cpp ****         if(slab->isEmpty()) {
  95:src/slabAllocator.cpp ****             SlabAllocator::removeFromList(headFrom, slab);
  96:src/slabAllocator.cpp ****             Buddy::free(slab, slab->parent->slabSize);
  97:src/slabAllocator.cpp ****         }
  98:src/slabAllocator.cpp ****         else
  99:src/slabAllocator.cpp ****             if (headTo != headFrom)
 100:src/slabAllocator.cpp ****                 SlabAllocator::move(headFrom, headTo, slab);
 101:src/slabAllocator.cpp ****     }
 102:src/slabAllocator.cpp **** }
 103:src/slabAllocator.cpp **** 
 104:src/slabAllocator.cpp **** bool SlabAllocator::freeObject(Cache* cache, const void *addr) {
GAS LISTING /tmp/ccgsFZb0.s 			page 3


 105:src/slabAllocator.cpp **** 
 106:src/slabAllocator.cpp ****     bool deleted = SlabAllocator::freeFromList(cache->partialHead, addr);
 107:src/slabAllocator.cpp ****     if(deleted)
 108:src/slabAllocator.cpp ****         return deleted;
 109:src/slabAllocator.cpp **** 
 110:src/slabAllocator.cpp ****     deleted = SlabAllocator::freeFromList(cache->fullHead, addr);
 111:src/slabAllocator.cpp **** 
 112:src/slabAllocator.cpp ****     return deleted;
 113:src/slabAllocator.cpp **** }
 114:src/slabAllocator.cpp **** 
 115:src/slabAllocator.cpp **** void SlabAllocator::freeBuffer(const void *addr) {
 116:src/slabAllocator.cpp ****     for(int i=0;i<BUCKET_SIZE;i++)
 117:src/slabAllocator.cpp ****         if(SlabAllocator::freeObject(sizeN[i], addr))
 118:src/slabAllocator.cpp ****             return;
 119:src/slabAllocator.cpp **** }
 120:src/slabAllocator.cpp **** 
 121:src/slabAllocator.cpp **** Cache* SlabAllocator::createCache(const char *name, size_t size, void (*ctor)(void *), void (*dtor)
 122:src/slabAllocator.cpp ****     Cache* ret = (Cache*)SlabAllocator::allocateObject(SlabAllocator::cache);
 123:src/slabAllocator.cpp ****     ret->ctor = ctor;
 124:src/slabAllocator.cpp ****     ret->dtor = dtor;
 125:src/slabAllocator.cpp ****     ret->emptyHead = ret->partialHead = ret->fullHead = nullptr;
 126:src/slabAllocator.cpp ****     ret->objectSize = size;
 127:src/slabAllocator.cpp ****     ret->slabSize = DEFAULT_SLAB_SIZE;
 128:src/slabAllocator.cpp ****     strcpy(name, ret->name);
 129:src/slabAllocator.cpp ****     return ret;
 130:src/slabAllocator.cpp **** }
 131:src/slabAllocator.cpp **** 
 132:src/slabAllocator.cpp **** void SlabAllocator::deleteCache(Cache* &cache) {
 133:src/slabAllocator.cpp ****     deleteList(cache->fullHead);
 134:src/slabAllocator.cpp ****     deleteList(cache->partialHead);
 135:src/slabAllocator.cpp ****     deleteList(cache->emptyHead);
 136:src/slabAllocator.cpp ****     SlabAllocator::freeObject(SlabAllocator::cache, cache);
 137:src/slabAllocator.cpp ****     cache = nullptr;
 138:src/slabAllocator.cpp **** }
 139:src/slabAllocator.cpp **** 
 140:src/slabAllocator.cpp **** int SlabAllocator::shrinkCache(Cache *cache) {
  12              		.loc 1 140 46
  13              		.cfi_startproc
  14              	.LVL0:
  15 0000 130101FE 		addi	sp,sp,-32
  16              		.cfi_def_cfa_offset 32
  17 0004 233C1100 		sd	ra,24(sp)
  18 0008 23388100 		sd	s0,16(sp)
  19 000c 23349100 		sd	s1,8(sp)
  20 0010 23302101 		sd	s2,0(sp)
  21              		.cfi_offset 1, -8
  22              		.cfi_offset 8, -16
  23              		.cfi_offset 9, -24
  24              		.cfi_offset 18, -32
  25 0014 13040102 		addi	s0,sp,32
  26              		.cfi_def_cfa 8, 0
  27 0018 93040500 		mv	s1,a0
 141:src/slabAllocator.cpp ****     int ret = 0;
  28              		.loc 1 141 5
  29              	.LVL1:
  30              		.loc 1 141 9 is_stmt 0
  31 001c 13090000 		li	s2,0
GAS LISTING /tmp/ccgsFZb0.s 			page 4


  32              	.LVL2:
  33              	.L3:
 142:src/slabAllocator.cpp ****     while(cache->emptyHead){
  34              		.loc 1 142 5 is_stmt 1
  35              		.loc 1 142 18
  36 0020 03B50406 		ld	a0,96(s1)
  37 0024 63040502 		beqz	a0,.L2
 143:src/slabAllocator.cpp ****         Buddy::free(cache->emptyHead, cache->slabSize);
  38              		.loc 1 143 9
  39              		.loc 1 143 20 is_stmt 0
  40 0028 83B58404 		ld	a1,72(s1)
  41 002c 97000000 		call	_ZN5Buddy4freeEPvm@plt
  41      E7800000 
  42              	.LVL3:
 144:src/slabAllocator.cpp ****         ret += cache->emptyHead->totalNumOfSlots;
  43              		.loc 1 144 9 is_stmt 1
  44              		.loc 1 144 23 is_stmt 0
  45 0034 83B70406 		ld	a5,96(s1)
  46              		.loc 1 144 34
  47 0038 03B78701 		ld	a4,24(a5)
  48              		.loc 1 144 13
  49 003c 3B092701 		addw	s2,a4,s2
  50              	.LVL4:
 145:src/slabAllocator.cpp ****         cache->emptyHead = cache->emptyHead->next;
  51              		.loc 1 145 9 is_stmt 1
  52              		.loc 1 145 46 is_stmt 0
  53 0040 83B78700 		ld	a5,8(a5)
  54              		.loc 1 145 26
  55 0044 23B0F406 		sd	a5,96(s1)
 142:src/slabAllocator.cpp ****         Buddy::free(cache->emptyHead, cache->slabSize);
  56              		.loc 1 142 5
  57 0048 6FF09FFD 		j	.L3
  58              	.LVL5:
  59              	.L2:
 146:src/slabAllocator.cpp ****     }
 147:src/slabAllocator.cpp ****     return ret;
  60              		.loc 1 147 5 is_stmt 1
 148:src/slabAllocator.cpp **** }
  61              		.loc 1 148 1 is_stmt 0
  62 004c 13050900 		mv	a0,s2
  63 0050 83308101 		ld	ra,24(sp)
  64              		.cfi_restore 1
  65 0054 03340101 		ld	s0,16(sp)
  66              		.cfi_restore 8
  67              		.cfi_def_cfa 2, 32
  68 0058 83348100 		ld	s1,8(sp)
  69              		.cfi_restore 9
  70              	.LVL6:
  71 005c 03390100 		ld	s2,0(sp)
  72              		.cfi_restore 18
  73              	.LVL7:
  74 0060 13010102 		addi	sp,sp,32
  75              		.cfi_def_cfa_offset 0
  76 0064 67800000 		jr	ra
  77              		.cfi_endproc
  78              	.LFE40:
  80              		.section	.rodata.str1.8,"aMS",@progbits,1
GAS LISTING /tmp/ccgsFZb0.s 			page 5


  81              		.align	3
  82              	.LC0:
  83 0000 0A00     		.string	"\n"
  84 0002 00000000 		.align	3
  84      0000
  85              	.LC1:
  86 0008 536C6162 		.string	"Slab address:"
  86      20616464 
  86      72657373 
  86      3A00
  87 0016 0000     		.align	3
  88              	.LC2:
  89 0018 4E756D62 		.string	"Number of slots:"
  89      6572206F 
  89      6620736C 
  89      6F74733A 
  89      00
  90 0029 00000000 		.align	3
  90      000000
  91              	.LC3:
  92 0030 536C6162 		.string	"Slab object size:"
  92      206F626A 
  92      65637420 
  92      73697A65 
  92      3A00
  93 0042 00000000 		.align	3
  93      0000
  94              	.LC4:
  95 0048 4F626A65 		.string	"Object offset:"
  95      6374206F 
  95      66667365 
  95      743A00
  96 0057 00       		.align	3
  97              	.LC5:
  98 0058 536C6162 		.string	"Slab allocated array address:"
  98      20616C6C 
  98      6F636174 
  98      65642061 
  98      72726179 
  99 0076 0000     		.align	3
 100              	.LC6:
 101 0078 416C6C6F 		.string	"Allocated status array:\n"
 101      63617465 
 101      64207374 
 101      61747573 
 101      20617272 
 102 0091 00000000 		.align	3
 102      000000
 103              	.LC7:
 104 0098 2000     		.string	" "
 105 009a 00000000 		.align	3
 105      0000
 106              	.LC8:
 107 00a0 00       		.string	""
 108              		.text
 109              		.align	2
 110              		.globl	_ZN13SlabAllocator9printSlabEP4Slab
GAS LISTING /tmp/ccgsFZb0.s 			page 6


 112              	_ZN13SlabAllocator9printSlabEP4Slab:
 113              	.LFB41:
 149:src/slabAllocator.cpp **** 
 150:src/slabAllocator.cpp **** void SlabAllocator::printSlab(Slab *slab) {
 114              		.loc 1 150 43 is_stmt 1
 115              		.cfi_startproc
 116              	.LVL8:
 117 0068 130101FE 		addi	sp,sp,-32
 118              		.cfi_def_cfa_offset 32
 119 006c 233C1100 		sd	ra,24(sp)
 120 0070 23388100 		sd	s0,16(sp)
 121 0074 23349100 		sd	s1,8(sp)
 122 0078 23302101 		sd	s2,0(sp)
 123              		.cfi_offset 1, -8
 124              		.cfi_offset 8, -16
 125              		.cfi_offset 9, -24
 126              		.cfi_offset 18, -32
 127 007c 13040102 		addi	s0,sp,32
 128              		.cfi_def_cfa 8, 0
 129 0080 13090500 		mv	s2,a0
 151:src/slabAllocator.cpp ****     ConsoleUtil::print("Slab address:", (uint64)slab, "\n");
 130              		.loc 1 151 5
 131              		.loc 1 151 23 is_stmt 0
 132 0084 17060000 		lla	a2,.LC0
 132      13060600 
 133 008c 9B050500 		sext.w	a1,a0
 134 0090 17050000 		lla	a0,.LC1
 134      13050500 
 135              	.LVL9:
 136 0098 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_@plt
 136      E7800000 
 137              	.LVL10:
 152:src/slabAllocator.cpp ****     ConsoleUtil::print("Number of slots:", (uint64)slab->totalNumOfSlots, "\n");
 138              		.loc 1 152 5 is_stmt 1
 139              		.loc 1 152 23 is_stmt 0
 140 00a0 17060000 		lla	a2,.LC0
 140      13060600 
 141 00a8 83258901 		lw	a1,24(s2)
 142 00ac 17050000 		lla	a0,.LC2
 142      13050500 
 143 00b4 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_@plt
 143      E7800000 
 144              	.LVL11:
 153:src/slabAllocator.cpp ****     ConsoleUtil::print("Slab object size:", (uint64)sizeof(Slab), "\n");
 145              		.loc 1 153 5 is_stmt 1
 146              		.loc 1 153 23 is_stmt 0
 147 00bc 17060000 		lla	a2,.LC0
 147      13060600 
 148 00c4 93058003 		li	a1,56
 149 00c8 17050000 		lla	a0,.LC3
 149      13050500 
 150 00d0 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_@plt
 150      E7800000 
 151              	.LVL12:
 154:src/slabAllocator.cpp ****     ConsoleUtil::print("Object offset:", (uint64)slab->objectOffset, "\n");
 152              		.loc 1 154 5 is_stmt 1
 153              		.loc 1 154 23 is_stmt 0
GAS LISTING /tmp/ccgsFZb0.s 			page 7


 154 00d8 17060000 		lla	a2,.LC0
 154      13060600 
 155 00e0 83258902 		lw	a1,40(s2)
 156 00e4 17050000 		lla	a0,.LC4
 156      13050500 
 157 00ec 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_@plt
 157      E7800000 
 158              	.LVL13:
 155:src/slabAllocator.cpp ****     ConsoleUtil::print("Slab allocated array address:", (uint64)slab->allocated, "\n");
 159              		.loc 1 155 5 is_stmt 1
 160              		.loc 1 155 23 is_stmt 0
 161 00f4 17060000 		lla	a2,.LC0
 161      13060600 
 162 00fc 83250902 		lw	a1,32(s2)
 163 0100 17050000 		lla	a0,.LC5
 163      13050500 
 164 0108 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_@plt
 164      E7800000 
 165              	.LVL14:
 156:src/slabAllocator.cpp ****     ConsoleUtil::printString("Allocated status array:\n");
 166              		.loc 1 156 5 is_stmt 1
 167              		.loc 1 156 29 is_stmt 0
 168 0110 17050000 		lla	a0,.LC6
 168      13050500 
 169 0118 97000000 		call	_ZN11ConsoleUtil11printStringEPKc@plt
 169      E7800000 
 170              	.LVL15:
 157:src/slabAllocator.cpp ****     for(uint64 i=0;i<slab->totalNumOfSlots;i++){
 171              		.loc 1 157 5 is_stmt 1
 172              	.LBB34:
 173              		.loc 1 157 16 is_stmt 0
 174 0120 93040000 		li	s1,0
 175              	.LVL16:
 176              	.L7:
 177              		.loc 1 157 21 is_stmt 1 discriminator 3
 178              		.loc 1 157 28 is_stmt 0 discriminator 3
 179 0124 83378901 		ld	a5,24(s2)
 180              		.loc 1 157 21 discriminator 3
 181 0128 63F8F402 		bleu	a5,s1,.L6
 158:src/slabAllocator.cpp ****         ConsoleUtil::print("", (uint8)slab->allocated[i], " ");
 182              		.loc 1 158 9 is_stmt 1 discriminator 2
 183              		.loc 1 158 45 is_stmt 0 discriminator 2
 184 012c 83370902 		ld	a5,32(s2)
 185              		.loc 1 158 56 discriminator 2
 186 0130 B3879700 		add	a5,a5,s1
 187              		.loc 1 158 27 discriminator 2
 188 0134 17060000 		lla	a2,.LC7
 188      13060600 
 189 013c 83C50700 		lbu	a1,0(a5)
 190 0140 17050000 		lla	a0,.LC8
 190      13050500 
 191 0148 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_@plt
 191      E7800000 
 192              	.LVL17:
 157:src/slabAllocator.cpp ****     for(uint64 i=0;i<slab->totalNumOfSlots;i++){
 193              		.loc 1 157 5 is_stmt 1 discriminator 2
 194 0150 93841400 		addi	s1,s1,1
GAS LISTING /tmp/ccgsFZb0.s 			page 8


 195              	.LVL18:
 196 0154 6FF01FFD 		j	.L7
 197              	.L6:
 198              	.LBE34:
 159:src/slabAllocator.cpp ****     }
 160:src/slabAllocator.cpp ****     ConsoleUtil::printString("\n");
 199              		.loc 1 160 5
 200              		.loc 1 160 29 is_stmt 0
 201 0158 17050000 		lla	a0,.LC0
 201      13050500 
 202 0160 97000000 		call	_ZN11ConsoleUtil11printStringEPKc@plt
 202      E7800000 
 203              	.LVL19:
 161:src/slabAllocator.cpp **** }
 204              		.loc 1 161 1
 205 0168 83308101 		ld	ra,24(sp)
 206              		.cfi_restore 1
 207 016c 03340101 		ld	s0,16(sp)
 208              		.cfi_restore 8
 209              		.cfi_def_cfa 2, 32
 210 0170 83348100 		ld	s1,8(sp)
 211              		.cfi_restore 9
 212              	.LVL20:
 213 0174 03390100 		ld	s2,0(sp)
 214              		.cfi_restore 18
 215              	.LVL21:
 216 0178 13010102 		addi	sp,sp,32
 217              		.cfi_def_cfa_offset 0
 218 017c 67800000 		jr	ra
 219              		.cfi_endproc
 220              	.LFE41:
 222              		.section	.rodata.str1.8
 223 00a1 00000000 		.align	3
 223      000000
 224              	.LC9:
 225 00a8 43616368 		.string	"Cache name: "
 225      65206E61 
 225      6D653A20 
 225      00
 226 00b5 000000   		.align	3
 227              	.LC10:
 228 00b8 48454150 		.string	"HEAP_START_ADDR: "
 228      5F535441 
 228      52545F41 
 228      4444523A 
 228      2000
 229 00ca 00000000 		.align	3
 229      0000
 230              	.LC11:
 231 00d0 43616368 		.string	"Cache address: "
 231      65206164 
 231      64726573 
 231      733A2000 
 232              		.align	3
 233              	.LC12:
 234 00e0 456D7074 		.string	"Empty head: "
 234      79206865 
GAS LISTING /tmp/ccgsFZb0.s 			page 9


 234      61643A20 
 234      00
 235 00ed 000000   		.align	3
 236              	.LC13:
 237 00f0 50617274 		.string	"Partial head: "
 237      69616C20 
 237      68656164 
 237      3A2000
 238 00ff 00       		.align	3
 239              	.LC14:
 240 0100 46756C6C 		.string	"Full head: "
 240      20686561 
 240      643A2000 
 241 010c 00000000 		.align	3
 242              	.LC15:
 243 0110 4F626A65 		.string	"Object size: "
 243      63742073 
 243      697A653A 
 243      2000
 244              		.text
 245              		.align	2
 246              		.globl	_ZN13SlabAllocator10printCacheEP5Cache
 248              	_ZN13SlabAllocator10printCacheEP5Cache:
 249              	.LFB42:
 162:src/slabAllocator.cpp **** 
 163:src/slabAllocator.cpp **** void SlabAllocator::printCache(Cache *cache) {
 250              		.loc 1 163 46 is_stmt 1
 251              		.cfi_startproc
 252              	.LVL22:
 253 0180 130101FE 		addi	sp,sp,-32
 254              		.cfi_def_cfa_offset 32
 255 0184 233C1100 		sd	ra,24(sp)
 256 0188 23388100 		sd	s0,16(sp)
 257 018c 23349100 		sd	s1,8(sp)
 258 0190 23302101 		sd	s2,0(sp)
 259              		.cfi_offset 1, -8
 260              		.cfi_offset 8, -16
 261              		.cfi_offset 9, -24
 262              		.cfi_offset 18, -32
 263 0194 13040102 		addi	s0,sp,32
 264              		.cfi_def_cfa 8, 0
 265 0198 13090500 		mv	s2,a0
 164:src/slabAllocator.cpp ****     ConsoleUtil::printString("Cache name: ");
 266              		.loc 1 164 5
 267              		.loc 1 164 29 is_stmt 0
 268 019c 17050000 		lla	a0,.LC9
 268      13050500 
 269              	.LVL23:
 270 01a4 97000000 		call	_ZN11ConsoleUtil11printStringEPKc@plt
 270      E7800000 
 271              	.LVL24:
 165:src/slabAllocator.cpp ****     ConsoleUtil::printString(cache->name);
 272              		.loc 1 165 5 is_stmt 1
 273              		.loc 1 165 29 is_stmt 0
 274 01ac 13050900 		mv	a0,s2
 275 01b0 97000000 		call	_ZN11ConsoleUtil11printStringEPKc@plt
 275      E7800000 
GAS LISTING /tmp/ccgsFZb0.s 			page 10


 276              	.LVL25:
 166:src/slabAllocator.cpp ****     ConsoleUtil::printString("\n");
 277              		.loc 1 166 5 is_stmt 1
 278              		.loc 1 166 29 is_stmt 0
 279 01b8 17050000 		lla	a0,.LC0
 279      13050500 
 280 01c0 97000000 		call	_ZN11ConsoleUtil11printStringEPKc@plt
 280      E7800000 
 281              	.LVL26:
 167:src/slabAllocator.cpp ****     ConsoleUtil::print("HEAP_START_ADDR: ", (uint64)HEAP_START_ADDR, "\n");
 282              		.loc 1 167 5 is_stmt 1
 283              		.loc 1 167 23 is_stmt 0
 284 01c8 17060000 		lla	a2,.LC0
 284      13060600 
 285 01d0 97070000 		la	a5,HEAP_START_ADDR
 285      83B70700 
 286 01d8 83A50700 		lw	a1,0(a5)
 287 01dc 17050000 		lla	a0,.LC10
 287      13050500 
 288 01e4 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_@plt
 288      E7800000 
 289              	.LVL27:
 168:src/slabAllocator.cpp ****     ConsoleUtil::print("Cache address: ", (uint64)cache, "\n");
 290              		.loc 1 168 5 is_stmt 1
 291              		.loc 1 168 23 is_stmt 0
 292 01ec 17060000 		lla	a2,.LC0
 292      13060600 
 293 01f4 9B050900 		sext.w	a1,s2
 294 01f8 17050000 		lla	a0,.LC11
 294      13050500 
 295 0200 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_@plt
 295      E7800000 
 296              	.LVL28:
 169:src/slabAllocator.cpp ****     ConsoleUtil::print("Empty head: ", (uint64)cache->emptyHead, "\n");
 297              		.loc 1 169 5 is_stmt 1
 298              		.loc 1 169 23 is_stmt 0
 299 0208 17060000 		lla	a2,.LC0
 299      13060600 
 300 0210 83250906 		lw	a1,96(s2)
 301 0214 17050000 		lla	a0,.LC12
 301      13050500 
 302 021c 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_@plt
 302      E7800000 
 303              	.LVL29:
 170:src/slabAllocator.cpp **** 
 171:src/slabAllocator.cpp ****     Slab* iter = cache->emptyHead;
 304              		.loc 1 171 5 is_stmt 1
 305              		.loc 1 171 11 is_stmt 0
 306 0224 83340906 		ld	s1,96(s2)
 307              	.LVL30:
 308              	.L11:
 172:src/slabAllocator.cpp ****     while(iter){
 309              		.loc 1 172 5 is_stmt 1
 310              		.loc 1 172 11
 311 0228 63840402 		beqz	s1,.L10
 173:src/slabAllocator.cpp ****         ConsoleUtil::print("", (uint64)iter, " ");
 312              		.loc 1 173 9
GAS LISTING /tmp/ccgsFZb0.s 			page 11


 313              		.loc 1 173 27 is_stmt 0
 314 022c 17060000 		lla	a2,.LC7
 314      13060600 
 315 0234 9B850400 		sext.w	a1,s1
 316 0238 17050000 		lla	a0,.LC8
 316      13050500 
 317 0240 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_@plt
 317      E7800000 
 318              	.LVL31:
 174:src/slabAllocator.cpp ****         iter = iter->next;
 319              		.loc 1 174 9 is_stmt 1
 320              		.loc 1 174 14 is_stmt 0
 321 0248 83B48400 		ld	s1,8(s1)
 322              	.LVL32:
 172:src/slabAllocator.cpp ****     while(iter){
 323              		.loc 1 172 5
 324 024c 6FF0DFFD 		j	.L11
 325              	.L10:
 175:src/slabAllocator.cpp ****     }
 176:src/slabAllocator.cpp ****     ConsoleUtil::printString("\n");
 326              		.loc 1 176 5 is_stmt 1
 327              		.loc 1 176 29 is_stmt 0
 328 0250 17050000 		lla	a0,.LC0
 328      13050500 
 329 0258 97000000 		call	_ZN11ConsoleUtil11printStringEPKc@plt
 329      E7800000 
 330              	.LVL33:
 177:src/slabAllocator.cpp **** 
 178:src/slabAllocator.cpp ****     ConsoleUtil::print("Partial head: ", (uint64)cache->partialHead, "\n");
 331              		.loc 1 178 5 is_stmt 1
 332              		.loc 1 178 23 is_stmt 0
 333 0260 17060000 		lla	a2,.LC0
 333      13060600 
 334 0268 83258906 		lw	a1,104(s2)
 335 026c 17050000 		lla	a0,.LC13
 335      13050500 
 336 0274 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_@plt
 336      E7800000 
 337              	.LVL34:
 179:src/slabAllocator.cpp **** 
 180:src/slabAllocator.cpp ****     iter = cache->partialHead;
 338              		.loc 1 180 5 is_stmt 1
 339              		.loc 1 180 10 is_stmt 0
 340 027c 83348906 		ld	s1,104(s2)
 341              	.LVL35:
 342              	.L13:
 181:src/slabAllocator.cpp ****     while(iter){
 343              		.loc 1 181 5 is_stmt 1
 344              		.loc 1 181 11
 345 0280 63840402 		beqz	s1,.L12
 182:src/slabAllocator.cpp ****         ConsoleUtil::print("", (uint64)iter, " ");
 346              		.loc 1 182 9
 347              		.loc 1 182 27 is_stmt 0
 348 0284 17060000 		lla	a2,.LC7
 348      13060600 
 349 028c 9B850400 		sext.w	a1,s1
 350 0290 17050000 		lla	a0,.LC8
GAS LISTING /tmp/ccgsFZb0.s 			page 12


 350      13050500 
 351 0298 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_@plt
 351      E7800000 
 352              	.LVL36:
 183:src/slabAllocator.cpp ****         iter = iter->next;
 353              		.loc 1 183 9 is_stmt 1
 354              		.loc 1 183 14 is_stmt 0
 355 02a0 83B48400 		ld	s1,8(s1)
 356              	.LVL37:
 181:src/slabAllocator.cpp ****     while(iter){
 357              		.loc 1 181 5
 358 02a4 6FF0DFFD 		j	.L13
 359              	.L12:
 184:src/slabAllocator.cpp ****     }
 185:src/slabAllocator.cpp ****     ConsoleUtil::printString("\n");
 360              		.loc 1 185 5 is_stmt 1
 361              		.loc 1 185 29 is_stmt 0
 362 02a8 17050000 		lla	a0,.LC0
 362      13050500 
 363 02b0 97000000 		call	_ZN11ConsoleUtil11printStringEPKc@plt
 363      E7800000 
 364              	.LVL38:
 186:src/slabAllocator.cpp **** 
 187:src/slabAllocator.cpp ****     ConsoleUtil::print("Full head: ", (uint64)cache->fullHead, "\n");
 365              		.loc 1 187 5 is_stmt 1
 366              		.loc 1 187 23 is_stmt 0
 367 02b8 17060000 		lla	a2,.LC0
 367      13060600 
 368 02c0 83250907 		lw	a1,112(s2)
 369 02c4 17050000 		lla	a0,.LC14
 369      13050500 
 370 02cc 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_@plt
 370      E7800000 
 371              	.LVL39:
 188:src/slabAllocator.cpp **** 
 189:src/slabAllocator.cpp ****     iter = cache->fullHead;
 372              		.loc 1 189 5 is_stmt 1
 373              		.loc 1 189 10 is_stmt 0
 374 02d4 83340907 		ld	s1,112(s2)
 375              	.LVL40:
 376              	.L15:
 190:src/slabAllocator.cpp ****     while(iter){
 377              		.loc 1 190 5 is_stmt 1
 378              		.loc 1 190 11
 379 02d8 63840402 		beqz	s1,.L14
 191:src/slabAllocator.cpp ****         ConsoleUtil::print("", (uint64)iter, " ");
 380              		.loc 1 191 9
 381              		.loc 1 191 27 is_stmt 0
 382 02dc 17060000 		lla	a2,.LC7
 382      13060600 
 383 02e4 9B850400 		sext.w	a1,s1
 384 02e8 17050000 		lla	a0,.LC8
 384      13050500 
 385 02f0 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_@plt
 385      E7800000 
 386              	.LVL41:
 192:src/slabAllocator.cpp ****         iter = iter->next;
GAS LISTING /tmp/ccgsFZb0.s 			page 13


 387              		.loc 1 192 9 is_stmt 1
 388              		.loc 1 192 14 is_stmt 0
 389 02f8 83B48400 		ld	s1,8(s1)
 390              	.LVL42:
 190:src/slabAllocator.cpp ****     while(iter){
 391              		.loc 1 190 5
 392 02fc 6FF0DFFD 		j	.L15
 393              	.L14:
 193:src/slabAllocator.cpp ****     }
 194:src/slabAllocator.cpp ****     ConsoleUtil::printString("\n");
 394              		.loc 1 194 5 is_stmt 1
 395              		.loc 1 194 29 is_stmt 0
 396 0300 17050000 		lla	a0,.LC0
 396      13050500 
 397 0308 97000000 		call	_ZN11ConsoleUtil11printStringEPKc@plt
 397      E7800000 
 398              	.LVL43:
 195:src/slabAllocator.cpp **** 
 196:src/slabAllocator.cpp ****     ConsoleUtil::print("Object size: ", (uint64)cache->objectSize, "\n");
 399              		.loc 1 196 5 is_stmt 1
 400              		.loc 1 196 23 is_stmt 0
 401 0310 17060000 		lla	a2,.LC0
 401      13060600 
 402 0318 83250904 		lw	a1,64(s2)
 403 031c 17050000 		lla	a0,.LC15
 403      13050500 
 404 0324 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_@plt
 404      E7800000 
 405              	.LVL44:
 197:src/slabAllocator.cpp **** }
 406              		.loc 1 197 1
 407 032c 83308101 		ld	ra,24(sp)
 408              		.cfi_restore 1
 409 0330 03340101 		ld	s0,16(sp)
 410              		.cfi_restore 8
 411              		.cfi_def_cfa 2, 32
 412 0334 83348100 		ld	s1,8(sp)
 413              		.cfi_restore 9
 414              	.LVL45:
 415 0338 03390100 		ld	s2,0(sp)
 416              		.cfi_restore 18
 417              	.LVL46:
 418 033c 13010102 		addi	sp,sp,32
 419              		.cfi_def_cfa_offset 0
 420 0340 67800000 		jr	ra
 421              		.cfi_endproc
 422              	.LFE42:
 424              		.align	2
 425              		.globl	_ZN13SlabAllocator14insertIntoListERP4SlabS1_
 427              	_ZN13SlabAllocator14insertIntoListERP4SlabS1_:
 428              	.LFB43:
 198:src/slabAllocator.cpp **** 
 199:src/slabAllocator.cpp **** void SlabAllocator::insertIntoList(Slab *&head, Slab *slab) {
 429              		.loc 1 199 61 is_stmt 1
 430              		.cfi_startproc
 431              	.LVL47:
 432 0344 130101FF 		addi	sp,sp,-16
GAS LISTING /tmp/ccgsFZb0.s 			page 14


 433              		.cfi_def_cfa_offset 16
 434 0348 23348100 		sd	s0,8(sp)
 435              		.cfi_offset 8, -8
 436 034c 13040101 		addi	s0,sp,16
 437              		.cfi_def_cfa 8, 0
 200:src/slabAllocator.cpp ****     slab->next = head;
 438              		.loc 1 200 5
 439              		.loc 1 200 18 is_stmt 0
 440 0350 83370500 		ld	a5,0(a0)
 441              		.loc 1 200 16
 442 0354 23B4F500 		sd	a5,8(a1)
 201:src/slabAllocator.cpp ****     if(head)
 443              		.loc 1 201 5 is_stmt 1
 444 0358 63840700 		beqz	a5,.L18
 202:src/slabAllocator.cpp ****         head->prev = slab;
 445              		.loc 1 202 9
 446              		.loc 1 202 20 is_stmt 0
 447 035c 23B0B700 		sd	a1,0(a5)
 448              	.L18:
 203:src/slabAllocator.cpp ****     slab->prev = nullptr;
 449              		.loc 1 203 5 is_stmt 1
 450              		.loc 1 203 16 is_stmt 0
 451 0360 23B00500 		sd	zero,0(a1)
 204:src/slabAllocator.cpp ****     head = slab;
 452              		.loc 1 204 5 is_stmt 1
 453              		.loc 1 204 10 is_stmt 0
 454 0364 2330B500 		sd	a1,0(a0)
 205:src/slabAllocator.cpp **** }
 455              		.loc 1 205 1
 456 0368 03348100 		ld	s0,8(sp)
 457              		.cfi_restore 8
 458              		.cfi_def_cfa 2, 16
 459 036c 13010101 		addi	sp,sp,16
 460              		.cfi_def_cfa_offset 0
 461 0370 67800000 		jr	ra
 462              		.cfi_endproc
 463              	.LFE43:
 465              		.align	2
 466              		.globl	_ZN13SlabAllocator12allocateSlabEP5Cache
 468              	_ZN13SlabAllocator12allocateSlabEP5Cache:
 469              	.LFB31:
  31:src/slabAllocator.cpp ****     Slab* slab = (Slab*)Buddy::alloc(cache->slabSize);
 470              		.loc 1 31 48 is_stmt 1
 471              		.cfi_startproc
 472              	.LVL48:
 473 0374 130101FE 		addi	sp,sp,-32
 474              		.cfi_def_cfa_offset 32
 475 0378 233C1100 		sd	ra,24(sp)
 476 037c 23388100 		sd	s0,16(sp)
 477 0380 23349100 		sd	s1,8(sp)
 478 0384 23302101 		sd	s2,0(sp)
 479              		.cfi_offset 1, -8
 480              		.cfi_offset 8, -16
 481              		.cfi_offset 9, -24
 482              		.cfi_offset 18, -32
 483 0388 13040102 		addi	s0,sp,32
 484              		.cfi_def_cfa 8, 0
GAS LISTING /tmp/ccgsFZb0.s 			page 15


 485 038c 13090500 		mv	s2,a0
  32:src/slabAllocator.cpp ****     if(!slab)
 486              		.loc 1 32 5
  32:src/slabAllocator.cpp ****     if(!slab)
 487              		.loc 1 32 37 is_stmt 0
 488 0390 03358504 		ld	a0,72(a0)
 489              	.LVL49:
 490 0394 97000000 		call	_ZN5Buddy5allocEm@plt
 490      E7800000 
 491              	.LVL50:
  33:src/slabAllocator.cpp ****         return false;
 492              		.loc 1 33 5 is_stmt 1
 493 039c 63080506 		beqz	a0,.L23
 494 03a0 93040500 		mv	s1,a0
  35:src/slabAllocator.cpp ****     slab->totalNumOfSlots = slab->numOfFreeSlots = ((cache->slabSize << BLOCK_SIZE_BITS) - sizeof(S
 495              		.loc 1 35 5
  35:src/slabAllocator.cpp ****     slab->totalNumOfSlots = slab->numOfFreeSlots = ((cache->slabSize << BLOCK_SIZE_BITS) - sizeof(S
 496              		.loc 1 35 34 is_stmt 0
 497 03a4 93050500 		mv	a1,a0
 498 03a8 13050906 		addi	a0,s2,96
 499              	.LVL51:
 500 03ac 97000000 		call	_ZN13SlabAllocator14insertIntoListERP4SlabS1_
 500      E7800000 
 501              	.LVL52:
  36:src/slabAllocator.cpp ****     slab->objectOffset = (void*)((uint64)slab + sizeof(Slab) + (slab->totalNumOfSlots>>3) + 1);
 502              		.loc 1 36 5 is_stmt 1
  36:src/slabAllocator.cpp ****     slab->objectOffset = (void*)((uint64)slab + sizeof(Slab) + (slab->totalNumOfSlots>>3) + 1);
 503              		.loc 1 36 61 is_stmt 0
 504 03b4 83378904 		ld	a5,72(s2)
  36:src/slabAllocator.cpp ****     slab->objectOffset = (void*)((uint64)slab + sizeof(Slab) + (slab->totalNumOfSlots>>3) + 1);
 505              		.loc 1 36 70
 506 03b8 9397C700 		slli	a5,a5,12
  36:src/slabAllocator.cpp ****     slab->objectOffset = (void*)((uint64)slab + sizeof(Slab) + (slab->totalNumOfSlots>>3) + 1);
 507              		.loc 1 36 90
 508 03bc 938787FC 		addi	a5,a5,-56
  36:src/slabAllocator.cpp ****     slab->objectOffset = (void*)((uint64)slab + sizeof(Slab) + (slab->totalNumOfSlots>>3) + 1);
 509              		.loc 1 36 115
 510 03c0 03370904 		ld	a4,64(s2)
  36:src/slabAllocator.cpp ****     slab->objectOffset = (void*)((uint64)slab + sizeof(Slab) + (slab->totalNumOfSlots>>3) + 1);
 511              		.loc 1 36 106
 512 03c4 B3D7E702 		divu	a5,a5,a4
  36:src/slabAllocator.cpp ****     slab->objectOffset = (void*)((uint64)slab + sizeof(Slab) + (slab->totalNumOfSlots>>3) + 1);
 513              		.loc 1 36 50
 514 03c8 23B8F400 		sd	a5,16(s1)
  36:src/slabAllocator.cpp ****     slab->objectOffset = (void*)((uint64)slab + sizeof(Slab) + (slab->totalNumOfSlots>>3) + 1);
 515              		.loc 1 36 27
 516 03cc 23BCF400 		sd	a5,24(s1)
  37:src/slabAllocator.cpp ****     slab->allocated = (bool*)((uint64)slab + sizeof(Slab));
 517              		.loc 1 37 5 is_stmt 1
  37:src/slabAllocator.cpp ****     slab->allocated = (bool*)((uint64)slab + sizeof(Slab));
 518              		.loc 1 37 86 is_stmt 0
 519 03d0 93D73700 		srli	a5,a5,3
  37:src/slabAllocator.cpp ****     slab->allocated = (bool*)((uint64)slab + sizeof(Slab));
 520              		.loc 1 37 62
 521 03d4 B3879700 		add	a5,a5,s1
  37:src/slabAllocator.cpp ****     slab->allocated = (bool*)((uint64)slab + sizeof(Slab));
 522              		.loc 1 37 91
GAS LISTING /tmp/ccgsFZb0.s 			page 16


 523 03d8 93879703 		addi	a5,a5,57
  37:src/slabAllocator.cpp ****     slab->allocated = (bool*)((uint64)slab + sizeof(Slab));
 524              		.loc 1 37 24
 525 03dc 23B4F402 		sd	a5,40(s1)
  38:src/slabAllocator.cpp ****     slab->parent = cache;
 526              		.loc 1 38 5 is_stmt 1
  38:src/slabAllocator.cpp ****     slab->parent = cache;
 527              		.loc 1 38 44 is_stmt 0
 528 03e0 93878403 		addi	a5,s1,56
  38:src/slabAllocator.cpp ****     slab->parent = cache;
 529              		.loc 1 38 21
 530 03e4 23B0F402 		sd	a5,32(s1)
  39:src/slabAllocator.cpp ****     for(uint64 i=0;i<slab->totalNumOfSlots;i++)
 531              		.loc 1 39 5 is_stmt 1
  39:src/slabAllocator.cpp ****     for(uint64 i=0;i<slab->totalNumOfSlots;i++)
 532              		.loc 1 39 18 is_stmt 0
 533 03e8 23B82403 		sd	s2,48(s1)
  40:src/slabAllocator.cpp ****         slab->allocated[i] = false;
 534              		.loc 1 40 5 is_stmt 1
 535              	.LVL53:
 536              	.LBB35:
  40:src/slabAllocator.cpp ****         slab->allocated[i] = false;
 537              		.loc 1 40 16 is_stmt 0
 538 03ec 93070000 		li	a5,0
 539              	.LVL54:
 540              	.L22:
  40:src/slabAllocator.cpp ****         slab->allocated[i] = false;
 541              		.loc 1 40 21 is_stmt 1 discriminator 3
  40:src/slabAllocator.cpp ****         slab->allocated[i] = false;
 542              		.loc 1 40 28 is_stmt 0 discriminator 3
 543 03f0 03B78401 		ld	a4,24(s1)
  40:src/slabAllocator.cpp ****         slab->allocated[i] = false;
 544              		.loc 1 40 21 discriminator 3
 545 03f4 63F0E702 		bleu	a4,a5,.L24
  41:src/slabAllocator.cpp ****     return true;
 546              		.loc 1 41 9 is_stmt 1 discriminator 2
  41:src/slabAllocator.cpp ****     return true;
 547              		.loc 1 41 15 is_stmt 0 discriminator 2
 548 03f8 03B70402 		ld	a4,32(s1)
  41:src/slabAllocator.cpp ****     return true;
 549              		.loc 1 41 26 discriminator 2
 550 03fc 3307F700 		add	a4,a4,a5
  41:src/slabAllocator.cpp ****     return true;
 551              		.loc 1 41 28 discriminator 2
 552 0400 23000700 		sb	zero,0(a4)
  40:src/slabAllocator.cpp ****         slab->allocated[i] = false;
 553              		.loc 1 40 5 is_stmt 1 discriminator 2
 554 0404 93871700 		addi	a5,a5,1
 555              	.LVL55:
 556 0408 6FF09FFE 		j	.L22
 557              	.LVL56:
 558              	.L23:
 559              	.LBE35:
  34:src/slabAllocator.cpp ****     SlabAllocator::insertIntoList(cache->emptyHead, slab);
 560              		.loc 1 34 16 is_stmt 0
 561 040c 13050000 		li	a0,0
 562              	.LVL57:
GAS LISTING /tmp/ccgsFZb0.s 			page 17


 563 0410 6F008000 		j	.L21
 564              	.LVL58:
 565              	.L24:
  42:src/slabAllocator.cpp **** }
 566              		.loc 1 42 12
 567 0414 13051000 		li	a0,1
 568              	.LVL59:
 569              	.L21:
  43:src/slabAllocator.cpp **** 
 570              		.loc 1 43 1
 571 0418 83308101 		ld	ra,24(sp)
 572              		.cfi_restore 1
 573 041c 03340101 		ld	s0,16(sp)
 574              		.cfi_restore 8
 575              		.cfi_def_cfa 2, 32
 576 0420 83348100 		ld	s1,8(sp)
 577              		.cfi_restore 9
 578 0424 03390100 		ld	s2,0(sp)
 579              		.cfi_restore 18
 580              	.LVL60:
 581 0428 13010102 		addi	sp,sp,32
 582              		.cfi_def_cfa_offset 0
 583 042c 67800000 		jr	ra
 584              		.cfi_endproc
 585              	.LFE31:
 587              		.align	2
 588              		.globl	_ZN13SlabAllocator14removeFromListERP4SlabS1_
 590              	_ZN13SlabAllocator14removeFromListERP4SlabS1_:
 591              	.LFB44:
 206:src/slabAllocator.cpp **** 
 207:src/slabAllocator.cpp **** void SlabAllocator::removeFromList(Slab* &head, Slab* slab) {
 592              		.loc 1 207 61 is_stmt 1
 593              		.cfi_startproc
 594              	.LVL61:
 595 0430 130101FF 		addi	sp,sp,-16
 596              		.cfi_def_cfa_offset 16
 597 0434 23348100 		sd	s0,8(sp)
 598              		.cfi_offset 8, -8
 599 0438 13040101 		addi	s0,sp,16
 600              		.cfi_def_cfa 8, 0
 208:src/slabAllocator.cpp ****     if(slab == head)
 601              		.loc 1 208 5
 602              		.loc 1 208 16 is_stmt 0
 603 043c 83370500 		ld	a5,0(a0)
 604              		.loc 1 208 5
 605 0440 638CB702 		beq	a5,a1,.L31
 606              	.L27:
 209:src/slabAllocator.cpp ****         head = slab->next;
 210:src/slabAllocator.cpp ****     if(slab->next)
 607              		.loc 1 210 5 is_stmt 1
 608              		.loc 1 210 14 is_stmt 0
 609 0444 83B78500 		ld	a5,8(a1)
 610              		.loc 1 210 5
 611 0448 63860700 		beqz	a5,.L28
 211:src/slabAllocator.cpp ****         slab->next->prev = slab->prev;
 612              		.loc 1 211 9 is_stmt 1
 613              		.loc 1 211 34 is_stmt 0
GAS LISTING /tmp/ccgsFZb0.s 			page 18


 614 044c 03B70500 		ld	a4,0(a1)
 615              		.loc 1 211 26
 616 0450 23B0E700 		sd	a4,0(a5)
 617              	.L28:
 212:src/slabAllocator.cpp ****     if(slab->prev)
 618              		.loc 1 212 5 is_stmt 1
 619              		.loc 1 212 14 is_stmt 0
 620 0454 83B70500 		ld	a5,0(a1)
 621              		.loc 1 212 5
 622 0458 63860700 		beqz	a5,.L29
 213:src/slabAllocator.cpp ****         slab->prev->next = slab->next;
 623              		.loc 1 213 9 is_stmt 1
 624              		.loc 1 213 34 is_stmt 0
 625 045c 03B78500 		ld	a4,8(a1)
 626              		.loc 1 213 26
 627 0460 23B4E700 		sd	a4,8(a5)
 628              	.L29:
 214:src/slabAllocator.cpp ****     slab->prev = nullptr;
 629              		.loc 1 214 5 is_stmt 1
 630              		.loc 1 214 16 is_stmt 0
 631 0464 23B00500 		sd	zero,0(a1)
 215:src/slabAllocator.cpp ****     slab->next = nullptr;
 632              		.loc 1 215 5 is_stmt 1
 633              		.loc 1 215 16 is_stmt 0
 634 0468 23B40500 		sd	zero,8(a1)
 216:src/slabAllocator.cpp **** }
 635              		.loc 1 216 1
 636 046c 03348100 		ld	s0,8(sp)
 637              		.cfi_remember_state
 638              		.cfi_restore 8
 639              		.cfi_def_cfa 2, 16
 640 0470 13010101 		addi	sp,sp,16
 641              		.cfi_def_cfa_offset 0
 642 0474 67800000 		jr	ra
 643              	.L31:
 644              		.cfi_restore_state
 209:src/slabAllocator.cpp ****     if(slab->next)
 645              		.loc 1 209 9 is_stmt 1
 209:src/slabAllocator.cpp ****     if(slab->next)
 646              		.loc 1 209 22 is_stmt 0
 647 0478 83B78500 		ld	a5,8(a1)
 209:src/slabAllocator.cpp ****     if(slab->next)
 648              		.loc 1 209 14
 649 047c 2330F500 		sd	a5,0(a0)
 650 0480 6FF05FFC 		j	.L27
 651              		.cfi_endproc
 652              	.LFE44:
 654              		.align	2
 655              		.globl	_ZN13SlabAllocator4moveERP4SlabS2_S1_
 657              	_ZN13SlabAllocator4moveERP4SlabS2_S1_:
 658              	.LFB45:
 217:src/slabAllocator.cpp **** 
 218:src/slabAllocator.cpp **** void SlabAllocator::move(Slab* &headFrom, Slab* &headTo, Slab* slab) {
 659              		.loc 1 218 70 is_stmt 1
 660              		.cfi_startproc
 661              	.LVL62:
 662 0484 130101FE 		addi	sp,sp,-32
GAS LISTING /tmp/ccgsFZb0.s 			page 19


 663              		.cfi_def_cfa_offset 32
 664 0488 233C1100 		sd	ra,24(sp)
 665 048c 23388100 		sd	s0,16(sp)
 666 0490 23349100 		sd	s1,8(sp)
 667 0494 23302101 		sd	s2,0(sp)
 668              		.cfi_offset 1, -8
 669              		.cfi_offset 8, -16
 670              		.cfi_offset 9, -24
 671              		.cfi_offset 18, -32
 672 0498 13040102 		addi	s0,sp,32
 673              		.cfi_def_cfa 8, 0
 674 049c 13890500 		mv	s2,a1
 675 04a0 93040600 		mv	s1,a2
 219:src/slabAllocator.cpp ****     SlabAllocator::removeFromList(headFrom, slab);
 676              		.loc 1 219 5
 677              		.loc 1 219 34 is_stmt 0
 678 04a4 93050600 		mv	a1,a2
 679              	.LVL63:
 680 04a8 97000000 		call	_ZN13SlabAllocator14removeFromListERP4SlabS1_
 680      E7800000 
 681              	.LVL64:
 220:src/slabAllocator.cpp ****     SlabAllocator::insertIntoList(headTo, slab);
 682              		.loc 1 220 5 is_stmt 1
 683              		.loc 1 220 34 is_stmt 0
 684 04b0 93850400 		mv	a1,s1
 685 04b4 13050900 		mv	a0,s2
 686 04b8 97000000 		call	_ZN13SlabAllocator14insertIntoListERP4SlabS1_
 686      E7800000 
 687              	.LVL65:
 221:src/slabAllocator.cpp **** }...
 688              		.loc 1 221 1
 689 04c0 83308101 		ld	ra,24(sp)
 690              		.cfi_restore 1
 691 04c4 03340101 		ld	s0,16(sp)
 692              		.cfi_restore 8
 693              		.cfi_def_cfa 2, 32
 694 04c8 83348100 		ld	s1,8(sp)
 695              		.cfi_restore 9
 696              	.LVL66:
 697 04cc 03390100 		ld	s2,0(sp)
 698              		.cfi_restore 18
 699              	.LVL67:
 700 04d0 13010102 		addi	sp,sp,32
 701              		.cfi_def_cfa_offset 0
 702 04d4 67800000 		jr	ra
 703              		.cfi_endproc
 704              	.LFE45:
 706              		.align	2
 707              		.globl	_ZN13SlabAllocator12allocateSlotEP4Slab
 709              	_ZN13SlabAllocator12allocateSlotEP4Slab:
 710              	.LFB32:
  45:src/slabAllocator.cpp **** void* SlabAllocator::allocateSlot(Slab *slab) {
 711              		.loc 1 45 47 is_stmt 1
 712              		.cfi_startproc
 713              	.LVL68:
 714 04d8 130101FE 		addi	sp,sp,-32
 715              		.cfi_def_cfa_offset 32
GAS LISTING /tmp/ccgsFZb0.s 			page 20


 716 04dc 233C1100 		sd	ra,24(sp)
 717 04e0 23388100 		sd	s0,16(sp)
 718 04e4 23349100 		sd	s1,8(sp)
 719 04e8 23302101 		sd	s2,0(sp)
 720              		.cfi_offset 1, -8
 721              		.cfi_offset 8, -16
 722              		.cfi_offset 9, -24
 723              		.cfi_offset 18, -32
 724 04ec 13040102 		addi	s0,sp,32
 725              		.cfi_def_cfa 8, 0
 726 04f0 13090500 		mv	s2,a0
  46:src/slabAllocator.cpp ****     for(uint64 i=0; i<slab->totalNumOfSlots; i++){
 727              		.loc 1 46 5
 728              	.LVL69:
 729              	.LBB36:
  46:src/slabAllocator.cpp ****     for(uint64 i=0; i<slab->totalNumOfSlots; i++){
 730              		.loc 1 46 16 is_stmt 0
 731 04f4 93040000 		li	s1,0
 732              	.LVL70:
 733              	.L42:
  46:src/slabAllocator.cpp ****     for(uint64 i=0; i<slab->totalNumOfSlots; i++){
 734              		.loc 1 46 22 is_stmt 1 discriminator 1
  46:src/slabAllocator.cpp ****     for(uint64 i=0; i<slab->totalNumOfSlots; i++){
 735              		.loc 1 46 29 is_stmt 0 discriminator 1
 736 04f8 83378901 		ld	a5,24(s2)
  46:src/slabAllocator.cpp ****     for(uint64 i=0; i<slab->totalNumOfSlots; i++){
 737              		.loc 1 46 22 discriminator 1
 738 04fc 63FAF408 		bleu	a5,s1,.L43
 739              	.LBE36:
  47:src/slabAllocator.cpp ****         if(!slab->allocated[i]){
 740              		.loc 1 47 9 is_stmt 1
 741              	.LBB44:
 742              	.LBB37:
  47:src/slabAllocator.cpp ****         if(!slab->allocated[i]){
 743              		.loc 1 47 19 is_stmt 0
 744 0500 83370902 		ld	a5,32(s2)
  47:src/slabAllocator.cpp ****         if(!slab->allocated[i]){
 745              		.loc 1 47 30
 746 0504 B3879700 		add	a5,a5,s1
 747 0508 03C70700 		lbu	a4,0(a5)
  47:src/slabAllocator.cpp ****         if(!slab->allocated[i]){
 748              		.loc 1 47 9
 749 050c 63060700 		beqz	a4,.L45
 750              	.LBE37:
  46:src/slabAllocator.cpp ****     for(uint64 i=0; i<slab->totalNumOfSlots; i++){
 751              		.loc 1 46 5 is_stmt 1 discriminator 2
 752 0510 93841400 		addi	s1,s1,1
 753              	.LVL71:
 754 0514 6FF05FFE 		j	.L42
 755              	.L45:
 756              	.LBB42:
 757              	.LBB38:
  48:src/slabAllocator.cpp ****             slab->allocated[i] = true;
 758              		.loc 1 48 13
  48:src/slabAllocator.cpp ****             slab->allocated[i] = true;
 759              		.loc 1 48 32 is_stmt 0
 760 0518 13071000 		li	a4,1
GAS LISTING /tmp/ccgsFZb0.s 			page 21


 761 051c 2380E700 		sb	a4,0(a5)
  49:src/slabAllocator.cpp ****             Slab* &headFrom = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead
 762              		.loc 1 49 13 is_stmt 1
 763              	.LVL72:
 764              	.LBB39:
 765              	.LBB40:
 766              		.file 2 "src/../h/../h/../h/slab_t.hpp"
   1:src/../h/../h/../h/slab_t.hpp **** //
   2:src/../h/../h/../h/slab_t.hpp **** // Created by os on 1/2/23.
   3:src/../h/../h/../h/slab_t.hpp **** //
   4:src/../h/../h/../h/slab_t.hpp **** 
   5:src/../h/../h/../h/slab_t.hpp **** #ifndef KERNEL_FOR_RISCV_ARCHITECURE_SLAB_T_HPP
   6:src/../h/../h/../h/slab_t.hpp **** #define KERNEL_FOR_RISCV_ARCHITECURE_SLAB_T_HPP
   7:src/../h/../h/../h/slab_t.hpp **** #include "../lib/hw.h"
   8:src/../h/../h/../h/slab_t.hpp **** 
   9:src/../h/../h/../h/slab_t.hpp **** typedef class Cache kmem_cache_t;
  10:src/../h/../h/../h/slab_t.hpp **** 
  11:src/../h/../h/../h/slab_t.hpp **** typedef class Slab{
  12:src/../h/../h/../h/slab_t.hpp **** public:
  13:src/../h/../h/../h/slab_t.hpp ****     inline bool isFull(){return numOfFreeSlots == 0;}
  14:src/../h/../h/../h/slab_t.hpp ****     inline bool isEmpty(){return numOfFreeSlots == totalNumOfSlots;}
 767              		.loc 2 14 27
 768              		.loc 2 14 34 is_stmt 0
 769 0520 83370901 		ld	a5,16(s2)
 770              		.loc 2 14 52
 771 0524 03378901 		ld	a4,24(s2)
 772              	.LVL73:
 773              	.LBE40:
 774              	.LBE39:
  49:src/slabAllocator.cpp ****             Slab* &headFrom = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead
 775              		.loc 1 49 89
 776 0528 6308F704 		beq	a4,a5,.L46
  49:src/slabAllocator.cpp ****             Slab* &headFrom = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead
 777              		.loc 1 49 81 discriminator 2
 778 052c 03350903 		ld	a0,48(s2)
 779              	.LVL74:
  49:src/slabAllocator.cpp ****             Slab* &headFrom = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead
 780              		.loc 1 49 89 discriminator 2
 781 0530 13058506 		addi	a0,a0,104
 782              	.L38:
 783              	.LVL75:
  50:src/slabAllocator.cpp ****             slab->numOfFreeSlots--;
 784              		.loc 1 50 13 is_stmt 1 discriminator 4
  50:src/slabAllocator.cpp ****             slab->numOfFreeSlots--;
 785              		.loc 1 50 33 is_stmt 0 discriminator 4
 786 0534 9387F7FF 		addi	a5,a5,-1
 787 0538 2338F900 		sd	a5,16(s2)
  51:src/slabAllocator.cpp ****             Slab* &headTo = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 788              		.loc 1 51 13 is_stmt 1 discriminator 4
 789              	.LVL76:
 790              	.LBE38:
 791              	.LBE42:
 792              	.LBE44:
  13:src/../h/../h/../h/slab_t.hpp ****     inline bool isEmpty(){return numOfFreeSlots == totalNumOfSlots;}
 793              		.loc 2 13 26 discriminator 4
 794              	.LBB45:
 795              	.LBB43:
GAS LISTING /tmp/ccgsFZb0.s 			page 22


 796              	.LBB41:
  51:src/slabAllocator.cpp ****             Slab* &headTo = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 797              		.loc 1 51 85 is_stmt 0 discriminator 4
 798 053c 63940704 		bnez	a5,.L39
  51:src/slabAllocator.cpp ****             Slab* &headTo = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 799              		.loc 1 51 52 discriminator 1
 800 0540 83350903 		ld	a1,48(s2)
  51:src/slabAllocator.cpp ****             Slab* &headTo = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 801              		.loc 1 51 85 discriminator 1
 802 0544 93850507 		addi	a1,a1,112
 803              	.L40:
 804              	.LVL77:
  53:src/slabAllocator.cpp ****             if(headTo != headFrom)
 805              		.loc 1 53 13 is_stmt 1 discriminator 4
  53:src/slabAllocator.cpp ****             if(headTo != headFrom)
 806              		.loc 1 53 16 is_stmt 0 discriminator 4
 807 0548 03B70500 		ld	a4,0(a1)
  53:src/slabAllocator.cpp ****             if(headTo != headFrom)
 808              		.loc 1 53 26 discriminator 4
 809 054c 83370500 		ld	a5,0(a0)
  53:src/slabAllocator.cpp ****             if(headTo != headFrom)
 810              		.loc 1 53 13 discriminator 4
 811 0550 6308F700 		beq	a4,a5,.L41
  54:src/slabAllocator.cpp ****                 SlabAllocator::move(headFrom, headTo, slab);
 812              		.loc 1 54 17 is_stmt 1
  54:src/slabAllocator.cpp ****                 SlabAllocator::move(headFrom, headTo, slab);
 813              		.loc 1 54 36 is_stmt 0
 814 0554 13060900 		mv	a2,s2
 815 0558 97000000 		call	_ZN13SlabAllocator4moveERP4SlabS2_S1_
 815      E7800000 
 816              	.LVL78:
 817              	.L41:
  56:src/slabAllocator.cpp ****             return (void*)((uint64)slab->objectOffset + i*slab->parent->objectSize);
 818              		.loc 1 56 13 is_stmt 1
  56:src/slabAllocator.cpp ****             return (void*)((uint64)slab->objectOffset + i*slab->parent->objectSize);
 819              		.loc 1 56 42 is_stmt 0
 820 0560 03358902 		ld	a0,40(s2)
  56:src/slabAllocator.cpp ****             return (void*)((uint64)slab->objectOffset + i*slab->parent->objectSize);
 821              		.loc 1 56 65
 822 0564 83370903 		ld	a5,48(s2)
  56:src/slabAllocator.cpp ****             return (void*)((uint64)slab->objectOffset + i*slab->parent->objectSize);
 823              		.loc 1 56 73
 824 0568 83B70704 		ld	a5,64(a5)
  56:src/slabAllocator.cpp ****             return (void*)((uint64)slab->objectOffset + i*slab->parent->objectSize);
 825              		.loc 1 56 58
 826 056c B3849702 		mul	s1,a5,s1
 827              	.LVL79:
  56:src/slabAllocator.cpp ****             return (void*)((uint64)slab->objectOffset + i*slab->parent->objectSize);
 828              		.loc 1 56 55
 829 0570 33059500 		add	a0,a0,s1
  56:src/slabAllocator.cpp ****             return (void*)((uint64)slab->objectOffset + i*slab->parent->objectSize);
 830              		.loc 1 56 83
 831 0574 6F000002 		j	.L34
 832              	.LVL80:
 833              	.L46:
  49:src/slabAllocator.cpp ****             Slab* &headFrom = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead
 834              		.loc 1 49 55 discriminator 1
GAS LISTING /tmp/ccgsFZb0.s 			page 23


 835 0578 03350903 		ld	a0,48(s2)
 836              	.LVL81:
  49:src/slabAllocator.cpp ****             Slab* &headFrom = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead
 837              		.loc 1 49 89 discriminator 1
 838 057c 13050506 		addi	a0,a0,96
 839 0580 6FF05FFB 		j	.L38
 840              	.LVL82:
 841              	.L39:
  51:src/slabAllocator.cpp ****             Slab* &headTo = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 842              		.loc 1 51 77 discriminator 2
 843 0584 83350903 		ld	a1,48(s2)
  51:src/slabAllocator.cpp ****             Slab* &headTo = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 844              		.loc 1 51 85 discriminator 2
 845 0588 93858506 		addi	a1,a1,104
 846 058c 6FF0DFFB 		j	.L40
 847              	.LVL83:
 848              	.L43:
 849              	.LBE41:
 850              	.LBE43:
 851              	.LBE45:
  59:src/slabAllocator.cpp ****     return nullptr;
 852              		.loc 1 59 12
 853 0590 13050000 		li	a0,0
 854              	.LVL84:
 855              	.L34:
  60:src/slabAllocator.cpp **** }
 856              		.loc 1 60 1
 857 0594 83308101 		ld	ra,24(sp)
 858              		.cfi_restore 1
 859 0598 03340101 		ld	s0,16(sp)
 860              		.cfi_restore 8
 861              		.cfi_def_cfa 2, 32
 862 059c 83348100 		ld	s1,8(sp)
 863              		.cfi_restore 9
 864 05a0 03390100 		ld	s2,0(sp)
 865              		.cfi_restore 18
 866              	.LVL85:
 867 05a4 13010102 		addi	sp,sp,32
 868              		.cfi_def_cfa_offset 0
 869 05a8 67800000 		jr	ra
 870              		.cfi_endproc
 871              	.LFE32:
 873              		.align	2
 874              		.globl	_ZN13SlabAllocator14allocateObjectEP5Cache
 876              	_ZN13SlabAllocator14allocateObjectEP5Cache:
 877              	.LFB33:
  62:src/slabAllocator.cpp **** void* SlabAllocator::allocateObject(Cache *cache) {
 878              		.loc 1 62 51 is_stmt 1
 879              		.cfi_startproc
 880              	.LVL86:
 881 05ac 130101FE 		addi	sp,sp,-32
 882              		.cfi_def_cfa_offset 32
 883 05b0 233C1100 		sd	ra,24(sp)
 884 05b4 23388100 		sd	s0,16(sp)
 885 05b8 23349100 		sd	s1,8(sp)
 886 05bc 23302101 		sd	s2,0(sp)
 887              		.cfi_offset 1, -8
GAS LISTING /tmp/ccgsFZb0.s 			page 24


 888              		.cfi_offset 8, -16
 889              		.cfi_offset 9, -24
 890              		.cfi_offset 18, -32
 891 05c0 13040102 		addi	s0,sp,32
 892              		.cfi_def_cfa 8, 0
 893 05c4 13090500 		mv	s2,a0
  63:src/slabAllocator.cpp ****     void* ret = SlabAllocator::allocateFromList(cache->partialHead);
 894              		.loc 1 63 5
  63:src/slabAllocator.cpp ****     void* ret = SlabAllocator::allocateFromList(cache->partialHead);
 895              		.loc 1 63 48 is_stmt 0
 896 05c8 83348506 		ld	s1,104(a0)
 897              	.LVL87:
 898              	.L49:
 899              	.LBB46:
 900              	.LBB47:
 901              		.file 3 "src/../h/slabAllocator.hpp"
   1:src/../h/slabAllocator.hpp **** //
   2:src/../h/slabAllocator.hpp **** // Created by os on 12/25/22.
   3:src/../h/slabAllocator.hpp **** //
   4:src/../h/slabAllocator.hpp **** 
   5:src/../h/slabAllocator.hpp **** #ifndef KERNEL_FOR_RISCV_ARCHITECURE_SLAN_HPP
   6:src/../h/slabAllocator.hpp **** #define KERNEL_FOR_RISCV_ARCHITECURE_SLAN_HPP
   7:src/../h/slabAllocator.hpp **** 
   8:src/../h/slabAllocator.hpp **** #include "../h/utility.hpp"
   9:src/../h/slabAllocator.hpp **** #include "../h/buddyAllocator.hpp"
  10:src/../h/slabAllocator.hpp **** #include "../h/consoleUtil.hpp"
  11:src/../h/slabAllocator.hpp **** #include "../h/cache_t.hpp"
  12:src/../h/slabAllocator.hpp **** 
  13:src/../h/slabAllocator.hpp **** class SlabAllocator{
  14:src/../h/slabAllocator.hpp **** public:
  15:src/../h/slabAllocator.hpp **** 
  16:src/../h/slabAllocator.hpp ****     static void initialize(void* space, uint64 blockNum);
  17:src/../h/slabAllocator.hpp **** 
  18:src/../h/slabAllocator.hpp ****     static Cache* createCache(const char* name, size_t size, void (*ctor)(void*), void (*dtor)(void
  19:src/../h/slabAllocator.hpp **** 
  20:src/../h/slabAllocator.hpp ****     static void deleteCache(Cache* &cache);
  21:src/../h/slabAllocator.hpp **** 
  22:src/../h/slabAllocator.hpp ****     static bool allocateSlab(Cache *cache);
  23:src/../h/slabAllocator.hpp **** 
  24:src/../h/slabAllocator.hpp ****     static int shrinkCache(Cache* cache);
  25:src/../h/slabAllocator.hpp **** 
  26:src/../h/slabAllocator.hpp ****     static void* allocateSlot(Slab* slab);
  27:src/../h/slabAllocator.hpp **** 
  28:src/../h/slabAllocator.hpp ****     static void* allocateObject(Cache *cache);
  29:src/../h/slabAllocator.hpp **** 
  30:src/../h/slabAllocator.hpp ****     static void* allocateBuffer(size_t size);
  31:src/../h/slabAllocator.hpp **** 
  32:src/../h/slabAllocator.hpp ****     static void freeSlot(Slab* slab, uint64 index);
  33:src/../h/slabAllocator.hpp **** 
  34:src/../h/slabAllocator.hpp ****     static bool freeObject(Cache* cache,const void* addr);
  35:src/../h/slabAllocator.hpp **** 
  36:src/../h/slabAllocator.hpp ****     static void freeBuffer(const void* addr);
  37:src/../h/slabAllocator.hpp **** 
  38:src/../h/slabAllocator.hpp ****     static void printSlab(Slab *slab);
  39:src/../h/slabAllocator.hpp **** 
  40:src/../h/slabAllocator.hpp ****     static void printCache(Cache *cache);
  41:src/../h/slabAllocator.hpp **** 
GAS LISTING /tmp/ccgsFZb0.s 			page 25


  42:src/../h/slabAllocator.hpp ****     static Cache *sizeN[13];
  43:src/../h/slabAllocator.hpp ****     static Cache *cache;
  44:src/../h/slabAllocator.hpp ****     static void* startAddr;
  45:src/../h/slabAllocator.hpp ****     static uint64 blocksResponsibleFor;
  46:src/../h/slabAllocator.hpp **** 
  47:src/../h/slabAllocator.hpp **** private:
  48:src/../h/slabAllocator.hpp ****     static void insertIntoList(Slab* &head, Slab* slab);
  49:src/../h/slabAllocator.hpp ****     static void removeFromList(Slab* &head, Slab* slab);
  50:src/../h/slabAllocator.hpp ****     static void move(Slab* &headFrom, Slab* &headTo, Slab* slab);
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getUpperBound(Slab* slab){return (uint64)slab->objectOffset + slab->totalN
  52:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
  53:src/../h/slabAllocator.hpp **** 
  54:src/../h/slabAllocator.hpp ****     static inline void* allocateFromList(Slab* head){
  55:src/../h/slabAllocator.hpp ****         while(head != nullptr){
 902              		.loc 3 55 9 is_stmt 1
 903              		.loc 3 55 20
 904 05cc 638C0400 		beqz	s1,.L48
 905              	.LBB48:
  56:src/../h/slabAllocator.hpp ****             void* ret = allocateSlot(head);
 906              		.loc 3 56 13
 907              		.loc 3 56 37 is_stmt 0
 908 05d0 13850400 		mv	a0,s1
 909 05d4 97000000 		call	_ZN13SlabAllocator12allocateSlotEP4Slab
 909      E7800000 
 910              	.LVL88:
  57:src/../h/slabAllocator.hpp ****             if(ret != nullptr)
 911              		.loc 3 57 13 is_stmt 1
 912 05dc E30805FE 		beqz	a0,.L49
  58:src/../h/slabAllocator.hpp ****                 return ret;
 913              		.loc 3 58 24 is_stmt 0
 914 05e0 93040500 		mv	s1,a0
 915              	.LVL89:
 916              	.L48:
 917              	.LBE48:
 918              	.LBE47:
 919              	.LBE46:
  64:src/slabAllocator.cpp ****     if(ret)
 920              		.loc 1 64 5 is_stmt 1
 921 05e4 63800402 		beqz	s1,.L54
 922              	.L47:
  75:src/slabAllocator.cpp **** }
 923              		.loc 1 75 1 is_stmt 0
 924 05e8 13850400 		mv	a0,s1
 925 05ec 83308101 		ld	ra,24(sp)
 926              		.cfi_remember_state
 927              		.cfi_restore 1
 928 05f0 03340101 		ld	s0,16(sp)
 929              		.cfi_restore 8
 930              		.cfi_def_cfa 2, 32
 931 05f4 83348100 		ld	s1,8(sp)
 932              		.cfi_restore 9
 933              	.LVL90:
 934 05f8 03390100 		ld	s2,0(sp)
 935              		.cfi_restore 18
 936              	.LVL91:
 937 05fc 13010102 		addi	sp,sp,32
 938              		.cfi_def_cfa_offset 0
GAS LISTING /tmp/ccgsFZb0.s 			page 26


 939 0600 67800000 		jr	ra
 940              	.LVL92:
 941              	.L54:
 942              		.cfi_restore_state
  66:src/slabAllocator.cpp ****     ret = SlabAllocator::allocateFromList(cache->emptyHead);
 943              		.loc 1 66 5 is_stmt 1
  66:src/slabAllocator.cpp ****     ret = SlabAllocator::allocateFromList(cache->emptyHead);
 944              		.loc 1 66 42 is_stmt 0
 945 0604 83340906 		ld	s1,96(s2)
 946              	.LVL93:
 947              	.L52:
 948              	.LBB49:
 949              	.LBB50:
  55:src/../h/slabAllocator.hpp ****             void* ret = allocateSlot(head);
 950              		.loc 3 55 9 is_stmt 1
  55:src/../h/slabAllocator.hpp ****             void* ret = allocateSlot(head);
 951              		.loc 3 55 20
 952 0608 638C0400 		beqz	s1,.L51
 953              	.LBB51:
  56:src/../h/slabAllocator.hpp ****             if(ret != nullptr)
 954              		.loc 3 56 13
  56:src/../h/slabAllocator.hpp ****             if(ret != nullptr)
 955              		.loc 3 56 37 is_stmt 0
 956 060c 13850400 		mv	a0,s1
 957 0610 97000000 		call	_ZN13SlabAllocator12allocateSlotEP4Slab
 957      E7800000 
 958              	.LVL94:
  57:src/../h/slabAllocator.hpp ****                 return ret;
 959              		.loc 3 57 13 is_stmt 1
 960 0618 E30805FE 		beqz	a0,.L52
 961              		.loc 3 58 24 is_stmt 0
 962 061c 93040500 		mv	s1,a0
 963              	.LVL95:
 964              	.L51:
 965              	.LBE51:
 966              	.LBE50:
 967              	.LBE49:
  67:src/slabAllocator.cpp ****     if(ret)
 968              		.loc 1 67 5 is_stmt 1
 969 0620 E39404FC 		bnez	s1,.L47
  69:src/slabAllocator.cpp ****     if(!SlabAllocator::allocateSlab(cache))
 970              		.loc 1 69 5
  69:src/slabAllocator.cpp ****     if(!SlabAllocator::allocateSlab(cache))
 971              		.loc 1 69 36 is_stmt 0
 972 0624 13050900 		mv	a0,s2
 973 0628 97000000 		call	_ZN13SlabAllocator12allocateSlabEP5Cache
 973      E7800000 
 974              	.LVL96:
  69:src/slabAllocator.cpp ****     if(!SlabAllocator::allocateSlab(cache))
 975              		.loc 1 69 5
 976 0630 E30C05FA 		beqz	a0,.L47
  72:src/slabAllocator.cpp ****     ret = SlabAllocator::allocateSlot(cache->emptyHead);
 977              		.loc 1 72 5 is_stmt 1
  72:src/slabAllocator.cpp ****     ret = SlabAllocator::allocateSlot(cache->emptyHead);
 978              		.loc 1 72 38 is_stmt 0
 979 0634 03350906 		ld	a0,96(s2)
 980 0638 97000000 		call	_ZN13SlabAllocator12allocateSlotEP4Slab
GAS LISTING /tmp/ccgsFZb0.s 			page 27


 980      E7800000 
 981              	.LVL97:
 982 0640 93040500 		mv	s1,a0
 983              	.LVL98:
  74:src/slabAllocator.cpp ****     return ret;
 984              		.loc 1 74 5 is_stmt 1
  74:src/slabAllocator.cpp ****     return ret;
 985              		.loc 1 74 12 is_stmt 0
 986 0644 6FF05FFA 		j	.L47
 987              		.cfi_endproc
 988              	.LFE33:
 990              		.align	2
 991              		.globl	_ZN13SlabAllocator14allocateBufferEm
 993              	_ZN13SlabAllocator14allocateBufferEm:
 994              	.LFB34:
  77:src/slabAllocator.cpp **** void* SlabAllocator::allocateBuffer(size_t size) {
 995              		.loc 1 77 50 is_stmt 1
 996              		.cfi_startproc
 997              	.LVL99:
  78:src/slabAllocator.cpp ****     uint64 level = Buddy::getDeg(Buddy::ceil(size));
 998              		.loc 1 78 5
 999              	.LBB52:
 1000              	.LBB53:
 1001              		.file 4 "src/../h/../h/buddyAllocator.hpp"
   1:src/../h/../h/buddyAllocator.hpp **** //
   2:src/../h/../h/buddyAllocator.hpp **** // Created by os on 12/24/22.
   3:src/../h/../h/buddyAllocator.hpp **** //
   4:src/../h/../h/buddyAllocator.hpp **** 
   5:src/../h/../h/buddyAllocator.hpp **** #ifndef KERNEL_FOR_RISCV_ARCHITECURE_BUDDYALLOCATOR_HPP
   6:src/../h/../h/buddyAllocator.hpp **** #define KERNEL_FOR_RISCV_ARCHITECURE_BUDDYALLOCATOR_HPP
   7:src/../h/../h/buddyAllocator.hpp **** 
   8:src/../h/../h/buddyAllocator.hpp **** #include "../lib/hw.h"
   9:src/../h/../h/buddyAllocator.hpp **** #include "../h/utility.hpp"
  10:src/../h/../h/buddyAllocator.hpp **** 
  11:src/../h/../h/buddyAllocator.hpp **** class SlabAllocator;
  12:src/../h/../h/buddyAllocator.hpp **** 
  13:src/../h/../h/buddyAllocator.hpp **** class Buddy{
  14:src/../h/../h/buddyAllocator.hpp **** public:
  15:src/../h/../h/buddyAllocator.hpp ****     static void initialize(void* addr, uint64 block_num);
  16:src/../h/../h/buddyAllocator.hpp **** 
  17:src/../h/../h/buddyAllocator.hpp ****     static void* alloc(uint64 num);
  18:src/../h/../h/buddyAllocator.hpp **** 
  19:src/../h/../h/buddyAllocator.hpp ****     static void free(void *addr, uint64 size);
  20:src/../h/../h/buddyAllocator.hpp **** 
  21:src/../h/../h/buddyAllocator.hpp ****     typedef struct Block{
  22:src/../h/../h/buddyAllocator.hpp ****         Block *next;
  23:src/../h/../h/buddyAllocator.hpp ****     }Bucket;
  24:src/../h/../h/buddyAllocator.hpp **** 
  25:src/../h/../h/buddyAllocator.hpp ****     static void printList();
  26:src/../h/../h/buddyAllocator.hpp **** 
  27:src/../h/../h/buddyAllocator.hpp ****     static inline bool canAllocate(uint64 size){
  28:src/../h/../h/buddyAllocator.hpp ****         return head[size] != nullptr;
  29:src/../h/../h/buddyAllocator.hpp ****     };
  30:src/../h/../h/buddyAllocator.hpp **** 
  31:src/../h/../h/buddyAllocator.hpp **** private:
  32:src/../h/../h/buddyAllocator.hpp ****     static void* BUDDY_META_DATA_ADDR;
  33:src/../h/../h/buddyAllocator.hpp ****     static void* BUDDY_START_ADDR;
GAS LISTING /tmp/ccgsFZb0.s 			page 28


  34:src/../h/../h/buddyAllocator.hpp ****     static uint64 BLOCKS_AVAILABLE;
  35:src/../h/../h/buddyAllocator.hpp ****     static Bucket *head[BUCKET_SIZE], *tail[BUCKET_SIZE];
  36:src/../h/../h/buddyAllocator.hpp **** 
  37:src/../h/../h/buddyAllocator.hpp ****     static inline uint64 ceil(uint64 num){
  38:src/../h/../h/buddyAllocator.hpp ****         num--;
 1002              		.loc 4 38 9
 1003              		.loc 4 38 12 is_stmt 0
 1004 0648 9307F5FF 		addi	a5,a0,-1
 1005              	.LVL100:
  39:src/../h/../h/buddyAllocator.hpp ****         num |= num>>1;
 1006              		.loc 4 39 9 is_stmt 1
 1007              		.loc 4 39 19 is_stmt 0
 1008 064c 13D51700 		srli	a0,a5,1
 1009              	.LVL101:
 1010              		.loc 4 39 13
 1011 0650 B3E7A700 		or	a5,a5,a0
 1012              	.LVL102:
  40:src/../h/../h/buddyAllocator.hpp ****         num |= num>>2;
 1013              		.loc 4 40 9 is_stmt 1
 1014              		.loc 4 40 19 is_stmt 0
 1015 0654 13D72700 		srli	a4,a5,2
 1016              		.loc 4 40 13
 1017 0658 B3E7E700 		or	a5,a5,a4
 1018              	.LVL103:
  41:src/../h/../h/buddyAllocator.hpp ****         num |= num>>4;
 1019              		.loc 4 41 9 is_stmt 1
 1020              		.loc 4 41 19 is_stmt 0
 1021 065c 13D74700 		srli	a4,a5,4
 1022              		.loc 4 41 13
 1023 0660 B3E7E700 		or	a5,a5,a4
 1024              	.LVL104:
  42:src/../h/../h/buddyAllocator.hpp ****         num |= num>>8;
 1025              		.loc 4 42 9 is_stmt 1
 1026              		.loc 4 42 19 is_stmt 0
 1027 0664 13D78700 		srli	a4,a5,8
 1028              		.loc 4 42 13
 1029 0668 B3E7E700 		or	a5,a5,a4
 1030              	.LVL105:
  43:src/../h/../h/buddyAllocator.hpp ****         num |= num>>16;
 1031              		.loc 4 43 9 is_stmt 1
 1032              		.loc 4 43 19 is_stmt 0
 1033 066c 13D70701 		srli	a4,a5,16
 1034              		.loc 4 43 13
 1035 0670 B3E7E700 		or	a5,a5,a4
 1036              	.LVL106:
  44:src/../h/../h/buddyAllocator.hpp ****         num |= num>>32;
 1037              		.loc 4 44 9 is_stmt 1
 1038              		.loc 4 44 19 is_stmt 0
 1039 0674 13D70702 		srli	a4,a5,32
 1040              		.loc 4 44 13
 1041 0678 B3E7E700 		or	a5,a5,a4
 1042              	.LVL107:
  45:src/../h/../h/buddyAllocator.hpp ****         return ++num;
 1043              		.loc 4 45 9 is_stmt 1
 1044              		.loc 4 45 18 is_stmt 0
 1045 067c 93871700 		addi	a5,a5,1
 1046              	.LVL108:
GAS LISTING /tmp/ccgsFZb0.s 			page 29


 1047              	.LBE53:
 1048              	.LBE52:
 1049              	.LBB54:
 1050              	.LBB55:
  46:src/../h/../h/buddyAllocator.hpp ****     }
  47:src/../h/../h/buddyAllocator.hpp **** 
  48:src/../h/../h/buddyAllocator.hpp ****     static inline uint64 getDeg(uint64 num){
  49:src/../h/../h/buddyAllocator.hpp ****         uint64 deg = 0;
 1051              		.loc 4 49 16
 1052 0680 13070000 		li	a4,0
 1053              	.L57:
 1054              	.LVL109:
  50:src/../h/../h/buddyAllocator.hpp ****         while(num>1){
 1055              		.loc 4 50 9 is_stmt 1
 1056              		.loc 4 50 18
 1057 0684 93061000 		li	a3,1
 1058 0688 63F8F600 		bleu	a5,a3,.L56
  51:src/../h/../h/buddyAllocator.hpp ****             num/=2;
 1059              		.loc 4 51 13
 1060              		.loc 4 51 16 is_stmt 0
 1061 068c 93D71700 		srli	a5,a5,1
 1062              	.LVL110:
  52:src/../h/../h/buddyAllocator.hpp ****             deg++;
 1063              		.loc 4 52 13 is_stmt 1
 1064              		.loc 4 52 16 is_stmt 0
 1065 0690 13071700 		addi	a4,a4,1
 1066              	.LVL111:
  50:src/../h/../h/buddyAllocator.hpp ****         while(num>1){
 1067              		.loc 4 50 9
 1068 0694 6FF01FFF 		j	.L57
 1069              	.L56:
  53:src/../h/../h/buddyAllocator.hpp ****         }
  54:src/../h/../h/buddyAllocator.hpp ****         return deg;
 1070              		.loc 4 54 9 is_stmt 1
 1071              	.LVL112:
 1072              	.LBE55:
 1073              	.LBE54:
  79:src/slabAllocator.cpp ****     if(level < CACHE_LOWER_BOUND || level > CACHE_UPPER_BOUND)
 1074              		.loc 1 79 5
  79:src/slabAllocator.cpp ****     if(level < CACHE_LOWER_BOUND || level > CACHE_UPPER_BOUND)
 1075              		.loc 1 79 34 is_stmt 0
 1076 0698 1307B7FF 		addi	a4,a4,-5
 1077              	.LVL113:
  79:src/slabAllocator.cpp ****     if(level < CACHE_LOWER_BOUND || level > CACHE_UPPER_BOUND)
 1078              		.loc 1 79 5
 1079 069c 9307C000 		li	a5,12
 1080 06a0 63F6E700 		bleu	a4,a5,.L63
  85:src/slabAllocator.cpp **** }
 1081              		.loc 1 85 1
 1082 06a4 13050000 		li	a0,0
 1083 06a8 67800000 		ret
 1084              	.L63:
  77:src/slabAllocator.cpp **** void* SlabAllocator::allocateBuffer(size_t size) {
 1085              		.loc 1 77 50
 1086 06ac 130101FF 		addi	sp,sp,-16
 1087              		.cfi_def_cfa_offset 16
 1088 06b0 23341100 		sd	ra,8(sp)
GAS LISTING /tmp/ccgsFZb0.s 			page 30


 1089 06b4 23308100 		sd	s0,0(sp)
 1090              		.cfi_offset 1, -8
 1091              		.cfi_offset 8, -16
 1092 06b8 13040101 		addi	s0,sp,16
 1093              		.cfi_def_cfa 8, 0
  82:src/slabAllocator.cpp ****         level -= CACHE_LOWER_BOUND;
 1094              		.loc 1 82 9 is_stmt 1
 1095              	.LVL114:
  83:src/slabAllocator.cpp ****     SlabAllocator::allocateObject(sizeN[level]);
 1096              		.loc 1 83 5
  83:src/slabAllocator.cpp ****     SlabAllocator::allocateObject(sizeN[level]);
 1097              		.loc 1 83 34 is_stmt 0
 1098 06bc 13173700 		slli	a4,a4,3
 1099              	.LVL115:
 1100 06c0 97070000 		lla	a5,.LANCHOR0
 1100      93870700 
 1101 06c8 3387E700 		add	a4,a5,a4
 1102 06cc 03350700 		ld	a0,0(a4)
 1103 06d0 97000000 		call	_ZN13SlabAllocator14allocateObjectEP5Cache
 1103      E7800000 
 1104              	.LVL116:
  84:src/slabAllocator.cpp **** return nullptr;
 1105              		.loc 1 84 1 is_stmt 1
  85:src/slabAllocator.cpp **** }
 1106              		.loc 1 85 1 is_stmt 0
 1107 06d8 13050000 		li	a0,0
 1108 06dc 83308100 		ld	ra,8(sp)
 1109              		.cfi_restore 1
 1110 06e0 03340100 		ld	s0,0(sp)
 1111              		.cfi_restore 8
 1112              		.cfi_def_cfa 2, 16
 1113 06e4 13010101 		addi	sp,sp,16
 1114              		.cfi_def_cfa_offset 0
 1115 06e8 67800000 		jr	ra
 1116              		.cfi_endproc
 1117              	.LFE34:
 1119              		.align	2
 1120              		.globl	_ZN13SlabAllocator11createCacheEPKcmPFvPvES4_
 1122              	_ZN13SlabAllocator11createCacheEPKcmPFvPvES4_:
 1123              	.LFB38:
 121:src/slabAllocator.cpp **** Cache* SlabAllocator::createCache(const char *name, size_t size, void (*ctor)(void *), void (*dtor)
 1124              		.loc 1 121 110 is_stmt 1
 1125              		.cfi_startproc
 1126              	.LVL117:
 1127 06ec 130101FC 		addi	sp,sp,-64
 1128              		.cfi_def_cfa_offset 64
 1129 06f0 233C1102 		sd	ra,56(sp)
 1130 06f4 23388102 		sd	s0,48(sp)
 1131 06f8 23349102 		sd	s1,40(sp)
 1132 06fc 23302103 		sd	s2,32(sp)
 1133 0700 233C3101 		sd	s3,24(sp)
 1134 0704 23384101 		sd	s4,16(sp)
 1135 0708 23345101 		sd	s5,8(sp)
 1136              		.cfi_offset 1, -8
 1137              		.cfi_offset 8, -16
 1138              		.cfi_offset 9, -24
 1139              		.cfi_offset 18, -32
GAS LISTING /tmp/ccgsFZb0.s 			page 31


 1140              		.cfi_offset 19, -40
 1141              		.cfi_offset 20, -48
 1142              		.cfi_offset 21, -56
 1143 070c 13040104 		addi	s0,sp,64
 1144              		.cfi_def_cfa 8, 0
 1145 0710 13090500 		mv	s2,a0
 1146 0714 93890500 		mv	s3,a1
 1147 0718 930A0600 		mv	s5,a2
 1148 071c 138A0600 		mv	s4,a3
 122:src/slabAllocator.cpp ****     Cache* ret = (Cache*)SlabAllocator::allocateObject(SlabAllocator::cache);
 1149              		.loc 1 122 5
 122:src/slabAllocator.cpp ****     Cache* ret = (Cache*)SlabAllocator::allocateObject(SlabAllocator::cache);
 1150              		.loc 1 122 55 is_stmt 0
 1151 0720 17050000 		ld	a0,.LANCHOR0+104
 1151      03350500 
 1152              	.LVL118:
 1153 0728 97000000 		call	_ZN13SlabAllocator14allocateObjectEP5Cache
 1153      E7800000 
 1154              	.LVL119:
 1155 0730 93040500 		mv	s1,a0
 1156              	.LVL120:
 123:src/slabAllocator.cpp ****     ret->ctor = ctor;
 1157              		.loc 1 123 5 is_stmt 1
 123:src/slabAllocator.cpp ****     ret->ctor = ctor;
 1158              		.loc 1 123 15 is_stmt 0
 1159 0734 23385505 		sd	s5,80(a0)
 124:src/slabAllocator.cpp ****     ret->dtor = dtor;
 1160              		.loc 1 124 5 is_stmt 1
 124:src/slabAllocator.cpp ****     ret->dtor = dtor;
 1161              		.loc 1 124 15 is_stmt 0
 1162 0738 233C4505 		sd	s4,88(a0)
 125:src/slabAllocator.cpp ****     ret->emptyHead = ret->partialHead = ret->fullHead = nullptr;
 1163              		.loc 1 125 5 is_stmt 1
 125:src/slabAllocator.cpp ****     ret->emptyHead = ret->partialHead = ret->fullHead = nullptr;
 1164              		.loc 1 125 55 is_stmt 0
 1165 073c 23380506 		sd	zero,112(a0)
 125:src/slabAllocator.cpp ****     ret->emptyHead = ret->partialHead = ret->fullHead = nullptr;
 1166              		.loc 1 125 39
 1167 0740 23340506 		sd	zero,104(a0)
 125:src/slabAllocator.cpp ****     ret->emptyHead = ret->partialHead = ret->fullHead = nullptr;
 1168              		.loc 1 125 20
 1169 0744 23300506 		sd	zero,96(a0)
 126:src/slabAllocator.cpp ****     ret->objectSize = size;
 1170              		.loc 1 126 5 is_stmt 1
 126:src/slabAllocator.cpp ****     ret->objectSize = size;
 1171              		.loc 1 126 21 is_stmt 0
 1172 0748 23303505 		sd	s3,64(a0)
 127:src/slabAllocator.cpp ****     ret->slabSize = DEFAULT_SLAB_SIZE;
 1173              		.loc 1 127 5 is_stmt 1
 127:src/slabAllocator.cpp ****     ret->slabSize = DEFAULT_SLAB_SIZE;
 1174              		.loc 1 127 19 is_stmt 0
 1175 074c 93072000 		li	a5,2
 1176 0750 2334F504 		sd	a5,72(a0)
 128:src/slabAllocator.cpp ****     strcpy(name, ret->name);
 1177              		.loc 1 128 5 is_stmt 1
 128:src/slabAllocator.cpp ****     strcpy(name, ret->name);
 1178              		.loc 1 128 11 is_stmt 0
GAS LISTING /tmp/ccgsFZb0.s 			page 32


 1179 0754 93050500 		mv	a1,a0
 1180 0758 13050900 		mv	a0,s2
 1181 075c 97000000 		call	_Z6strcpyPKcPc@plt
 1181      E7800000 
 1182              	.LVL121:
 129:src/slabAllocator.cpp ****     return ret;
 1183              		.loc 1 129 5 is_stmt 1
 130:src/slabAllocator.cpp **** }
 1184              		.loc 1 130 1 is_stmt 0
 1185 0764 13850400 		mv	a0,s1
 1186 0768 83308103 		ld	ra,56(sp)
 1187              		.cfi_restore 1
 1188 076c 03340103 		ld	s0,48(sp)
 1189              		.cfi_restore 8
 1190              		.cfi_def_cfa 2, 64
 1191 0770 83348102 		ld	s1,40(sp)
 1192              		.cfi_restore 9
 1193              	.LVL122:
 1194 0774 03390102 		ld	s2,32(sp)
 1195              		.cfi_restore 18
 1196              	.LVL123:
 1197 0778 83398101 		ld	s3,24(sp)
 1198              		.cfi_restore 19
 1199              	.LVL124:
 1200 077c 033A0101 		ld	s4,16(sp)
 1201              		.cfi_restore 20
 1202              	.LVL125:
 1203 0780 833A8100 		ld	s5,8(sp)
 1204              		.cfi_restore 21
 1205              	.LVL126:
 1206 0784 13010104 		addi	sp,sp,64
 1207              		.cfi_def_cfa_offset 0
 1208 0788 67800000 		jr	ra
 1209              		.cfi_endproc
 1210              	.LFE38:
 1212              		.section	.rodata.str1.8
 1213 011e 0000     		.align	3
 1214              	.LC16:
 1215 0120 4D61696E 		.string	"Main Cache"
 1215      20436163 
 1215      686500
 1216              		.text
 1217              		.align	2
 1218              		.globl	_ZN13SlabAllocator10initializeEPvm
 1220              	_ZN13SlabAllocator10initializeEPvm:
 1221              	.LFB30:
  12:src/slabAllocator.cpp **** void SlabAllocator::initialize(void* space, uint64 blockNum) {
 1222              		.loc 1 12 62 is_stmt 1
 1223              		.cfi_startproc
 1224              	.LVL127:
 1225 078c 130101FE 		addi	sp,sp,-32
 1226              		.cfi_def_cfa_offset 32
 1227 0790 233C1100 		sd	ra,24(sp)
 1228 0794 23388100 		sd	s0,16(sp)
 1229 0798 23349100 		sd	s1,8(sp)
 1230 079c 23302101 		sd	s2,0(sp)
 1231              		.cfi_offset 1, -8
GAS LISTING /tmp/ccgsFZb0.s 			page 33


 1232              		.cfi_offset 8, -16
 1233              		.cfi_offset 9, -24
 1234              		.cfi_offset 18, -32
 1235 07a0 13040102 		addi	s0,sp,32
 1236              		.cfi_def_cfa 8, 0
 1237 07a4 13090500 		mv	s2,a0
 1238 07a8 93840500 		mv	s1,a1
  13:src/slabAllocator.cpp ****     Buddy::initialize(space, blockNum);
 1239              		.loc 1 13 5
  13:src/slabAllocator.cpp ****     Buddy::initialize(space, blockNum);
 1240              		.loc 1 13 22 is_stmt 0
 1241 07ac 97000000 		call	_ZN5Buddy10initializeEPvm@plt
 1241      E7800000 
 1242              	.LVL128:
  14:src/slabAllocator.cpp ****     startAddr = space;
 1243              		.loc 1 14 5 is_stmt 1
  14:src/slabAllocator.cpp ****     startAddr = space;
 1244              		.loc 1 14 15 is_stmt 0
 1245 07b4 97070000 		lla	a5,.LANCHOR0
 1245      93870700 
 1246 07bc 23B82707 		sd	s2,112(a5)
  15:src/slabAllocator.cpp ****     blocksResponsibleFor = blockNum;
 1247              		.loc 1 15 5 is_stmt 1
  15:src/slabAllocator.cpp ****     blocksResponsibleFor = blockNum;
 1248              		.loc 1 15 26 is_stmt 0
 1249 07c0 23BC9706 		sd	s1,120(a5)
  16:src/slabAllocator.cpp ****     cache = (Cache*)SLAB_META_ADDR_CONST;
 1250              		.loc 1 16 5 is_stmt 1
  16:src/slabAllocator.cpp ****     cache = (Cache*)SLAB_META_ADDR_CONST;
 1251              		.loc 1 16 21 is_stmt 0
 1252 07c4 17070000 		la	a4,HEAP_START_ADDR
 1252      03370700 
 1253 07cc 83350700 		ld	a1,0(a4)
 1254 07d0 93D5C500 		srli	a1,a1,12
 1255 07d4 93851500 		addi	a1,a1,1
 1256 07d8 9395C500 		slli	a1,a1,12
  16:src/slabAllocator.cpp ****     cache = (Cache*)SLAB_META_ADDR_CONST;
 1257              		.loc 1 16 11
 1258 07dc 23B4B706 		sd	a1,104(a5)
  17:src/slabAllocator.cpp ****     cache->ctor = nullptr;
 1259              		.loc 1 17 5 is_stmt 1
  17:src/slabAllocator.cpp ****     cache->ctor = nullptr;
 1260              		.loc 1 17 17 is_stmt 0
 1261 07e0 23B80504 		sd	zero,80(a1)
  18:src/slabAllocator.cpp ****     cache->dtor = nullptr;
 1262              		.loc 1 18 5 is_stmt 1
  18:src/slabAllocator.cpp ****     cache->dtor = nullptr;
 1263              		.loc 1 18 17 is_stmt 0
 1264 07e4 23BC0504 		sd	zero,88(a1)
  19:src/slabAllocator.cpp ****     cache->emptyHead = nullptr;
 1265              		.loc 1 19 5 is_stmt 1
  19:src/slabAllocator.cpp ****     cache->emptyHead = nullptr;
 1266              		.loc 1 19 22 is_stmt 0
 1267 07e8 23B00506 		sd	zero,96(a1)
  20:src/slabAllocator.cpp ****     cache->partialHead = nullptr;
 1268              		.loc 1 20 5 is_stmt 1
  20:src/slabAllocator.cpp ****     cache->partialHead = nullptr;
GAS LISTING /tmp/ccgsFZb0.s 			page 34


 1269              		.loc 1 20 24 is_stmt 0
 1270 07ec 23B40506 		sd	zero,104(a1)
  21:src/slabAllocator.cpp ****     cache->fullHead = nullptr;
 1271              		.loc 1 21 5 is_stmt 1
  21:src/slabAllocator.cpp ****     cache->fullHead = nullptr;
 1272              		.loc 1 21 21 is_stmt 0
 1273 07f0 23B80506 		sd	zero,112(a1)
  22:src/slabAllocator.cpp ****     cache->objectSize = sizeof(Cache);
 1274              		.loc 1 22 5 is_stmt 1
  22:src/slabAllocator.cpp ****     cache->objectSize = sizeof(Cache);
 1275              		.loc 1 22 23 is_stmt 0
 1276 07f4 93078007 		li	a5,120
 1277 07f8 23B0F504 		sd	a5,64(a1)
  23:src/slabAllocator.cpp ****     cache->slabSize = DEFAULT_SLAB_SIZE;
 1278              		.loc 1 23 5 is_stmt 1
  23:src/slabAllocator.cpp ****     cache->slabSize = DEFAULT_SLAB_SIZE;
 1279              		.loc 1 23 21 is_stmt 0
 1280 07fc 93072000 		li	a5,2
 1281 0800 23B4F504 		sd	a5,72(a1)
  24:src/slabAllocator.cpp ****     strcpy("Main Cache", cache->name);
 1282              		.loc 1 24 5 is_stmt 1
  24:src/slabAllocator.cpp ****     strcpy("Main Cache", cache->name);
 1283              		.loc 1 24 11 is_stmt 0
 1284 0804 17050000 		lla	a0,.LC16
 1284      13050500 
 1285 080c 97000000 		call	_Z6strcpyPKcPc@plt
 1285      E7800000 
 1286              	.LVL129:
  25:src/slabAllocator.cpp ****     for(int i=0;i<BUCKET_SIZE;i++){
 1287              		.loc 1 25 5 is_stmt 1
 1288              	.LBB56:
  25:src/slabAllocator.cpp ****     for(int i=0;i<BUCKET_SIZE;i++){
 1289              		.loc 1 25 13 is_stmt 0
 1290 0814 93040000 		li	s1,0
 1291              	.LVL130:
 1292 0818 6F00C004 		j	.L68
 1293              	.LVL131:
 1294              	.L70:
  26:src/slabAllocator.cpp ****         sizeN[i] = SlabAllocator::createCache(names[i], 2<<i, nullptr, nullptr);
 1295              		.loc 1 26 9 is_stmt 1 discriminator 2
  26:src/slabAllocator.cpp ****         sizeN[i] = SlabAllocator::createCache(names[i], 2<<i, nullptr, nullptr);
 1296              		.loc 1 26 46 is_stmt 0 discriminator 2
 1297 081c 13993400 		slli	s2,s1,3
 1298 0820 97070000 		lla	a5,.LANCHOR1
 1298      93870700 
 1299 0828 B3872701 		add	a5,a5,s2
 1300 082c 93060000 		li	a3,0
 1301 0830 13060000 		li	a2,0
 1302 0834 93052000 		li	a1,2
 1303 0838 BB959500 		sllw	a1,a1,s1
 1304 083c 03B50700 		ld	a0,0(a5)
 1305 0840 97000000 		call	_ZN13SlabAllocator11createCacheEPKcmPFvPvES4_
 1305      E7800000 
 1306              	.LVL132:
  26:src/slabAllocator.cpp ****         sizeN[i] = SlabAllocator::createCache(names[i], 2<<i, nullptr, nullptr);
 1307              		.loc 1 26 18 discriminator 2
 1308 0848 97070000 		lla	a5,.LANCHOR0
GAS LISTING /tmp/ccgsFZb0.s 			page 35


 1308      93870700 
 1309 0850 B3872701 		add	a5,a5,s2
 1310 0854 23B0A700 		sd	a0,0(a5)
  27:src/slabAllocator.cpp ****         printCache(sizeN[i]);
 1311              		.loc 1 27 9 is_stmt 1 discriminator 2
  27:src/slabAllocator.cpp ****         printCache(sizeN[i]);
 1312              		.loc 1 27 19 is_stmt 0 discriminator 2
 1313 0858 97000000 		call	_ZN13SlabAllocator10printCacheEP5Cache
 1313      E7800000 
 1314              	.LVL133:
  25:src/slabAllocator.cpp ****     for(int i=0;i<BUCKET_SIZE;i++){
 1315              		.loc 1 25 5 is_stmt 1 discriminator 2
 1316 0860 9B841400 		addiw	s1,s1,1
 1317              	.LVL134:
 1318              	.L68:
  25:src/slabAllocator.cpp ****     for(int i=0;i<BUCKET_SIZE;i++){
 1319              		.loc 1 25 18 discriminator 3
 1320 0864 9307C000 		li	a5,12
 1321 0868 E3DA97FA 		ble	s1,a5,.L70
 1322              	.LBE56:
  29:src/slabAllocator.cpp **** }
 1323              		.loc 1 29 1 is_stmt 0
 1324 086c 83308101 		ld	ra,24(sp)
 1325              		.cfi_restore 1
 1326 0870 03340101 		ld	s0,16(sp)
 1327              		.cfi_restore 8
 1328              		.cfi_def_cfa 2, 32
 1329 0874 83348100 		ld	s1,8(sp)
 1330              		.cfi_restore 9
 1331              	.LVL135:
 1332 0878 03390100 		ld	s2,0(sp)
 1333              		.cfi_restore 18
 1334 087c 13010102 		addi	sp,sp,32
 1335              		.cfi_def_cfa_offset 0
 1336 0880 67800000 		jr	ra
 1337              		.cfi_endproc
 1338              	.LFE30:
 1340              		.align	2
 1341              		.globl	_ZN13SlabAllocator8freeSlotEP4Slabm
 1343              	_ZN13SlabAllocator8freeSlotEP4Slabm:
 1344              	.LFB35:
  87:src/slabAllocator.cpp **** void SlabAllocator::freeSlot(Slab *slab, uint64 index) {
 1345              		.loc 1 87 56 is_stmt 1
 1346              		.cfi_startproc
 1347              	.LVL136:
  88:src/slabAllocator.cpp ****     if(slab->allocated[index]) {
 1348              		.loc 1 88 5
 1349              	.LBB57:
  88:src/slabAllocator.cpp ****     if(slab->allocated[index]) {
 1350              		.loc 1 88 14 is_stmt 0
 1351 0884 83370502 		ld	a5,32(a0)
  88:src/slabAllocator.cpp ****     if(slab->allocated[index]) {
 1352              		.loc 1 88 29
 1353 0888 B385B700 		add	a1,a5,a1
 1354              	.LVL137:
 1355 088c 83C70500 		lbu	a5,0(a1)
  88:src/slabAllocator.cpp ****     if(slab->allocated[index]) {
GAS LISTING /tmp/ccgsFZb0.s 			page 36


 1356              		.loc 1 88 5
 1357 0890 638A070A 		beqz	a5,.L79
 1358              	.LBE57:
  87:src/slabAllocator.cpp **** void SlabAllocator::freeSlot(Slab *slab, uint64 index) {
 1359              		.loc 1 87 56
 1360 0894 130101FE 		addi	sp,sp,-32
 1361              		.cfi_def_cfa_offset 32
 1362 0898 233C1100 		sd	ra,24(sp)
 1363 089c 23388100 		sd	s0,16(sp)
 1364 08a0 23349100 		sd	s1,8(sp)
 1365              		.cfi_offset 1, -8
 1366              		.cfi_offset 8, -16
 1367              		.cfi_offset 9, -24
 1368 08a4 13040102 		addi	s0,sp,32
 1369              		.cfi_def_cfa 8, 0
 1370 08a8 93040500 		mv	s1,a0
 1371              	.LBB65:
 1372              	.LBB58:
  89:src/slabAllocator.cpp ****         slab->allocated[index] = false;
 1373              		.loc 1 89 9 is_stmt 1
  89:src/slabAllocator.cpp ****         slab->allocated[index] = false;
 1374              		.loc 1 89 32 is_stmt 0
 1375 08ac 23800500 		sb	zero,0(a1)
  90:src/slabAllocator.cpp ****         Slab *&headFrom = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 1376              		.loc 1 90 9 is_stmt 1
 1377              	.LVL138:
 1378              	.LBB59:
 1379              	.LBB60:
  13:src/../h/../h/../h/slab_t.hpp ****     inline bool isEmpty(){return numOfFreeSlots == totalNumOfSlots;}
 1380              		.loc 2 13 26
  13:src/../h/../h/../h/slab_t.hpp ****     inline bool isEmpty(){return numOfFreeSlots == totalNumOfSlots;}
 1381              		.loc 2 13 33 is_stmt 0
 1382 08b0 83370501 		ld	a5,16(a0)
 1383              	.LVL139:
 1384              	.LBE60:
 1385              	.LBE59:
  90:src/slabAllocator.cpp ****         Slab *&headFrom = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 1386              		.loc 1 90 83
 1387 08b4 639A0704 		bnez	a5,.L73
  90:src/slabAllocator.cpp ****         Slab *&headFrom = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 1388              		.loc 1 90 50 discriminator 1
 1389 08b8 03350503 		ld	a0,48(a0)
 1390              	.LVL140:
  90:src/slabAllocator.cpp ****         Slab *&headFrom = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 1391              		.loc 1 90 83 discriminator 1
 1392 08bc 13050507 		addi	a0,a0,112
 1393              	.L74:
 1394              	.LVL141:
  91:src/slabAllocator.cpp ****         slab->numOfFreeSlots++;
 1395              		.loc 1 91 9 is_stmt 1 discriminator 4
  91:src/slabAllocator.cpp ****         slab->numOfFreeSlots++;
 1396              		.loc 1 91 29 is_stmt 0 discriminator 4
 1397 08c0 93871700 		addi	a5,a5,1
 1398 08c4 23B8F400 		sd	a5,16(s1)
  92:src/slabAllocator.cpp ****         Slab *&headTo = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead;
 1399              		.loc 1 92 9 is_stmt 1 discriminator 4
 1400              	.LVL142:
GAS LISTING /tmp/ccgsFZb0.s 			page 37


 1401              	.LBB61:
 1402              	.LBB62:
 1403              		.loc 2 14 27 discriminator 4
 1404              		.loc 2 14 52 is_stmt 0 discriminator 4
 1405 08c8 03B78401 		ld	a4,24(s1)
 1406              	.LVL143:
 1407              	.LBE62:
 1408              	.LBE61:
  92:src/slabAllocator.cpp ****         Slab *&headTo = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead;
 1409              		.loc 1 92 83 discriminator 4
 1410 08cc 6384E704 		beq	a5,a4,.L82
  92:src/slabAllocator.cpp ****         Slab *&headTo = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead;
 1411              		.loc 1 92 75 discriminator 2
 1412 08d0 83B50403 		ld	a1,48(s1)
  92:src/slabAllocator.cpp ****         Slab *&headTo = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead;
 1413              		.loc 1 92 83 discriminator 2
 1414 08d4 93858506 		addi	a1,a1,104
 1415              	.L76:
 1416              	.LVL144:
  94:src/slabAllocator.cpp ****         if(slab->isEmpty()) {
 1417              		.loc 1 94 9 is_stmt 1 discriminator 4
 1418              	.LBE58:
 1419              	.LBE65:
 1420              		.loc 2 14 27 discriminator 4
 1421              	.LBB66:
 1422              	.LBB63:
  94:src/slabAllocator.cpp ****         if(slab->isEmpty()) {
 1423              		.loc 1 94 9 is_stmt 0 discriminator 4
 1424 08d8 6384E704 		beq	a5,a4,.L83
  99:src/slabAllocator.cpp ****             if (headTo != headFrom)
 1425              		.loc 1 99 13 is_stmt 1
  99:src/slabAllocator.cpp ****             if (headTo != headFrom)
 1426              		.loc 1 99 17 is_stmt 0
 1427 08dc 03B70500 		ld	a4,0(a1)
  99:src/slabAllocator.cpp ****             if (headTo != headFrom)
 1428              		.loc 1 99 27
 1429 08e0 83370500 		ld	a5,0(a0)
  99:src/slabAllocator.cpp ****             if (headTo != headFrom)
 1430              		.loc 1 99 13
 1431 08e4 6308F700 		beq	a4,a5,.L71
 100:src/slabAllocator.cpp ****                 SlabAllocator::move(headFrom, headTo, slab);
 1432              		.loc 1 100 17 is_stmt 1
 100:src/slabAllocator.cpp ****                 SlabAllocator::move(headFrom, headTo, slab);
 1433              		.loc 1 100 36 is_stmt 0
 1434 08e8 13860400 		mv	a2,s1
 1435 08ec 97000000 		call	_ZN13SlabAllocator4moveERP4SlabS2_S1_
 1435      E7800000 
 1436              	.LVL145:
 1437              	.L71:
 1438              	.LBE63:
 1439              	.LBE66:
 102:src/slabAllocator.cpp **** }
 1440              		.loc 1 102 1
 1441 08f4 83308101 		ld	ra,24(sp)
 1442              		.cfi_remember_state
 1443              		.cfi_restore 1
 1444 08f8 03340101 		ld	s0,16(sp)
GAS LISTING /tmp/ccgsFZb0.s 			page 38


 1445              		.cfi_restore 8
 1446              		.cfi_def_cfa 2, 32
 1447 08fc 83348100 		ld	s1,8(sp)
 1448              		.cfi_restore 9
 1449              	.LVL146:
 1450 0900 13010102 		addi	sp,sp,32
 1451              		.cfi_def_cfa_offset 0
 1452 0904 67800000 		jr	ra
 1453              	.LVL147:
 1454              	.L73:
 1455              		.cfi_restore_state
 1456              	.LBB67:
 1457              	.LBB64:
  90:src/slabAllocator.cpp ****         Slab *&headFrom = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 1458              		.loc 1 90 75 discriminator 2
 1459 0908 03350503 		ld	a0,48(a0)
  90:src/slabAllocator.cpp ****         Slab *&headFrom = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 1460              		.loc 1 90 83 discriminator 2
 1461 090c 13058506 		addi	a0,a0,104
 1462 0910 6FF01FFB 		j	.L74
 1463              	.LVL148:
 1464              	.L82:
  92:src/slabAllocator.cpp ****         Slab *&headTo = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead;
 1465              		.loc 1 92 49 discriminator 1
 1466 0914 83B50403 		ld	a1,48(s1)
  92:src/slabAllocator.cpp ****         Slab *&headTo = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead;
 1467              		.loc 1 92 83 discriminator 1
 1468 0918 93850506 		addi	a1,a1,96
 1469 091c 6FF0DFFB 		j	.L76
 1470              	.LVL149:
 1471              	.L83:
  95:src/slabAllocator.cpp ****             SlabAllocator::removeFromList(headFrom, slab);
 1472              		.loc 1 95 13 is_stmt 1
  95:src/slabAllocator.cpp ****             SlabAllocator::removeFromList(headFrom, slab);
 1473              		.loc 1 95 42 is_stmt 0
 1474 0920 93850400 		mv	a1,s1
 1475              	.LVL150:
 1476 0924 97000000 		call	_ZN13SlabAllocator14removeFromListERP4SlabS1_
 1476      E7800000 
 1477              	.LVL151:
  96:src/slabAllocator.cpp ****             Buddy::free(slab, slab->parent->slabSize);
 1478              		.loc 1 96 13 is_stmt 1
  96:src/slabAllocator.cpp ****             Buddy::free(slab, slab->parent->slabSize);
 1479              		.loc 1 96 37 is_stmt 0
 1480 092c 83B70403 		ld	a5,48(s1)
  96:src/slabAllocator.cpp ****             Buddy::free(slab, slab->parent->slabSize);
 1481              		.loc 1 96 24
 1482 0930 83B58704 		ld	a1,72(a5)
 1483 0934 13850400 		mv	a0,s1
 1484 0938 97000000 		call	_ZN5Buddy4freeEPvm@plt
 1484      E7800000 
 1485              	.LVL152:
 1486 0940 6FF05FFB 		j	.L71
 1487              	.LVL153:
 1488              	.L79:
 1489              		.cfi_def_cfa_register 2
 1490              		.cfi_restore 1
GAS LISTING /tmp/ccgsFZb0.s 			page 39


 1491              		.cfi_restore 8
 1492              		.cfi_restore 9
 1493 0944 67800000 		ret
 1494              	.LBE64:
 1495              	.LBE67:
 1496              		.cfi_endproc
 1497              	.LFE35:
 1499              		.align	2
 1500              		.globl	_ZN13SlabAllocator10freeObjectEP5CachePKv
 1502              	_ZN13SlabAllocator10freeObjectEP5CachePKv:
 1503              	.LFB36:
 104:src/slabAllocator.cpp **** bool SlabAllocator::freeObject(Cache* cache, const void *addr) {
 1504              		.loc 1 104 64 is_stmt 1
 1505              		.cfi_startproc
 1506              	.LVL154:
 1507 0948 130101FE 		addi	sp,sp,-32
 1508              		.cfi_def_cfa_offset 32
 1509 094c 233C1100 		sd	ra,24(sp)
 1510 0950 23388100 		sd	s0,16(sp)
 1511 0954 23349100 		sd	s1,8(sp)
 1512 0958 23302101 		sd	s2,0(sp)
 1513              		.cfi_offset 1, -8
 1514              		.cfi_offset 8, -16
 1515              		.cfi_offset 9, -24
 1516              		.cfi_offset 18, -32
 1517 095c 13040102 		addi	s0,sp,32
 1518              		.cfi_def_cfa 8, 0
 1519 0960 13090500 		mv	s2,a0
 1520 0964 93840500 		mv	s1,a1
 106:src/slabAllocator.cpp ****     bool deleted = SlabAllocator::freeFromList(cache->partialHead, addr);
 1521              		.loc 1 106 5
 106:src/slabAllocator.cpp ****     bool deleted = SlabAllocator::freeFromList(cache->partialHead, addr);
 1522              		.loc 1 106 47 is_stmt 0
 1523 0968 03358506 		ld	a0,104(a0)
 1524              	.LVL155:
 1525 096c 6F008000 		j	.L87
 1526              	.LVL156:
 1527              	.L86:
 1528              	.LBB82:
 1529              	.LBB83:
 1530              	.LBB84:
  59:src/../h/slabAllocator.hpp ****         }
  60:src/../h/slabAllocator.hpp ****         return nullptr;
  61:src/../h/slabAllocator.hpp ****     }
  62:src/../h/slabAllocator.hpp **** 
  63:src/../h/slabAllocator.hpp ****     static inline bool freeFromList(Slab* head,const void* addr){
  64:src/../h/slabAllocator.hpp ****         while(head){
  65:src/../h/slabAllocator.hpp ****             uint64 upperBound = SlabAllocator::getUpperBound(head);
  66:src/../h/slabAllocator.hpp ****             uint64 lowerBound = SlabAllocator::getLowerBound(head);
  67:src/../h/slabAllocator.hpp ****             if((uint64)addr < upperBound && (uint64)addr >= lowerBound){
  68:src/../h/slabAllocator.hpp ****                 uint64 index = ((uint64)addr - lowerBound) / cache->objectSize;
  69:src/../h/slabAllocator.hpp ****                 freeSlot(head, index);
  70:src/../h/slabAllocator.hpp ****                 return true;
  71:src/../h/slabAllocator.hpp ****             }
  72:src/../h/slabAllocator.hpp ****             head = head->next;
 1531              		.loc 3 72 13 is_stmt 1
 1532              		.loc 3 72 18 is_stmt 0
GAS LISTING /tmp/ccgsFZb0.s 			page 40


 1533 0970 03358500 		ld	a0,8(a0)
 1534              	.LVL157:
 1535              	.L87:
 1536              	.LBE84:
  64:src/../h/slabAllocator.hpp ****             uint64 upperBound = SlabAllocator::getUpperBound(head);
 1537              		.loc 3 64 9 is_stmt 1
  64:src/../h/slabAllocator.hpp ****             uint64 upperBound = SlabAllocator::getUpperBound(head);
 1538              		.loc 3 64 15
 1539 0974 63040504 		beqz	a0,.L92
 1540              	.LBB89:
  65:src/../h/slabAllocator.hpp ****             uint64 lowerBound = SlabAllocator::getLowerBound(head);
 1541              		.loc 3 65 13
 1542              	.LVL158:
 1543              	.LBB85:
 1544              	.LBB86:
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1545              		.loc 3 51 52
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1546              		.loc 3 51 73 is_stmt 0
 1547 0978 83358502 		ld	a1,40(a0)
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1548              		.loc 3 51 94
 1549 097c 83378501 		ld	a5,24(a0)
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1550              		.loc 3 51 116
 1551 0980 03370503 		ld	a4,48(a0)
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1552              		.loc 3 51 124
 1553 0984 03370704 		ld	a4,64(a4)
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1554              		.loc 3 51 109
 1555 0988 B387E702 		mul	a5,a5,a4
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1556              		.loc 3 51 124
 1557 098c B387F500 		add	a5,a1,a5
 1558              	.LVL159:
 1559              	.LBE86:
 1560              	.LBE85:
  66:src/../h/slabAllocator.hpp ****             if((uint64)addr < upperBound && (uint64)addr >= lowerBound){
 1561              		.loc 3 66 13 is_stmt 1
 1562              	.LBE89:
 1563              	.LBE83:
 1564              	.LBE82:
  52:src/../h/slabAllocator.hpp **** 
 1565              		.loc 3 52 52
 1566              	.LBB92:
 1567              	.LBB91:
 1568              	.LBB90:
  67:src/../h/slabAllocator.hpp ****                 uint64 index = ((uint64)addr - lowerBound) / cache->objectSize;
 1569              		.loc 3 67 13
 1570              	.LBB87:
 1571 0990 E3F0F4FE 		bleu	a5,s1,.L86
  67:src/../h/slabAllocator.hpp ****                 uint64 index = ((uint64)addr - lowerBound) / cache->objectSize;
 1572              		.loc 3 67 42 is_stmt 0
 1573 0994 E3EEB4FC 		bgtu	a1,s1,.L86
 1574              	.LBB88:
  68:src/../h/slabAllocator.hpp ****                 freeSlot(head, index);
GAS LISTING /tmp/ccgsFZb0.s 			page 41


 1575              		.loc 3 68 17 is_stmt 1
  68:src/../h/slabAllocator.hpp ****                 freeSlot(head, index);
 1576              		.loc 3 68 46 is_stmt 0
 1577 0998 B385B440 		sub	a1,s1,a1
 1578              	.LVL160:
  68:src/../h/slabAllocator.hpp ****                 freeSlot(head, index);
 1579              		.loc 3 68 69
 1580 099c 97070000 		ld	a5,.LANCHOR0+104
 1580      83B70700 
 1581              	.LVL161:
 1582 09a4 83B70704 		ld	a5,64(a5)
 1583              	.LVL162:
  69:src/../h/slabAllocator.hpp ****                 return true;
 1584              		.loc 3 69 17 is_stmt 1
  69:src/../h/slabAllocator.hpp ****                 return true;
 1585              		.loc 3 69 25 is_stmt 0
 1586 09a8 B3D5F502 		divu	a1,a1,a5
 1587              	.LVL163:
 1588 09ac 97000000 		call	_ZN13SlabAllocator8freeSlotEP4Slabm
 1588      E7800000 
 1589              	.LVL164:
  70:src/../h/slabAllocator.hpp ****             }
 1590              		.loc 3 70 17 is_stmt 1
  70:src/../h/slabAllocator.hpp ****             }
 1591              		.loc 3 70 24 is_stmt 0
 1592 09b4 13051000 		li	a0,1
 1593 09b8 6F008000 		j	.L85
 1594              	.LVL165:
 1595              	.L92:
 1596              	.LBE88:
 1597              	.LBE87:
 1598              	.LBE90:
  73:src/../h/slabAllocator.hpp ****         }
  74:src/../h/slabAllocator.hpp ****         return false;
 1599              		.loc 3 74 16
 1600 09bc 13050000 		li	a0,0
 1601              	.LVL166:
 1602              	.L85:
 1603              	.LBE91:
 1604              	.LBE92:
 107:src/slabAllocator.cpp ****     if(deleted)
 1605              		.loc 1 107 5 is_stmt 1
 1606 09c0 630E0500 		beqz	a0,.L94
 1607              	.LVL167:
 1608              	.L88:
 113:src/slabAllocator.cpp **** }
 1609              		.loc 1 113 1 is_stmt 0
 1610 09c4 83308101 		ld	ra,24(sp)
 1611              		.cfi_remember_state
 1612              		.cfi_restore 1
 1613 09c8 03340101 		ld	s0,16(sp)
 1614              		.cfi_restore 8
 1615              		.cfi_def_cfa 2, 32
 1616 09cc 83348100 		ld	s1,8(sp)
 1617              		.cfi_restore 9
 1618              	.LVL168:
 1619 09d0 03390100 		ld	s2,0(sp)
GAS LISTING /tmp/ccgsFZb0.s 			page 42


 1620              		.cfi_restore 18
 1621              	.LVL169:
 1622 09d4 13010102 		addi	sp,sp,32
 1623              		.cfi_def_cfa_offset 0
 1624 09d8 67800000 		jr	ra
 1625              	.LVL170:
 1626              	.L94:
 1627              		.cfi_restore_state
 110:src/slabAllocator.cpp ****     deleted = SlabAllocator::freeFromList(cache->fullHead, addr);
 1628              		.loc 1 110 5 is_stmt 1
 110:src/slabAllocator.cpp ****     deleted = SlabAllocator::freeFromList(cache->fullHead, addr);
 1629              		.loc 1 110 42 is_stmt 0
 1630 09dc 83370907 		ld	a5,112(s2)
 1631              	.LVL171:
 1632 09e0 6F008000 		j	.L91
 1633              	.LVL172:
 1634              	.L90:
 1635              	.LBB93:
 1636              	.LBB94:
 1637              	.LBB95:
  72:src/../h/slabAllocator.hpp ****         }
 1638              		.loc 3 72 13 is_stmt 1
  72:src/../h/slabAllocator.hpp ****         }
 1639              		.loc 3 72 18 is_stmt 0
 1640 09e4 83B78700 		ld	a5,8(a5)
 1641              	.LVL173:
 1642              	.L91:
 1643              	.LBE95:
  64:src/../h/slabAllocator.hpp ****             uint64 upperBound = SlabAllocator::getUpperBound(head);
 1644              		.loc 3 64 9 is_stmt 1
  64:src/../h/slabAllocator.hpp ****             uint64 upperBound = SlabAllocator::getUpperBound(head);
 1645              		.loc 3 64 15
 1646 09e8 E38E07FC 		beqz	a5,.L88
 1647              	.LBB100:
  65:src/../h/slabAllocator.hpp ****             uint64 lowerBound = SlabAllocator::getLowerBound(head);
 1648              		.loc 3 65 13
 1649              	.LVL174:
 1650              	.LBB96:
 1651              	.LBB97:
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1652              		.loc 3 51 52
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1653              		.loc 3 51 73 is_stmt 0
 1654 09ec 83B58702 		ld	a1,40(a5)
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1655              		.loc 3 51 94
 1656 09f0 03B78701 		ld	a4,24(a5)
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1657              		.loc 3 51 116
 1658 09f4 83B60703 		ld	a3,48(a5)
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1659              		.loc 3 51 124
 1660 09f8 83B60604 		ld	a3,64(a3)
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1661              		.loc 3 51 109
 1662 09fc 3307D702 		mul	a4,a4,a3
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
GAS LISTING /tmp/ccgsFZb0.s 			page 43


 1663              		.loc 3 51 124
 1664 0a00 3387E500 		add	a4,a1,a4
 1665              	.LVL175:
 1666              	.LBE97:
 1667              	.LBE96:
  66:src/../h/slabAllocator.hpp ****             if((uint64)addr < upperBound && (uint64)addr >= lowerBound){
 1668              		.loc 3 66 13 is_stmt 1
 1669              	.LBE100:
 1670              	.LBE94:
 1671              	.LBE93:
  52:src/../h/slabAllocator.hpp **** 
 1672              		.loc 3 52 52
 1673              	.LBB103:
 1674              	.LBB102:
 1675              	.LBB101:
  67:src/../h/slabAllocator.hpp ****                 uint64 index = ((uint64)addr - lowerBound) / cache->objectSize;
 1676              		.loc 3 67 13
 1677              	.LBB98:
 1678 0a04 E3F0E4FE 		bleu	a4,s1,.L90
  67:src/../h/slabAllocator.hpp ****                 uint64 index = ((uint64)addr - lowerBound) / cache->objectSize;
 1679              		.loc 3 67 42 is_stmt 0
 1680 0a08 E3EEB4FC 		bgtu	a1,s1,.L90
 1681              	.LBB99:
  68:src/../h/slabAllocator.hpp ****                 freeSlot(head, index);
 1682              		.loc 3 68 17 is_stmt 1
  68:src/../h/slabAllocator.hpp ****                 freeSlot(head, index);
 1683              		.loc 3 68 46 is_stmt 0
 1684 0a0c B385B440 		sub	a1,s1,a1
 1685              	.LVL176:
  68:src/../h/slabAllocator.hpp ****                 freeSlot(head, index);
 1686              		.loc 3 68 69
 1687 0a10 17070000 		ld	a4,.LANCHOR0+104
 1687      03370700 
 1688              	.LVL177:
 1689 0a18 03370704 		ld	a4,64(a4)
 1690              	.LVL178:
  69:src/../h/slabAllocator.hpp ****                 return true;
 1691              		.loc 3 69 17 is_stmt 1
  69:src/../h/slabAllocator.hpp ****                 return true;
 1692              		.loc 3 69 25 is_stmt 0
 1693 0a1c B3D5E502 		divu	a1,a1,a4
 1694              	.LVL179:
 1695 0a20 13850700 		mv	a0,a5
 1696              	.LVL180:
 1697 0a24 97000000 		call	_ZN13SlabAllocator8freeSlotEP4Slabm
 1697      E7800000 
 1698              	.LVL181:
  70:src/../h/slabAllocator.hpp ****             }
 1699              		.loc 3 70 17 is_stmt 1
  70:src/../h/slabAllocator.hpp ****             }
 1700              		.loc 3 70 24 is_stmt 0
 1701 0a2c 13051000 		li	a0,1
 1702 0a30 6FF05FF9 		j	.L88
 1703              	.LBE99:
 1704              	.LBE98:
 1705              	.LBE101:
 1706              	.LBE102:
GAS LISTING /tmp/ccgsFZb0.s 			page 44


 1707              	.LBE103:
 1708              		.cfi_endproc
 1709              	.LFE36:
 1711              		.align	2
 1712              		.globl	_ZN13SlabAllocator10freeBufferEPKv
 1714              	_ZN13SlabAllocator10freeBufferEPKv:
 1715              	.LFB37:
 115:src/slabAllocator.cpp **** void SlabAllocator::freeBuffer(const void *addr) {
 1716              		.loc 1 115 50 is_stmt 1
 1717              		.cfi_startproc
 1718              	.LVL182:
 1719 0a34 130101FE 		addi	sp,sp,-32
 1720              		.cfi_def_cfa_offset 32
 1721 0a38 233C1100 		sd	ra,24(sp)
 1722 0a3c 23388100 		sd	s0,16(sp)
 1723 0a40 23349100 		sd	s1,8(sp)
 1724 0a44 23302101 		sd	s2,0(sp)
 1725              		.cfi_offset 1, -8
 1726              		.cfi_offset 8, -16
 1727              		.cfi_offset 9, -24
 1728              		.cfi_offset 18, -32
 1729 0a48 13040102 		addi	s0,sp,32
 1730              		.cfi_def_cfa 8, 0
 1731 0a4c 13090500 		mv	s2,a0
 116:src/slabAllocator.cpp ****     for(int i=0;i<BUCKET_SIZE;i++)
 1732              		.loc 1 116 5
 1733              	.LVL183:
 1734              	.LBB104:
 116:src/slabAllocator.cpp ****     for(int i=0;i<BUCKET_SIZE;i++)
 1735              		.loc 1 116 13 is_stmt 0
 1736 0a50 93040000 		li	s1,0
 1737              	.LVL184:
 1738              	.L97:
 116:src/slabAllocator.cpp ****     for(int i=0;i<BUCKET_SIZE;i++)
 1739              		.loc 1 116 18 is_stmt 1 discriminator 1
 1740 0a54 9307C000 		li	a5,12
 1741 0a58 63C89702 		bgt	s1,a5,.L95
 117:src/slabAllocator.cpp ****         if(SlabAllocator::freeObject(sizeN[i], addr))
 1742              		.loc 1 117 9
 117:src/slabAllocator.cpp ****         if(SlabAllocator::freeObject(sizeN[i], addr))
 1743              		.loc 1 117 37 is_stmt 0
 1744 0a5c 13973400 		slli	a4,s1,3
 1745 0a60 97070000 		lla	a5,.LANCHOR0
 1745      93870700 
 1746 0a68 B387E700 		add	a5,a5,a4
 1747 0a6c 93050900 		mv	a1,s2
 1748 0a70 03B50700 		ld	a0,0(a5)
 1749 0a74 97000000 		call	_ZN13SlabAllocator10freeObjectEP5CachePKv
 1749      E7800000 
 1750              	.LVL185:
 117:src/slabAllocator.cpp ****         if(SlabAllocator::freeObject(sizeN[i], addr))
 1751              		.loc 1 117 9
 1752 0a7c 63160500 		bnez	a0,.L95
 116:src/slabAllocator.cpp ****     for(int i=0;i<BUCKET_SIZE;i++)
 1753              		.loc 1 116 5 is_stmt 1 discriminator 2
 1754 0a80 9B841400 		addiw	s1,s1,1
 1755              	.LVL186:
GAS LISTING /tmp/ccgsFZb0.s 			page 45


 1756 0a84 6FF01FFD 		j	.L97
 1757              	.LVL187:
 1758              	.L95:
 1759              	.LBE104:
 119:src/slabAllocator.cpp **** }
 1760              		.loc 1 119 1 is_stmt 0
 1761 0a88 83308101 		ld	ra,24(sp)
 1762              		.cfi_restore 1
 1763 0a8c 03340101 		ld	s0,16(sp)
 1764              		.cfi_restore 8
 1765              		.cfi_def_cfa 2, 32
 1766 0a90 83348100 		ld	s1,8(sp)
 1767              		.cfi_restore 9
 1768              	.LVL188:
 1769 0a94 03390100 		ld	s2,0(sp)
 1770              		.cfi_restore 18
 1771              	.LVL189:
 1772 0a98 13010102 		addi	sp,sp,32
 1773              		.cfi_def_cfa_offset 0
 1774 0a9c 67800000 		jr	ra
 1775              		.cfi_endproc
 1776              	.LFE37:
 1778              		.align	2
 1779              		.globl	_ZN13SlabAllocator11deleteCacheERP5Cache
 1781              	_ZN13SlabAllocator11deleteCacheERP5Cache:
 1782              	.LFB39:
 132:src/slabAllocator.cpp **** void SlabAllocator::deleteCache(Cache* &cache) {
 1783              		.loc 1 132 48 is_stmt 1
 1784              		.cfi_startproc
 1785              	.LVL190:
 1786 0aa0 130101FE 		addi	sp,sp,-32
 1787              		.cfi_def_cfa_offset 32
 1788 0aa4 233C1100 		sd	ra,24(sp)
 1789 0aa8 23388100 		sd	s0,16(sp)
 1790 0aac 23349100 		sd	s1,8(sp)
 1791 0ab0 23302101 		sd	s2,0(sp)
 1792              		.cfi_offset 1, -8
 1793              		.cfi_offset 8, -16
 1794              		.cfi_offset 9, -24
 1795              		.cfi_offset 18, -32
 1796 0ab4 13040102 		addi	s0,sp,32
 1797              		.cfi_def_cfa 8, 0
 1798 0ab8 93040500 		mv	s1,a0
 133:src/slabAllocator.cpp ****     deleteList(cache->fullHead);
 1799              		.loc 1 133 5
 133:src/slabAllocator.cpp ****     deleteList(cache->fullHead);
 1800              		.loc 1 133 16 is_stmt 0
 1801 0abc 03390500 		ld	s2,0(a0)
 133:src/slabAllocator.cpp ****     deleteList(cache->fullHead);
 1802              		.loc 1 133 23
 1803 0ac0 13090907 		addi	s2,s2,112
 1804              	.LVL191:
 1805              	.L101:
 1806              	.LBB111:
 1807              	.LBB112:
  75:src/../h/slabAllocator.hpp ****     }
  76:src/../h/slabAllocator.hpp **** 
GAS LISTING /tmp/ccgsFZb0.s 			page 46


  77:src/../h/slabAllocator.hpp ****     static inline void deleteList(Slab* &head){
  78:src/../h/slabAllocator.hpp ****         while(head){
 1808              		.loc 3 78 9 is_stmt 1
 1809              		.loc 3 78 15
 1810 0ac4 03350900 		ld	a0,0(s2)
 1811 0ac8 63020502 		beqz	a0,.L100
  79:src/../h/slabAllocator.hpp ****             Buddy::free(head, head->parent->slabSize);
 1812              		.loc 3 79 13
 1813              		.loc 3 79 37 is_stmt 0
 1814 0acc 83370503 		ld	a5,48(a0)
 1815              		.loc 3 79 24
 1816 0ad0 83B58704 		ld	a1,72(a5)
 1817 0ad4 97000000 		call	_ZN5Buddy4freeEPvm@plt
 1817      E7800000 
 1818              	.LVL192:
  80:src/../h/slabAllocator.hpp ****             head = head->next;
 1819              		.loc 3 80 13 is_stmt 1
 1820              		.loc 3 80 20 is_stmt 0
 1821 0adc 83370900 		ld	a5,0(s2)
 1822              		.loc 3 80 26
 1823 0ae0 83B78700 		ld	a5,8(a5)
 1824              		.loc 3 80 18
 1825 0ae4 2330F900 		sd	a5,0(s2)
  78:src/../h/slabAllocator.hpp ****             Buddy::free(head, head->parent->slabSize);
 1826              		.loc 3 78 9
 1827 0ae8 6FF0DFFD 		j	.L101
 1828              	.L100:
 1829              	.LVL193:
 1830              	.LBE112:
 1831              	.LBE111:
 134:src/slabAllocator.cpp ****     deleteList(cache->partialHead);
 1832              		.loc 1 134 5 is_stmt 1
 134:src/slabAllocator.cpp ****     deleteList(cache->partialHead);
 1833              		.loc 1 134 16 is_stmt 0
 1834 0aec 03B90400 		ld	s2,0(s1)
 134:src/slabAllocator.cpp ****     deleteList(cache->partialHead);
 1835              		.loc 1 134 23
 1836 0af0 13098906 		addi	s2,s2,104
 1837              	.LVL194:
 1838              	.L103:
 1839              	.LBB113:
 1840              	.LBB114:
  78:src/../h/slabAllocator.hpp ****             Buddy::free(head, head->parent->slabSize);
 1841              		.loc 3 78 9 is_stmt 1
  78:src/../h/slabAllocator.hpp ****             Buddy::free(head, head->parent->slabSize);
 1842              		.loc 3 78 15
 1843 0af4 03350900 		ld	a0,0(s2)
 1844 0af8 63020502 		beqz	a0,.L102
  79:src/../h/slabAllocator.hpp ****             head = head->next;
 1845              		.loc 3 79 13
  79:src/../h/slabAllocator.hpp ****             head = head->next;
 1846              		.loc 3 79 37 is_stmt 0
 1847 0afc 83370503 		ld	a5,48(a0)
  79:src/../h/slabAllocator.hpp ****             head = head->next;
 1848              		.loc 3 79 24
 1849 0b00 83B58704 		ld	a1,72(a5)
 1850 0b04 97000000 		call	_ZN5Buddy4freeEPvm@plt
GAS LISTING /tmp/ccgsFZb0.s 			page 47


 1850      E7800000 
 1851              	.LVL195:
 1852              		.loc 3 80 13 is_stmt 1
 1853              		.loc 3 80 20 is_stmt 0
 1854 0b0c 83370900 		ld	a5,0(s2)
 1855              		.loc 3 80 26
 1856 0b10 83B78700 		ld	a5,8(a5)
 1857              		.loc 3 80 18
 1858 0b14 2330F900 		sd	a5,0(s2)
  78:src/../h/slabAllocator.hpp ****             Buddy::free(head, head->parent->slabSize);
 1859              		.loc 3 78 9
 1860 0b18 6FF0DFFD 		j	.L103
 1861              	.L102:
 1862              	.LVL196:
 1863              	.LBE114:
 1864              	.LBE113:
 135:src/slabAllocator.cpp ****     deleteList(cache->emptyHead);
 1865              		.loc 1 135 5 is_stmt 1
 135:src/slabAllocator.cpp ****     deleteList(cache->emptyHead);
 1866              		.loc 1 135 16 is_stmt 0
 1867 0b1c 03B90400 		ld	s2,0(s1)
 135:src/slabAllocator.cpp ****     deleteList(cache->emptyHead);
 1868              		.loc 1 135 23
 1869 0b20 13090906 		addi	s2,s2,96
 1870              	.LVL197:
 1871              	.L105:
 1872              	.LBB115:
 1873              	.LBB116:
  78:src/../h/slabAllocator.hpp ****             Buddy::free(head, head->parent->slabSize);
 1874              		.loc 3 78 9 is_stmt 1
  78:src/../h/slabAllocator.hpp ****             Buddy::free(head, head->parent->slabSize);
 1875              		.loc 3 78 15
 1876 0b24 03350900 		ld	a0,0(s2)
 1877 0b28 63020502 		beqz	a0,.L104
  79:src/../h/slabAllocator.hpp ****             head = head->next;
 1878              		.loc 3 79 13
  79:src/../h/slabAllocator.hpp ****             head = head->next;
 1879              		.loc 3 79 37 is_stmt 0
 1880 0b2c 83370503 		ld	a5,48(a0)
  79:src/../h/slabAllocator.hpp ****             head = head->next;
 1881              		.loc 3 79 24
 1882 0b30 83B58704 		ld	a1,72(a5)
 1883 0b34 97000000 		call	_ZN5Buddy4freeEPvm@plt
 1883      E7800000 
 1884              	.LVL198:
 1885              		.loc 3 80 13 is_stmt 1
 1886              		.loc 3 80 20 is_stmt 0
 1887 0b3c 83370900 		ld	a5,0(s2)
 1888              		.loc 3 80 26
 1889 0b40 83B78700 		ld	a5,8(a5)
 1890              		.loc 3 80 18
 1891 0b44 2330F900 		sd	a5,0(s2)
  78:src/../h/slabAllocator.hpp ****             Buddy::free(head, head->parent->slabSize);
 1892              		.loc 3 78 9
 1893 0b48 6FF0DFFD 		j	.L105
 1894              	.L104:
 1895              	.LVL199:
GAS LISTING /tmp/ccgsFZb0.s 			page 48


 1896              	.LBE116:
 1897              	.LBE115:
 136:src/slabAllocator.cpp ****     SlabAllocator::freeObject(SlabAllocator::cache, cache);
 1898              		.loc 1 136 5 is_stmt 1
 136:src/slabAllocator.cpp ****     SlabAllocator::freeObject(SlabAllocator::cache, cache);
 1899              		.loc 1 136 30 is_stmt 0
 1900 0b4c 83B50400 		ld	a1,0(s1)
 1901 0b50 17050000 		ld	a0,.LANCHOR0+104
 1901      03350500 
 1902 0b58 97000000 		call	_ZN13SlabAllocator10freeObjectEP5CachePKv
 1902      E7800000 
 1903              	.LVL200:
 137:src/slabAllocator.cpp ****     cache = nullptr;
 1904              		.loc 1 137 5 is_stmt 1
 137:src/slabAllocator.cpp ****     cache = nullptr;
 1905              		.loc 1 137 11 is_stmt 0
 1906 0b60 23B00400 		sd	zero,0(s1)
 138:src/slabAllocator.cpp **** }
 1907              		.loc 1 138 1
 1908 0b64 83308101 		ld	ra,24(sp)
 1909              		.cfi_restore 1
 1910 0b68 03340101 		ld	s0,16(sp)
 1911              		.cfi_restore 8
 1912              		.cfi_def_cfa 2, 32
 1913 0b6c 83348100 		ld	s1,8(sp)
 1914              		.cfi_restore 9
 1915              	.LVL201:
 1916 0b70 03390100 		ld	s2,0(sp)
 1917              		.cfi_restore 18
 1918 0b74 13010102 		addi	sp,sp,32
 1919              		.cfi_def_cfa_offset 0
 1920 0b78 67800000 		jr	ra
 1921              		.cfi_endproc
 1922              	.LFE39:
 1924              		.globl	_ZN13SlabAllocator20blocksResponsibleForE
 1925              		.globl	_ZN13SlabAllocator9startAddrE
 1926              		.globl	_ZN13SlabAllocator5namesE
 1927              		.section	.rodata.str1.8
 1928 012b 00000000 		.align	3
 1928      00
 1929              	.LC17:
 1930 0130 42756666 		.string	"Buffer Cache No. 0"
 1930      65722043 
 1930      61636865 
 1930      204E6F2E 
 1930      203000
 1931 0143 00000000 		.align	3
 1931      00
 1932              	.LC18:
 1933 0148 42756666 		.string	"Buffer Cache No. 1"
 1933      65722043 
 1933      61636865 
 1933      204E6F2E 
 1933      203100
 1934 015b 00000000 		.align	3
 1934      00
 1935              	.LC19:
GAS LISTING /tmp/ccgsFZb0.s 			page 49


 1936 0160 42756666 		.string	"Buffer Cache No. 2"
 1936      65722043 
 1936      61636865 
 1936      204E6F2E 
 1936      203200
 1937 0173 00000000 		.align	3
 1937      00
 1938              	.LC20:
 1939 0178 42756666 		.string	"Buffer Cache No. 3"
 1939      65722043 
 1939      61636865 
 1939      204E6F2E 
 1939      203300
 1940 018b 00000000 		.align	3
 1940      00
 1941              	.LC21:
 1942 0190 42756666 		.string	"Buffer Cache No. 4"
 1942      65722043 
 1942      61636865 
 1942      204E6F2E 
 1942      203400
 1943 01a3 00000000 		.align	3
 1943      00
 1944              	.LC22:
 1945 01a8 42756666 		.string	"Buffer Cache No. 5"
 1945      65722043 
 1945      61636865 
 1945      204E6F2E 
 1945      203500
 1946 01bb 00000000 		.align	3
 1946      00
 1947              	.LC23:
 1948 01c0 42756666 		.string	"Buffer Cache No. 6"
 1948      65722043 
 1948      61636865 
 1948      204E6F2E 
 1948      203600
 1949 01d3 00000000 		.align	3
 1949      00
 1950              	.LC24:
 1951 01d8 42756666 		.string	"Buffer Cache No. 7"
 1951      65722043 
 1951      61636865 
 1951      204E6F2E 
 1951      203700
 1952 01eb 00000000 		.align	3
 1952      00
 1953              	.LC25:
 1954 01f0 42756666 		.string	"Buffer Cache No. 8"
 1954      65722043 
 1954      61636865 
 1954      204E6F2E 
 1954      203800
 1955 0203 00000000 		.align	3
 1955      00
 1956              	.LC26:
 1957 0208 42756666 		.string	"Buffer Cache No. 9"
GAS LISTING /tmp/ccgsFZb0.s 			page 50


 1957      65722043 
 1957      61636865 
 1957      204E6F2E 
 1957      203900
 1958 021b 00000000 		.align	3
 1958      00
 1959              	.LC27:
 1960 0220 42756666 		.string	"Buffer Cache No. 10"
 1960      65722043 
 1960      61636865 
 1960      204E6F2E 
 1960      20313000 
 1961 0234 00000000 		.align	3
 1962              	.LC28:
 1963 0238 42756666 		.string	"Buffer Cache No. 11"
 1963      65722043 
 1963      61636865 
 1963      204E6F2E 
 1963      20313100 
 1964 024c 00000000 		.align	3
 1965              	.LC29:
 1966 0250 42756666 		.string	"Buffer Cache No. 12"
 1966      65722043 
 1966      61636865 
 1966      204E6F2E 
 1966      20313200 
 1967              		.globl	_ZN13SlabAllocator5sizeNE
 1968              		.globl	_ZN13SlabAllocator5cacheE
 1969              		.bss
 1970              		.align	3
 1971              		.set	.LANCHOR0,. + 0
 1974              	_ZN13SlabAllocator5sizeNE:
 1975 0000 00000000 		.zero	104
 1975      00000000 
 1975      00000000 
 1975      00000000 
 1975      00000000 
 1978              	_ZN13SlabAllocator5cacheE:
 1979 0068 00000000 		.zero	8
 1979      00000000 
 1982              	_ZN13SlabAllocator9startAddrE:
 1983 0070 00000000 		.zero	8
 1983      00000000 
 1986              	_ZN13SlabAllocator20blocksResponsibleForE:
 1987 0078 00000000 		.zero	8
 1987      00000000 
 1988              		.section	.data.rel.local,"aw"
 1989              		.align	3
 1990              		.set	.LANCHOR1,. + 0
 1993              	_ZN13SlabAllocator5namesE:
 1994 0000 00000000 		.dword	.LC17
 1994      00000000 
 1995 0008 00000000 		.dword	.LC18
 1995      00000000 
 1996 0010 00000000 		.dword	.LC19
 1996      00000000 
 1997 0018 00000000 		.dword	.LC20
GAS LISTING /tmp/ccgsFZb0.s 			page 51


 1997      00000000 
 1998 0020 00000000 		.dword	.LC21
 1998      00000000 
 1999 0028 00000000 		.dword	.LC22
 1999      00000000 
 2000 0030 00000000 		.dword	.LC23
 2000      00000000 
 2001 0038 00000000 		.dword	.LC24
 2001      00000000 
 2002 0040 00000000 		.dword	.LC25
 2002      00000000 
 2003 0048 00000000 		.dword	.LC26
 2003      00000000 
 2004 0050 00000000 		.dword	.LC27
 2004      00000000 
 2005 0058 00000000 		.dword	.LC28
 2005      00000000 
 2006 0060 00000000 		.dword	.LC29
 2006      00000000 
 2007              		.text
 2008              	.Letext0:
 2009              		.file 5 "src/../h/../h/../lib/hw.h"
 2010              		.file 6 "src/../h/../h/utility.hpp"
 2011              		.file 7 "src/../h/../h/tcb.hpp"
 2012              		.file 8 "src/../h/../h/scb.hpp"
 2013              		.file 9 "src/../h/../h/consoleUtil.hpp"
 2014              		.file 10 "src/../h/../h/cache_t.hpp"
GAS LISTING /tmp/ccgsFZb0.s 			page 52


DEFINED SYMBOLS
                            *ABS*:0000000000000000 slabAllocator.cpp
     /tmp/ccgsFZb0.s:9      .text:0000000000000000 _ZN13SlabAllocator11shrinkCacheEP5Cache
     /tmp/ccgsFZb0.s:13     .text:0000000000000000 .L0 
     /tmp/ccgsFZb0.s:15     .text:0000000000000000 .L0 
     /tmp/ccgsFZb0.s:16     .text:0000000000000004 .L0 
     /tmp/ccgsFZb0.s:21     .text:0000000000000014 .L0 
     /tmp/ccgsFZb0.s:22     .text:0000000000000014 .L0 
     /tmp/ccgsFZb0.s:23     .text:0000000000000014 .L0 
     /tmp/ccgsFZb0.s:24     .text:0000000000000014 .L0 
     /tmp/ccgsFZb0.s:26     .text:0000000000000018 .L0 
     /tmp/ccgsFZb0.s:30     .text:000000000000001c .L0 
     /tmp/ccgsFZb0.s:31     .text:000000000000001c .L0 
     /tmp/ccgsFZb0.s:35     .text:0000000000000020 .L0 
     /tmp/ccgsFZb0.s:36     .text:0000000000000020 .L0 
     /tmp/ccgsFZb0.s:39     .text:0000000000000028 .L0 
     /tmp/ccgsFZb0.s:40     .text:0000000000000028 .L0 
     /tmp/ccgsFZb0.s:44     .text:0000000000000034 .L0 
     /tmp/ccgsFZb0.s:45     .text:0000000000000034 .L0 
     /tmp/ccgsFZb0.s:47     .text:0000000000000038 .L0 
     /tmp/ccgsFZb0.s:49     .text:000000000000003c .L0 
     /tmp/ccgsFZb0.s:52     .text:0000000000000040 .L0 
     /tmp/ccgsFZb0.s:53     .text:0000000000000040 .L0 
     /tmp/ccgsFZb0.s:55     .text:0000000000000044 .L0 
     /tmp/ccgsFZb0.s:57     .text:0000000000000048 .L0 
     /tmp/ccgsFZb0.s:61     .text:000000000000004c .L0 
     /tmp/ccgsFZb0.s:62     .text:000000000000004c .L0 
     /tmp/ccgsFZb0.s:64     .text:0000000000000054 .L0 
     /tmp/ccgsFZb0.s:66     .text:0000000000000058 .L0 
     /tmp/ccgsFZb0.s:67     .text:0000000000000058 .L0 
     /tmp/ccgsFZb0.s:69     .text:000000000000005c .L0 
     /tmp/ccgsFZb0.s:72     .text:0000000000000060 .L0 
     /tmp/ccgsFZb0.s:75     .text:0000000000000064 .L0 
     /tmp/ccgsFZb0.s:77     .text:0000000000000068 .L0 
     /tmp/ccgsFZb0.s:112    .text:0000000000000068 _ZN13SlabAllocator9printSlabEP4Slab
     /tmp/ccgsFZb0.s:115    .text:0000000000000068 .L0 
     /tmp/ccgsFZb0.s:117    .text:0000000000000068 .L0 
     /tmp/ccgsFZb0.s:118    .text:000000000000006c .L0 
     /tmp/ccgsFZb0.s:123    .text:000000000000007c .L0 
     /tmp/ccgsFZb0.s:124    .text:000000000000007c .L0 
     /tmp/ccgsFZb0.s:125    .text:000000000000007c .L0 
     /tmp/ccgsFZb0.s:126    .text:000000000000007c .L0 
     /tmp/ccgsFZb0.s:128    .text:0000000000000080 .L0 
     /tmp/ccgsFZb0.s:131    .text:0000000000000084 .L0 
     /tmp/ccgsFZb0.s:132    .text:0000000000000084 .L0 
     /tmp/ccgsFZb0.s:139    .text:00000000000000a0 .L0 
     /tmp/ccgsFZb0.s:140    .text:00000000000000a0 .L0 
     /tmp/ccgsFZb0.s:146    .text:00000000000000bc .L0 
     /tmp/ccgsFZb0.s:147    .text:00000000000000bc .L0 
     /tmp/ccgsFZb0.s:153    .text:00000000000000d8 .L0 
     /tmp/ccgsFZb0.s:154    .text:00000000000000d8 .L0 
     /tmp/ccgsFZb0.s:160    .text:00000000000000f4 .L0 
     /tmp/ccgsFZb0.s:161    .text:00000000000000f4 .L0 
     /tmp/ccgsFZb0.s:167    .text:0000000000000110 .L0 
     /tmp/ccgsFZb0.s:168    .text:0000000000000110 .L0 
     /tmp/ccgsFZb0.s:173    .text:0000000000000120 .L0 
     /tmp/ccgsFZb0.s:174    .text:0000000000000120 .L0 
GAS LISTING /tmp/ccgsFZb0.s 			page 53


     /tmp/ccgsFZb0.s:178    .text:0000000000000124 .L0 
     /tmp/ccgsFZb0.s:179    .text:0000000000000124 .L0 
     /tmp/ccgsFZb0.s:181    .text:0000000000000128 .L0 
     /tmp/ccgsFZb0.s:183    .text:000000000000012c .L0 
     /tmp/ccgsFZb0.s:184    .text:000000000000012c .L0 
     /tmp/ccgsFZb0.s:186    .text:0000000000000130 .L0 
     /tmp/ccgsFZb0.s:188    .text:0000000000000134 .L0 
     /tmp/ccgsFZb0.s:194    .text:0000000000000150 .L0 
     /tmp/ccgsFZb0.s:200    .text:0000000000000158 .L0 
     /tmp/ccgsFZb0.s:201    .text:0000000000000158 .L0 
     /tmp/ccgsFZb0.s:205    .text:0000000000000168 .L0 
     /tmp/ccgsFZb0.s:206    .text:000000000000016c .L0 
     /tmp/ccgsFZb0.s:208    .text:0000000000000170 .L0 
     /tmp/ccgsFZb0.s:209    .text:0000000000000170 .L0 
     /tmp/ccgsFZb0.s:211    .text:0000000000000174 .L0 
     /tmp/ccgsFZb0.s:214    .text:0000000000000178 .L0 
     /tmp/ccgsFZb0.s:217    .text:000000000000017c .L0 
     /tmp/ccgsFZb0.s:219    .text:0000000000000180 .L0 
     /tmp/ccgsFZb0.s:248    .text:0000000000000180 _ZN13SlabAllocator10printCacheEP5Cache
     /tmp/ccgsFZb0.s:251    .text:0000000000000180 .L0 
     /tmp/ccgsFZb0.s:253    .text:0000000000000180 .L0 
     /tmp/ccgsFZb0.s:254    .text:0000000000000184 .L0 
     /tmp/ccgsFZb0.s:259    .text:0000000000000194 .L0 
     /tmp/ccgsFZb0.s:260    .text:0000000000000194 .L0 
     /tmp/ccgsFZb0.s:261    .text:0000000000000194 .L0 
     /tmp/ccgsFZb0.s:262    .text:0000000000000194 .L0 
     /tmp/ccgsFZb0.s:264    .text:0000000000000198 .L0 
     /tmp/ccgsFZb0.s:267    .text:000000000000019c .L0 
     /tmp/ccgsFZb0.s:268    .text:000000000000019c .L0 
     /tmp/ccgsFZb0.s:273    .text:00000000000001ac .L0 
     /tmp/ccgsFZb0.s:274    .text:00000000000001ac .L0 
     /tmp/ccgsFZb0.s:278    .text:00000000000001b8 .L0 
     /tmp/ccgsFZb0.s:279    .text:00000000000001b8 .L0 
     /tmp/ccgsFZb0.s:283    .text:00000000000001c8 .L0 
     /tmp/ccgsFZb0.s:284    .text:00000000000001c8 .L0 
     /tmp/ccgsFZb0.s:291    .text:00000000000001ec .L0 
     /tmp/ccgsFZb0.s:292    .text:00000000000001ec .L0 
     /tmp/ccgsFZb0.s:298    .text:0000000000000208 .L0 
     /tmp/ccgsFZb0.s:299    .text:0000000000000208 .L0 
     /tmp/ccgsFZb0.s:305    .text:0000000000000224 .L0 
     /tmp/ccgsFZb0.s:306    .text:0000000000000224 .L0 
     /tmp/ccgsFZb0.s:310    .text:0000000000000228 .L0 
     /tmp/ccgsFZb0.s:311    .text:0000000000000228 .L0 
     /tmp/ccgsFZb0.s:313    .text:000000000000022c .L0 
     /tmp/ccgsFZb0.s:314    .text:000000000000022c .L0 
     /tmp/ccgsFZb0.s:320    .text:0000000000000248 .L0 
     /tmp/ccgsFZb0.s:321    .text:0000000000000248 .L0 
     /tmp/ccgsFZb0.s:324    .text:000000000000024c .L0 
     /tmp/ccgsFZb0.s:327    .text:0000000000000250 .L0 
     /tmp/ccgsFZb0.s:328    .text:0000000000000250 .L0 
     /tmp/ccgsFZb0.s:332    .text:0000000000000260 .L0 
     /tmp/ccgsFZb0.s:333    .text:0000000000000260 .L0 
     /tmp/ccgsFZb0.s:339    .text:000000000000027c .L0 
     /tmp/ccgsFZb0.s:340    .text:000000000000027c .L0 
     /tmp/ccgsFZb0.s:344    .text:0000000000000280 .L0 
     /tmp/ccgsFZb0.s:345    .text:0000000000000280 .L0 
     /tmp/ccgsFZb0.s:347    .text:0000000000000284 .L0 
GAS LISTING /tmp/ccgsFZb0.s 			page 54


     /tmp/ccgsFZb0.s:348    .text:0000000000000284 .L0 
     /tmp/ccgsFZb0.s:354    .text:00000000000002a0 .L0 
     /tmp/ccgsFZb0.s:355    .text:00000000000002a0 .L0 
     /tmp/ccgsFZb0.s:358    .text:00000000000002a4 .L0 
     /tmp/ccgsFZb0.s:361    .text:00000000000002a8 .L0 
     /tmp/ccgsFZb0.s:362    .text:00000000000002a8 .L0 
     /tmp/ccgsFZb0.s:366    .text:00000000000002b8 .L0 
     /tmp/ccgsFZb0.s:367    .text:00000000000002b8 .L0 
     /tmp/ccgsFZb0.s:373    .text:00000000000002d4 .L0 
     /tmp/ccgsFZb0.s:374    .text:00000000000002d4 .L0 
     /tmp/ccgsFZb0.s:378    .text:00000000000002d8 .L0 
     /tmp/ccgsFZb0.s:379    .text:00000000000002d8 .L0 
     /tmp/ccgsFZb0.s:381    .text:00000000000002dc .L0 
     /tmp/ccgsFZb0.s:382    .text:00000000000002dc .L0 
     /tmp/ccgsFZb0.s:388    .text:00000000000002f8 .L0 
     /tmp/ccgsFZb0.s:389    .text:00000000000002f8 .L0 
     /tmp/ccgsFZb0.s:392    .text:00000000000002fc .L0 
     /tmp/ccgsFZb0.s:395    .text:0000000000000300 .L0 
     /tmp/ccgsFZb0.s:396    .text:0000000000000300 .L0 
     /tmp/ccgsFZb0.s:400    .text:0000000000000310 .L0 
     /tmp/ccgsFZb0.s:401    .text:0000000000000310 .L0 
     /tmp/ccgsFZb0.s:407    .text:000000000000032c .L0 
     /tmp/ccgsFZb0.s:408    .text:0000000000000330 .L0 
     /tmp/ccgsFZb0.s:410    .text:0000000000000334 .L0 
     /tmp/ccgsFZb0.s:411    .text:0000000000000334 .L0 
     /tmp/ccgsFZb0.s:413    .text:0000000000000338 .L0 
     /tmp/ccgsFZb0.s:416    .text:000000000000033c .L0 
     /tmp/ccgsFZb0.s:419    .text:0000000000000340 .L0 
     /tmp/ccgsFZb0.s:421    .text:0000000000000344 .L0 
     /tmp/ccgsFZb0.s:427    .text:0000000000000344 _ZN13SlabAllocator14insertIntoListERP4SlabS1_
     /tmp/ccgsFZb0.s:430    .text:0000000000000344 .L0 
     /tmp/ccgsFZb0.s:432    .text:0000000000000344 .L0 
     /tmp/ccgsFZb0.s:433    .text:0000000000000348 .L0 
     /tmp/ccgsFZb0.s:435    .text:000000000000034c .L0 
     /tmp/ccgsFZb0.s:437    .text:0000000000000350 .L0 
     /tmp/ccgsFZb0.s:439    .text:0000000000000350 .L0 
     /tmp/ccgsFZb0.s:440    .text:0000000000000350 .L0 
     /tmp/ccgsFZb0.s:442    .text:0000000000000354 .L0 
     /tmp/ccgsFZb0.s:444    .text:0000000000000358 .L0 
     /tmp/ccgsFZb0.s:446    .text:000000000000035c .L0 
     /tmp/ccgsFZb0.s:447    .text:000000000000035c .L0 
     /tmp/ccgsFZb0.s:450    .text:0000000000000360 .L0 
     /tmp/ccgsFZb0.s:451    .text:0000000000000360 .L0 
     /tmp/ccgsFZb0.s:453    .text:0000000000000364 .L0 
     /tmp/ccgsFZb0.s:454    .text:0000000000000364 .L0 
     /tmp/ccgsFZb0.s:456    .text:0000000000000368 .L0 
     /tmp/ccgsFZb0.s:457    .text:000000000000036c .L0 
     /tmp/ccgsFZb0.s:458    .text:000000000000036c .L0 
     /tmp/ccgsFZb0.s:460    .text:0000000000000370 .L0 
     /tmp/ccgsFZb0.s:462    .text:0000000000000374 .L0 
     /tmp/ccgsFZb0.s:468    .text:0000000000000374 _ZN13SlabAllocator12allocateSlabEP5Cache
     /tmp/ccgsFZb0.s:471    .text:0000000000000374 .L0 
     /tmp/ccgsFZb0.s:473    .text:0000000000000374 .L0 
     /tmp/ccgsFZb0.s:474    .text:0000000000000378 .L0 
     /tmp/ccgsFZb0.s:479    .text:0000000000000388 .L0 
     /tmp/ccgsFZb0.s:480    .text:0000000000000388 .L0 
     /tmp/ccgsFZb0.s:481    .text:0000000000000388 .L0 
GAS LISTING /tmp/ccgsFZb0.s 			page 55


     /tmp/ccgsFZb0.s:482    .text:0000000000000388 .L0 
     /tmp/ccgsFZb0.s:484    .text:000000000000038c .L0 
     /tmp/ccgsFZb0.s:487    .text:0000000000000390 .L0 
     /tmp/ccgsFZb0.s:488    .text:0000000000000390 .L0 
     /tmp/ccgsFZb0.s:493    .text:000000000000039c .L0 
     /tmp/ccgsFZb0.s:496    .text:00000000000003a4 .L0 
     /tmp/ccgsFZb0.s:497    .text:00000000000003a4 .L0 
     /tmp/ccgsFZb0.s:503    .text:00000000000003b4 .L0 
     /tmp/ccgsFZb0.s:504    .text:00000000000003b4 .L0 
     /tmp/ccgsFZb0.s:506    .text:00000000000003b8 .L0 
     /tmp/ccgsFZb0.s:508    .text:00000000000003bc .L0 
     /tmp/ccgsFZb0.s:510    .text:00000000000003c0 .L0 
     /tmp/ccgsFZb0.s:512    .text:00000000000003c4 .L0 
     /tmp/ccgsFZb0.s:514    .text:00000000000003c8 .L0 
     /tmp/ccgsFZb0.s:516    .text:00000000000003cc .L0 
     /tmp/ccgsFZb0.s:518    .text:00000000000003d0 .L0 
     /tmp/ccgsFZb0.s:519    .text:00000000000003d0 .L0 
     /tmp/ccgsFZb0.s:521    .text:00000000000003d4 .L0 
     /tmp/ccgsFZb0.s:523    .text:00000000000003d8 .L0 
     /tmp/ccgsFZb0.s:525    .text:00000000000003dc .L0 
     /tmp/ccgsFZb0.s:527    .text:00000000000003e0 .L0 
     /tmp/ccgsFZb0.s:528    .text:00000000000003e0 .L0 
     /tmp/ccgsFZb0.s:530    .text:00000000000003e4 .L0 
     /tmp/ccgsFZb0.s:532    .text:00000000000003e8 .L0 
     /tmp/ccgsFZb0.s:533    .text:00000000000003e8 .L0 
     /tmp/ccgsFZb0.s:537    .text:00000000000003ec .L0 
     /tmp/ccgsFZb0.s:538    .text:00000000000003ec .L0 
     /tmp/ccgsFZb0.s:542    .text:00000000000003f0 .L0 
     /tmp/ccgsFZb0.s:543    .text:00000000000003f0 .L0 
     /tmp/ccgsFZb0.s:545    .text:00000000000003f4 .L0 
     /tmp/ccgsFZb0.s:547    .text:00000000000003f8 .L0 
     /tmp/ccgsFZb0.s:548    .text:00000000000003f8 .L0 
     /tmp/ccgsFZb0.s:550    .text:00000000000003fc .L0 
     /tmp/ccgsFZb0.s:552    .text:0000000000000400 .L0 
     /tmp/ccgsFZb0.s:554    .text:0000000000000404 .L0 
     /tmp/ccgsFZb0.s:561    .text:000000000000040c .L0 
     /tmp/ccgsFZb0.s:567    .text:0000000000000414 .L0 
     /tmp/ccgsFZb0.s:571    .text:0000000000000418 .L0 
     /tmp/ccgsFZb0.s:572    .text:000000000000041c .L0 
     /tmp/ccgsFZb0.s:574    .text:0000000000000420 .L0 
     /tmp/ccgsFZb0.s:575    .text:0000000000000420 .L0 
     /tmp/ccgsFZb0.s:577    .text:0000000000000424 .L0 
     /tmp/ccgsFZb0.s:579    .text:0000000000000428 .L0 
     /tmp/ccgsFZb0.s:582    .text:000000000000042c .L0 
     /tmp/ccgsFZb0.s:584    .text:0000000000000430 .L0 
     /tmp/ccgsFZb0.s:590    .text:0000000000000430 _ZN13SlabAllocator14removeFromListERP4SlabS1_
     /tmp/ccgsFZb0.s:593    .text:0000000000000430 .L0 
     /tmp/ccgsFZb0.s:595    .text:0000000000000430 .L0 
     /tmp/ccgsFZb0.s:596    .text:0000000000000434 .L0 
     /tmp/ccgsFZb0.s:598    .text:0000000000000438 .L0 
     /tmp/ccgsFZb0.s:600    .text:000000000000043c .L0 
     /tmp/ccgsFZb0.s:602    .text:000000000000043c .L0 
     /tmp/ccgsFZb0.s:603    .text:000000000000043c .L0 
     /tmp/ccgsFZb0.s:605    .text:0000000000000440 .L0 
     /tmp/ccgsFZb0.s:608    .text:0000000000000444 .L0 
     /tmp/ccgsFZb0.s:609    .text:0000000000000444 .L0 
     /tmp/ccgsFZb0.s:611    .text:0000000000000448 .L0 
GAS LISTING /tmp/ccgsFZb0.s 			page 56


     /tmp/ccgsFZb0.s:613    .text:000000000000044c .L0 
     /tmp/ccgsFZb0.s:614    .text:000000000000044c .L0 
     /tmp/ccgsFZb0.s:616    .text:0000000000000450 .L0 
     /tmp/ccgsFZb0.s:619    .text:0000000000000454 .L0 
     /tmp/ccgsFZb0.s:620    .text:0000000000000454 .L0 
     /tmp/ccgsFZb0.s:622    .text:0000000000000458 .L0 
     /tmp/ccgsFZb0.s:624    .text:000000000000045c .L0 
     /tmp/ccgsFZb0.s:625    .text:000000000000045c .L0 
     /tmp/ccgsFZb0.s:627    .text:0000000000000460 .L0 
     /tmp/ccgsFZb0.s:630    .text:0000000000000464 .L0 
     /tmp/ccgsFZb0.s:631    .text:0000000000000464 .L0 
     /tmp/ccgsFZb0.s:633    .text:0000000000000468 .L0 
     /tmp/ccgsFZb0.s:634    .text:0000000000000468 .L0 
     /tmp/ccgsFZb0.s:636    .text:000000000000046c .L0 
     /tmp/ccgsFZb0.s:637    .text:0000000000000470 .L0 
     /tmp/ccgsFZb0.s:638    .text:0000000000000470 .L0 
     /tmp/ccgsFZb0.s:639    .text:0000000000000470 .L0 
     /tmp/ccgsFZb0.s:641    .text:0000000000000474 .L0 
     /tmp/ccgsFZb0.s:644    .text:0000000000000478 .L0 
     /tmp/ccgsFZb0.s:646    .text:0000000000000478 .L0 
     /tmp/ccgsFZb0.s:647    .text:0000000000000478 .L0 
     /tmp/ccgsFZb0.s:649    .text:000000000000047c .L0 
     /tmp/ccgsFZb0.s:651    .text:0000000000000484 .L0 
     /tmp/ccgsFZb0.s:657    .text:0000000000000484 _ZN13SlabAllocator4moveERP4SlabS2_S1_
     /tmp/ccgsFZb0.s:660    .text:0000000000000484 .L0 
     /tmp/ccgsFZb0.s:662    .text:0000000000000484 .L0 
     /tmp/ccgsFZb0.s:663    .text:0000000000000488 .L0 
     /tmp/ccgsFZb0.s:668    .text:0000000000000498 .L0 
     /tmp/ccgsFZb0.s:669    .text:0000000000000498 .L0 
     /tmp/ccgsFZb0.s:670    .text:0000000000000498 .L0 
     /tmp/ccgsFZb0.s:671    .text:0000000000000498 .L0 
     /tmp/ccgsFZb0.s:673    .text:000000000000049c .L0 
     /tmp/ccgsFZb0.s:677    .text:00000000000004a4 .L0 
     /tmp/ccgsFZb0.s:678    .text:00000000000004a4 .L0 
     /tmp/ccgsFZb0.s:683    .text:00000000000004b0 .L0 
     /tmp/ccgsFZb0.s:684    .text:00000000000004b0 .L0 
     /tmp/ccgsFZb0.s:689    .text:00000000000004c0 .L0 
     /tmp/ccgsFZb0.s:690    .text:00000000000004c4 .L0 
     /tmp/ccgsFZb0.s:692    .text:00000000000004c8 .L0 
     /tmp/ccgsFZb0.s:693    .text:00000000000004c8 .L0 
     /tmp/ccgsFZb0.s:695    .text:00000000000004cc .L0 
     /tmp/ccgsFZb0.s:698    .text:00000000000004d0 .L0 
     /tmp/ccgsFZb0.s:701    .text:00000000000004d4 .L0 
     /tmp/ccgsFZb0.s:703    .text:00000000000004d8 .L0 
     /tmp/ccgsFZb0.s:709    .text:00000000000004d8 _ZN13SlabAllocator12allocateSlotEP4Slab
     /tmp/ccgsFZb0.s:712    .text:00000000000004d8 .L0 
     /tmp/ccgsFZb0.s:714    .text:00000000000004d8 .L0 
     /tmp/ccgsFZb0.s:715    .text:00000000000004dc .L0 
     /tmp/ccgsFZb0.s:720    .text:00000000000004ec .L0 
     /tmp/ccgsFZb0.s:721    .text:00000000000004ec .L0 
     /tmp/ccgsFZb0.s:722    .text:00000000000004ec .L0 
     /tmp/ccgsFZb0.s:723    .text:00000000000004ec .L0 
     /tmp/ccgsFZb0.s:725    .text:00000000000004f0 .L0 
     /tmp/ccgsFZb0.s:730    .text:00000000000004f4 .L0 
     /tmp/ccgsFZb0.s:731    .text:00000000000004f4 .L0 
     /tmp/ccgsFZb0.s:735    .text:00000000000004f8 .L0 
     /tmp/ccgsFZb0.s:736    .text:00000000000004f8 .L0 
GAS LISTING /tmp/ccgsFZb0.s 			page 57


     /tmp/ccgsFZb0.s:738    .text:00000000000004fc .L0 
     /tmp/ccgsFZb0.s:743    .text:0000000000000500 .L0 
     /tmp/ccgsFZb0.s:744    .text:0000000000000500 .L0 
     /tmp/ccgsFZb0.s:746    .text:0000000000000504 .L0 
     /tmp/ccgsFZb0.s:749    .text:000000000000050c .L0 
     /tmp/ccgsFZb0.s:752    .text:0000000000000510 .L0 
     /tmp/ccgsFZb0.s:759    .text:0000000000000518 .L0 
     /tmp/ccgsFZb0.s:760    .text:0000000000000518 .L0 
     /tmp/ccgsFZb0.s:767    .text:0000000000000520 .L0 
     /tmp/ccgsFZb0.s:768    .text:0000000000000520 .L0 
     /tmp/ccgsFZb0.s:769    .text:0000000000000520 .L0 
     /tmp/ccgsFZb0.s:771    .text:0000000000000524 .L0 
     /tmp/ccgsFZb0.s:776    .text:0000000000000528 .L0 
     /tmp/ccgsFZb0.s:778    .text:000000000000052c .L0 
     /tmp/ccgsFZb0.s:781    .text:0000000000000530 .L0 
     /tmp/ccgsFZb0.s:785    .text:0000000000000534 .L0 
     /tmp/ccgsFZb0.s:786    .text:0000000000000534 .L0 
     /tmp/ccgsFZb0.s:793    .text:000000000000053c .L0 
     /tmp/ccgsFZb0.s:797    .text:000000000000053c .L0 
     /tmp/ccgsFZb0.s:798    .text:000000000000053c .L0 
     /tmp/ccgsFZb0.s:800    .text:0000000000000540 .L0 
     /tmp/ccgsFZb0.s:802    .text:0000000000000544 .L0 
     /tmp/ccgsFZb0.s:806    .text:0000000000000548 .L0 
     /tmp/ccgsFZb0.s:807    .text:0000000000000548 .L0 
     /tmp/ccgsFZb0.s:809    .text:000000000000054c .L0 
     /tmp/ccgsFZb0.s:811    .text:0000000000000550 .L0 
     /tmp/ccgsFZb0.s:813    .text:0000000000000554 .L0 
     /tmp/ccgsFZb0.s:814    .text:0000000000000554 .L0 
     /tmp/ccgsFZb0.s:819    .text:0000000000000560 .L0 
     /tmp/ccgsFZb0.s:820    .text:0000000000000560 .L0 
     /tmp/ccgsFZb0.s:822    .text:0000000000000564 .L0 
     /tmp/ccgsFZb0.s:824    .text:0000000000000568 .L0 
     /tmp/ccgsFZb0.s:826    .text:000000000000056c .L0 
     /tmp/ccgsFZb0.s:829    .text:0000000000000570 .L0 
     /tmp/ccgsFZb0.s:831    .text:0000000000000574 .L0 
     /tmp/ccgsFZb0.s:835    .text:0000000000000578 .L0 
     /tmp/ccgsFZb0.s:838    .text:000000000000057c .L0 
     /tmp/ccgsFZb0.s:843    .text:0000000000000584 .L0 
     /tmp/ccgsFZb0.s:845    .text:0000000000000588 .L0 
     /tmp/ccgsFZb0.s:853    .text:0000000000000590 .L0 
     /tmp/ccgsFZb0.s:857    .text:0000000000000594 .L0 
     /tmp/ccgsFZb0.s:858    .text:0000000000000598 .L0 
     /tmp/ccgsFZb0.s:860    .text:000000000000059c .L0 
     /tmp/ccgsFZb0.s:861    .text:000000000000059c .L0 
     /tmp/ccgsFZb0.s:863    .text:00000000000005a0 .L0 
     /tmp/ccgsFZb0.s:865    .text:00000000000005a4 .L0 
     /tmp/ccgsFZb0.s:868    .text:00000000000005a8 .L0 
     /tmp/ccgsFZb0.s:870    .text:00000000000005ac .L0 
     /tmp/ccgsFZb0.s:876    .text:00000000000005ac _ZN13SlabAllocator14allocateObjectEP5Cache
     /tmp/ccgsFZb0.s:879    .text:00000000000005ac .L0 
     /tmp/ccgsFZb0.s:881    .text:00000000000005ac .L0 
     /tmp/ccgsFZb0.s:882    .text:00000000000005b0 .L0 
     /tmp/ccgsFZb0.s:887    .text:00000000000005c0 .L0 
     /tmp/ccgsFZb0.s:888    .text:00000000000005c0 .L0 
     /tmp/ccgsFZb0.s:889    .text:00000000000005c0 .L0 
     /tmp/ccgsFZb0.s:890    .text:00000000000005c0 .L0 
     /tmp/ccgsFZb0.s:892    .text:00000000000005c4 .L0 
GAS LISTING /tmp/ccgsFZb0.s 			page 58


     /tmp/ccgsFZb0.s:895    .text:00000000000005c8 .L0 
     /tmp/ccgsFZb0.s:896    .text:00000000000005c8 .L0 
     /tmp/ccgsFZb0.s:903    .text:00000000000005cc .L0 
     /tmp/ccgsFZb0.s:904    .text:00000000000005cc .L0 
     /tmp/ccgsFZb0.s:907    .text:00000000000005d0 .L0 
     /tmp/ccgsFZb0.s:908    .text:00000000000005d0 .L0 
     /tmp/ccgsFZb0.s:912    .text:00000000000005dc .L0 
     /tmp/ccgsFZb0.s:914    .text:00000000000005e0 .L0 
     /tmp/ccgsFZb0.s:921    .text:00000000000005e4 .L0 
     /tmp/ccgsFZb0.s:924    .text:00000000000005e8 .L0 
     /tmp/ccgsFZb0.s:926    .text:00000000000005f0 .L0 
     /tmp/ccgsFZb0.s:927    .text:00000000000005f0 .L0 
     /tmp/ccgsFZb0.s:929    .text:00000000000005f4 .L0 
     /tmp/ccgsFZb0.s:930    .text:00000000000005f4 .L0 
     /tmp/ccgsFZb0.s:932    .text:00000000000005f8 .L0 
     /tmp/ccgsFZb0.s:935    .text:00000000000005fc .L0 
     /tmp/ccgsFZb0.s:938    .text:0000000000000600 .L0 
     /tmp/ccgsFZb0.s:942    .text:0000000000000604 .L0 
     /tmp/ccgsFZb0.s:944    .text:0000000000000604 .L0 
     /tmp/ccgsFZb0.s:945    .text:0000000000000604 .L0 
     /tmp/ccgsFZb0.s:951    .text:0000000000000608 .L0 
     /tmp/ccgsFZb0.s:952    .text:0000000000000608 .L0 
     /tmp/ccgsFZb0.s:955    .text:000000000000060c .L0 
     /tmp/ccgsFZb0.s:956    .text:000000000000060c .L0 
     /tmp/ccgsFZb0.s:960    .text:0000000000000618 .L0 
     /tmp/ccgsFZb0.s:962    .text:000000000000061c .L0 
     /tmp/ccgsFZb0.s:969    .text:0000000000000620 .L0 
     /tmp/ccgsFZb0.s:971    .text:0000000000000624 .L0 
     /tmp/ccgsFZb0.s:972    .text:0000000000000624 .L0 
     /tmp/ccgsFZb0.s:976    .text:0000000000000630 .L0 
     /tmp/ccgsFZb0.s:978    .text:0000000000000634 .L0 
     /tmp/ccgsFZb0.s:979    .text:0000000000000634 .L0 
     /tmp/ccgsFZb0.s:985    .text:0000000000000644 .L0 
     /tmp/ccgsFZb0.s:986    .text:0000000000000644 .L0 
     /tmp/ccgsFZb0.s:987    .text:0000000000000648 .L0 
     /tmp/ccgsFZb0.s:993    .text:0000000000000648 _ZN13SlabAllocator14allocateBufferEm
     /tmp/ccgsFZb0.s:996    .text:0000000000000648 .L0 
     /tmp/ccgsFZb0.s:998    .text:0000000000000648 .L0 
     /tmp/ccgsFZb0.s:1002   .text:0000000000000648 .L0 
     /tmp/ccgsFZb0.s:1003   .text:0000000000000648 .L0 
     /tmp/ccgsFZb0.s:1004   .text:0000000000000648 .L0 
     /tmp/ccgsFZb0.s:1007   .text:000000000000064c .L0 
     /tmp/ccgsFZb0.s:1008   .text:000000000000064c .L0 
     /tmp/ccgsFZb0.s:1011   .text:0000000000000650 .L0 
     /tmp/ccgsFZb0.s:1014   .text:0000000000000654 .L0 
     /tmp/ccgsFZb0.s:1015   .text:0000000000000654 .L0 
     /tmp/ccgsFZb0.s:1017   .text:0000000000000658 .L0 
     /tmp/ccgsFZb0.s:1020   .text:000000000000065c .L0 
     /tmp/ccgsFZb0.s:1021   .text:000000000000065c .L0 
     /tmp/ccgsFZb0.s:1023   .text:0000000000000660 .L0 
     /tmp/ccgsFZb0.s:1026   .text:0000000000000664 .L0 
     /tmp/ccgsFZb0.s:1027   .text:0000000000000664 .L0 
     /tmp/ccgsFZb0.s:1029   .text:0000000000000668 .L0 
     /tmp/ccgsFZb0.s:1032   .text:000000000000066c .L0 
     /tmp/ccgsFZb0.s:1033   .text:000000000000066c .L0 
     /tmp/ccgsFZb0.s:1035   .text:0000000000000670 .L0 
     /tmp/ccgsFZb0.s:1038   .text:0000000000000674 .L0 
GAS LISTING /tmp/ccgsFZb0.s 			page 59


     /tmp/ccgsFZb0.s:1039   .text:0000000000000674 .L0 
     /tmp/ccgsFZb0.s:1041   .text:0000000000000678 .L0 
     /tmp/ccgsFZb0.s:1044   .text:000000000000067c .L0 
     /tmp/ccgsFZb0.s:1045   .text:000000000000067c .L0 
     /tmp/ccgsFZb0.s:1052   .text:0000000000000680 .L0 
     /tmp/ccgsFZb0.s:1056   .text:0000000000000684 .L0 
     /tmp/ccgsFZb0.s:1057   .text:0000000000000684 .L0 
     /tmp/ccgsFZb0.s:1060   .text:000000000000068c .L0 
     /tmp/ccgsFZb0.s:1061   .text:000000000000068c .L0 
     /tmp/ccgsFZb0.s:1064   .text:0000000000000690 .L0 
     /tmp/ccgsFZb0.s:1065   .text:0000000000000690 .L0 
     /tmp/ccgsFZb0.s:1068   .text:0000000000000694 .L0 
     /tmp/ccgsFZb0.s:1074   .text:0000000000000698 .L0 
     /tmp/ccgsFZb0.s:1075   .text:0000000000000698 .L0 
     /tmp/ccgsFZb0.s:1076   .text:0000000000000698 .L0 
     /tmp/ccgsFZb0.s:1079   .text:000000000000069c .L0 
     /tmp/ccgsFZb0.s:1082   .text:00000000000006a4 .L0 
     /tmp/ccgsFZb0.s:1086   .text:00000000000006ac .L0 
     /tmp/ccgsFZb0.s:1087   .text:00000000000006b0 .L0 
     /tmp/ccgsFZb0.s:1090   .text:00000000000006b8 .L0 
     /tmp/ccgsFZb0.s:1091   .text:00000000000006b8 .L0 
     /tmp/ccgsFZb0.s:1093   .text:00000000000006bc .L0 
     /tmp/ccgsFZb0.s:1096   .text:00000000000006bc .L0 
     /tmp/ccgsFZb0.s:1097   .text:00000000000006bc .L0 
     /tmp/ccgsFZb0.s:1098   .text:00000000000006bc .L0 
     /tmp/ccgsFZb0.s:1106   .text:00000000000006d8 .L0 
     /tmp/ccgsFZb0.s:1107   .text:00000000000006d8 .L0 
     /tmp/ccgsFZb0.s:1109   .text:00000000000006e0 .L0 
     /tmp/ccgsFZb0.s:1111   .text:00000000000006e4 .L0 
     /tmp/ccgsFZb0.s:1112   .text:00000000000006e4 .L0 
     /tmp/ccgsFZb0.s:1114   .text:00000000000006e8 .L0 
     /tmp/ccgsFZb0.s:1116   .text:00000000000006ec .L0 
     /tmp/ccgsFZb0.s:1122   .text:00000000000006ec _ZN13SlabAllocator11createCacheEPKcmPFvPvES4_
     /tmp/ccgsFZb0.s:1125   .text:00000000000006ec .L0 
     /tmp/ccgsFZb0.s:1127   .text:00000000000006ec .L0 
     /tmp/ccgsFZb0.s:1128   .text:00000000000006f0 .L0 
     /tmp/ccgsFZb0.s:1136   .text:000000000000070c .L0 
     /tmp/ccgsFZb0.s:1137   .text:000000000000070c .L0 
     /tmp/ccgsFZb0.s:1138   .text:000000000000070c .L0 
     /tmp/ccgsFZb0.s:1139   .text:000000000000070c .L0 
     /tmp/ccgsFZb0.s:1140   .text:000000000000070c .L0 
     /tmp/ccgsFZb0.s:1141   .text:000000000000070c .L0 
     /tmp/ccgsFZb0.s:1142   .text:000000000000070c .L0 
     /tmp/ccgsFZb0.s:1144   .text:0000000000000710 .L0 
     /tmp/ccgsFZb0.s:1150   .text:0000000000000720 .L0 
     /tmp/ccgsFZb0.s:1151   .text:0000000000000720 .L0 
     /tmp/ccgsFZb0.s:1158   .text:0000000000000734 .L0 
     /tmp/ccgsFZb0.s:1159   .text:0000000000000734 .L0 
     /tmp/ccgsFZb0.s:1161   .text:0000000000000738 .L0 
     /tmp/ccgsFZb0.s:1162   .text:0000000000000738 .L0 
     /tmp/ccgsFZb0.s:1164   .text:000000000000073c .L0 
     /tmp/ccgsFZb0.s:1165   .text:000000000000073c .L0 
     /tmp/ccgsFZb0.s:1167   .text:0000000000000740 .L0 
     /tmp/ccgsFZb0.s:1169   .text:0000000000000744 .L0 
     /tmp/ccgsFZb0.s:1171   .text:0000000000000748 .L0 
     /tmp/ccgsFZb0.s:1172   .text:0000000000000748 .L0 
     /tmp/ccgsFZb0.s:1174   .text:000000000000074c .L0 
GAS LISTING /tmp/ccgsFZb0.s 			page 60


     /tmp/ccgsFZb0.s:1175   .text:000000000000074c .L0 
     /tmp/ccgsFZb0.s:1178   .text:0000000000000754 .L0 
     /tmp/ccgsFZb0.s:1179   .text:0000000000000754 .L0 
     /tmp/ccgsFZb0.s:1184   .text:0000000000000764 .L0 
     /tmp/ccgsFZb0.s:1185   .text:0000000000000764 .L0 
     /tmp/ccgsFZb0.s:1187   .text:000000000000076c .L0 
     /tmp/ccgsFZb0.s:1189   .text:0000000000000770 .L0 
     /tmp/ccgsFZb0.s:1190   .text:0000000000000770 .L0 
     /tmp/ccgsFZb0.s:1192   .text:0000000000000774 .L0 
     /tmp/ccgsFZb0.s:1195   .text:0000000000000778 .L0 
     /tmp/ccgsFZb0.s:1198   .text:000000000000077c .L0 
     /tmp/ccgsFZb0.s:1201   .text:0000000000000780 .L0 
     /tmp/ccgsFZb0.s:1204   .text:0000000000000784 .L0 
     /tmp/ccgsFZb0.s:1207   .text:0000000000000788 .L0 
     /tmp/ccgsFZb0.s:1209   .text:000000000000078c .L0 
     /tmp/ccgsFZb0.s:1220   .text:000000000000078c _ZN13SlabAllocator10initializeEPvm
     /tmp/ccgsFZb0.s:1223   .text:000000000000078c .L0 
     /tmp/ccgsFZb0.s:1225   .text:000000000000078c .L0 
     /tmp/ccgsFZb0.s:1226   .text:0000000000000790 .L0 
     /tmp/ccgsFZb0.s:1231   .text:00000000000007a0 .L0 
     /tmp/ccgsFZb0.s:1232   .text:00000000000007a0 .L0 
     /tmp/ccgsFZb0.s:1233   .text:00000000000007a0 .L0 
     /tmp/ccgsFZb0.s:1234   .text:00000000000007a0 .L0 
     /tmp/ccgsFZb0.s:1236   .text:00000000000007a4 .L0 
     /tmp/ccgsFZb0.s:1240   .text:00000000000007ac .L0 
     /tmp/ccgsFZb0.s:1241   .text:00000000000007ac .L0 
     /tmp/ccgsFZb0.s:1244   .text:00000000000007b4 .L0 
     /tmp/ccgsFZb0.s:1245   .text:00000000000007b4 .L0 
     /tmp/ccgsFZb0.s:1248   .text:00000000000007c0 .L0 
     /tmp/ccgsFZb0.s:1249   .text:00000000000007c0 .L0 
     /tmp/ccgsFZb0.s:1251   .text:00000000000007c4 .L0 
     /tmp/ccgsFZb0.s:1252   .text:00000000000007c4 .L0 
     /tmp/ccgsFZb0.s:1258   .text:00000000000007dc .L0 
     /tmp/ccgsFZb0.s:1260   .text:00000000000007e0 .L0 
     /tmp/ccgsFZb0.s:1261   .text:00000000000007e0 .L0 
     /tmp/ccgsFZb0.s:1263   .text:00000000000007e4 .L0 
     /tmp/ccgsFZb0.s:1264   .text:00000000000007e4 .L0 
     /tmp/ccgsFZb0.s:1266   .text:00000000000007e8 .L0 
     /tmp/ccgsFZb0.s:1267   .text:00000000000007e8 .L0 
     /tmp/ccgsFZb0.s:1269   .text:00000000000007ec .L0 
     /tmp/ccgsFZb0.s:1270   .text:00000000000007ec .L0 
     /tmp/ccgsFZb0.s:1272   .text:00000000000007f0 .L0 
     /tmp/ccgsFZb0.s:1273   .text:00000000000007f0 .L0 
     /tmp/ccgsFZb0.s:1275   .text:00000000000007f4 .L0 
     /tmp/ccgsFZb0.s:1276   .text:00000000000007f4 .L0 
     /tmp/ccgsFZb0.s:1279   .text:00000000000007fc .L0 
     /tmp/ccgsFZb0.s:1280   .text:00000000000007fc .L0 
     /tmp/ccgsFZb0.s:1283   .text:0000000000000804 .L0 
     /tmp/ccgsFZb0.s:1284   .text:0000000000000804 .L0 
     /tmp/ccgsFZb0.s:1289   .text:0000000000000814 .L0 
     /tmp/ccgsFZb0.s:1290   .text:0000000000000814 .L0 
     /tmp/ccgsFZb0.s:1296   .text:000000000000081c .L0 
     /tmp/ccgsFZb0.s:1297   .text:000000000000081c .L0 
     /tmp/ccgsFZb0.s:1308   .text:0000000000000848 .L0 
     /tmp/ccgsFZb0.s:1312   .text:0000000000000858 .L0 
     /tmp/ccgsFZb0.s:1313   .text:0000000000000858 .L0 
     /tmp/ccgsFZb0.s:1316   .text:0000000000000860 .L0 
GAS LISTING /tmp/ccgsFZb0.s 			page 61


     /tmp/ccgsFZb0.s:1320   .text:0000000000000864 .L0 
     /tmp/ccgsFZb0.s:1324   .text:000000000000086c .L0 
     /tmp/ccgsFZb0.s:1325   .text:0000000000000870 .L0 
     /tmp/ccgsFZb0.s:1327   .text:0000000000000874 .L0 
     /tmp/ccgsFZb0.s:1328   .text:0000000000000874 .L0 
     /tmp/ccgsFZb0.s:1330   .text:0000000000000878 .L0 
     /tmp/ccgsFZb0.s:1333   .text:000000000000087c .L0 
     /tmp/ccgsFZb0.s:1335   .text:0000000000000880 .L0 
     /tmp/ccgsFZb0.s:1337   .text:0000000000000884 .L0 
     /tmp/ccgsFZb0.s:1343   .text:0000000000000884 _ZN13SlabAllocator8freeSlotEP4Slabm
     /tmp/ccgsFZb0.s:1346   .text:0000000000000884 .L0 
     /tmp/ccgsFZb0.s:1348   .text:0000000000000884 .L0 
     /tmp/ccgsFZb0.s:1350   .text:0000000000000884 .L0 
     /tmp/ccgsFZb0.s:1351   .text:0000000000000884 .L0 
     /tmp/ccgsFZb0.s:1353   .text:0000000000000888 .L0 
     /tmp/ccgsFZb0.s:1357   .text:0000000000000890 .L0 
     /tmp/ccgsFZb0.s:1360   .text:0000000000000894 .L0 
     /tmp/ccgsFZb0.s:1361   .text:0000000000000898 .L0 
     /tmp/ccgsFZb0.s:1365   .text:00000000000008a4 .L0 
     /tmp/ccgsFZb0.s:1366   .text:00000000000008a4 .L0 
     /tmp/ccgsFZb0.s:1367   .text:00000000000008a4 .L0 
     /tmp/ccgsFZb0.s:1369   .text:00000000000008a8 .L0 
     /tmp/ccgsFZb0.s:1374   .text:00000000000008ac .L0 
     /tmp/ccgsFZb0.s:1375   .text:00000000000008ac .L0 
     /tmp/ccgsFZb0.s:1380   .text:00000000000008b0 .L0 
     /tmp/ccgsFZb0.s:1381   .text:00000000000008b0 .L0 
     /tmp/ccgsFZb0.s:1382   .text:00000000000008b0 .L0 
     /tmp/ccgsFZb0.s:1387   .text:00000000000008b4 .L0 
     /tmp/ccgsFZb0.s:1389   .text:00000000000008b8 .L0 
     /tmp/ccgsFZb0.s:1392   .text:00000000000008bc .L0 
     /tmp/ccgsFZb0.s:1396   .text:00000000000008c0 .L0 
     /tmp/ccgsFZb0.s:1397   .text:00000000000008c0 .L0 
     /tmp/ccgsFZb0.s:1403   .text:00000000000008c8 .L0 
     /tmp/ccgsFZb0.s:1404   .text:00000000000008c8 .L0 
     /tmp/ccgsFZb0.s:1405   .text:00000000000008c8 .L0 
     /tmp/ccgsFZb0.s:1410   .text:00000000000008cc .L0 
     /tmp/ccgsFZb0.s:1412   .text:00000000000008d0 .L0 
     /tmp/ccgsFZb0.s:1414   .text:00000000000008d4 .L0 
     /tmp/ccgsFZb0.s:1420   .text:00000000000008d8 .L0 
     /tmp/ccgsFZb0.s:1423   .text:00000000000008d8 .L0 
     /tmp/ccgsFZb0.s:1424   .text:00000000000008d8 .L0 
     /tmp/ccgsFZb0.s:1426   .text:00000000000008dc .L0 
     /tmp/ccgsFZb0.s:1427   .text:00000000000008dc .L0 
     /tmp/ccgsFZb0.s:1429   .text:00000000000008e0 .L0 
     /tmp/ccgsFZb0.s:1431   .text:00000000000008e4 .L0 
     /tmp/ccgsFZb0.s:1433   .text:00000000000008e8 .L0 
     /tmp/ccgsFZb0.s:1434   .text:00000000000008e8 .L0 
     /tmp/ccgsFZb0.s:1441   .text:00000000000008f4 .L0 
     /tmp/ccgsFZb0.s:1442   .text:00000000000008f8 .L0 
     /tmp/ccgsFZb0.s:1443   .text:00000000000008f8 .L0 
     /tmp/ccgsFZb0.s:1445   .text:00000000000008fc .L0 
     /tmp/ccgsFZb0.s:1446   .text:00000000000008fc .L0 
     /tmp/ccgsFZb0.s:1448   .text:0000000000000900 .L0 
     /tmp/ccgsFZb0.s:1451   .text:0000000000000904 .L0 
     /tmp/ccgsFZb0.s:1455   .text:0000000000000908 .L0 
     /tmp/ccgsFZb0.s:1459   .text:0000000000000908 .L0 
     /tmp/ccgsFZb0.s:1461   .text:000000000000090c .L0 
GAS LISTING /tmp/ccgsFZb0.s 			page 62


     /tmp/ccgsFZb0.s:1466   .text:0000000000000914 .L0 
     /tmp/ccgsFZb0.s:1468   .text:0000000000000918 .L0 
     /tmp/ccgsFZb0.s:1473   .text:0000000000000920 .L0 
     /tmp/ccgsFZb0.s:1474   .text:0000000000000920 .L0 
     /tmp/ccgsFZb0.s:1479   .text:000000000000092c .L0 
     /tmp/ccgsFZb0.s:1480   .text:000000000000092c .L0 
     /tmp/ccgsFZb0.s:1482   .text:0000000000000930 .L0 
     /tmp/ccgsFZb0.s:1489   .text:0000000000000944 .L0 
     /tmp/ccgsFZb0.s:1490   .text:0000000000000944 .L0 
     /tmp/ccgsFZb0.s:1491   .text:0000000000000944 .L0 
     /tmp/ccgsFZb0.s:1492   .text:0000000000000944 .L0 
     /tmp/ccgsFZb0.s:1496   .text:0000000000000948 .L0 
     /tmp/ccgsFZb0.s:1502   .text:0000000000000948 _ZN13SlabAllocator10freeObjectEP5CachePKv
     /tmp/ccgsFZb0.s:1505   .text:0000000000000948 .L0 
     /tmp/ccgsFZb0.s:1507   .text:0000000000000948 .L0 
     /tmp/ccgsFZb0.s:1508   .text:000000000000094c .L0 
     /tmp/ccgsFZb0.s:1513   .text:000000000000095c .L0 
     /tmp/ccgsFZb0.s:1514   .text:000000000000095c .L0 
     /tmp/ccgsFZb0.s:1515   .text:000000000000095c .L0 
     /tmp/ccgsFZb0.s:1516   .text:000000000000095c .L0 
     /tmp/ccgsFZb0.s:1518   .text:0000000000000960 .L0 
     /tmp/ccgsFZb0.s:1522   .text:0000000000000968 .L0 
     /tmp/ccgsFZb0.s:1523   .text:0000000000000968 .L0 
     /tmp/ccgsFZb0.s:1532   .text:0000000000000970 .L0 
     /tmp/ccgsFZb0.s:1533   .text:0000000000000970 .L0 
     /tmp/ccgsFZb0.s:1538   .text:0000000000000974 .L0 
     /tmp/ccgsFZb0.s:1539   .text:0000000000000974 .L0 
     /tmp/ccgsFZb0.s:1545   .text:0000000000000978 .L0 
     /tmp/ccgsFZb0.s:1546   .text:0000000000000978 .L0 
     /tmp/ccgsFZb0.s:1547   .text:0000000000000978 .L0 
     /tmp/ccgsFZb0.s:1549   .text:000000000000097c .L0 
     /tmp/ccgsFZb0.s:1551   .text:0000000000000980 .L0 
     /tmp/ccgsFZb0.s:1553   .text:0000000000000984 .L0 
     /tmp/ccgsFZb0.s:1555   .text:0000000000000988 .L0 
     /tmp/ccgsFZb0.s:1557   .text:000000000000098c .L0 
     /tmp/ccgsFZb0.s:1565   .text:0000000000000990 .L0 
     /tmp/ccgsFZb0.s:1569   .text:0000000000000990 .L0 
     /tmp/ccgsFZb0.s:1571   .text:0000000000000990 .L0 
     /tmp/ccgsFZb0.s:1573   .text:0000000000000994 .L0 
     /tmp/ccgsFZb0.s:1576   .text:0000000000000998 .L0 
     /tmp/ccgsFZb0.s:1577   .text:0000000000000998 .L0 
     /tmp/ccgsFZb0.s:1580   .text:000000000000099c .L0 
     /tmp/ccgsFZb0.s:1585   .text:00000000000009a8 .L0 
     /tmp/ccgsFZb0.s:1586   .text:00000000000009a8 .L0 
     /tmp/ccgsFZb0.s:1591   .text:00000000000009b4 .L0 
     /tmp/ccgsFZb0.s:1592   .text:00000000000009b4 .L0 
     /tmp/ccgsFZb0.s:1600   .text:00000000000009bc .L0 
     /tmp/ccgsFZb0.s:1606   .text:00000000000009c0 .L0 
     /tmp/ccgsFZb0.s:1610   .text:00000000000009c4 .L0 
     /tmp/ccgsFZb0.s:1611   .text:00000000000009c8 .L0 
     /tmp/ccgsFZb0.s:1612   .text:00000000000009c8 .L0 
     /tmp/ccgsFZb0.s:1614   .text:00000000000009cc .L0 
     /tmp/ccgsFZb0.s:1615   .text:00000000000009cc .L0 
     /tmp/ccgsFZb0.s:1617   .text:00000000000009d0 .L0 
     /tmp/ccgsFZb0.s:1620   .text:00000000000009d4 .L0 
     /tmp/ccgsFZb0.s:1623   .text:00000000000009d8 .L0 
     /tmp/ccgsFZb0.s:1627   .text:00000000000009dc .L0 
GAS LISTING /tmp/ccgsFZb0.s 			page 63


     /tmp/ccgsFZb0.s:1629   .text:00000000000009dc .L0 
     /tmp/ccgsFZb0.s:1630   .text:00000000000009dc .L0 
     /tmp/ccgsFZb0.s:1639   .text:00000000000009e4 .L0 
     /tmp/ccgsFZb0.s:1640   .text:00000000000009e4 .L0 
     /tmp/ccgsFZb0.s:1645   .text:00000000000009e8 .L0 
     /tmp/ccgsFZb0.s:1646   .text:00000000000009e8 .L0 
     /tmp/ccgsFZb0.s:1652   .text:00000000000009ec .L0 
     /tmp/ccgsFZb0.s:1653   .text:00000000000009ec .L0 
     /tmp/ccgsFZb0.s:1654   .text:00000000000009ec .L0 
     /tmp/ccgsFZb0.s:1656   .text:00000000000009f0 .L0 
     /tmp/ccgsFZb0.s:1658   .text:00000000000009f4 .L0 
     /tmp/ccgsFZb0.s:1660   .text:00000000000009f8 .L0 
     /tmp/ccgsFZb0.s:1662   .text:00000000000009fc .L0 
     /tmp/ccgsFZb0.s:1664   .text:0000000000000a00 .L0 
     /tmp/ccgsFZb0.s:1672   .text:0000000000000a04 .L0 
     /tmp/ccgsFZb0.s:1676   .text:0000000000000a04 .L0 
     /tmp/ccgsFZb0.s:1678   .text:0000000000000a04 .L0 
     /tmp/ccgsFZb0.s:1680   .text:0000000000000a08 .L0 
     /tmp/ccgsFZb0.s:1683   .text:0000000000000a0c .L0 
     /tmp/ccgsFZb0.s:1684   .text:0000000000000a0c .L0 
     /tmp/ccgsFZb0.s:1687   .text:0000000000000a10 .L0 
     /tmp/ccgsFZb0.s:1692   .text:0000000000000a1c .L0 
     /tmp/ccgsFZb0.s:1693   .text:0000000000000a1c .L0 
     /tmp/ccgsFZb0.s:1700   .text:0000000000000a2c .L0 
     /tmp/ccgsFZb0.s:1701   .text:0000000000000a2c .L0 
     /tmp/ccgsFZb0.s:1708   .text:0000000000000a34 .L0 
     /tmp/ccgsFZb0.s:1714   .text:0000000000000a34 _ZN13SlabAllocator10freeBufferEPKv
     /tmp/ccgsFZb0.s:1717   .text:0000000000000a34 .L0 
     /tmp/ccgsFZb0.s:1719   .text:0000000000000a34 .L0 
     /tmp/ccgsFZb0.s:1720   .text:0000000000000a38 .L0 
     /tmp/ccgsFZb0.s:1725   .text:0000000000000a48 .L0 
     /tmp/ccgsFZb0.s:1726   .text:0000000000000a48 .L0 
     /tmp/ccgsFZb0.s:1727   .text:0000000000000a48 .L0 
     /tmp/ccgsFZb0.s:1728   .text:0000000000000a48 .L0 
     /tmp/ccgsFZb0.s:1730   .text:0000000000000a4c .L0 
     /tmp/ccgsFZb0.s:1735   .text:0000000000000a50 .L0 
     /tmp/ccgsFZb0.s:1736   .text:0000000000000a50 .L0 
     /tmp/ccgsFZb0.s:1740   .text:0000000000000a54 .L0 
     /tmp/ccgsFZb0.s:1743   .text:0000000000000a5c .L0 
     /tmp/ccgsFZb0.s:1744   .text:0000000000000a5c .L0 
     /tmp/ccgsFZb0.s:1752   .text:0000000000000a7c .L0 
     /tmp/ccgsFZb0.s:1754   .text:0000000000000a80 .L0 
     /tmp/ccgsFZb0.s:1761   .text:0000000000000a88 .L0 
     /tmp/ccgsFZb0.s:1762   .text:0000000000000a8c .L0 
     /tmp/ccgsFZb0.s:1764   .text:0000000000000a90 .L0 
     /tmp/ccgsFZb0.s:1765   .text:0000000000000a90 .L0 
     /tmp/ccgsFZb0.s:1767   .text:0000000000000a94 .L0 
     /tmp/ccgsFZb0.s:1770   .text:0000000000000a98 .L0 
     /tmp/ccgsFZb0.s:1773   .text:0000000000000a9c .L0 
     /tmp/ccgsFZb0.s:1775   .text:0000000000000aa0 .L0 
     /tmp/ccgsFZb0.s:1781   .text:0000000000000aa0 _ZN13SlabAllocator11deleteCacheERP5Cache
     /tmp/ccgsFZb0.s:1784   .text:0000000000000aa0 .L0 
     /tmp/ccgsFZb0.s:1786   .text:0000000000000aa0 .L0 
     /tmp/ccgsFZb0.s:1787   .text:0000000000000aa4 .L0 
     /tmp/ccgsFZb0.s:1792   .text:0000000000000ab4 .L0 
     /tmp/ccgsFZb0.s:1793   .text:0000000000000ab4 .L0 
     /tmp/ccgsFZb0.s:1794   .text:0000000000000ab4 .L0 
GAS LISTING /tmp/ccgsFZb0.s 			page 64


     /tmp/ccgsFZb0.s:1795   .text:0000000000000ab4 .L0 
     /tmp/ccgsFZb0.s:1797   .text:0000000000000ab8 .L0 
     /tmp/ccgsFZb0.s:1800   .text:0000000000000abc .L0 
     /tmp/ccgsFZb0.s:1801   .text:0000000000000abc .L0 
     /tmp/ccgsFZb0.s:1803   .text:0000000000000ac0 .L0 
     /tmp/ccgsFZb0.s:1809   .text:0000000000000ac4 .L0 
     /tmp/ccgsFZb0.s:1810   .text:0000000000000ac4 .L0 
     /tmp/ccgsFZb0.s:1813   .text:0000000000000acc .L0 
     /tmp/ccgsFZb0.s:1814   .text:0000000000000acc .L0 
     /tmp/ccgsFZb0.s:1816   .text:0000000000000ad0 .L0 
     /tmp/ccgsFZb0.s:1820   .text:0000000000000adc .L0 
     /tmp/ccgsFZb0.s:1821   .text:0000000000000adc .L0 
     /tmp/ccgsFZb0.s:1823   .text:0000000000000ae0 .L0 
     /tmp/ccgsFZb0.s:1825   .text:0000000000000ae4 .L0 
     /tmp/ccgsFZb0.s:1827   .text:0000000000000ae8 .L0 
     /tmp/ccgsFZb0.s:1833   .text:0000000000000aec .L0 
     /tmp/ccgsFZb0.s:1834   .text:0000000000000aec .L0 
     /tmp/ccgsFZb0.s:1836   .text:0000000000000af0 .L0 
     /tmp/ccgsFZb0.s:1842   .text:0000000000000af4 .L0 
     /tmp/ccgsFZb0.s:1843   .text:0000000000000af4 .L0 
     /tmp/ccgsFZb0.s:1846   .text:0000000000000afc .L0 
     /tmp/ccgsFZb0.s:1847   .text:0000000000000afc .L0 
     /tmp/ccgsFZb0.s:1849   .text:0000000000000b00 .L0 
     /tmp/ccgsFZb0.s:1853   .text:0000000000000b0c .L0 
     /tmp/ccgsFZb0.s:1854   .text:0000000000000b0c .L0 
     /tmp/ccgsFZb0.s:1856   .text:0000000000000b10 .L0 
     /tmp/ccgsFZb0.s:1858   .text:0000000000000b14 .L0 
     /tmp/ccgsFZb0.s:1860   .text:0000000000000b18 .L0 
     /tmp/ccgsFZb0.s:1866   .text:0000000000000b1c .L0 
     /tmp/ccgsFZb0.s:1867   .text:0000000000000b1c .L0 
     /tmp/ccgsFZb0.s:1869   .text:0000000000000b20 .L0 
     /tmp/ccgsFZb0.s:1875   .text:0000000000000b24 .L0 
     /tmp/ccgsFZb0.s:1876   .text:0000000000000b24 .L0 
     /tmp/ccgsFZb0.s:1879   .text:0000000000000b2c .L0 
     /tmp/ccgsFZb0.s:1880   .text:0000000000000b2c .L0 
     /tmp/ccgsFZb0.s:1882   .text:0000000000000b30 .L0 
     /tmp/ccgsFZb0.s:1886   .text:0000000000000b3c .L0 
     /tmp/ccgsFZb0.s:1887   .text:0000000000000b3c .L0 
     /tmp/ccgsFZb0.s:1889   .text:0000000000000b40 .L0 
     /tmp/ccgsFZb0.s:1891   .text:0000000000000b44 .L0 
     /tmp/ccgsFZb0.s:1893   .text:0000000000000b48 .L0 
     /tmp/ccgsFZb0.s:1899   .text:0000000000000b4c .L0 
     /tmp/ccgsFZb0.s:1900   .text:0000000000000b4c .L0 
     /tmp/ccgsFZb0.s:1905   .text:0000000000000b60 .L0 
     /tmp/ccgsFZb0.s:1906   .text:0000000000000b60 .L0 
     /tmp/ccgsFZb0.s:1908   .text:0000000000000b64 .L0 
     /tmp/ccgsFZb0.s:1909   .text:0000000000000b68 .L0 
     /tmp/ccgsFZb0.s:1911   .text:0000000000000b6c .L0 
     /tmp/ccgsFZb0.s:1912   .text:0000000000000b6c .L0 
     /tmp/ccgsFZb0.s:1914   .text:0000000000000b70 .L0 
     /tmp/ccgsFZb0.s:1917   .text:0000000000000b74 .L0 
     /tmp/ccgsFZb0.s:1919   .text:0000000000000b78 .L0 
     /tmp/ccgsFZb0.s:1921   .text:0000000000000b7c .L0 
     /tmp/ccgsFZb0.s:1986   .bss:0000000000000078 _ZN13SlabAllocator20blocksResponsibleForE
     /tmp/ccgsFZb0.s:1982   .bss:0000000000000070 _ZN13SlabAllocator9startAddrE
     /tmp/ccgsFZb0.s:1993   .data.rel.local:0000000000000000 _ZN13SlabAllocator5namesE
     /tmp/ccgsFZb0.s:1974   .bss:0000000000000000 _ZN13SlabAllocator5sizeNE
GAS LISTING /tmp/ccgsFZb0.s 			page 65


     /tmp/ccgsFZb0.s:1978   .bss:0000000000000068 _ZN13SlabAllocator5cacheE
     /tmp/ccgsFZb0.s:1971   .bss:0000000000000000 .LANCHOR0
     /tmp/ccgsFZb0.s:1990   .data.rel.local:0000000000000000 .LANCHOR1
     /tmp/ccgsFZb0.s:2015   .text:0000000000000b7c .L0 
     /tmp/ccgsFZb0.s:82     .rodata.str1.8:0000000000000000 .LC0
     /tmp/ccgsFZb0.s:132    .text:0000000000000084 .L0 
     /tmp/ccgsFZb0.s:85     .rodata.str1.8:0000000000000008 .LC1
     /tmp/ccgsFZb0.s:134    .text:0000000000000090 .L0 
     /tmp/ccgsFZb0.s:140    .text:00000000000000a0 .L0 
     /tmp/ccgsFZb0.s:88     .rodata.str1.8:0000000000000018 .LC2
     /tmp/ccgsFZb0.s:142    .text:00000000000000ac .L0 
     /tmp/ccgsFZb0.s:147    .text:00000000000000bc .L0 
     /tmp/ccgsFZb0.s:91     .rodata.str1.8:0000000000000030 .LC3
     /tmp/ccgsFZb0.s:149    .text:00000000000000c8 .L0 
     /tmp/ccgsFZb0.s:154    .text:00000000000000d8 .L0 
     /tmp/ccgsFZb0.s:94     .rodata.str1.8:0000000000000048 .LC4
     /tmp/ccgsFZb0.s:156    .text:00000000000000e4 .L0 
     /tmp/ccgsFZb0.s:161    .text:00000000000000f4 .L0 
     /tmp/ccgsFZb0.s:97     .rodata.str1.8:0000000000000058 .LC5
     /tmp/ccgsFZb0.s:163    .text:0000000000000100 .L0 
     /tmp/ccgsFZb0.s:100    .rodata.str1.8:0000000000000078 .LC6
     /tmp/ccgsFZb0.s:168    .text:0000000000000110 .L0 
     /tmp/ccgsFZb0.s:103    .rodata.str1.8:0000000000000098 .LC7
     /tmp/ccgsFZb0.s:188    .text:0000000000000134 .L0 
     /tmp/ccgsFZb0.s:106    .rodata.str1.8:00000000000000a0 .LC8
     /tmp/ccgsFZb0.s:190    .text:0000000000000140 .L0 
     /tmp/ccgsFZb0.s:201    .text:0000000000000158 .L0 
     /tmp/ccgsFZb0.s:224    .rodata.str1.8:00000000000000a8 .LC9
     /tmp/ccgsFZb0.s:268    .text:000000000000019c .L0 
     /tmp/ccgsFZb0.s:279    .text:00000000000001b8 .L0 
     /tmp/ccgsFZb0.s:284    .text:00000000000001c8 .L0 
     /tmp/ccgsFZb0.s:285    .text:00000000000001d0 .L0 
     /tmp/ccgsFZb0.s:227    .rodata.str1.8:00000000000000b8 .LC10
     /tmp/ccgsFZb0.s:287    .text:00000000000001dc .L0 
     /tmp/ccgsFZb0.s:292    .text:00000000000001ec .L0 
     /tmp/ccgsFZb0.s:230    .rodata.str1.8:00000000000000d0 .LC11
     /tmp/ccgsFZb0.s:294    .text:00000000000001f8 .L0 
     /tmp/ccgsFZb0.s:299    .text:0000000000000208 .L0 
     /tmp/ccgsFZb0.s:233    .rodata.str1.8:00000000000000e0 .LC12
     /tmp/ccgsFZb0.s:301    .text:0000000000000214 .L0 
     /tmp/ccgsFZb0.s:314    .text:000000000000022c .L0 
     /tmp/ccgsFZb0.s:316    .text:0000000000000238 .L0 
     /tmp/ccgsFZb0.s:328    .text:0000000000000250 .L0 
     /tmp/ccgsFZb0.s:333    .text:0000000000000260 .L0 
     /tmp/ccgsFZb0.s:236    .rodata.str1.8:00000000000000f0 .LC13
     /tmp/ccgsFZb0.s:335    .text:000000000000026c .L0 
     /tmp/ccgsFZb0.s:348    .text:0000000000000284 .L0 
     /tmp/ccgsFZb0.s:350    .text:0000000000000290 .L0 
     /tmp/ccgsFZb0.s:362    .text:00000000000002a8 .L0 
     /tmp/ccgsFZb0.s:367    .text:00000000000002b8 .L0 
     /tmp/ccgsFZb0.s:239    .rodata.str1.8:0000000000000100 .LC14
     /tmp/ccgsFZb0.s:369    .text:00000000000002c4 .L0 
     /tmp/ccgsFZb0.s:382    .text:00000000000002dc .L0 
     /tmp/ccgsFZb0.s:384    .text:00000000000002e8 .L0 
     /tmp/ccgsFZb0.s:396    .text:0000000000000300 .L0 
     /tmp/ccgsFZb0.s:401    .text:0000000000000310 .L0 
     /tmp/ccgsFZb0.s:242    .rodata.str1.8:0000000000000110 .LC15
GAS LISTING /tmp/ccgsFZb0.s 			page 66


     /tmp/ccgsFZb0.s:403    .text:000000000000031c .L0 
     /tmp/ccgsFZb0.s:1100   .text:00000000000006c0 .L0 
     /tmp/ccgsFZb0.s:1151   .text:0000000000000720 .L0 
     /tmp/ccgsFZb0.s:1245   .text:00000000000007b4 .L0 
     /tmp/ccgsFZb0.s:1252   .text:00000000000007c4 .L0 
     /tmp/ccgsFZb0.s:1214   .rodata.str1.8:0000000000000120 .LC16
     /tmp/ccgsFZb0.s:1284   .text:0000000000000804 .L0 
     /tmp/ccgsFZb0.s:1298   .text:0000000000000820 .L0 
     /tmp/ccgsFZb0.s:1308   .text:0000000000000848 .L0 
     /tmp/ccgsFZb0.s:1580   .text:000000000000099c .L0 
     /tmp/ccgsFZb0.s:1687   .text:0000000000000a10 .L0 
     /tmp/ccgsFZb0.s:1745   .text:0000000000000a60 .L0 
     /tmp/ccgsFZb0.s:1901   .text:0000000000000b50 .L0 
     /tmp/ccgsFZb0.s:59     .text:000000000000004c .L2
     /tmp/ccgsFZb0.s:33     .text:0000000000000020 .L3
     /tmp/ccgsFZb0.s:197    .text:0000000000000158 .L6
     /tmp/ccgsFZb0.s:176    .text:0000000000000124 .L7
     /tmp/ccgsFZb0.s:325    .text:0000000000000250 .L10
     /tmp/ccgsFZb0.s:308    .text:0000000000000228 .L11
     /tmp/ccgsFZb0.s:359    .text:00000000000002a8 .L12
     /tmp/ccgsFZb0.s:342    .text:0000000000000280 .L13
     /tmp/ccgsFZb0.s:393    .text:0000000000000300 .L14
     /tmp/ccgsFZb0.s:376    .text:00000000000002d8 .L15
     /tmp/ccgsFZb0.s:448    .text:0000000000000360 .L18
     /tmp/ccgsFZb0.s:558    .text:000000000000040c .L23
     /tmp/ccgsFZb0.s:565    .text:0000000000000414 .L24
     /tmp/ccgsFZb0.s:540    .text:00000000000003f0 .L22
     /tmp/ccgsFZb0.s:569    .text:0000000000000418 .L21
     /tmp/ccgsFZb0.s:643    .text:0000000000000478 .L31
     /tmp/ccgsFZb0.s:617    .text:0000000000000454 .L28
     /tmp/ccgsFZb0.s:628    .text:0000000000000464 .L29
     /tmp/ccgsFZb0.s:606    .text:0000000000000444 .L27
     /tmp/ccgsFZb0.s:848    .text:0000000000000590 .L43
     /tmp/ccgsFZb0.s:755    .text:0000000000000518 .L45
     /tmp/ccgsFZb0.s:733    .text:00000000000004f8 .L42
     /tmp/ccgsFZb0.s:833    .text:0000000000000578 .L46
     /tmp/ccgsFZb0.s:841    .text:0000000000000584 .L39
     /tmp/ccgsFZb0.s:817    .text:0000000000000560 .L41
     /tmp/ccgsFZb0.s:855    .text:0000000000000594 .L34
     /tmp/ccgsFZb0.s:782    .text:0000000000000534 .L38
     /tmp/ccgsFZb0.s:803    .text:0000000000000548 .L40
     /tmp/ccgsFZb0.s:916    .text:00000000000005e4 .L48
     /tmp/ccgsFZb0.s:898    .text:00000000000005cc .L49
     /tmp/ccgsFZb0.s:941    .text:0000000000000604 .L54
     /tmp/ccgsFZb0.s:964    .text:0000000000000620 .L51
     /tmp/ccgsFZb0.s:947    .text:0000000000000608 .L52
     /tmp/ccgsFZb0.s:922    .text:00000000000005e8 .L47
     /tmp/ccgsFZb0.s:1069   .text:0000000000000698 .L56
     /tmp/ccgsFZb0.s:1053   .text:0000000000000684 .L57
     /tmp/ccgsFZb0.s:1084   .text:00000000000006ac .L63
     /tmp/ccgsFZb0.s:1318   .text:0000000000000864 .L68
     /tmp/ccgsFZb0.s:1294   .text:000000000000081c .L70
     /tmp/ccgsFZb0.s:1488   .text:0000000000000944 .L79
     /tmp/ccgsFZb0.s:1454   .text:0000000000000908 .L73
     /tmp/ccgsFZb0.s:1464   .text:0000000000000914 .L82
     /tmp/ccgsFZb0.s:1471   .text:0000000000000920 .L83
     /tmp/ccgsFZb0.s:1437   .text:00000000000008f4 .L71
GAS LISTING /tmp/ccgsFZb0.s 			page 67


     /tmp/ccgsFZb0.s:1393   .text:00000000000008c0 .L74
     /tmp/ccgsFZb0.s:1415   .text:00000000000008d8 .L76
     /tmp/ccgsFZb0.s:1535   .text:0000000000000974 .L87
     /tmp/ccgsFZb0.s:1595   .text:00000000000009bc .L92
     /tmp/ccgsFZb0.s:1527   .text:0000000000000970 .L86
     /tmp/ccgsFZb0.s:1602   .text:00000000000009c0 .L85
     /tmp/ccgsFZb0.s:1626   .text:00000000000009dc .L94
     /tmp/ccgsFZb0.s:1642   .text:00000000000009e8 .L91
     /tmp/ccgsFZb0.s:1608   .text:00000000000009c4 .L88
     /tmp/ccgsFZb0.s:1634   .text:00000000000009e4 .L90
     /tmp/ccgsFZb0.s:1758   .text:0000000000000a88 .L95
     /tmp/ccgsFZb0.s:1738   .text:0000000000000a54 .L97
     /tmp/ccgsFZb0.s:1828   .text:0000000000000aec .L100
     /tmp/ccgsFZb0.s:1805   .text:0000000000000ac4 .L101
     /tmp/ccgsFZb0.s:1861   .text:0000000000000b1c .L102
     /tmp/ccgsFZb0.s:1838   .text:0000000000000af4 .L103
     /tmp/ccgsFZb0.s:1894   .text:0000000000000b4c .L104
     /tmp/ccgsFZb0.s:1871   .text:0000000000000b24 .L105
     /tmp/ccgsFZb0.s:1929   .rodata.str1.8:0000000000000130 .LC17
     /tmp/ccgsFZb0.s:1932   .rodata.str1.8:0000000000000148 .LC18
     /tmp/ccgsFZb0.s:1935   .rodata.str1.8:0000000000000160 .LC19
     /tmp/ccgsFZb0.s:1938   .rodata.str1.8:0000000000000178 .LC20
     /tmp/ccgsFZb0.s:1941   .rodata.str1.8:0000000000000190 .LC21
     /tmp/ccgsFZb0.s:1944   .rodata.str1.8:00000000000001a8 .LC22
     /tmp/ccgsFZb0.s:1947   .rodata.str1.8:00000000000001c0 .LC23
     /tmp/ccgsFZb0.s:1950   .rodata.str1.8:00000000000001d8 .LC24
     /tmp/ccgsFZb0.s:1953   .rodata.str1.8:00000000000001f0 .LC25
     /tmp/ccgsFZb0.s:1956   .rodata.str1.8:0000000000000208 .LC26
     /tmp/ccgsFZb0.s:1959   .rodata.str1.8:0000000000000220 .LC27
     /tmp/ccgsFZb0.s:1962   .rodata.str1.8:0000000000000238 .LC28
     /tmp/ccgsFZb0.s:1965   .rodata.str1.8:0000000000000250 .LC29
     /tmp/ccgsFZb0.s:5040   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccgsFZb0.s:7492   .debug_str:0000000000000a78 .LASF225
     /tmp/ccgsFZb0.s:7326   .debug_str:00000000000005d7 .LASF226
     /tmp/ccgsFZb0.s:7168   .debug_str:00000000000000ee .LASF227
     /tmp/ccgsFZb0.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccgsFZb0.s:2008   .text:0000000000000b7c .Letext0
     /tmp/ccgsFZb0.s:7136   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccgsFZb0.s:7298   .debug_str:0000000000000504 .LASF0
     /tmp/ccgsFZb0.s:7282   .debug_str:000000000000047c .LASF1
     /tmp/ccgsFZb0.s:7316   .debug_str:0000000000000560 .LASF2
     /tmp/ccgsFZb0.s:7420   .debug_str:00000000000008af .LASF3
     /tmp/ccgsFZb0.s:7232   .debug_str:00000000000002e2 .LASF4
     /tmp/ccgsFZb0.s:7426   .debug_str:00000000000008dc .LASF5
     /tmp/ccgsFZb0.s:7152   .debug_str:0000000000000074 .LASF6
     /tmp/ccgsFZb0.s:7388   .debug_str:00000000000007c9 .LASF7
     /tmp/ccgsFZb0.s:7308   .debug_str:000000000000053a .LASF8
     /tmp/ccgsFZb0.s:7250   .debug_str:0000000000000378 .LASF9
     /tmp/ccgsFZb0.s:7260   .debug_str:00000000000003f7 .LASF10
     /tmp/ccgsFZb0.s:7190   .debug_str:00000000000001bb .LASF11
     /tmp/ccgsFZb0.s:7244   .debug_str:0000000000000345 .LASF12
     /tmp/ccgsFZb0.s:7204   .debug_str:0000000000000215 .LASF13
     /tmp/ccgsFZb0.s:7188   .debug_str:00000000000001ab .LASF14
     /tmp/ccgsFZb0.s:7462   .debug_str:00000000000009be .LASF15
     /tmp/ccgsFZb0.s:7230   .debug_str:00000000000002cc .LASF16
     /tmp/ccgsFZb0.s:7448   .debug_str:000000000000096d .LASF17
     /tmp/ccgsFZb0.s:7476   .debug_str:0000000000000a21 .LASF18
GAS LISTING /tmp/ccgsFZb0.s 			page 68


     /tmp/ccgsFZb0.s:7436   .debug_str:0000000000000912 .LASF19
     /tmp/ccgsFZb0.s:7302   .debug_str:000000000000051c .LASF42
     /tmp/ccgsFZb0.s:7300   .debug_str:0000000000000516 .LASF228
     /tmp/ccgsFZb0.s:7192   .debug_str:00000000000001ca .LASF43
     /tmp/ccgsFZb0.s:7444   .debug_str:000000000000093a .LASF20
     /tmp/ccgsFZb0.s:7552   .debug_str:0000000000000cd1 .LASF22
     /tmp/ccgsFZb0.s:7502   .debug_str:0000000000000b62 .LASF24
     /tmp/ccgsFZb0.s:7384   .debug_str:00000000000007ab .LASF26
     /tmp/ccgsFZb0.s:7518   .debug_str:0000000000000bec .LASF21
     /tmp/ccgsFZb0.s:7516   .debug_str:0000000000000bd9 .LASF23
     /tmp/ccgsFZb0.s:7196   .debug_str:00000000000001ea .LASF121
     /tmp/ccgsFZb0.s:7474   .debug_str:0000000000000a0b .LASF123
     /tmp/ccgsFZb0.s:7486   .debug_str:0000000000000a5a .LASF25
     /tmp/ccgsFZb0.s:7248   .debug_str:000000000000035f .LASF27
     /tmp/ccgsFZb0.s:7270   .debug_str:000000000000042b .LASF28
     /tmp/ccgsFZb0.s:7554   .debug_str:0000000000000ceb .LASF29
     /tmp/ccgsFZb0.s:7224   .debug_str:0000000000000285 .LASF30
     /tmp/ccgsFZb0.s:7268   .debug_str:0000000000000424 .LASF229
     /tmp/ccgsFZb0.s:7458   .debug_str:00000000000009b3 .LASF31
     /tmp/ccgsFZb0.s:7360   .debug_str:0000000000000705 .LASF32
     /tmp/ccgsFZb0.s:7294   .debug_str:00000000000004fa .LASF33
     /tmp/ccgsFZb0.s:7424   .debug_str:00000000000008cb .LASF34
     /tmp/ccgsFZb0.s:7240   .debug_str:0000000000000331 .LASF35
     /tmp/ccgsFZb0.s:7266   .debug_str:0000000000000411 .LASF36
     /tmp/ccgsFZb0.s:7234   .debug_str:00000000000002e8 .LASF37
     /tmp/ccgsFZb0.s:7142   .debug_str:000000000000000d .LASF39
     /tmp/ccgsFZb0.s:7276   .debug_str:0000000000000460 .LASF38
     /tmp/ccgsFZb0.s:7484   .debug_str:0000000000000a45 .LASF40
     /tmp/ccgsFZb0.s:7570   .debug_str:0000000000000d98 .LASF105
     /tmp/ccgsFZb0.s:7272   .debug_str:0000000000000440 .LASF106
     /tmp/ccgsFZb0.s:7334   .debug_str:000000000000061e .LASF41
     /tmp/ccgsFZb0.s:7472   .debug_str:0000000000000a03 .LASF230
     /tmp/ccgsFZb0.s:7582   .debug_str:0000000000000e06 .LASF48
     /tmp/ccgsFZb0.s:7438   .debug_str:000000000000091a .LASF44
     /tmp/ccgsFZb0.s:7186   .debug_str:00000000000001a5 .LASF45
     /tmp/ccgsFZb0.s:7174   .debug_str:0000000000000148 .LASF46
     /tmp/ccgsFZb0.s:7140   .debug_str:0000000000000005 .LASF47
     /tmp/ccgsFZb0.s:7262   .debug_str:0000000000000405 .LASF49
     /tmp/ccgsFZb0.s:7296   .debug_str:00000000000004ff .LASF50
     /tmp/ccgsFZb0.s:7290   .debug_str:00000000000004e4 .LASF51
     /tmp/ccgsFZb0.s:7198   .debug_str:00000000000001f4 .LASF52
     /tmp/ccgsFZb0.s:7456   .debug_str:000000000000099c .LASF53
     /tmp/ccgsFZb0.s:7372   .debug_str:0000000000000754 .LASF54
     /tmp/ccgsFZb0.s:7428   .debug_str:00000000000008e3 .LASF55
     /tmp/ccgsFZb0.s:7150   .debug_str:0000000000000068 .LASF56
     /tmp/ccgsFZb0.s:7534   .debug_str:0000000000000c4c .LASF57
     /tmp/ccgsFZb0.s:7526   .debug_str:0000000000000c1c .LASF58
     /tmp/ccgsFZb0.s:7596   .debug_str:0000000000000e65 .LASF59
     /tmp/ccgsFZb0.s:7256   .debug_str:00000000000003bd .LASF60
     /tmp/ccgsFZb0.s:7146   .debug_str:0000000000000030 .LASF61
     /tmp/ccgsFZb0.s:7370   .debug_str:0000000000000747 .LASF62
     /tmp/ccgsFZb0.s:7212   .debug_str:0000000000000246 .LASF63
     /tmp/ccgsFZb0.s:7216   .debug_str:0000000000000264 .LASF64
     /tmp/ccgsFZb0.s:7304   .debug_str:0000000000000522 .LASF65
     /tmp/ccgsFZb0.s:7378   .debug_str:000000000000077f .LASF66
     /tmp/ccgsFZb0.s:7392   .debug_str:00000000000007e5 .LASF67
     /tmp/ccgsFZb0.s:7202   .debug_str:000000000000020b .LASF68
GAS LISTING /tmp/ccgsFZb0.s 			page 69


     /tmp/ccgsFZb0.s:7208   .debug_str:000000000000022c .LASF69
     /tmp/ccgsFZb0.s:7148   .debug_str:0000000000000040 .LASF70
     /tmp/ccgsFZb0.s:7536   .debug_str:0000000000000c54 .LASF71
     /tmp/ccgsFZb0.s:7514   .debug_str:0000000000000bc1 .LASF72
     /tmp/ccgsFZb0.s:7312   .debug_str:0000000000000553 .LASF73
     /tmp/ccgsFZb0.s:7542   .debug_str:0000000000000c9e .LASF74
     /tmp/ccgsFZb0.s:7478   .debug_str:0000000000000a26 .LASF75
     /tmp/ccgsFZb0.s:7144   .debug_str:000000000000002b .LASF76
     /tmp/ccgsFZb0.s:7588   .debug_str:0000000000000e2f .LASF77
     /tmp/ccgsFZb0.s:7336   .debug_str:0000000000000623 .LASF78
     /tmp/ccgsFZb0.s:7500   .debug_str:0000000000000b58 .LASF79
     /tmp/ccgsFZb0.s:7498   .debug_str:0000000000000b53 .LASF80
     /tmp/ccgsFZb0.s:7556   .debug_str:0000000000000cfc .LASF81
     /tmp/ccgsFZb0.s:7510   .debug_str:0000000000000ba5 .LASF82
     /tmp/ccgsFZb0.s:7344   .debug_str:000000000000068a .LASF83
     /tmp/ccgsFZb0.s:7560   .debug_str:0000000000000d13 .LASF84
     /tmp/ccgsFZb0.s:7164   .debug_str:00000000000000d6 .LASF85
     /tmp/ccgsFZb0.s:7488   .debug_str:0000000000000a66 .LASF86
     /tmp/ccgsFZb0.s:7434   .debug_str:0000000000000907 .LASF87
     /tmp/ccgsFZb0.s:7432   .debug_str:00000000000008f6 .LASF88
     /tmp/ccgsFZb0.s:7440   .debug_str:0000000000000922 .LASF89
     /tmp/ccgsFZb0.s:7210   .debug_str:000000000000023a .LASF90
     /tmp/ccgsFZb0.s:7406   .debug_str:0000000000000851 .LASF91
     /tmp/ccgsFZb0.s:7522   .debug_str:0000000000000c0d .LASF92
     /tmp/ccgsFZb0.s:7364   .debug_str:0000000000000713 .LASF93
     /tmp/ccgsFZb0.s:7218   .debug_str:000000000000026d .LASF94
     /tmp/ccgsFZb0.s:7558   .debug_str:0000000000000d04 .LASF95
     /tmp/ccgsFZb0.s:7466   .debug_str:00000000000009d7 .LASF96
     /tmp/ccgsFZb0.s:7382   .debug_str:000000000000079a .LASF97
     /tmp/ccgsFZb0.s:7280   .debug_str:0000000000000476 .LASF98
     /tmp/ccgsFZb0.s:7396   .debug_str:00000000000007fe .LASF99
     /tmp/ccgsFZb0.s:7584   .debug_str:0000000000000e0d .LASF100
     /tmp/ccgsFZb0.s:7574   .debug_str:0000000000000dab .LASF101
     /tmp/ccgsFZb0.s:7394   .debug_str:00000000000007ef .LASF102
     /tmp/ccgsFZb0.s:7194   .debug_str:00000000000001cf .LASF103
     /tmp/ccgsFZb0.s:7222   .debug_str:0000000000000279 .LASF104
     /tmp/ccgsFZb0.s:7464   .debug_str:00000000000009ca .LASF107
     /tmp/ccgsFZb0.s:7494   .debug_str:0000000000000b3c .LASF108
     /tmp/ccgsFZb0.s:7352   .debug_str:00000000000006bb .LASF109
     /tmp/ccgsFZb0.s:7400   .debug_str:0000000000000817 .LASF110
     /tmp/ccgsFZb0.s:7572   .debug_str:0000000000000da1 .LASF111
     /tmp/ccgsFZb0.s:7468   .debug_str:00000000000009de .LASF112
     /tmp/ccgsFZb0.s:7480   .debug_str:0000000000000a2b .LASF184
     /tmp/ccgsFZb0.s:7528   .debug_str:0000000000000c2f .LASF113
     /tmp/ccgsFZb0.s:7544   .debug_str:0000000000000ca5 .LASF114
     /tmp/ccgsFZb0.s:7284   .debug_str:0000000000000489 .LASF115
     /tmp/ccgsFZb0.s:7402   .debug_str:0000000000000823 .LASF116
     /tmp/ccgsFZb0.s:7318   .debug_str:0000000000000573 .LASF117
     /tmp/ccgsFZb0.s:7532   .debug_str:0000000000000c41 .LASF118
     /tmp/ccgsFZb0.s:7412   .debug_str:0000000000000875 .LASF119
     /tmp/ccgsFZb0.s:7520   .debug_str:0000000000000bf1 .LASF120
     /tmp/ccgsFZb0.s:7362   .debug_str:000000000000070a .LASF122
     /tmp/ccgsFZb0.s:7470   .debug_str:00000000000009e7 .LASF124
     /tmp/ccgsFZb0.s:7410   .debug_str:000000000000086b .LASF125
     /tmp/ccgsFZb0.s:7414   .debug_str:000000000000087e .LASF126
     /tmp/ccgsFZb0.s:7506   .debug_str:0000000000000b8b .LASF127
     /tmp/ccgsFZb0.s:7594   .debug_str:0000000000000e48 .LASF128
GAS LISTING /tmp/ccgsFZb0.s 			page 70


     /tmp/ccgsFZb0.s:7538   .debug_str:0000000000000c60 .LASF129
     /tmp/ccgsFZb0.s:7508   .debug_str:0000000000000b95 .LASF130
     /tmp/ccgsFZb0.s:7602   .debug_str:0000000000000ea1 .LASF131
     /tmp/ccgsFZb0.s:7390   .debug_str:00000000000007dc .LASF132
     /tmp/ccgsFZb0.s:7350   .debug_str:000000000000069d .LASF133
     /tmp/ccgsFZb0.s:7578   .debug_str:0000000000000dd0 .LASF134
     /tmp/ccgsFZb0.s:7330   .debug_str:00000000000005f7 .LASF135
     /tmp/ccgsFZb0.s:7180   .debug_str:000000000000016b .LASF136
     /tmp/ccgsFZb0.s:7540   .debug_str:0000000000000c7f .LASF137
     /tmp/ccgsFZb0.s:7530   .debug_str:0000000000000c3b .LASF138
     /tmp/ccgsFZb0.s:7306   .debug_str:0000000000000535 .LASF139
     /tmp/ccgsFZb0.s:7590   .debug_str:0000000000000e34 .LASF140
     /tmp/ccgsFZb0.s:7550   .debug_str:0000000000000cc8 .LASF141
     /tmp/ccgsFZb0.s:7332   .debug_str:0000000000000619 .LASF142
     /tmp/ccgsFZb0.s:7418   .debug_str:00000000000008aa .LASF143
     /tmp/ccgsFZb0.s:7524   .debug_str:0000000000000c12 .LASF144
     /tmp/ccgsFZb0.s:7386   .debug_str:00000000000007bd .LASF145
     /tmp/ccgsFZb0.s:7182   .debug_str:0000000000000171 .LASF146
     /tmp/ccgsFZb0.s:7348   .debug_str:0000000000000698 .LASF147
     /tmp/ccgsFZb0.s:7452   .debug_str:000000000000098f .LASF148
     /tmp/ccgsFZb0.s:7512   .debug_str:0000000000000baf .LASF150
     /tmp/ccgsFZb0.s:7226   .debug_str:0000000000000296 .LASF149
     /tmp/ccgsFZb0.s:7576   .debug_str:0000000000000dbd .LASF151
     /tmp/ccgsFZb0.s:7162   .debug_str:00000000000000d1 .LASF152
     /tmp/ccgsFZb0.s:7214   .debug_str:0000000000000255 .LASF153
     /tmp/ccgsFZb0.s:7154   .debug_str:000000000000007b .LASF154
     /tmp/ccgsFZb0.s:7366   .debug_str:000000000000071f .LASF155
     /tmp/ccgsFZb0.s:7546   .debug_str:0000000000000cb2 .LASF156
     /tmp/ccgsFZb0.s:7220   .debug_str:0000000000000272 .LASF157
     /tmp/ccgsFZb0.s:7430   .debug_str:00000000000008e8 .LASF158
     /tmp/ccgsFZb0.s:7504   .debug_str:0000000000000b68 .LASF159
     /tmp/ccgsFZb0.s:7442   .debug_str:000000000000092e .LASF160
     /tmp/ccgsFZb0.s:7228   .debug_str:000000000000029e .LASF161
     /tmp/ccgsFZb0.s:7374   .debug_str:0000000000000759 .LASF162
     /tmp/ccgsFZb0.s:7600   .debug_str:0000000000000e78 .LASF163
     /tmp/ccgsFZb0.s:7358   .debug_str:00000000000006f8 .LASF164
     /tmp/ccgsFZb0.s:7356   .debug_str:00000000000006cf .LASF165
     /tmp/ccgsFZb0.s:7450   .debug_str:0000000000000983 .LASF166
     /tmp/ccgsFZb0.s:7566   .debug_str:0000000000000d6a .LASF167
     /tmp/ccgsFZb0.s:7166   .debug_str:00000000000000e1 .LASF168
     /tmp/ccgsFZb0.s:7446   .debug_str:0000000000000945 .LASF169
     /tmp/ccgsFZb0.s:7482   .debug_str:0000000000000a36 .LASF170
     /tmp/ccgsFZb0.s:7184   .debug_str:000000000000017a .LASF171
     /tmp/ccgsFZb0.s:7338   .debug_str:0000000000000629 .LASF172
     /tmp/ccgsFZb0.s:7562   .debug_str:0000000000000d1c .LASF173
     /tmp/ccgsFZb0.s:7592   .debug_str:0000000000000e3f .LASF174
     /tmp/ccgsFZb0.s:7170   .debug_str:000000000000011f .LASF175
     /tmp/ccgsFZb0.s:7496   .debug_str:0000000000000b48 .LASF176
     /tmp/ccgsFZb0.s:7158   .debug_str:0000000000000096 .LASF177
     /tmp/ccgsFZb0.s:7274   .debug_str:0000000000000455 .LASF178
     /tmp/ccgsFZb0.s:7288   .debug_str:00000000000004c1 .LASF179
     /tmp/ccgsFZb0.s:7328   .debug_str:00000000000005ed .LASF180
     /tmp/ccgsFZb0.s:7404   .debug_str:000000000000082d .LASF181
     /tmp/ccgsFZb0.s:7246   .debug_str:0000000000000354 .LASF182
     /tmp/ccgsFZb0.s:7342   .debug_str:0000000000000663 .LASF183
     /tmp/ccgsFZb0.s:7460   .debug_str:00000000000009b8 .LASF185
     /tmp/ccgsFZb0.s:7598   .debug_str:0000000000000e72 .LASF186
GAS LISTING /tmp/ccgsFZb0.s 			page 71


     /tmp/ccgsFZb0.s:7490   .debug_str:0000000000000a6e .LASF187
     /tmp/ccgsFZb0.s:7178   .debug_str:0000000000000156 .LASF188
     /tmp/ccgsFZb0.s:7278   .debug_str:0000000000000467 .LASF189
     /tmp/ccgsFZb0.s:7286   .debug_str:0000000000000493 .LASF190
     /tmp/ccgsFZb0.s:7416   .debug_str:000000000000089b .LASF191
     /tmp/ccgsFZb0.s:7258   .debug_str:00000000000003c9 .LASF192
     /tmp/ccgsFZb0.s:7138   .debug_str:0000000000000000 .LASF193
     /tmp/ccgsFZb0.s:7252   .debug_str:0000000000000388 .LASF194
     /tmp/ccgsFZb0.s:7422   .debug_str:00000000000008bd .LASF195
     /tmp/ccgsFZb0.s:7564   .debug_str:0000000000000d41 .LASF196
     /tmp/ccgsFZb0.s:7408   .debug_str:000000000000085d .LASF197
     /tmp/ccgsFZb0.s:7238   .debug_str:0000000000000308 .LASF198
     /tmp/ccgsFZb0.s:7160   .debug_str:00000000000000c0 .LASF199
     /tmp/ccgsFZb0.s:7322   .debug_str:0000000000000584 .LASF200
     /tmp/ccgsFZb0.s:7242   .debug_str:0000000000000338 .LASF201
     /tmp/ccgsFZb0.s:7340   .debug_str:0000000000000638 .LASF202
     /tmp/ccgsFZb0.s:7200   .debug_str:0000000000000200 .LASF203
     /tmp/ccgsFZb0.s:7324   .debug_str:00000000000005b0 .LASF204
     /tmp/ccgsFZb0.s:7454   .debug_str:0000000000000996 .LASF205
     /tmp/ccgsFZb0.s:7376   .debug_str:0000000000000765 .LASF206
     /tmp/ccgsFZb0.s:7586   .debug_str:0000000000000e15 .LASF207
     /tmp/ccgsFZb0.s:7236   .debug_str:00000000000002ee .LASF208
     /tmp/ccgsFZb0.s:7368   .debug_str:0000000000000729 .LASF209
     /tmp/ccgsFZb0.s:7580   .debug_str:0000000000000ddc .LASF210
     /tmp/ccgsFZb0.s:658    .text:0000000000000484 .LFB45
     /tmp/ccgsFZb0.s:704    .text:00000000000004d8 .LFE45
     /tmp/ccgsFZb0.s:7398   .debug_str:000000000000080e .LASF211
     /tmp/ccgsFZb0.s:6169   .debug_loc:0000000000000000 .LLST9
     /tmp/ccgsFZb0.s:7206   .debug_str:0000000000000225 .LASF212
     /tmp/ccgsFZb0.s:6183   .debug_loc:0000000000000039 .LLST10
     /tmp/ccgsFZb0.s:7380   .debug_str:0000000000000795 .LASF213
     /tmp/ccgsFZb0.s:6201   .debug_loc:0000000000000085 .LLST11
     /tmp/ccgsFZb0.s:681    .text:00000000000004b0 .LVL64
     /tmp/ccgsFZb0.s:687    .text:00000000000004c0 .LVL65
     /tmp/ccgsFZb0.s:591    .text:0000000000000430 .LFB44
     /tmp/ccgsFZb0.s:652    .text:0000000000000484 .LFE44
     /tmp/ccgsFZb0.s:428    .text:0000000000000344 .LFB43
     /tmp/ccgsFZb0.s:463    .text:0000000000000374 .LFE43
     /tmp/ccgsFZb0.s:249    .text:0000000000000180 .LFB42
     /tmp/ccgsFZb0.s:422    .text:0000000000000344 .LFE42
     /tmp/ccgsFZb0.s:6219   .debug_loc:00000000000000d1 .LLST4
     /tmp/ccgsFZb0.s:7346   .debug_str:0000000000000693 .LASF214
     /tmp/ccgsFZb0.s:6237   .debug_loc:000000000000011d .LLST5
     /tmp/ccgsFZb0.s:271    .text:00000000000001ac .LVL24
     /tmp/ccgsFZb0.s:276    .text:00000000000001b8 .LVL25
     /tmp/ccgsFZb0.s:281    .text:00000000000001c8 .LVL26
     /tmp/ccgsFZb0.s:289    .text:00000000000001ec .LVL27
     /tmp/ccgsFZb0.s:296    .text:0000000000000208 .LVL28
     /tmp/ccgsFZb0.s:303    .text:0000000000000224 .LVL29
     /tmp/ccgsFZb0.s:318    .text:0000000000000248 .LVL31
     /tmp/ccgsFZb0.s:330    .text:0000000000000260 .LVL33
     /tmp/ccgsFZb0.s:337    .text:000000000000027c .LVL34
     /tmp/ccgsFZb0.s:352    .text:00000000000002a0 .LVL36
     /tmp/ccgsFZb0.s:364    .text:00000000000002b8 .LVL38
     /tmp/ccgsFZb0.s:371    .text:00000000000002d4 .LVL39
     /tmp/ccgsFZb0.s:386    .text:00000000000002f8 .LVL41
     /tmp/ccgsFZb0.s:398    .text:0000000000000310 .LVL43
GAS LISTING /tmp/ccgsFZb0.s 			page 72


     /tmp/ccgsFZb0.s:405    .text:000000000000032c .LVL44
     /tmp/ccgsFZb0.s:113    .text:0000000000000068 .LFB41
     /tmp/ccgsFZb0.s:220    .text:0000000000000180 .LFE41
     /tmp/ccgsFZb0.s:6244   .debug_loc:0000000000000140 .LLST2
     /tmp/ccgsFZb0.s:172    .text:0000000000000120 .LBB34
     /tmp/ccgsFZb0.s:198    .text:0000000000000158 .LBE34
     /tmp/ccgsFZb0.s:6262   .debug_loc:000000000000018c .LLST3
     /tmp/ccgsFZb0.s:192    .text:0000000000000150 .LVL17
     /tmp/ccgsFZb0.s:137    .text:00000000000000a0 .LVL10
     /tmp/ccgsFZb0.s:144    .text:00000000000000bc .LVL11
     /tmp/ccgsFZb0.s:151    .text:00000000000000d8 .LVL12
     /tmp/ccgsFZb0.s:158    .text:00000000000000f4 .LVL13
     /tmp/ccgsFZb0.s:165    .text:0000000000000110 .LVL14
     /tmp/ccgsFZb0.s:170    .text:0000000000000120 .LVL15
     /tmp/ccgsFZb0.s:203    .text:0000000000000168 .LVL19
     /tmp/ccgsFZb0.s:10     .text:0000000000000000 .LFB40
     /tmp/ccgsFZb0.s:78     .text:0000000000000068 .LFE40
     /tmp/ccgsFZb0.s:6274   .debug_loc:00000000000001c3 .LLST0
     /tmp/ccgsFZb0.s:6292   .debug_loc:000000000000020f .LLST1
     /tmp/ccgsFZb0.s:42     .text:0000000000000034 .LVL3
     /tmp/ccgsFZb0.s:1782   .text:0000000000000aa0 .LFB39
     /tmp/ccgsFZb0.s:1922   .text:0000000000000b7c .LFE39
     /tmp/ccgsFZb0.s:6308   .debug_loc:0000000000000259 .LLST58
     /tmp/ccgsFZb0.s:1806   .text:0000000000000ac4 .LBB111
     /tmp/ccgsFZb0.s:1831   .text:0000000000000aec .LBE111
     /tmp/ccgsFZb0.s:6326   .debug_loc:00000000000002a5 .LLST59
     /tmp/ccgsFZb0.s:1818   .text:0000000000000adc .LVL192
     /tmp/ccgsFZb0.s:1839   .text:0000000000000af4 .LBB113
     /tmp/ccgsFZb0.s:1864   .text:0000000000000b1c .LBE113
     /tmp/ccgsFZb0.s:6333   .debug_loc:00000000000002c8 .LLST60
     /tmp/ccgsFZb0.s:1851   .text:0000000000000b0c .LVL195
     /tmp/ccgsFZb0.s:1872   .text:0000000000000b24 .LBB115
     /tmp/ccgsFZb0.s:1897   .text:0000000000000b4c .LBE115
     /tmp/ccgsFZb0.s:6340   .debug_loc:00000000000002eb .LLST61
     /tmp/ccgsFZb0.s:1884   .text:0000000000000b3c .LVL198
     /tmp/ccgsFZb0.s:1903   .text:0000000000000b60 .LVL200
     /tmp/ccgsFZb0.s:1123   .text:00000000000006ec .LFB38
     /tmp/ccgsFZb0.s:1210   .text:000000000000078c .LFE38
     /tmp/ccgsFZb0.s:6347   .debug_loc:000000000000030e .LLST28
     /tmp/ccgsFZb0.s:7314   .debug_str:000000000000055b .LASF215
     /tmp/ccgsFZb0.s:6365   .debug_loc:000000000000035a .LLST29
     /tmp/ccgsFZb0.s:6383   .debug_loc:00000000000003a6 .LLST30
     /tmp/ccgsFZb0.s:6401   .debug_loc:00000000000003f2 .LLST31
     /tmp/ccgsFZb0.s:6419   .debug_loc:000000000000043e .LLST32
     /tmp/ccgsFZb0.s:1154   .text:0000000000000730 .LVL119
     /tmp/ccgsFZb0.s:1182   .text:0000000000000764 .LVL121
     /tmp/ccgsFZb0.s:1715   .text:0000000000000a34 .LFB37
     /tmp/ccgsFZb0.s:1776   .text:0000000000000aa0 .LFE37
     /tmp/ccgsFZb0.s:7176   .debug_str:0000000000000151 .LASF216
     /tmp/ccgsFZb0.s:6430   .debug_loc:0000000000000474 .LLST56
     /tmp/ccgsFZb0.s:1734   .text:0000000000000a50 .LBB104
     /tmp/ccgsFZb0.s:1759   .text:0000000000000a88 .LBE104
     /tmp/ccgsFZb0.s:6448   .debug_loc:00000000000004c0 .LLST57
     /tmp/ccgsFZb0.s:1750   .text:0000000000000a7c .LVL185
     /tmp/ccgsFZb0.s:1503   .text:0000000000000948 .LFB36
     /tmp/ccgsFZb0.s:1709   .text:0000000000000a34 .LFE36
     /tmp/ccgsFZb0.s:6464   .debug_loc:000000000000050a .LLST42
GAS LISTING /tmp/ccgsFZb0.s 			page 73


     /tmp/ccgsFZb0.s:6486   .debug_loc:0000000000000569 .LLST43
     /tmp/ccgsFZb0.s:7354   .debug_str:00000000000006c7 .LASF217
     /tmp/ccgsFZb0.s:6508   .debug_loc:00000000000005c8 .LLST44
     /tmp/ccgsFZb0.s:1528   .text:0000000000000970 .LBB82
     /tmp/ccgsFZb0.s:7084   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccgsFZb0.s:6519   .debug_loc:00000000000005fe .LLST45
     /tmp/ccgsFZb0.s:6530   .debug_loc:0000000000000634 .LLST46
     /tmp/ccgsFZb0.s:6541   .debug_loc:000000000000066a .LLST47
     /tmp/ccgsFZb0.s:6566   .debug_loc:00000000000006bd .LLST48
     /tmp/ccgsFZb0.s:1543   .text:0000000000000978 .LBB85
     /tmp/ccgsFZb0.s:1560   .text:0000000000000990 .LBE85
     /tmp/ccgsFZb0.s:6582   .debug_loc:0000000000000707 .LLST49
     /tmp/ccgsFZb0.s:1574   .text:0000000000000998 .LBB88
     /tmp/ccgsFZb0.s:1596   .text:00000000000009bc .LBE88
     /tmp/ccgsFZb0.s:6589   .debug_loc:000000000000072a .LLST50
     /tmp/ccgsFZb0.s:1589   .text:00000000000009b4 .LVL164
     /tmp/ccgsFZb0.s:1635   .text:00000000000009e4 .LBB93
     /tmp/ccgsFZb0.s:6611   .debug_loc:000000000000076b .LLST51
     /tmp/ccgsFZb0.s:6618   .debug_loc:000000000000078e .LLST52
     /tmp/ccgsFZb0.s:6643   .debug_loc:00000000000007e1 .LLST53
     /tmp/ccgsFZb0.s:1650   .text:00000000000009ec .LBB96
     /tmp/ccgsFZb0.s:1667   .text:0000000000000a04 .LBE96
     /tmp/ccgsFZb0.s:6659   .debug_loc:000000000000082b .LLST54
     /tmp/ccgsFZb0.s:1681   .text:0000000000000a0c .LBB99
     /tmp/ccgsFZb0.s:1703   .text:0000000000000a34 .LBE99
     /tmp/ccgsFZb0.s:6666   .debug_loc:000000000000084e .LLST55
     /tmp/ccgsFZb0.s:1698   .text:0000000000000a2c .LVL181
     /tmp/ccgsFZb0.s:1344   .text:0000000000000884 .LFB35
     /tmp/ccgsFZb0.s:1497   .text:0000000000000948 .LFE35
     /tmp/ccgsFZb0.s:6688   .debug_loc:000000000000088f .LLST36
     /tmp/ccgsFZb0.s:7568   .debug_str:0000000000000d92 .LASF218
     /tmp/ccgsFZb0.s:6714   .debug_loc:0000000000000901 .LLST37
     /tmp/ccgsFZb0.s:6728   .debug_loc:000000000000093a .LLST38
     /tmp/ccgsFZb0.s:6739   .debug_loc:0000000000000970 .LLST39
     /tmp/ccgsFZb0.s:1378   .text:00000000000008b0 .LBB59
     /tmp/ccgsFZb0.s:1385   .text:00000000000008b4 .LBE59
     /tmp/ccgsFZb0.s:6750   .debug_loc:00000000000009a6 .LLST40
     /tmp/ccgsFZb0.s:1401   .text:00000000000008c8 .LBB61
     /tmp/ccgsFZb0.s:1408   .text:00000000000008cc .LBE61
     /tmp/ccgsFZb0.s:6757   .debug_loc:00000000000009c9 .LLST41
     /tmp/ccgsFZb0.s:1436   .text:00000000000008f4 .LVL145
     /tmp/ccgsFZb0.s:1477   .text:000000000000092c .LVL151
     /tmp/ccgsFZb0.s:1485   .text:0000000000000940 .LVL152
     /tmp/ccgsFZb0.s:994    .text:0000000000000648 .LFB34
     /tmp/ccgsFZb0.s:1117   .text:00000000000006ec .LFE34
     /tmp/ccgsFZb0.s:6764   .debug_loc:00000000000009ec .LLST23
     /tmp/ccgsFZb0.s:7310   .debug_str:000000000000054d .LASF219
     /tmp/ccgsFZb0.s:6784   .debug_loc:0000000000000a3a .LLST24
     /tmp/ccgsFZb0.s:999    .text:0000000000000648 .LBB52
     /tmp/ccgsFZb0.s:1048   .text:0000000000000680 .LBE52
     /tmp/ccgsFZb0.s:6801   .debug_loc:0000000000000a85 .LLST25
     /tmp/ccgsFZb0.s:1049   .text:0000000000000680 .LBB54
     /tmp/ccgsFZb0.s:1073   .text:0000000000000698 .LBE54
     /tmp/ccgsFZb0.s:6812   .debug_loc:0000000000000abb .LLST26
     /tmp/ccgsFZb0.s:6819   .debug_loc:0000000000000ade .LLST27
     /tmp/ccgsFZb0.s:1104   .text:00000000000006d8 .LVL116
     /tmp/ccgsFZb0.s:877    .text:00000000000005ac .LFB33
GAS LISTING /tmp/ccgsFZb0.s 			page 74


     /tmp/ccgsFZb0.s:988    .text:0000000000000648 .LFE33
     /tmp/ccgsFZb0.s:6826   .debug_loc:0000000000000b01 .LLST17
     /tmp/ccgsFZb0.s:6848   .debug_loc:0000000000000b60 .LLST18
     /tmp/ccgsFZb0.s:899    .text:00000000000005cc .LBB46
     /tmp/ccgsFZb0.s:919    .text:00000000000005e4 .LBE46
     /tmp/ccgsFZb0.s:6867   .debug_loc:0000000000000bbc .LLST19
     /tmp/ccgsFZb0.s:905    .text:00000000000005d0 .LBB48
     /tmp/ccgsFZb0.s:917    .text:00000000000005e4 .LBE48
     /tmp/ccgsFZb0.s:6874   .debug_loc:0000000000000bdf .LLST20
     /tmp/ccgsFZb0.s:910    .text:00000000000005dc .LVL88
     /tmp/ccgsFZb0.s:948    .text:0000000000000608 .LBB49
     /tmp/ccgsFZb0.s:967    .text:0000000000000620 .LBE49
     /tmp/ccgsFZb0.s:6881   .debug_loc:0000000000000c02 .LLST21
     /tmp/ccgsFZb0.s:953    .text:000000000000060c .LBB51
     /tmp/ccgsFZb0.s:965    .text:0000000000000620 .LBE51
     /tmp/ccgsFZb0.s:6888   .debug_loc:0000000000000c25 .LLST22
     /tmp/ccgsFZb0.s:958    .text:0000000000000618 .LVL94
     /tmp/ccgsFZb0.s:974    .text:0000000000000630 .LVL96
     /tmp/ccgsFZb0.s:981    .text:0000000000000640 .LVL97
     /tmp/ccgsFZb0.s:710    .text:00000000000004d8 .LFB32
     /tmp/ccgsFZb0.s:871    .text:00000000000005ac .LFE32
     /tmp/ccgsFZb0.s:6895   .debug_loc:0000000000000c48 .LLST12
     /tmp/ccgsFZb0.s:6929   .debug_loc:0000000000000ce0 .LLST13
     /tmp/ccgsFZb0.s:6945   .debug_loc:0000000000000d2a .LLST14
     /tmp/ccgsFZb0.s:6956   .debug_loc:0000000000000d60 .LLST15
     /tmp/ccgsFZb0.s:764    .text:0000000000000520 .LBB39
     /tmp/ccgsFZb0.s:774    .text:0000000000000528 .LBE39
     /tmp/ccgsFZb0.s:6963   .debug_loc:0000000000000d83 .LLST16
     /tmp/ccgsFZb0.s:816    .text:0000000000000560 .LVL78
     /tmp/ccgsFZb0.s:469    .text:0000000000000374 .LFB31
     /tmp/ccgsFZb0.s:585    .text:0000000000000430 .LFE31
     /tmp/ccgsFZb0.s:6970   .debug_loc:0000000000000da6 .LLST6
     /tmp/ccgsFZb0.s:6988   .debug_loc:0000000000000df2 .LLST7
     /tmp/ccgsFZb0.s:536    .text:00000000000003ec .LBB35
     /tmp/ccgsFZb0.s:559    .text:000000000000040c .LBE35
     /tmp/ccgsFZb0.s:7007   .debug_loc:0000000000000e4e .LLST8
     /tmp/ccgsFZb0.s:491    .text:000000000000039c .LVL50
     /tmp/ccgsFZb0.s:501    .text:00000000000003b4 .LVL52
     /tmp/ccgsFZb0.s:1221   .text:000000000000078c .LFB30
     /tmp/ccgsFZb0.s:1338   .text:0000000000000884 .LFE30
     /tmp/ccgsFZb0.s:7320   .debug_str:000000000000057e .LASF220
     /tmp/ccgsFZb0.s:7023   .debug_loc:0000000000000e98 .LLST33
     /tmp/ccgsFZb0.s:7548   .debug_str:0000000000000cbf .LASF221
     /tmp/ccgsFZb0.s:7041   .debug_loc:0000000000000ee4 .LLST34
     /tmp/ccgsFZb0.s:1288   .text:0000000000000814 .LBB56
     /tmp/ccgsFZb0.s:1322   .text:000000000000086c .LBE56
     /tmp/ccgsFZb0.s:7059   .debug_loc:0000000000000f30 .LLST35
     /tmp/ccgsFZb0.s:1306   .text:0000000000000848 .LVL132
     /tmp/ccgsFZb0.s:1314   .text:0000000000000860 .LVL133
     /tmp/ccgsFZb0.s:1242   .text:00000000000007b4 .LVL128
     /tmp/ccgsFZb0.s:1286   .text:0000000000000814 .LVL129
     /tmp/ccgsFZb0.s:7156   .debug_str:000000000000008b .LASF222
     /tmp/ccgsFZb0.s:7292   .debug_str:00000000000004ef .LASF223
     /tmp/ccgsFZb0.s:7172   .debug_str:0000000000000143 .LASF224
     /tmp/ccgsFZb0.s:7254   .debug_str:00000000000003ae .LASF231
     /tmp/ccgsFZb0.s:7264   .debug_str:000000000000040a .LASF232
     /tmp/ccgsFZb0.s:661    .text:0000000000000484 .LVL62
GAS LISTING /tmp/ccgsFZb0.s 			page 75


     /tmp/ccgsFZb0.s:679    .text:00000000000004a8 .LVL63
     /tmp/ccgsFZb0.s:699    .text:00000000000004d0 .LVL67
     /tmp/ccgsFZb0.s:696    .text:00000000000004cc .LVL66
     /tmp/ccgsFZb0.s:252    .text:0000000000000180 .LVL22
     /tmp/ccgsFZb0.s:269    .text:00000000000001a4 .LVL23
     /tmp/ccgsFZb0.s:417    .text:000000000000033c .LVL46
     /tmp/ccgsFZb0.s:307    .text:0000000000000228 .LVL30
     /tmp/ccgsFZb0.s:414    .text:0000000000000338 .LVL45
     /tmp/ccgsFZb0.s:116    .text:0000000000000068 .LVL8
     /tmp/ccgsFZb0.s:135    .text:0000000000000098 .LVL9
     /tmp/ccgsFZb0.s:215    .text:0000000000000178 .LVL21
     /tmp/ccgsFZb0.s:175    .text:0000000000000124 .LVL16
     /tmp/ccgsFZb0.s:212    .text:0000000000000174 .LVL20
     /tmp/ccgsFZb0.s:14     .text:0000000000000000 .LVL0
     /tmp/ccgsFZb0.s:32     .text:0000000000000020 .LVL2
     /tmp/ccgsFZb0.s:70     .text:000000000000005c .LVL6
     /tmp/ccgsFZb0.s:29     .text:000000000000001c .LVL1
     /tmp/ccgsFZb0.s:50     .text:0000000000000040 .LVL4
     /tmp/ccgsFZb0.s:58     .text:000000000000004c .LVL5
     /tmp/ccgsFZb0.s:73     .text:0000000000000060 .LVL7
     /tmp/ccgsFZb0.s:1785   .text:0000000000000aa0 .LVL190
     /tmp/ccgsFZb0.s:1804   .text:0000000000000ac4 .LVL191
     /tmp/ccgsFZb0.s:1915   .text:0000000000000b70 .LVL201
     /tmp/ccgsFZb0.s:1829   .text:0000000000000aec .LVL193
     /tmp/ccgsFZb0.s:1837   .text:0000000000000af4 .LVL194
     /tmp/ccgsFZb0.s:1862   .text:0000000000000b1c .LVL196
     /tmp/ccgsFZb0.s:1870   .text:0000000000000b24 .LVL197
     /tmp/ccgsFZb0.s:1895   .text:0000000000000b4c .LVL199
     /tmp/ccgsFZb0.s:1126   .text:00000000000006ec .LVL117
     /tmp/ccgsFZb0.s:1152   .text:0000000000000728 .LVL118
     /tmp/ccgsFZb0.s:1196   .text:0000000000000778 .LVL123
     /tmp/ccgsFZb0.s:1199   .text:000000000000077c .LVL124
     /tmp/ccgsFZb0.s:1205   .text:0000000000000784 .LVL126
     /tmp/ccgsFZb0.s:1202   .text:0000000000000780 .LVL125
     /tmp/ccgsFZb0.s:1156   .text:0000000000000734 .LVL120
     /tmp/ccgsFZb0.s:1193   .text:0000000000000774 .LVL122
     /tmp/ccgsFZb0.s:1718   .text:0000000000000a34 .LVL182
     /tmp/ccgsFZb0.s:1737   .text:0000000000000a54 .LVL184
     /tmp/ccgsFZb0.s:1771   .text:0000000000000a98 .LVL189
     /tmp/ccgsFZb0.s:1733   .text:0000000000000a50 .LVL183
     /tmp/ccgsFZb0.s:1755   .text:0000000000000a84 .LVL186
     /tmp/ccgsFZb0.s:1757   .text:0000000000000a88 .LVL187
     /tmp/ccgsFZb0.s:1768   .text:0000000000000a94 .LVL188
     /tmp/ccgsFZb0.s:1506   .text:0000000000000948 .LVL154
     /tmp/ccgsFZb0.s:1524   .text:000000000000096c .LVL155
     /tmp/ccgsFZb0.s:1621   .text:00000000000009d4 .LVL169
     /tmp/ccgsFZb0.s:1625   .text:00000000000009dc .LVL170
     /tmp/ccgsFZb0.s:1526   .text:0000000000000970 .LVL156
     /tmp/ccgsFZb0.s:1618   .text:00000000000009d0 .LVL168
     /tmp/ccgsFZb0.s:1601   .text:00000000000009c0 .LVL166
     /tmp/ccgsFZb0.s:1607   .text:00000000000009c4 .LVL167
     /tmp/ccgsFZb0.s:1696   .text:0000000000000a24 .LVL180
     /tmp/ccgsFZb0.s:1594   .text:00000000000009bc .LVL165
     /tmp/ccgsFZb0.s:1534   .text:0000000000000974 .LVL157
     /tmp/ccgsFZb0.s:1558   .text:0000000000000990 .LVL159
     /tmp/ccgsFZb0.s:1581   .text:00000000000009a4 .LVL161
     /tmp/ccgsFZb0.s:1578   .text:000000000000099c .LVL160
GAS LISTING /tmp/ccgsFZb0.s 			page 76


     /tmp/ccgsFZb0.s:1542   .text:0000000000000978 .LVL158
     /tmp/ccgsFZb0.s:1583   .text:00000000000009a8 .LVL162
     /tmp/ccgsFZb0.s:1587   .text:00000000000009ac .LVL163
     /tmp/ccgsFZb0.s:1631   .text:00000000000009e0 .LVL171
     /tmp/ccgsFZb0.s:1633   .text:00000000000009e4 .LVL172
     /tmp/ccgsFZb0.s:1641   .text:00000000000009e8 .LVL173
     /tmp/ccgsFZb0.s:1665   .text:0000000000000a04 .LVL175
     /tmp/ccgsFZb0.s:1688   .text:0000000000000a18 .LVL177
     /tmp/ccgsFZb0.s:1685   .text:0000000000000a10 .LVL176
     /tmp/ccgsFZb0.s:1649   .text:00000000000009ec .LVL174
     /tmp/ccgsFZb0.s:1690   .text:0000000000000a1c .LVL178
     /tmp/ccgsFZb0.s:1694   .text:0000000000000a20 .LVL179
     /tmp/ccgsFZb0.s:1347   .text:0000000000000884 .LVL136
     /tmp/ccgsFZb0.s:1390   .text:00000000000008bc .LVL140
     /tmp/ccgsFZb0.s:1449   .text:0000000000000900 .LVL146
     /tmp/ccgsFZb0.s:1453   .text:0000000000000908 .LVL147
     /tmp/ccgsFZb0.s:1487   .text:0000000000000944 .LVL153
     /tmp/ccgsFZb0.s:1354   .text:000000000000088c .LVL137
     /tmp/ccgsFZb0.s:1394   .text:00000000000008c0 .LVL141
     /tmp/ccgsFZb0.s:1463   .text:0000000000000914 .LVL148
     /tmp/ccgsFZb0.s:1416   .text:00000000000008d8 .LVL144
     /tmp/ccgsFZb0.s:1470   .text:0000000000000920 .LVL149
     /tmp/ccgsFZb0.s:1475   .text:0000000000000924 .LVL150
     /tmp/ccgsFZb0.s:1377   .text:00000000000008b0 .LVL138
     /tmp/ccgsFZb0.s:1383   .text:00000000000008b4 .LVL139
     /tmp/ccgsFZb0.s:1400   .text:00000000000008c8 .LVL142
     /tmp/ccgsFZb0.s:1406   .text:00000000000008cc .LVL143
     /tmp/ccgsFZb0.s:997    .text:0000000000000648 .LVL99
     /tmp/ccgsFZb0.s:1009   .text:0000000000000650 .LVL101
     /tmp/ccgsFZb0.s:1012   .text:0000000000000654 .LVL102
     /tmp/ccgsFZb0.s:1071   .text:0000000000000698 .LVL112
     /tmp/ccgsFZb0.s:1077   .text:000000000000069c .LVL113
     /tmp/ccgsFZb0.s:1095   .text:00000000000006bc .LVL114
     /tmp/ccgsFZb0.s:1099   .text:00000000000006c0 .LVL115
     /tmp/ccgsFZb0.s:1005   .text:000000000000064c .LVL100
     /tmp/ccgsFZb0.s:1046   .text:0000000000000680 .LVL108
     /tmp/ccgsFZb0.s:1054   .text:0000000000000684 .LVL109
     /tmp/ccgsFZb0.s:880    .text:00000000000005ac .LVL86
     /tmp/ccgsFZb0.s:897    .text:00000000000005cc .LVL87
     /tmp/ccgsFZb0.s:936    .text:00000000000005fc .LVL91
     /tmp/ccgsFZb0.s:940    .text:0000000000000604 .LVL92
     /tmp/ccgsFZb0.s:915    .text:00000000000005e4 .LVL89
     /tmp/ccgsFZb0.s:933    .text:00000000000005f8 .LVL90
     /tmp/ccgsFZb0.s:946    .text:0000000000000608 .LVL93
     /tmp/ccgsFZb0.s:963    .text:0000000000000620 .LVL95
     /tmp/ccgsFZb0.s:713    .text:00000000000004d8 .LVL68
     /tmp/ccgsFZb0.s:779    .text:0000000000000530 .LVL74
     /tmp/ccgsFZb0.s:832    .text:0000000000000578 .LVL80
     /tmp/ccgsFZb0.s:836    .text:000000000000057c .LVL81
     /tmp/ccgsFZb0.s:847    .text:0000000000000590 .LVL83
     /tmp/ccgsFZb0.s:854    .text:0000000000000594 .LVL84
     /tmp/ccgsFZb0.s:866    .text:00000000000005a4 .LVL85
     /tmp/ccgsFZb0.s:728    .text:00000000000004f4 .LVL69
     /tmp/ccgsFZb0.s:732    .text:00000000000004f8 .LVL70
     /tmp/ccgsFZb0.s:827    .text:0000000000000570 .LVL79
     /tmp/ccgsFZb0.s:783    .text:0000000000000534 .LVL75
     /tmp/ccgsFZb0.s:840    .text:0000000000000584 .LVL82
GAS LISTING /tmp/ccgsFZb0.s 			page 77


     /tmp/ccgsFZb0.s:804    .text:0000000000000548 .LVL77
     /tmp/ccgsFZb0.s:763    .text:0000000000000520 .LVL72
     /tmp/ccgsFZb0.s:772    .text:0000000000000528 .LVL73
     /tmp/ccgsFZb0.s:472    .text:0000000000000374 .LVL48
     /tmp/ccgsFZb0.s:489    .text:0000000000000394 .LVL49
     /tmp/ccgsFZb0.s:580    .text:0000000000000428 .LVL60
     /tmp/ccgsFZb0.s:499    .text:00000000000003ac .LVL51
     /tmp/ccgsFZb0.s:557    .text:000000000000040c .LVL56
     /tmp/ccgsFZb0.s:562    .text:0000000000000410 .LVL57
     /tmp/ccgsFZb0.s:564    .text:0000000000000414 .LVL58
     /tmp/ccgsFZb0.s:568    .text:0000000000000418 .LVL59
     /tmp/ccgsFZb0.s:535    .text:00000000000003ec .LVL53
     /tmp/ccgsFZb0.s:539    .text:00000000000003f0 .LVL54
     /tmp/ccgsFZb0.s:1224   .text:000000000000078c .LVL127
     /tmp/ccgsFZb0.s:1293   .text:000000000000081c .LVL131
     /tmp/ccgsFZb0.s:1291   .text:0000000000000818 .LVL130
     /tmp/ccgsFZb0.s:1331   .text:0000000000000878 .LVL135
     /tmp/ccgsFZb0.s:2016   .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccgsFZb0.s:729    .text:00000000000004f4 .LBB36
     /tmp/ccgsFZb0.s:739    .text:0000000000000500 .LBE36
     /tmp/ccgsFZb0.s:741    .text:0000000000000500 .LBB44
     /tmp/ccgsFZb0.s:792    .text:000000000000053c .LBE44
     /tmp/ccgsFZb0.s:794    .text:000000000000053c .LBB45
     /tmp/ccgsFZb0.s:851    .text:0000000000000590 .LBE45
     /tmp/ccgsFZb0.s:757    .text:0000000000000518 .LBB38
     /tmp/ccgsFZb0.s:790    .text:000000000000053c .LBE38
     /tmp/ccgsFZb0.s:796    .text:000000000000053c .LBB41
     /tmp/ccgsFZb0.s:849    .text:0000000000000590 .LBE41
     /tmp/ccgsFZb0.s:1372   .text:00000000000008ac .LBB58
     /tmp/ccgsFZb0.s:1418   .text:00000000000008d8 .LBE58
     /tmp/ccgsFZb0.s:1422   .text:00000000000008d8 .LBB63
     /tmp/ccgsFZb0.s:1438   .text:00000000000008f4 .LBE63
     /tmp/ccgsFZb0.s:1457   .text:0000000000000908 .LBB64
     /tmp/ccgsFZb0.s:1494   .text:0000000000000948 .LBE64
     /tmp/ccgsFZb0.s:1564   .text:0000000000000990 .LBE82
     /tmp/ccgsFZb0.s:1566   .text:0000000000000990 .LBB92
     /tmp/ccgsFZb0.s:1604   .text:00000000000009c0 .LBE92
     /tmp/ccgsFZb0.s:1530   .text:0000000000000970 .LBB84
     /tmp/ccgsFZb0.s:1536   .text:0000000000000974 .LBE84
     /tmp/ccgsFZb0.s:1540   .text:0000000000000978 .LBB89
     /tmp/ccgsFZb0.s:1562   .text:0000000000000990 .LBE89
     /tmp/ccgsFZb0.s:1568   .text:0000000000000990 .LBB90
     /tmp/ccgsFZb0.s:1598   .text:00000000000009bc .LBE90
     /tmp/ccgsFZb0.s:1671   .text:0000000000000a04 .LBE93
     /tmp/ccgsFZb0.s:1673   .text:0000000000000a04 .LBB103
     /tmp/ccgsFZb0.s:1707   .text:0000000000000a34 .LBE103
     /tmp/ccgsFZb0.s:1637   .text:00000000000009e4 .LBB95
     /tmp/ccgsFZb0.s:1643   .text:00000000000009e8 .LBE95
     /tmp/ccgsFZb0.s:1647   .text:00000000000009ec .LBB100
     /tmp/ccgsFZb0.s:1669   .text:0000000000000a04 .LBE100
     /tmp/ccgsFZb0.s:1675   .text:0000000000000a04 .LBB101
     /tmp/ccgsFZb0.s:1705   .text:0000000000000a34 .LBE101

UNDEFINED SYMBOLS
_ZN5Buddy4freeEPvm
_ZN11ConsoleUtil5printEPKciS1_
_ZN11ConsoleUtil11printStringEPKc
GAS LISTING /tmp/ccgsFZb0.s 			page 78


HEAP_START_ADDR
_ZN5Buddy5allocEm
_Z6strcpyPKcPc
_ZN5Buddy10initializeEPvm
