GAS LISTING /tmp/ccr33Mli.s 			page 1


   1              		.file	"slabAllocator.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN13SlabAllocator11shrinkCacheEP5Cache
   9              	_ZN13SlabAllocator11shrinkCacheEP5Cache:
  10              	.LFB20:
  11              		.file 1 "src/slabAllocator.cpp"
   1:src/slabAllocator.cpp **** //
   2:src/slabAllocator.cpp **** // Created by os on 12/25/22.
   3:src/slabAllocator.cpp **** //
   4:src/slabAllocator.cpp **** #include "../h/slabAllocator.hpp"
   5:src/slabAllocator.cpp **** 
   6:src/slabAllocator.cpp **** Cache* SlabAllocator::cache = nullptr;
   7:src/slabAllocator.cpp **** Cache* SlabAllocator::sizeN[BUCKET_SIZE] = {nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, n
   8:src/slabAllocator.cpp **** const char* SlabAllocator::names[13] = {"Buffer Cache No. 0", "Buffer Cache No. 1", "Buffer Cache N
   9:src/slabAllocator.cpp **** void* SlabAllocator::startAddr = nullptr;
  10:src/slabAllocator.cpp **** uint64 SlabAllocator::blocksResponsibleFor = 0;
  11:src/slabAllocator.cpp **** 
  12:src/slabAllocator.cpp **** void SlabAllocator::initialize(void* space, uint64 blockNum) {
  13:src/slabAllocator.cpp ****     Buddy::initialize(space, blockNum);
  14:src/slabAllocator.cpp ****     startAddr = space;
  15:src/slabAllocator.cpp ****     blocksResponsibleFor = blockNum;
  16:src/slabAllocator.cpp ****     cache = (Cache*)SLAB_META_ADDR_CONST;
  17:src/slabAllocator.cpp ****     cache->ctor = nullptr;
  18:src/slabAllocator.cpp ****     cache->dtor = nullptr;
  19:src/slabAllocator.cpp ****     cache->emptyHead = nullptr;
  20:src/slabAllocator.cpp ****     cache->partialHead = nullptr;
  21:src/slabAllocator.cpp ****     cache->fullHead = nullptr;
  22:src/slabAllocator.cpp ****     cache->objectSize = sizeof(Cache);
  23:src/slabAllocator.cpp ****     cache->slabSize = DEFAULT_SLAB_SIZE;
  24:src/slabAllocator.cpp ****     strcpy("Main Cache", cache->name);
  25:src/slabAllocator.cpp **** 
  26:src/slabAllocator.cpp ****     for(int i=0;i<BUCKET_SIZE;i++){
  27:src/slabAllocator.cpp ****         sizeN[i] = SlabAllocator::createCache(names[i], 2<<i, nullptr, nullptr);
  28:src/slabAllocator.cpp ****     }
  29:src/slabAllocator.cpp **** }
  30:src/slabAllocator.cpp **** 
  31:src/slabAllocator.cpp **** bool SlabAllocator::allocateSlab(Cache *cache) {
  32:src/slabAllocator.cpp ****     Slab* slab = (Slab*)Buddy::alloc(cache->slabSize);
  33:src/slabAllocator.cpp ****     if(!slab)
  34:src/slabAllocator.cpp ****         return false;
  35:src/slabAllocator.cpp ****     SlabAllocator::insertIntoList(cache->emptyHead, slab);
  36:src/slabAllocator.cpp ****     slab->totalNumOfSlots = slab->numOfFreeSlots = ((cache->slabSize << BLOCK_SIZE_BITS) - sizeof(S
  37:src/slabAllocator.cpp ****     slab->objectOffset = (void*)((uint64)slab + sizeof(Slab) + slab->totalNumOfSlots/8 + 1);
  38:src/slabAllocator.cpp ****     slab->allocated = (char*)((uint64)slab + sizeof(Slab));
  39:src/slabAllocator.cpp ****     slab->parent = cache;
  40:src/slabAllocator.cpp ****     for(uint64 i=0;i<slab->totalNumOfSlots/8 + 1;i++)
  41:src/slabAllocator.cpp ****         slab->allocated[i] = 0;
  42:src/slabAllocator.cpp **** 
  43:src/slabAllocator.cpp ****     if(cache->ctor) {
  44:src/slabAllocator.cpp ****         for (uint64 i = 0; i < slab->totalNumOfSlots; i++) {
  45:src/slabAllocator.cpp ****             cache->ctor((void *) ((uint64) slab->objectOffset + i * slab->parent->objectSize));
  46:src/slabAllocator.cpp ****         }
  47:src/slabAllocator.cpp ****     }
GAS LISTING /tmp/ccr33Mli.s 			page 2


  48:src/slabAllocator.cpp ****     return true;
  49:src/slabAllocator.cpp **** }
  50:src/slabAllocator.cpp **** 
  51:src/slabAllocator.cpp **** void* SlabAllocator::allocateSlot(Slab *slab) {
  52:src/slabAllocator.cpp ****     for(uint64 i=0; i<slab->totalNumOfSlots; i++){
  53:src/slabAllocator.cpp ****         if(!(slab->allocated[i/8] & (1<<(7 - i%8)))){
  54:src/slabAllocator.cpp ****             slab->allocated[i/8] |= (1<<(7 - i%8));
  55:src/slabAllocator.cpp ****             Slab* &headFrom = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead
  56:src/slabAllocator.cpp ****             slab->numOfFreeSlots--;
  57:src/slabAllocator.cpp ****             Slab* &headTo = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
  58:src/slabAllocator.cpp **** 
  59:src/slabAllocator.cpp ****             if(headTo != headFrom)
  60:src/slabAllocator.cpp ****                 SlabAllocator::move(headFrom, headTo, slab);
  61:src/slabAllocator.cpp **** 
  62:src/slabAllocator.cpp ****             return (void*)((uint64)slab->objectOffset + i*slab->parent->objectSize);
  63:src/slabAllocator.cpp ****         }
  64:src/slabAllocator.cpp ****     }
  65:src/slabAllocator.cpp ****     return nullptr;
  66:src/slabAllocator.cpp **** }
  67:src/slabAllocator.cpp **** 
  68:src/slabAllocator.cpp **** void* SlabAllocator::allocateObject(Cache *cache) {
  69:src/slabAllocator.cpp ****     void* ret = SlabAllocator::allocateFromList(cache->partialHead);
  70:src/slabAllocator.cpp ****     if(ret){
  71:src/slabAllocator.cpp ****         return ret;
  72:src/slabAllocator.cpp ****     }
  73:src/slabAllocator.cpp ****     ret = SlabAllocator::allocateFromList(cache->emptyHead);
  74:src/slabAllocator.cpp ****     if(ret){
  75:src/slabAllocator.cpp ****         return ret;
  76:src/slabAllocator.cpp ****     }
  77:src/slabAllocator.cpp ****     if(!SlabAllocator::allocateSlab(cache))
  78:src/slabAllocator.cpp ****         return nullptr;
  79:src/slabAllocator.cpp **** 
  80:src/slabAllocator.cpp ****     ret = SlabAllocator::allocateSlot(cache->emptyHead);
  81:src/slabAllocator.cpp **** 
  82:src/slabAllocator.cpp ****     return ret;
  83:src/slabAllocator.cpp **** }
  84:src/slabAllocator.cpp **** 
  85:src/slabAllocator.cpp **** void* SlabAllocator::allocateBuffer(size_t size) {
  86:src/slabAllocator.cpp ****     uint64 level = Buddy::getDeg(Buddy::ceil(size));
  87:src/slabAllocator.cpp ****     if(level < CACHE_LOWER_BOUND || level > CACHE_UPPER_BOUND)
  88:src/slabAllocator.cpp ****         return nullptr;
  89:src/slabAllocator.cpp ****     else
  90:src/slabAllocator.cpp ****         level -= CACHE_LOWER_BOUND;
  91:src/slabAllocator.cpp ****     return SlabAllocator::allocateObject(sizeN[level]);
  92:src/slabAllocator.cpp **** }
  93:src/slabAllocator.cpp **** 
  94:src/slabAllocator.cpp **** void SlabAllocator::freeSlot(Slab *slab, uint64 index) {
  95:src/slabAllocator.cpp ****     if(slab->allocated[index/8] & (1<<(7 - index%8))) {
  96:src/slabAllocator.cpp ****         slab->allocated[index/8] &= ~(1<<(7 - index%8));
  97:src/slabAllocator.cpp ****         Slab *&headFrom = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
  98:src/slabAllocator.cpp ****         slab->numOfFreeSlots++;
  99:src/slabAllocator.cpp ****         Slab *&headTo = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead;
 100:src/slabAllocator.cpp **** 
 101:src/slabAllocator.cpp ****         if(slab->isEmpty()) {
 102:src/slabAllocator.cpp ****             SlabAllocator::removeFromList(headFrom, slab);
 103:src/slabAllocator.cpp ****             Buddy::free(slab, slab->parent->slabSize);
 104:src/slabAllocator.cpp ****         }
GAS LISTING /tmp/ccr33Mli.s 			page 3


 105:src/slabAllocator.cpp ****         else
 106:src/slabAllocator.cpp ****             if (headTo != headFrom)
 107:src/slabAllocator.cpp ****                 SlabAllocator::move(headFrom, headTo, slab);
 108:src/slabAllocator.cpp ****     }
 109:src/slabAllocator.cpp **** }
 110:src/slabAllocator.cpp **** 
 111:src/slabAllocator.cpp **** bool SlabAllocator::freeObject(Cache* cache, const void *addr) {
 112:src/slabAllocator.cpp ****     if(cache->dtor)
 113:src/slabAllocator.cpp ****         cache->dtor((void*)addr);
 114:src/slabAllocator.cpp ****     if(cache->ctor)
 115:src/slabAllocator.cpp ****         cache->ctor((void*)addr);
 116:src/slabAllocator.cpp **** 
 117:src/slabAllocator.cpp ****     bool deleted = SlabAllocator::freeFromList(cache->fullHead, addr);
 118:src/slabAllocator.cpp ****     if(deleted)
 119:src/slabAllocator.cpp ****         return deleted;
 120:src/slabAllocator.cpp **** 
 121:src/slabAllocator.cpp ****     deleted = SlabAllocator::freeFromList(cache->partialHead, addr);
 122:src/slabAllocator.cpp **** 
 123:src/slabAllocator.cpp ****     return deleted;
 124:src/slabAllocator.cpp **** }
 125:src/slabAllocator.cpp **** 
 126:src/slabAllocator.cpp **** void SlabAllocator::freeBuffer(const void *addr) {
 127:src/slabAllocator.cpp ****     for(int i=0;i<BUCKET_SIZE;i++)
 128:src/slabAllocator.cpp ****         if(SlabAllocator::freeObject(sizeN[i], addr))
 129:src/slabAllocator.cpp ****             return;
 130:src/slabAllocator.cpp **** }
 131:src/slabAllocator.cpp **** 
 132:src/slabAllocator.cpp **** Cache* SlabAllocator::createCache(const char *name, size_t size, void (*ctor)(void *), void (*dtor)
 133:src/slabAllocator.cpp ****     Cache* ret = (Cache*)SlabAllocator::allocateObject(SlabAllocator::cache);
 134:src/slabAllocator.cpp ****     ret->ctor = ctor;
 135:src/slabAllocator.cpp ****     ret->dtor = dtor;
 136:src/slabAllocator.cpp ****     ret->emptyHead = ret->partialHead = ret->fullHead = nullptr;
 137:src/slabAllocator.cpp ****     ret->objectSize = size;
 138:src/slabAllocator.cpp ****     ret->slabSize = DEFAULT_SLAB_SIZE;
 139:src/slabAllocator.cpp ****     strcpy(name, ret->name);
 140:src/slabAllocator.cpp ****     return ret;
 141:src/slabAllocator.cpp **** }
 142:src/slabAllocator.cpp **** 
 143:src/slabAllocator.cpp **** void SlabAllocator::deleteCache(Cache* &cache) {
 144:src/slabAllocator.cpp ****     deleteList(cache->fullHead);
 145:src/slabAllocator.cpp ****     deleteList(cache->partialHead);
 146:src/slabAllocator.cpp ****     deleteList(cache->emptyHead);
 147:src/slabAllocator.cpp ****     SlabAllocator::freeObject(SlabAllocator::cache, cache);
 148:src/slabAllocator.cpp ****     cache = nullptr;
 149:src/slabAllocator.cpp **** }
 150:src/slabAllocator.cpp **** 
 151:src/slabAllocator.cpp **** int SlabAllocator::shrinkCache(Cache *cache) {
  12              		.loc 1 151 46
  13              		.cfi_startproc
  14              	.LVL0:
  15 0000 130101FE 		addi	sp,sp,-32
  16              		.cfi_def_cfa_offset 32
  17 0004 233C1100 		sd	ra,24(sp)
  18 0008 23388100 		sd	s0,16(sp)
  19 000c 23349100 		sd	s1,8(sp)
  20 0010 23302101 		sd	s2,0(sp)
  21              		.cfi_offset 1, -8
GAS LISTING /tmp/ccr33Mli.s 			page 4


  22              		.cfi_offset 8, -16
  23              		.cfi_offset 9, -24
  24              		.cfi_offset 18, -32
  25 0014 13040102 		addi	s0,sp,32
  26              		.cfi_def_cfa 8, 0
  27 0018 93040500 		mv	s1,a0
 152:src/slabAllocator.cpp ****     int ret = 0;
  28              		.loc 1 152 5
  29              	.LVL1:
  30              		.loc 1 152 9 is_stmt 0
  31 001c 13090000 		li	s2,0
  32              	.LVL2:
  33              	.L3:
 153:src/slabAllocator.cpp ****     while(cache->emptyHead){
  34              		.loc 1 153 5 is_stmt 1
  35              		.loc 1 153 18
  36 0020 03B50406 		ld	a0,96(s1)
  37 0024 63040502 		beqz	a0,.L2
 154:src/slabAllocator.cpp ****         Buddy::free(cache->emptyHead, cache->slabSize);
  38              		.loc 1 154 9
  39              		.loc 1 154 20 is_stmt 0
  40 0028 83B58404 		ld	a1,72(s1)
  41 002c 97000000 		call	_ZN5Buddy4freeEPvm@plt
  41      E7800000 
  42              	.LVL3:
 155:src/slabAllocator.cpp ****         ret += cache->emptyHead->totalNumOfSlots;
  43              		.loc 1 155 9 is_stmt 1
  44              		.loc 1 155 23 is_stmt 0
  45 0034 83B70406 		ld	a5,96(s1)
  46              		.loc 1 155 34
  47 0038 03B78701 		ld	a4,24(a5)
  48              		.loc 1 155 13
  49 003c 3B092701 		addw	s2,a4,s2
  50              	.LVL4:
 156:src/slabAllocator.cpp ****         cache->emptyHead = cache->emptyHead->next;
  51              		.loc 1 156 9 is_stmt 1
  52              		.loc 1 156 46 is_stmt 0
  53 0040 83B78700 		ld	a5,8(a5)
  54              		.loc 1 156 26
  55 0044 23B0F406 		sd	a5,96(s1)
 153:src/slabAllocator.cpp ****         Buddy::free(cache->emptyHead, cache->slabSize);
  56              		.loc 1 153 5
  57 0048 6FF09FFD 		j	.L3
  58              	.LVL5:
  59              	.L2:
 157:src/slabAllocator.cpp ****     }
 158:src/slabAllocator.cpp ****     return ret;
  60              		.loc 1 158 5 is_stmt 1
 159:src/slabAllocator.cpp **** }
  61              		.loc 1 159 1 is_stmt 0
  62 004c 13050900 		mv	a0,s2
  63 0050 83308101 		ld	ra,24(sp)
  64              		.cfi_restore 1
  65 0054 03340101 		ld	s0,16(sp)
  66              		.cfi_restore 8
  67              		.cfi_def_cfa 2, 32
  68 0058 83348100 		ld	s1,8(sp)
GAS LISTING /tmp/ccr33Mli.s 			page 5


  69              		.cfi_restore 9
  70              	.LVL6:
  71 005c 03390100 		ld	s2,0(sp)
  72              		.cfi_restore 18
  73              	.LVL7:
  74 0060 13010102 		addi	sp,sp,32
  75              		.cfi_def_cfa_offset 0
  76 0064 67800000 		jr	ra
  77              		.cfi_endproc
  78              	.LFE20:
  80              		.section	.rodata.str1.8,"aMS",@progbits,1
  81              		.align	3
  82              	.LC0:
  83 0000 0A00     		.string	"\n"
  84 0002 00000000 		.align	3
  84      0000
  85              	.LC1:
  86 0008 536C6162 		.string	"Slab address:"
  86      20616464 
  86      72657373 
  86      3A00
  87 0016 0000     		.align	3
  88              	.LC2:
  89 0018 4E756D62 		.string	"Number of slots:"
  89      6572206F 
  89      6620736C 
  89      6F74733A 
  89      00
  90 0029 00000000 		.align	3
  90      000000
  91              	.LC3:
  92 0030 4E756D62 		.string	"Number of free slots:"
  92      6572206F 
  92      66206672 
  92      65652073 
  92      6C6F7473 
  93 0046 0000     		.align	3
  94              	.LC4:
  95 0048 536C6162 		.string	"Slab object size:"
  95      206F626A 
  95      65637420 
  95      73697A65 
  95      3A00
  96 005a 00000000 		.align	3
  96      0000
  97              	.LC5:
  98 0060 4F626A65 		.string	"Object offset:"
  98      6374206F 
  98      66667365 
  98      743A00
  99 006f 00       		.align	3
 100              	.LC6:
 101 0070 536C6162 		.string	"Slab allocated array address:"
 101      20616C6C 
 101      6F636174 
 101      65642061 
 101      72726179 
GAS LISTING /tmp/ccr33Mli.s 			page 6


 102 008e 0000     		.align	3
 103              	.LC7:
 104 0090 416C6C6F 		.string	"Allocated status array:\n"
 104      63617465 
 104      64207374 
 104      61747573 
 104      20617272 
 105 00a9 00000000 		.align	3
 105      000000
 106              	.LC8:
 107 00b0 2000     		.string	" "
 108 00b2 00000000 		.align	3
 108      0000
 109              	.LC9:
 110 00b8 00       		.string	""
 111              		.text
 112              		.align	2
 113              		.globl	_ZN13SlabAllocator9printSlabEP4Slab
 115              	_ZN13SlabAllocator9printSlabEP4Slab:
 116              	.LFB21:
 160:src/slabAllocator.cpp **** 
 161:src/slabAllocator.cpp **** void SlabAllocator::printSlab(Slab *slab) {
 117              		.loc 1 161 43 is_stmt 1
 118              		.cfi_startproc
 119              	.LVL8:
 162:src/slabAllocator.cpp ****     if(slab) {
 120              		.loc 1 162 5
 121              	.LBB34:
 122 0068 63000514 		beqz	a0,.L10
 123              	.LBE34:
 161:src/slabAllocator.cpp ****     if(slab) {
 124              		.loc 1 161 43 is_stmt 0
 125 006c 130101FE 		addi	sp,sp,-32
 126              		.cfi_def_cfa_offset 32
 127 0070 233C1100 		sd	ra,24(sp)
 128 0074 23388100 		sd	s0,16(sp)
 129 0078 23349100 		sd	s1,8(sp)
 130 007c 23302101 		sd	s2,0(sp)
 131              		.cfi_offset 1, -8
 132              		.cfi_offset 8, -16
 133              		.cfi_offset 9, -24
 134              		.cfi_offset 18, -32
 135 0080 13040102 		addi	s0,sp,32
 136              		.cfi_def_cfa 8, 0
 137 0084 13090500 		mv	s2,a0
 138              	.LBB37:
 139              	.LBB35:
 163:src/slabAllocator.cpp ****         ConsoleUtil::print("Slab address:", (uint64) slab, "\n");
 140              		.loc 1 163 9 is_stmt 1
 141              		.loc 1 163 27 is_stmt 0
 142 0088 17060000 		lla	a2,.LC0
 142      13060600 
 143 0090 9B050500 		sext.w	a1,a0
 144 0094 17050000 		lla	a0,.LC1
 144      13050500 
 145              	.LVL9:
 146 009c 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_@plt
GAS LISTING /tmp/ccr33Mli.s 			page 7


 146      E7800000 
 147              	.LVL10:
 164:src/slabAllocator.cpp ****         ConsoleUtil::print("Number of slots:", (uint64) slab->totalNumOfSlots, "\n");
 148              		.loc 1 164 9 is_stmt 1
 149              		.loc 1 164 27 is_stmt 0
 150 00a4 17060000 		lla	a2,.LC0
 150      13060600 
 151 00ac 83258901 		lw	a1,24(s2)
 152 00b0 17050000 		lla	a0,.LC2
 152      13050500 
 153 00b8 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_@plt
 153      E7800000 
 154              	.LVL11:
 165:src/slabAllocator.cpp ****         ConsoleUtil::print("Number of free slots:", (uint64) slab->numOfFreeSlots, "\n");
 155              		.loc 1 165 9 is_stmt 1
 156              		.loc 1 165 27 is_stmt 0
 157 00c0 17060000 		lla	a2,.LC0
 157      13060600 
 158 00c8 83250901 		lw	a1,16(s2)
 159 00cc 17050000 		lla	a0,.LC3
 159      13050500 
 160 00d4 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_@plt
 160      E7800000 
 161              	.LVL12:
 166:src/slabAllocator.cpp ****         ConsoleUtil::print("Slab object size:", (uint64) sizeof(Slab), "\n");
 162              		.loc 1 166 9 is_stmt 1
 163              		.loc 1 166 27 is_stmt 0
 164 00dc 17060000 		lla	a2,.LC0
 164      13060600 
 165 00e4 93058003 		li	a1,56
 166 00e8 17050000 		lla	a0,.LC4
 166      13050500 
 167 00f0 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_@plt
 167      E7800000 
 168              	.LVL13:
 167:src/slabAllocator.cpp ****         ConsoleUtil::print("Object offset:", (uint64) slab->objectOffset, "\n");
 169              		.loc 1 167 9 is_stmt 1
 170              		.loc 1 167 27 is_stmt 0
 171 00f8 17060000 		lla	a2,.LC0
 171      13060600 
 172 0100 83258902 		lw	a1,40(s2)
 173 0104 17050000 		lla	a0,.LC5
 173      13050500 
 174 010c 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_@plt
 174      E7800000 
 175              	.LVL14:
 168:src/slabAllocator.cpp ****         ConsoleUtil::print("Slab allocated array address:", (uint64) slab->allocated, "\n");
 176              		.loc 1 168 9 is_stmt 1
 177              		.loc 1 168 27 is_stmt 0
 178 0114 17060000 		lla	a2,.LC0
 178      13060600 
 179 011c 83250902 		lw	a1,32(s2)
 180 0120 17050000 		lla	a0,.LC6
 180      13050500 
 181 0128 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_@plt
 181      E7800000 
 182              	.LVL15:
GAS LISTING /tmp/ccr33Mli.s 			page 8


 169:src/slabAllocator.cpp ****         ConsoleUtil::printString("Allocated status array:\n");
 183              		.loc 1 169 9 is_stmt 1
 184              		.loc 1 169 33 is_stmt 0
 185 0130 17050000 		lla	a0,.LC7
 185      13050500 
 186 0138 97000000 		call	_ZN11ConsoleUtil11printStringEPKc@plt
 186      E7800000 
 187              	.LVL16:
 170:src/slabAllocator.cpp ****         for (uint64 i = 0; i < slab->totalNumOfSlots/8 + 1; i++) {
 188              		.loc 1 170 9 is_stmt 1
 189              	.LBB36:
 190              		.loc 1 170 21 is_stmt 0
 191 0140 93040000 		li	s1,0
 192 0144 6F00C002 		j	.L8
 193              	.LVL17:
 194              	.L13:
 171:src/slabAllocator.cpp ****             ConsoleUtil::print("", slab->allocated[i], " ");
 195              		.loc 1 171 13 is_stmt 1 discriminator 2
 196              		.loc 1 171 42 is_stmt 0 discriminator 2
 197 0148 83370902 		ld	a5,32(s2)
 198              		.loc 1 171 53 discriminator 2
 199 014c B3879700 		add	a5,a5,s1
 200              		.loc 1 171 31 discriminator 2
 201 0150 17060000 		lla	a2,.LC8
 201      13060600 
 202 0158 83C50700 		lbu	a1,0(a5)
 203 015c 17050000 		lla	a0,.LC9
 203      13050500 
 204 0164 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_@plt
 204      E7800000 
 205              	.LVL18:
 170:src/slabAllocator.cpp ****         for (uint64 i = 0; i < slab->totalNumOfSlots/8 + 1; i++) {
 206              		.loc 1 170 9 is_stmt 1 discriminator 2
 207 016c 93841400 		addi	s1,s1,1
 208              	.LVL19:
 209              	.L8:
 170:src/slabAllocator.cpp ****         for (uint64 i = 0; i < slab->totalNumOfSlots/8 + 1; i++) {
 210              		.loc 1 170 30 discriminator 3
 170:src/slabAllocator.cpp ****         for (uint64 i = 0; i < slab->totalNumOfSlots/8 + 1; i++) {
 211              		.loc 1 170 38 is_stmt 0 discriminator 3
 212 0170 83378901 		ld	a5,24(s2)
 170:src/slabAllocator.cpp ****         for (uint64 i = 0; i < slab->totalNumOfSlots/8 + 1; i++) {
 213              		.loc 1 170 53 discriminator 3
 214 0174 93D73700 		srli	a5,a5,3
 170:src/slabAllocator.cpp ****         for (uint64 i = 0; i < slab->totalNumOfSlots/8 + 1; i++) {
 215              		.loc 1 170 56 discriminator 3
 216 0178 93871700 		addi	a5,a5,1
 170:src/slabAllocator.cpp ****         for (uint64 i = 0; i < slab->totalNumOfSlots/8 + 1; i++) {
 217              		.loc 1 170 30 discriminator 3
 218 017c E3E6F4FC 		bgtu	a5,s1,.L13
 219              	.LBE36:
 172:src/slabAllocator.cpp ****         }
 173:src/slabAllocator.cpp ****         ConsoleUtil::printString("\n");
 220              		.loc 1 173 9 is_stmt 1
 221              		.loc 1 173 33 is_stmt 0
 222 0180 17050000 		lla	a0,.LC0
 222      13050500 
GAS LISTING /tmp/ccr33Mli.s 			page 9


 223 0188 97000000 		call	_ZN11ConsoleUtil11printStringEPKc@plt
 223      E7800000 
 224              	.LVL20:
 225              	.LBE35:
 226              	.LBE37:
 174:src/slabAllocator.cpp ****     }
 175:src/slabAllocator.cpp **** }
 227              		.loc 1 175 1
 228 0190 83308101 		ld	ra,24(sp)
 229              		.cfi_restore 1
 230 0194 03340101 		ld	s0,16(sp)
 231              		.cfi_restore 8
 232              		.cfi_def_cfa 2, 32
 233 0198 83348100 		ld	s1,8(sp)
 234              		.cfi_restore 9
 235              	.LVL21:
 236 019c 03390100 		ld	s2,0(sp)
 237              		.cfi_restore 18
 238              	.LVL22:
 239 01a0 13010102 		addi	sp,sp,32
 240              		.cfi_def_cfa_offset 0
 241 01a4 67800000 		jr	ra
 242              	.LVL23:
 243              	.L10:
 244 01a8 67800000 		ret
 245              		.cfi_endproc
 246              	.LFE21:
 248              		.section	.rodata.str1.8
 249 00b9 00000000 		.align	3
 249      000000
 250              	.LC10:
 251 00c0 43616368 		.string	"Cache name: "
 251      65206E61 
 251      6D653A20 
 251      00
 252 00cd 000000   		.align	3
 253              	.LC11:
 254 00d0 48454150 		.string	"HEAP_START_ADDR: "
 254      5F535441 
 254      52545F41 
 254      4444523A 
 254      2000
 255 00e2 00000000 		.align	3
 255      0000
 256              	.LC12:
 257 00e8 43616368 		.string	"Cache address: "
 257      65206164 
 257      64726573 
 257      733A2000 
 258              		.align	3
 259              	.LC13:
 260 00f8 43616368 		.string	"Cache slab size: "
 260      6520736C 
 260      61622073 
 260      697A653A 
 260      2000
 261 010a 00000000 		.align	3
GAS LISTING /tmp/ccr33Mli.s 			page 10


 261      0000
 262              	.LC14:
 263 0110 43616368 		.string	"Cache object size: "
 263      65206F62 
 263      6A656374 
 263      2073697A 
 263      653A2000 
 264 0124 00000000 		.align	3
 265              	.LC15:
 266 0128 456D7074 		.string	"Empty head: "
 266      79206865 
 266      61643A20 
 266      00
 267 0135 000000   		.align	3
 268              	.LC16:
 269 0138 50617274 		.string	"Partial head: "
 269      69616C20 
 269      68656164 
 269      3A2000
 270 0147 00       		.align	3
 271              	.LC17:
 272 0148 46756C6C 		.string	"Full head: "
 272      20686561 
 272      643A2000 
 273 0154 00000000 		.align	3
 274              	.LC18:
 275 0158 4F626A65 		.string	"Object size: "
 275      63742073 
 275      697A653A 
 275      2000
 276              		.text
 277              		.align	2
 278              		.globl	_ZN13SlabAllocator10printCacheEP5Cache
 280              	_ZN13SlabAllocator10printCacheEP5Cache:
 281              	.LFB22:
 176:src/slabAllocator.cpp **** 
 177:src/slabAllocator.cpp **** void SlabAllocator::printCache(Cache *cache) {
 282              		.loc 1 177 46 is_stmt 1
 283              		.cfi_startproc
 284              	.LVL24:
 285 01ac 130101FE 		addi	sp,sp,-32
 286              		.cfi_def_cfa_offset 32
 287 01b0 233C1100 		sd	ra,24(sp)
 288 01b4 23388100 		sd	s0,16(sp)
 289 01b8 23349100 		sd	s1,8(sp)
 290 01bc 23302101 		sd	s2,0(sp)
 291              		.cfi_offset 1, -8
 292              		.cfi_offset 8, -16
 293              		.cfi_offset 9, -24
 294              		.cfi_offset 18, -32
 295 01c0 13040102 		addi	s0,sp,32
 296              		.cfi_def_cfa 8, 0
 297 01c4 13090500 		mv	s2,a0
 178:src/slabAllocator.cpp ****     ConsoleUtil::printString("Cache name: ");
 298              		.loc 1 178 5
 299              		.loc 1 178 29 is_stmt 0
 300 01c8 17050000 		lla	a0,.LC10
GAS LISTING /tmp/ccr33Mli.s 			page 11


 300      13050500 
 301              	.LVL25:
 302 01d0 97000000 		call	_ZN11ConsoleUtil11printStringEPKc@plt
 302      E7800000 
 303              	.LVL26:
 179:src/slabAllocator.cpp ****     ConsoleUtil::printString(cache->name);
 304              		.loc 1 179 5 is_stmt 1
 305              		.loc 1 179 29 is_stmt 0
 306 01d8 13050900 		mv	a0,s2
 307 01dc 97000000 		call	_ZN11ConsoleUtil11printStringEPKc@plt
 307      E7800000 
 308              	.LVL27:
 180:src/slabAllocator.cpp ****     ConsoleUtil::printString("\n");
 309              		.loc 1 180 5 is_stmt 1
 310              		.loc 1 180 29 is_stmt 0
 311 01e4 17050000 		lla	a0,.LC0
 311      13050500 
 312 01ec 97000000 		call	_ZN11ConsoleUtil11printStringEPKc@plt
 312      E7800000 
 313              	.LVL28:
 181:src/slabAllocator.cpp ****     ConsoleUtil::print("HEAP_START_ADDR: ", (uint64)HEAP_START_ADDR, "\n");
 314              		.loc 1 181 5 is_stmt 1
 315              		.loc 1 181 23 is_stmt 0
 316 01f4 17060000 		lla	a2,.LC0
 316      13060600 
 317 01fc 97070000 		la	a5,HEAP_START_ADDR
 317      83B70700 
 318 0204 83A50700 		lw	a1,0(a5)
 319 0208 17050000 		lla	a0,.LC11
 319      13050500 
 320 0210 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_@plt
 320      E7800000 
 321              	.LVL29:
 182:src/slabAllocator.cpp ****     ConsoleUtil::print("Cache address: ", (uint64)cache, "\n");
 322              		.loc 1 182 5 is_stmt 1
 323              		.loc 1 182 23 is_stmt 0
 324 0218 17060000 		lla	a2,.LC0
 324      13060600 
 325 0220 9B050900 		sext.w	a1,s2
 326 0224 17050000 		lla	a0,.LC12
 326      13050500 
 327 022c 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_@plt
 327      E7800000 
 328              	.LVL30:
 183:src/slabAllocator.cpp ****     ConsoleUtil::print("Cache slab size: ", (uint64)cache->slabSize, "\n");
 329              		.loc 1 183 5 is_stmt 1
 330              		.loc 1 183 23 is_stmt 0
 331 0234 17060000 		lla	a2,.LC0
 331      13060600 
 332 023c 83258904 		lw	a1,72(s2)
 333 0240 17050000 		lla	a0,.LC13
 333      13050500 
 334 0248 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_@plt
 334      E7800000 
 335              	.LVL31:
 184:src/slabAllocator.cpp ****     ConsoleUtil::print("Cache object size: ", (uint64)cache->objectSize, "\n");
 336              		.loc 1 184 5 is_stmt 1
GAS LISTING /tmp/ccr33Mli.s 			page 12


 337              		.loc 1 184 23 is_stmt 0
 338 0250 17060000 		lla	a2,.LC0
 338      13060600 
 339 0258 83250904 		lw	a1,64(s2)
 340 025c 17050000 		lla	a0,.LC14
 340      13050500 
 341 0264 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_@plt
 341      E7800000 
 342              	.LVL32:
 185:src/slabAllocator.cpp ****     ConsoleUtil::print("Empty head: ", (uint64)cache->emptyHead, "\n");
 343              		.loc 1 185 5 is_stmt 1
 344              		.loc 1 185 23 is_stmt 0
 345 026c 17060000 		lla	a2,.LC0
 345      13060600 
 346 0274 83250906 		lw	a1,96(s2)
 347 0278 17050000 		lla	a0,.LC15
 347      13050500 
 348 0280 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_@plt
 348      E7800000 
 349              	.LVL33:
 186:src/slabAllocator.cpp **** 
 187:src/slabAllocator.cpp ****     Slab* iter = cache->emptyHead;
 350              		.loc 1 187 5 is_stmt 1
 351              		.loc 1 187 11 is_stmt 0
 352 0288 83340906 		ld	s1,96(s2)
 353              	.LVL34:
 354              	.L16:
 188:src/slabAllocator.cpp ****     while(iter){
 355              		.loc 1 188 5 is_stmt 1
 356              		.loc 1 188 11
 357 028c 63840402 		beqz	s1,.L15
 189:src/slabAllocator.cpp ****         ConsoleUtil::print("", (uint64)iter, " ");
 358              		.loc 1 189 9
 359              		.loc 1 189 27 is_stmt 0
 360 0290 17060000 		lla	a2,.LC8
 360      13060600 
 361 0298 9B850400 		sext.w	a1,s1
 362 029c 17050000 		lla	a0,.LC9
 362      13050500 
 363 02a4 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_@plt
 363      E7800000 
 364              	.LVL35:
 190:src/slabAllocator.cpp ****         iter = iter->next;
 365              		.loc 1 190 9 is_stmt 1
 366              		.loc 1 190 14 is_stmt 0
 367 02ac 83B48400 		ld	s1,8(s1)
 368              	.LVL36:
 188:src/slabAllocator.cpp ****     while(iter){
 369              		.loc 1 188 5
 370 02b0 6FF0DFFD 		j	.L16
 371              	.L15:
 191:src/slabAllocator.cpp ****     }
 192:src/slabAllocator.cpp ****     ConsoleUtil::printString("\n");
 372              		.loc 1 192 5 is_stmt 1
 373              		.loc 1 192 29 is_stmt 0
 374 02b4 17050000 		lla	a0,.LC0
 374      13050500 
GAS LISTING /tmp/ccr33Mli.s 			page 13


 375 02bc 97000000 		call	_ZN11ConsoleUtil11printStringEPKc@plt
 375      E7800000 
 376              	.LVL37:
 193:src/slabAllocator.cpp **** 
 194:src/slabAllocator.cpp ****     ConsoleUtil::print("Partial head: ", (uint64)cache->partialHead, "\n");
 377              		.loc 1 194 5 is_stmt 1
 378              		.loc 1 194 23 is_stmt 0
 379 02c4 17060000 		lla	a2,.LC0
 379      13060600 
 380 02cc 83258906 		lw	a1,104(s2)
 381 02d0 17050000 		lla	a0,.LC16
 381      13050500 
 382 02d8 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_@plt
 382      E7800000 
 383              	.LVL38:
 195:src/slabAllocator.cpp **** 
 196:src/slabAllocator.cpp ****     iter = cache->partialHead;
 384              		.loc 1 196 5 is_stmt 1
 385              		.loc 1 196 10 is_stmt 0
 386 02e0 83348906 		ld	s1,104(s2)
 387              	.LVL39:
 388              	.L18:
 197:src/slabAllocator.cpp ****     while(iter){
 389              		.loc 1 197 5 is_stmt 1
 390              		.loc 1 197 11
 391 02e4 63840402 		beqz	s1,.L17
 198:src/slabAllocator.cpp ****         ConsoleUtil::print("", (uint64)iter, " ");
 392              		.loc 1 198 9
 393              		.loc 1 198 27 is_stmt 0
 394 02e8 17060000 		lla	a2,.LC8
 394      13060600 
 395 02f0 9B850400 		sext.w	a1,s1
 396 02f4 17050000 		lla	a0,.LC9
 396      13050500 
 397 02fc 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_@plt
 397      E7800000 
 398              	.LVL40:
 199:src/slabAllocator.cpp ****         iter = iter->next;
 399              		.loc 1 199 9 is_stmt 1
 400              		.loc 1 199 14 is_stmt 0
 401 0304 83B48400 		ld	s1,8(s1)
 402              	.LVL41:
 197:src/slabAllocator.cpp ****     while(iter){
 403              		.loc 1 197 5
 404 0308 6FF0DFFD 		j	.L18
 405              	.L17:
 200:src/slabAllocator.cpp ****     }
 201:src/slabAllocator.cpp ****     ConsoleUtil::printString("\n");
 406              		.loc 1 201 5 is_stmt 1
 407              		.loc 1 201 29 is_stmt 0
 408 030c 17050000 		lla	a0,.LC0
 408      13050500 
 409 0314 97000000 		call	_ZN11ConsoleUtil11printStringEPKc@plt
 409      E7800000 
 410              	.LVL42:
 202:src/slabAllocator.cpp **** 
 203:src/slabAllocator.cpp ****     ConsoleUtil::print("Full head: ", (uint64)cache->fullHead, "\n");
GAS LISTING /tmp/ccr33Mli.s 			page 14


 411              		.loc 1 203 5 is_stmt 1
 412              		.loc 1 203 23 is_stmt 0
 413 031c 17060000 		lla	a2,.LC0
 413      13060600 
 414 0324 83250907 		lw	a1,112(s2)
 415 0328 17050000 		lla	a0,.LC17
 415      13050500 
 416 0330 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_@plt
 416      E7800000 
 417              	.LVL43:
 204:src/slabAllocator.cpp **** 
 205:src/slabAllocator.cpp ****     iter = cache->fullHead;
 418              		.loc 1 205 5 is_stmt 1
 419              		.loc 1 205 10 is_stmt 0
 420 0338 83340907 		ld	s1,112(s2)
 421              	.LVL44:
 422              	.L20:
 206:src/slabAllocator.cpp ****     while(iter){
 423              		.loc 1 206 5 is_stmt 1
 424              		.loc 1 206 11
 425 033c 63840402 		beqz	s1,.L19
 207:src/slabAllocator.cpp ****         ConsoleUtil::print("", (uint64)iter, " ");
 426              		.loc 1 207 9
 427              		.loc 1 207 27 is_stmt 0
 428 0340 17060000 		lla	a2,.LC8
 428      13060600 
 429 0348 9B850400 		sext.w	a1,s1
 430 034c 17050000 		lla	a0,.LC9
 430      13050500 
 431 0354 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_@plt
 431      E7800000 
 432              	.LVL45:
 208:src/slabAllocator.cpp ****         iter = iter->next;
 433              		.loc 1 208 9 is_stmt 1
 434              		.loc 1 208 14 is_stmt 0
 435 035c 83B48400 		ld	s1,8(s1)
 436              	.LVL46:
 206:src/slabAllocator.cpp ****     while(iter){
 437              		.loc 1 206 5
 438 0360 6FF0DFFD 		j	.L20
 439              	.L19:
 209:src/slabAllocator.cpp ****     }
 210:src/slabAllocator.cpp ****     ConsoleUtil::printString("\n");
 440              		.loc 1 210 5 is_stmt 1
 441              		.loc 1 210 29 is_stmt 0
 442 0364 17050000 		lla	a0,.LC0
 442      13050500 
 443 036c 97000000 		call	_ZN11ConsoleUtil11printStringEPKc@plt
 443      E7800000 
 444              	.LVL47:
 211:src/slabAllocator.cpp **** 
 212:src/slabAllocator.cpp ****     ConsoleUtil::print("Object size: ", (uint64)cache->objectSize, "\n");
 445              		.loc 1 212 5 is_stmt 1
 446              		.loc 1 212 23 is_stmt 0
 447 0374 17060000 		lla	a2,.LC0
 447      13060600 
 448 037c 83250904 		lw	a1,64(s2)
GAS LISTING /tmp/ccr33Mli.s 			page 15


 449 0380 17050000 		lla	a0,.LC18
 449      13050500 
 450 0388 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_@plt
 450      E7800000 
 451              	.LVL48:
 213:src/slabAllocator.cpp **** }
 452              		.loc 1 213 1
 453 0390 83308101 		ld	ra,24(sp)
 454              		.cfi_restore 1
 455 0394 03340101 		ld	s0,16(sp)
 456              		.cfi_restore 8
 457              		.cfi_def_cfa 2, 32
 458 0398 83348100 		ld	s1,8(sp)
 459              		.cfi_restore 9
 460              	.LVL49:
 461 039c 03390100 		ld	s2,0(sp)
 462              		.cfi_restore 18
 463              	.LVL50:
 464 03a0 13010102 		addi	sp,sp,32
 465              		.cfi_def_cfa_offset 0
 466 03a4 67800000 		jr	ra
 467              		.cfi_endproc
 468              	.LFE22:
 470              		.align	2
 471              		.globl	_ZN13SlabAllocator14insertIntoListERP4SlabS1_
 473              	_ZN13SlabAllocator14insertIntoListERP4SlabS1_:
 474              	.LFB23:
 214:src/slabAllocator.cpp **** 
 215:src/slabAllocator.cpp **** void SlabAllocator::insertIntoList(Slab *&head, Slab *slab) {
 475              		.loc 1 215 61 is_stmt 1
 476              		.cfi_startproc
 477              	.LVL51:
 478 03a8 130101FF 		addi	sp,sp,-16
 479              		.cfi_def_cfa_offset 16
 480 03ac 23348100 		sd	s0,8(sp)
 481              		.cfi_offset 8, -8
 482 03b0 13040101 		addi	s0,sp,16
 483              		.cfi_def_cfa 8, 0
 216:src/slabAllocator.cpp ****     slab->next = head;
 484              		.loc 1 216 5
 485              		.loc 1 216 18 is_stmt 0
 486 03b4 83370500 		ld	a5,0(a0)
 487              		.loc 1 216 16
 488 03b8 23B4F500 		sd	a5,8(a1)
 217:src/slabAllocator.cpp ****     if(head)
 489              		.loc 1 217 5 is_stmt 1
 490 03bc 63840700 		beqz	a5,.L23
 218:src/slabAllocator.cpp ****         head->prev = slab;
 491              		.loc 1 218 9
 492              		.loc 1 218 20 is_stmt 0
 493 03c0 23B0B700 		sd	a1,0(a5)
 494              	.L23:
 219:src/slabAllocator.cpp ****     slab->prev = nullptr;
 495              		.loc 1 219 5 is_stmt 1
 496              		.loc 1 219 16 is_stmt 0
 497 03c4 23B00500 		sd	zero,0(a1)
 220:src/slabAllocator.cpp ****     head = slab;
GAS LISTING /tmp/ccr33Mli.s 			page 16


 498              		.loc 1 220 5 is_stmt 1
 499              		.loc 1 220 10 is_stmt 0
 500 03c8 2330B500 		sd	a1,0(a0)
 221:src/slabAllocator.cpp **** }
 501              		.loc 1 221 1
 502 03cc 03348100 		ld	s0,8(sp)
 503              		.cfi_restore 8
 504              		.cfi_def_cfa 2, 16
 505 03d0 13010101 		addi	sp,sp,16
 506              		.cfi_def_cfa_offset 0
 507 03d4 67800000 		jr	ra
 508              		.cfi_endproc
 509              	.LFE23:
 511              		.align	2
 512              		.globl	_ZN13SlabAllocator12allocateSlabEP5Cache
 514              	_ZN13SlabAllocator12allocateSlabEP5Cache:
 515              	.LFB11:
  31:src/slabAllocator.cpp ****     Slab* slab = (Slab*)Buddy::alloc(cache->slabSize);
 516              		.loc 1 31 48 is_stmt 1
 517              		.cfi_startproc
 518              	.LVL52:
 519 03d8 130101FD 		addi	sp,sp,-48
 520              		.cfi_def_cfa_offset 48
 521 03dc 23341102 		sd	ra,40(sp)
 522 03e0 23308102 		sd	s0,32(sp)
 523 03e4 233C9100 		sd	s1,24(sp)
 524 03e8 23382101 		sd	s2,16(sp)
 525 03ec 23343101 		sd	s3,8(sp)
 526              		.cfi_offset 1, -8
 527              		.cfi_offset 8, -16
 528              		.cfi_offset 9, -24
 529              		.cfi_offset 18, -32
 530              		.cfi_offset 19, -40
 531 03f0 13040103 		addi	s0,sp,48
 532              		.cfi_def_cfa 8, 0
 533 03f4 93090500 		mv	s3,a0
  32:src/slabAllocator.cpp ****     if(!slab)
 534              		.loc 1 32 5
  32:src/slabAllocator.cpp ****     if(!slab)
 535              		.loc 1 32 37 is_stmt 0
 536 03f8 03358504 		ld	a0,72(a0)
 537              	.LVL53:
 538 03fc 97000000 		call	_ZN5Buddy5allocEm@plt
 538      E7800000 
 539              	.LVL54:
  33:src/slabAllocator.cpp ****         return false;
 540              		.loc 1 33 5 is_stmt 1
 541 0404 6308050A 		beqz	a0,.L30
 542 0408 93040500 		mv	s1,a0
  35:src/slabAllocator.cpp ****     slab->totalNumOfSlots = slab->numOfFreeSlots = ((cache->slabSize << BLOCK_SIZE_BITS) - sizeof(S
 543              		.loc 1 35 5
  35:src/slabAllocator.cpp ****     slab->totalNumOfSlots = slab->numOfFreeSlots = ((cache->slabSize << BLOCK_SIZE_BITS) - sizeof(S
 544              		.loc 1 35 34 is_stmt 0
 545 040c 93050500 		mv	a1,a0
 546 0410 13850906 		addi	a0,s3,96
 547              	.LVL55:
 548 0414 97000000 		call	_ZN13SlabAllocator14insertIntoListERP4SlabS1_
GAS LISTING /tmp/ccr33Mli.s 			page 17


 548      E7800000 
 549              	.LVL56:
  36:src/slabAllocator.cpp ****     slab->objectOffset = (void*)((uint64)slab + sizeof(Slab) + slab->totalNumOfSlots/8 + 1);
 550              		.loc 1 36 5 is_stmt 1
  36:src/slabAllocator.cpp ****     slab->objectOffset = (void*)((uint64)slab + sizeof(Slab) + slab->totalNumOfSlots/8 + 1);
 551              		.loc 1 36 61 is_stmt 0
 552 041c 83B78904 		ld	a5,72(s3)
  36:src/slabAllocator.cpp ****     slab->objectOffset = (void*)((uint64)slab + sizeof(Slab) + slab->totalNumOfSlots/8 + 1);
 553              		.loc 1 36 70
 554 0420 9397C700 		slli	a5,a5,12
  36:src/slabAllocator.cpp ****     slab->objectOffset = (void*)((uint64)slab + sizeof(Slab) + slab->totalNumOfSlots/8 + 1);
 555              		.loc 1 36 90
 556 0424 938787FC 		addi	a5,a5,-56
  36:src/slabAllocator.cpp ****     slab->objectOffset = (void*)((uint64)slab + sizeof(Slab) + slab->totalNumOfSlots/8 + 1);
 557              		.loc 1 36 115
 558 0428 03B70904 		ld	a4,64(s3)
  36:src/slabAllocator.cpp ****     slab->objectOffset = (void*)((uint64)slab + sizeof(Slab) + slab->totalNumOfSlots/8 + 1);
 559              		.loc 1 36 106
 560 042c B3D7E702 		divu	a5,a5,a4
  36:src/slabAllocator.cpp ****     slab->objectOffset = (void*)((uint64)slab + sizeof(Slab) + slab->totalNumOfSlots/8 + 1);
 561              		.loc 1 36 50
 562 0430 23B8F400 		sd	a5,16(s1)
  36:src/slabAllocator.cpp ****     slab->objectOffset = (void*)((uint64)slab + sizeof(Slab) + slab->totalNumOfSlots/8 + 1);
 563              		.loc 1 36 27
 564 0434 23BCF400 		sd	a5,24(s1)
  37:src/slabAllocator.cpp ****     slab->allocated = (char*)((uint64)slab + sizeof(Slab));
 565              		.loc 1 37 5 is_stmt 1
  37:src/slabAllocator.cpp ****     slab->allocated = (char*)((uint64)slab + sizeof(Slab));
 566              		.loc 1 37 85 is_stmt 0
 567 0438 93D73700 		srli	a5,a5,3
  37:src/slabAllocator.cpp ****     slab->allocated = (char*)((uint64)slab + sizeof(Slab));
 568              		.loc 1 37 62
 569 043c B3879700 		add	a5,a5,s1
  37:src/slabAllocator.cpp ****     slab->allocated = (char*)((uint64)slab + sizeof(Slab));
 570              		.loc 1 37 88
 571 0440 93879703 		addi	a5,a5,57
  37:src/slabAllocator.cpp ****     slab->allocated = (char*)((uint64)slab + sizeof(Slab));
 572              		.loc 1 37 24
 573 0444 23B4F402 		sd	a5,40(s1)
  38:src/slabAllocator.cpp ****     slab->parent = cache;
 574              		.loc 1 38 5 is_stmt 1
  38:src/slabAllocator.cpp ****     slab->parent = cache;
 575              		.loc 1 38 44 is_stmt 0
 576 0448 93878403 		addi	a5,s1,56
  38:src/slabAllocator.cpp ****     slab->parent = cache;
 577              		.loc 1 38 21
 578 044c 23B0F402 		sd	a5,32(s1)
  39:src/slabAllocator.cpp ****     for(uint64 i=0;i<slab->totalNumOfSlots/8 + 1;i++)
 579              		.loc 1 39 5 is_stmt 1
  39:src/slabAllocator.cpp ****     for(uint64 i=0;i<slab->totalNumOfSlots/8 + 1;i++)
 580              		.loc 1 39 18 is_stmt 0
 581 0450 23B83403 		sd	s3,48(s1)
  40:src/slabAllocator.cpp ****         slab->allocated[i] = 0;
 582              		.loc 1 40 5 is_stmt 1
 583              	.LVL57:
 584              	.LBB38:
  40:src/slabAllocator.cpp ****         slab->allocated[i] = 0;
GAS LISTING /tmp/ccr33Mli.s 			page 18


 585              		.loc 1 40 16 is_stmt 0
 586 0454 13070000 		li	a4,0
 587              	.LVL58:
 588              	.L28:
  40:src/slabAllocator.cpp ****         slab->allocated[i] = 0;
 589              		.loc 1 40 21 is_stmt 1 discriminator 3
  40:src/slabAllocator.cpp ****         slab->allocated[i] = 0;
 590              		.loc 1 40 28 is_stmt 0 discriminator 3
 591 0458 83B78401 		ld	a5,24(s1)
  40:src/slabAllocator.cpp ****         slab->allocated[i] = 0;
 592              		.loc 1 40 43 discriminator 3
 593 045c 93D73700 		srli	a5,a5,3
  40:src/slabAllocator.cpp ****         slab->allocated[i] = 0;
 594              		.loc 1 40 46 discriminator 3
 595 0460 93871700 		addi	a5,a5,1
  40:src/slabAllocator.cpp ****         slab->allocated[i] = 0;
 596              		.loc 1 40 21 discriminator 3
 597 0464 637CF700 		bleu	a5,a4,.L27
  41:src/slabAllocator.cpp **** 
 598              		.loc 1 41 9 is_stmt 1 discriminator 2
  41:src/slabAllocator.cpp **** 
 599              		.loc 1 41 15 is_stmt 0 discriminator 2
 600 0468 83B70402 		ld	a5,32(s1)
  41:src/slabAllocator.cpp **** 
 601              		.loc 1 41 26 discriminator 2
 602 046c B387E700 		add	a5,a5,a4
  41:src/slabAllocator.cpp **** 
 603              		.loc 1 41 28 discriminator 2
 604 0470 23800700 		sb	zero,0(a5)
  40:src/slabAllocator.cpp ****         slab->allocated[i] = 0;
 605              		.loc 1 40 5 is_stmt 1 discriminator 2
 606 0474 13071700 		addi	a4,a4,1
 607              	.LVL59:
 608 0478 6FF01FFE 		j	.L28
 609              	.L27:
 610              	.LBE38:
  43:src/slabAllocator.cpp ****         for (uint64 i = 0; i < slab->totalNumOfSlots; i++) {
 611              		.loc 1 43 5
 612              	.LBB39:
  43:src/slabAllocator.cpp ****         for (uint64 i = 0; i < slab->totalNumOfSlots; i++) {
 613              		.loc 1 43 15 is_stmt 0
 614 047c 83B70905 		ld	a5,80(s3)
  43:src/slabAllocator.cpp ****         for (uint64 i = 0; i < slab->totalNumOfSlots; i++) {
 615              		.loc 1 43 5
 616 0480 638E0702 		beqz	a5,.L31
 617              	.LBB40:
  44:src/slabAllocator.cpp ****             cache->ctor((void *) ((uint64) slab->objectOffset + i * slab->parent->objectSize));
 618              		.loc 1 44 21
 619 0484 13090000 		li	s2,0
 620              	.LVL60:
 621              	.L29:
  44:src/slabAllocator.cpp ****             cache->ctor((void *) ((uint64) slab->objectOffset + i * slab->parent->objectSize));
 622              		.loc 1 44 30 is_stmt 1 discriminator 3
  44:src/slabAllocator.cpp ****             cache->ctor((void *) ((uint64) slab->objectOffset + i * slab->parent->objectSize));
 623              		.loc 1 44 38 is_stmt 0 discriminator 3
 624 0488 83B78401 		ld	a5,24(s1)
  44:src/slabAllocator.cpp ****             cache->ctor((void *) ((uint64) slab->objectOffset + i * slab->parent->objectSize));
GAS LISTING /tmp/ccr33Mli.s 			page 19


 625              		.loc 1 44 30 discriminator 3
 626 048c 637CF902 		bleu	a5,s2,.L32
  45:src/slabAllocator.cpp ****         }
 627              		.loc 1 45 13 is_stmt 1 discriminator 2
  45:src/slabAllocator.cpp ****         }
 628              		.loc 1 45 20 is_stmt 0 discriminator 2
 629 0490 03B70905 		ld	a4,80(s3)
  45:src/slabAllocator.cpp ****         }
 630              		.loc 1 45 50 discriminator 2
 631 0494 03B58402 		ld	a0,40(s1)
  45:src/slabAllocator.cpp ****         }
 632              		.loc 1 45 75 discriminator 2
 633 0498 83B70403 		ld	a5,48(s1)
  45:src/slabAllocator.cpp ****         }
 634              		.loc 1 45 83 discriminator 2
 635 049c 83B70704 		ld	a5,64(a5)
  45:src/slabAllocator.cpp ****         }
 636              		.loc 1 45 67 discriminator 2
 637 04a0 B3872703 		mul	a5,a5,s2
  45:src/slabAllocator.cpp ****         }
 638              		.loc 1 45 24 discriminator 2
 639 04a4 3305F500 		add	a0,a0,a5
 640 04a8 E7000700 		jalr	a4
 641              	.LVL61:
  44:src/slabAllocator.cpp ****             cache->ctor((void *) ((uint64) slab->objectOffset + i * slab->parent->objectSize));
 642              		.loc 1 44 9 is_stmt 1 discriminator 2
 643 04ac 13091900 		addi	s2,s2,1
 644              	.LVL62:
 645 04b0 6FF09FFD 		j	.L29
 646              	.LVL63:
 647              	.L30:
 648              	.LBE40:
 649              	.LBE39:
  34:src/slabAllocator.cpp ****     SlabAllocator::insertIntoList(cache->emptyHead, slab);
 650              		.loc 1 34 16 is_stmt 0
 651 04b4 13050000 		li	a0,0
 652              	.LVL64:
 653 04b8 6F000001 		j	.L26
 654              	.LVL65:
 655              	.L31:
  48:src/slabAllocator.cpp **** }
 656              		.loc 1 48 12
 657 04bc 13051000 		li	a0,1
 658 04c0 6F008000 		j	.L26
 659              	.LVL66:
 660              	.L32:
 661 04c4 13051000 		li	a0,1
 662              	.LVL67:
 663              	.L26:
  49:src/slabAllocator.cpp **** 
 664              		.loc 1 49 1
 665 04c8 83308102 		ld	ra,40(sp)
 666              		.cfi_restore 1
 667 04cc 03340102 		ld	s0,32(sp)
 668              		.cfi_restore 8
 669              		.cfi_def_cfa 2, 48
 670 04d0 83348101 		ld	s1,24(sp)
GAS LISTING /tmp/ccr33Mli.s 			page 20


 671              		.cfi_restore 9
 672 04d4 03390101 		ld	s2,16(sp)
 673              		.cfi_restore 18
 674 04d8 83398100 		ld	s3,8(sp)
 675              		.cfi_restore 19
 676              	.LVL68:
 677 04dc 13010103 		addi	sp,sp,48
 678              		.cfi_def_cfa_offset 0
 679 04e0 67800000 		jr	ra
 680              		.cfi_endproc
 681              	.LFE11:
 683              		.align	2
 684              		.globl	_ZN13SlabAllocator14removeFromListERP4SlabS1_
 686              	_ZN13SlabAllocator14removeFromListERP4SlabS1_:
 687              	.LFB24:
 222:src/slabAllocator.cpp **** 
 223:src/slabAllocator.cpp **** void SlabAllocator::removeFromList(Slab* &head, Slab* slab) {
 688              		.loc 1 223 61 is_stmt 1
 689              		.cfi_startproc
 690              	.LVL69:
 691 04e4 130101FF 		addi	sp,sp,-16
 692              		.cfi_def_cfa_offset 16
 693 04e8 23348100 		sd	s0,8(sp)
 694              		.cfi_offset 8, -8
 695 04ec 13040101 		addi	s0,sp,16
 696              		.cfi_def_cfa 8, 0
 224:src/slabAllocator.cpp ****     if(slab == head)
 697              		.loc 1 224 5
 698              		.loc 1 224 16 is_stmt 0
 699 04f0 83370500 		ld	a5,0(a0)
 700              		.loc 1 224 5
 701 04f4 638CB702 		beq	a5,a1,.L39
 702              	.L35:
 225:src/slabAllocator.cpp ****         head = slab->next;
 226:src/slabAllocator.cpp ****     if(slab->next)
 703              		.loc 1 226 5 is_stmt 1
 704              		.loc 1 226 14 is_stmt 0
 705 04f8 83B78500 		ld	a5,8(a1)
 706              		.loc 1 226 5
 707 04fc 63860700 		beqz	a5,.L36
 227:src/slabAllocator.cpp ****         slab->next->prev = slab->prev;
 708              		.loc 1 227 9 is_stmt 1
 709              		.loc 1 227 34 is_stmt 0
 710 0500 03B70500 		ld	a4,0(a1)
 711              		.loc 1 227 26
 712 0504 23B0E700 		sd	a4,0(a5)
 713              	.L36:
 228:src/slabAllocator.cpp ****     if(slab->prev)
 714              		.loc 1 228 5 is_stmt 1
 715              		.loc 1 228 14 is_stmt 0
 716 0508 83B70500 		ld	a5,0(a1)
 717              		.loc 1 228 5
 718 050c 63860700 		beqz	a5,.L37
 229:src/slabAllocator.cpp ****         slab->prev->next = slab->next;
 719              		.loc 1 229 9 is_stmt 1
 720              		.loc 1 229 34 is_stmt 0
 721 0510 03B78500 		ld	a4,8(a1)
GAS LISTING /tmp/ccr33Mli.s 			page 21


 722              		.loc 1 229 26
 723 0514 23B4E700 		sd	a4,8(a5)
 724              	.L37:
 230:src/slabAllocator.cpp ****     slab->prev = nullptr;
 725              		.loc 1 230 5 is_stmt 1
 726              		.loc 1 230 16 is_stmt 0
 727 0518 23B00500 		sd	zero,0(a1)
 231:src/slabAllocator.cpp ****     slab->next = nullptr;
 728              		.loc 1 231 5 is_stmt 1
 729              		.loc 1 231 16 is_stmt 0
 730 051c 23B40500 		sd	zero,8(a1)
 232:src/slabAllocator.cpp **** }
 731              		.loc 1 232 1
 732 0520 03348100 		ld	s0,8(sp)
 733              		.cfi_remember_state
 734              		.cfi_restore 8
 735              		.cfi_def_cfa 2, 16
 736 0524 13010101 		addi	sp,sp,16
 737              		.cfi_def_cfa_offset 0
 738 0528 67800000 		jr	ra
 739              	.L39:
 740              		.cfi_restore_state
 225:src/slabAllocator.cpp ****     if(slab->next)
 741              		.loc 1 225 9 is_stmt 1
 225:src/slabAllocator.cpp ****     if(slab->next)
 742              		.loc 1 225 22 is_stmt 0
 743 052c 83B78500 		ld	a5,8(a1)
 225:src/slabAllocator.cpp ****     if(slab->next)
 744              		.loc 1 225 14
 745 0530 2330F500 		sd	a5,0(a0)
 746 0534 6FF05FFC 		j	.L35
 747              		.cfi_endproc
 748              	.LFE24:
 750              		.align	2
 751              		.globl	_ZN13SlabAllocator4moveERP4SlabS2_S1_
 753              	_ZN13SlabAllocator4moveERP4SlabS2_S1_:
 754              	.LFB25:
 233:src/slabAllocator.cpp **** 
 234:src/slabAllocator.cpp **** void SlabAllocator::move(Slab* &headFrom, Slab* &headTo, Slab* slab) {
 755              		.loc 1 234 70 is_stmt 1
 756              		.cfi_startproc
 757              	.LVL70:
 758 0538 130101FE 		addi	sp,sp,-32
 759              		.cfi_def_cfa_offset 32
 760 053c 233C1100 		sd	ra,24(sp)
 761 0540 23388100 		sd	s0,16(sp)
 762 0544 23349100 		sd	s1,8(sp)
 763 0548 23302101 		sd	s2,0(sp)
 764              		.cfi_offset 1, -8
 765              		.cfi_offset 8, -16
 766              		.cfi_offset 9, -24
 767              		.cfi_offset 18, -32
 768 054c 13040102 		addi	s0,sp,32
 769              		.cfi_def_cfa 8, 0
 770 0550 13890500 		mv	s2,a1
 771 0554 93040600 		mv	s1,a2
 235:src/slabAllocator.cpp ****     SlabAllocator::removeFromList(headFrom, slab);
GAS LISTING /tmp/ccr33Mli.s 			page 22


 772              		.loc 1 235 5
 773              		.loc 1 235 34 is_stmt 0
 774 0558 93050600 		mv	a1,a2
 775              	.LVL71:
 776 055c 97000000 		call	_ZN13SlabAllocator14removeFromListERP4SlabS1_
 776      E7800000 
 777              	.LVL72:
 236:src/slabAllocator.cpp ****     SlabAllocator::insertIntoList(headTo, slab);
 778              		.loc 1 236 5 is_stmt 1
 779              		.loc 1 236 34 is_stmt 0
 780 0564 93850400 		mv	a1,s1
 781 0568 13050900 		mv	a0,s2
 782 056c 97000000 		call	_ZN13SlabAllocator14insertIntoListERP4SlabS1_
 782      E7800000 
 783              	.LVL73:
 237:src/slabAllocator.cpp **** }...
 784              		.loc 1 237 1
 785 0574 83308101 		ld	ra,24(sp)
 786              		.cfi_restore 1
 787 0578 03340101 		ld	s0,16(sp)
 788              		.cfi_restore 8
 789              		.cfi_def_cfa 2, 32
 790 057c 83348100 		ld	s1,8(sp)
 791              		.cfi_restore 9
 792              	.LVL74:
 793 0580 03390100 		ld	s2,0(sp)
 794              		.cfi_restore 18
 795              	.LVL75:
 796 0584 13010102 		addi	sp,sp,32
 797              		.cfi_def_cfa_offset 0
 798 0588 67800000 		jr	ra
 799              		.cfi_endproc
 800              	.LFE25:
 802              		.align	2
 803              		.globl	_ZN13SlabAllocator12allocateSlotEP4Slab
 805              	_ZN13SlabAllocator12allocateSlotEP4Slab:
 806              	.LFB12:
  51:src/slabAllocator.cpp **** void* SlabAllocator::allocateSlot(Slab *slab) {
 807              		.loc 1 51 47 is_stmt 1
 808              		.cfi_startproc
 809              	.LVL76:
 810 058c 130101FE 		addi	sp,sp,-32
 811              		.cfi_def_cfa_offset 32
 812 0590 233C1100 		sd	ra,24(sp)
 813 0594 23388100 		sd	s0,16(sp)
 814 0598 23349100 		sd	s1,8(sp)
 815 059c 23302101 		sd	s2,0(sp)
 816              		.cfi_offset 1, -8
 817              		.cfi_offset 8, -16
 818              		.cfi_offset 9, -24
 819              		.cfi_offset 18, -32
 820 05a0 13040102 		addi	s0,sp,32
 821              		.cfi_def_cfa 8, 0
 822 05a4 13090500 		mv	s2,a0
  52:src/slabAllocator.cpp ****     for(uint64 i=0; i<slab->totalNumOfSlots; i++){
 823              		.loc 1 52 5
 824              	.LVL77:
GAS LISTING /tmp/ccr33Mli.s 			page 23


 825              	.LBB41:
  52:src/slabAllocator.cpp ****     for(uint64 i=0; i<slab->totalNumOfSlots; i++){
 826              		.loc 1 52 16 is_stmt 0
 827 05a8 93040000 		li	s1,0
 828              	.LVL78:
 829              	.L50:
  52:src/slabAllocator.cpp ****     for(uint64 i=0; i<slab->totalNumOfSlots; i++){
 830              		.loc 1 52 22 is_stmt 1 discriminator 1
  52:src/slabAllocator.cpp ****     for(uint64 i=0; i<slab->totalNumOfSlots; i++){
 831              		.loc 1 52 29 is_stmt 0 discriminator 1
 832 05ac 83378901 		ld	a5,24(s2)
  52:src/slabAllocator.cpp ****     for(uint64 i=0; i<slab->totalNumOfSlots; i++){
 833              		.loc 1 52 22 discriminator 1
 834 05b0 63F8F40A 		bleu	a5,s1,.L51
 835              	.LBE41:
  53:src/slabAllocator.cpp ****         if(!(slab->allocated[i/8] & (1<<(7 - i%8)))){
 836              		.loc 1 53 9 is_stmt 1
 837              	.LBB49:
 838              	.LBB42:
  53:src/slabAllocator.cpp ****         if(!(slab->allocated[i/8] & (1<<(7 - i%8)))){
 839              		.loc 1 53 20 is_stmt 0
 840 05b4 83370902 		ld	a5,32(s2)
  53:src/slabAllocator.cpp ****         if(!(slab->allocated[i/8] & (1<<(7 - i%8)))){
 841              		.loc 1 53 31
 842 05b8 13D73400 		srli	a4,s1,3
  53:src/slabAllocator.cpp ****         if(!(slab->allocated[i/8] & (1<<(7 - i%8)))){
 843              		.loc 1 53 33
 844 05bc B387E700 		add	a5,a5,a4
 845 05c0 03C60700 		lbu	a2,0(a5)
  53:src/slabAllocator.cpp ****         if(!(slab->allocated[i/8] & (1<<(7 - i%8)))){
 846              		.loc 1 53 44
 847 05c4 13C7F4FF 		not	a4,s1
 848 05c8 13777700 		andi	a4,a4,7
  53:src/slabAllocator.cpp ****         if(!(slab->allocated[i/8] & (1<<(7 - i%8)))){
 849              		.loc 1 53 12
 850 05cc BB56E640 		sraw	a3,a2,a4
 851 05d0 93F61600 		andi	a3,a3,1
  53:src/slabAllocator.cpp ****         if(!(slab->allocated[i/8] & (1<<(7 - i%8)))){
 852              		.loc 1 53 9
 853 05d4 63860600 		beqz	a3,.L53
 854              	.LBE42:
  52:src/slabAllocator.cpp ****     for(uint64 i=0; i<slab->totalNumOfSlots; i++){
 855              		.loc 1 52 5 is_stmt 1 discriminator 2
 856 05d8 93841400 		addi	s1,s1,1
 857              	.LVL79:
 858 05dc 6FF01FFD 		j	.L50
 859              	.L53:
 860              	.LBB47:
 861              	.LBB43:
  54:src/slabAllocator.cpp ****             slab->allocated[i/8] |= (1<<(7 - i%8));
 862              		.loc 1 54 13
  54:src/slabAllocator.cpp ****             slab->allocated[i/8] |= (1<<(7 - i%8));
 863              		.loc 1 54 39 is_stmt 0
 864 05e0 93061000 		li	a3,1
 865 05e4 3B97E600 		sllw	a4,a3,a4
  54:src/slabAllocator.cpp ****             slab->allocated[i/8] |= (1<<(7 - i%8));
 866              		.loc 1 54 34
GAS LISTING /tmp/ccr33Mli.s 			page 24


 867 05e8 3366E600 		or	a2,a2,a4
 868 05ec 2380C700 		sb	a2,0(a5)
  55:src/slabAllocator.cpp ****             Slab* &headFrom = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead
 869              		.loc 1 55 13 is_stmt 1
 870              	.LVL80:
 871              	.LBB44:
 872              	.LBB45:
 873              		.file 2 "src/../h/../h/../h/slab_t.hpp"
   1:src/../h/../h/../h/slab_t.hpp **** //
   2:src/../h/../h/../h/slab_t.hpp **** // Created by os on 1/2/23.
   3:src/../h/../h/../h/slab_t.hpp **** //
   4:src/../h/../h/../h/slab_t.hpp **** 
   5:src/../h/../h/../h/slab_t.hpp **** #ifndef KERNEL_FOR_RISCV_ARCHITECURE_SLAB_T_HPP
   6:src/../h/../h/../h/slab_t.hpp **** #define KERNEL_FOR_RISCV_ARCHITECURE_SLAB_T_HPP
   7:src/../h/../h/../h/slab_t.hpp **** #include "../lib/hw.h"
   8:src/../h/../h/../h/slab_t.hpp **** 
   9:src/../h/../h/../h/slab_t.hpp **** typedef class Cache kmem_cache_t;
  10:src/../h/../h/../h/slab_t.hpp **** 
  11:src/../h/../h/../h/slab_t.hpp **** typedef class Slab{
  12:src/../h/../h/../h/slab_t.hpp **** public:
  13:src/../h/../h/../h/slab_t.hpp ****     inline bool isFull(){return numOfFreeSlots == 0;}
  14:src/../h/../h/../h/slab_t.hpp ****     inline bool isEmpty(){return numOfFreeSlots == totalNumOfSlots;}
 874              		.loc 2 14 27
 875              		.loc 2 14 34 is_stmt 0
 876 05f0 83370901 		ld	a5,16(s2)
 877              		.loc 2 14 52
 878 05f4 03378901 		ld	a4,24(s2)
 879              	.LVL81:
 880              	.LBE45:
 881              	.LBE44:
  55:src/slabAllocator.cpp ****             Slab* &headFrom = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead
 882              		.loc 1 55 89
 883 05f8 6308F704 		beq	a4,a5,.L54
  55:src/slabAllocator.cpp ****             Slab* &headFrom = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead
 884              		.loc 1 55 81 discriminator 2
 885 05fc 03350903 		ld	a0,48(s2)
 886              	.LVL82:
  55:src/slabAllocator.cpp ****             Slab* &headFrom = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead
 887              		.loc 1 55 89 discriminator 2
 888 0600 13058506 		addi	a0,a0,104
 889              	.L46:
 890              	.LVL83:
  56:src/slabAllocator.cpp ****             slab->numOfFreeSlots--;
 891              		.loc 1 56 13 is_stmt 1 discriminator 4
  56:src/slabAllocator.cpp ****             slab->numOfFreeSlots--;
 892              		.loc 1 56 33 is_stmt 0 discriminator 4
 893 0604 9387F7FF 		addi	a5,a5,-1
 894 0608 2338F900 		sd	a5,16(s2)
  57:src/slabAllocator.cpp ****             Slab* &headTo = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 895              		.loc 1 57 13 is_stmt 1 discriminator 4
 896              	.LVL84:
 897              	.LBE43:
 898              	.LBE47:
 899              	.LBE49:
  13:src/../h/../h/../h/slab_t.hpp ****     inline bool isEmpty(){return numOfFreeSlots == totalNumOfSlots;}
 900              		.loc 2 13 26 discriminator 4
 901              	.LBB50:
GAS LISTING /tmp/ccr33Mli.s 			page 25


 902              	.LBB48:
 903              	.LBB46:
  57:src/slabAllocator.cpp ****             Slab* &headTo = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 904              		.loc 1 57 85 is_stmt 0 discriminator 4
 905 060c 63940704 		bnez	a5,.L47
  57:src/slabAllocator.cpp ****             Slab* &headTo = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 906              		.loc 1 57 52 discriminator 1
 907 0610 83350903 		ld	a1,48(s2)
  57:src/slabAllocator.cpp ****             Slab* &headTo = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 908              		.loc 1 57 85 discriminator 1
 909 0614 93850507 		addi	a1,a1,112
 910              	.L48:
 911              	.LVL85:
  59:src/slabAllocator.cpp ****             if(headTo != headFrom)
 912              		.loc 1 59 13 is_stmt 1 discriminator 4
  59:src/slabAllocator.cpp ****             if(headTo != headFrom)
 913              		.loc 1 59 16 is_stmt 0 discriminator 4
 914 0618 03B70500 		ld	a4,0(a1)
  59:src/slabAllocator.cpp ****             if(headTo != headFrom)
 915              		.loc 1 59 26 discriminator 4
 916 061c 83370500 		ld	a5,0(a0)
  59:src/slabAllocator.cpp ****             if(headTo != headFrom)
 917              		.loc 1 59 13 discriminator 4
 918 0620 6308F700 		beq	a4,a5,.L49
  60:src/slabAllocator.cpp ****                 SlabAllocator::move(headFrom, headTo, slab);
 919              		.loc 1 60 17 is_stmt 1
  60:src/slabAllocator.cpp ****                 SlabAllocator::move(headFrom, headTo, slab);
 920              		.loc 1 60 36 is_stmt 0
 921 0624 13060900 		mv	a2,s2
 922 0628 97000000 		call	_ZN13SlabAllocator4moveERP4SlabS2_S1_
 922      E7800000 
 923              	.LVL86:
 924              	.L49:
  62:src/slabAllocator.cpp ****             return (void*)((uint64)slab->objectOffset + i*slab->parent->objectSize);
 925              		.loc 1 62 13 is_stmt 1
  62:src/slabAllocator.cpp ****             return (void*)((uint64)slab->objectOffset + i*slab->parent->objectSize);
 926              		.loc 1 62 42 is_stmt 0
 927 0630 03358902 		ld	a0,40(s2)
  62:src/slabAllocator.cpp ****             return (void*)((uint64)slab->objectOffset + i*slab->parent->objectSize);
 928              		.loc 1 62 65
 929 0634 83370903 		ld	a5,48(s2)
  62:src/slabAllocator.cpp ****             return (void*)((uint64)slab->objectOffset + i*slab->parent->objectSize);
 930              		.loc 1 62 73
 931 0638 83B70704 		ld	a5,64(a5)
  62:src/slabAllocator.cpp ****             return (void*)((uint64)slab->objectOffset + i*slab->parent->objectSize);
 932              		.loc 1 62 58
 933 063c B3849702 		mul	s1,a5,s1
 934              	.LVL87:
  62:src/slabAllocator.cpp ****             return (void*)((uint64)slab->objectOffset + i*slab->parent->objectSize);
 935              		.loc 1 62 55
 936 0640 33059500 		add	a0,a0,s1
  62:src/slabAllocator.cpp ****             return (void*)((uint64)slab->objectOffset + i*slab->parent->objectSize);
 937              		.loc 1 62 83
 938 0644 6F000002 		j	.L42
 939              	.LVL88:
 940              	.L54:
  55:src/slabAllocator.cpp ****             Slab* &headFrom = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead
GAS LISTING /tmp/ccr33Mli.s 			page 26


 941              		.loc 1 55 55 discriminator 1
 942 0648 03350903 		ld	a0,48(s2)
 943              	.LVL89:
  55:src/slabAllocator.cpp ****             Slab* &headFrom = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead
 944              		.loc 1 55 89 discriminator 1
 945 064c 13050506 		addi	a0,a0,96
 946 0650 6FF05FFB 		j	.L46
 947              	.LVL90:
 948              	.L47:
  57:src/slabAllocator.cpp ****             Slab* &headTo = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 949              		.loc 1 57 77 discriminator 2
 950 0654 83350903 		ld	a1,48(s2)
  57:src/slabAllocator.cpp ****             Slab* &headTo = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 951              		.loc 1 57 85 discriminator 2
 952 0658 93858506 		addi	a1,a1,104
 953 065c 6FF0DFFB 		j	.L48
 954              	.LVL91:
 955              	.L51:
 956              	.LBE46:
 957              	.LBE48:
 958              	.LBE50:
  65:src/slabAllocator.cpp ****     return nullptr;
 959              		.loc 1 65 12
 960 0660 13050000 		li	a0,0
 961              	.LVL92:
 962              	.L42:
  66:src/slabAllocator.cpp **** }
 963              		.loc 1 66 1
 964 0664 83308101 		ld	ra,24(sp)
 965              		.cfi_restore 1
 966 0668 03340101 		ld	s0,16(sp)
 967              		.cfi_restore 8
 968              		.cfi_def_cfa 2, 32
 969 066c 83348100 		ld	s1,8(sp)
 970              		.cfi_restore 9
 971 0670 03390100 		ld	s2,0(sp)
 972              		.cfi_restore 18
 973              	.LVL93:
 974 0674 13010102 		addi	sp,sp,32
 975              		.cfi_def_cfa_offset 0
 976 0678 67800000 		jr	ra
 977              		.cfi_endproc
 978              	.LFE12:
 980              		.align	2
 981              		.globl	_ZN13SlabAllocator14allocateObjectEP5Cache
 983              	_ZN13SlabAllocator14allocateObjectEP5Cache:
 984              	.LFB13:
  68:src/slabAllocator.cpp **** void* SlabAllocator::allocateObject(Cache *cache) {
 985              		.loc 1 68 51 is_stmt 1
 986              		.cfi_startproc
 987              	.LVL94:
 988 067c 130101FE 		addi	sp,sp,-32
 989              		.cfi_def_cfa_offset 32
 990 0680 233C1100 		sd	ra,24(sp)
 991 0684 23388100 		sd	s0,16(sp)
 992 0688 23349100 		sd	s1,8(sp)
 993 068c 23302101 		sd	s2,0(sp)
GAS LISTING /tmp/ccr33Mli.s 			page 27


 994              		.cfi_offset 1, -8
 995              		.cfi_offset 8, -16
 996              		.cfi_offset 9, -24
 997              		.cfi_offset 18, -32
 998 0690 13040102 		addi	s0,sp,32
 999              		.cfi_def_cfa 8, 0
 1000 0694 13090500 		mv	s2,a0
  69:src/slabAllocator.cpp ****     void* ret = SlabAllocator::allocateFromList(cache->partialHead);
 1001              		.loc 1 69 5
  69:src/slabAllocator.cpp ****     void* ret = SlabAllocator::allocateFromList(cache->partialHead);
 1002              		.loc 1 69 48 is_stmt 0
 1003 0698 83348506 		ld	s1,104(a0)
 1004              	.LVL95:
 1005              	.L57:
 1006              	.LBB51:
 1007              	.LBB52:
 1008              		.file 3 "src/../h/slabAllocator.hpp"
   1:src/../h/slabAllocator.hpp **** //
   2:src/../h/slabAllocator.hpp **** // Created by os on 12/25/22.
   3:src/../h/slabAllocator.hpp **** //
   4:src/../h/slabAllocator.hpp **** 
   5:src/../h/slabAllocator.hpp **** #ifndef KERNEL_FOR_RISCV_ARCHITECURE_SLAN_HPP
   6:src/../h/slabAllocator.hpp **** #define KERNEL_FOR_RISCV_ARCHITECURE_SLAN_HPP
   7:src/../h/slabAllocator.hpp **** 
   8:src/../h/slabAllocator.hpp **** #include "../h/utility.hpp"
   9:src/../h/slabAllocator.hpp **** #include "../h/buddyAllocator.hpp"
  10:src/../h/slabAllocator.hpp **** #include "../h/consoleUtil.hpp"
  11:src/../h/slabAllocator.hpp **** #include "../h/cache_t.hpp"
  12:src/../h/slabAllocator.hpp **** 
  13:src/../h/slabAllocator.hpp **** class SlabAllocator{
  14:src/../h/slabAllocator.hpp **** public:
  15:src/../h/slabAllocator.hpp **** 
  16:src/../h/slabAllocator.hpp ****     static void initialize(void* space, uint64 blockNum);
  17:src/../h/slabAllocator.hpp **** 
  18:src/../h/slabAllocator.hpp ****     static Cache* createCache(const char* name, size_t size, void (*ctor)(void*), void (*dtor)(void
  19:src/../h/slabAllocator.hpp **** 
  20:src/../h/slabAllocator.hpp ****     static void deleteCache(Cache* &cache);
  21:src/../h/slabAllocator.hpp **** 
  22:src/../h/slabAllocator.hpp ****     static bool allocateSlab(Cache *cache);
  23:src/../h/slabAllocator.hpp **** 
  24:src/../h/slabAllocator.hpp ****     static int shrinkCache(Cache* cache);
  25:src/../h/slabAllocator.hpp **** 
  26:src/../h/slabAllocator.hpp ****     static void* allocateSlot(Slab* slab);
  27:src/../h/slabAllocator.hpp **** 
  28:src/../h/slabAllocator.hpp ****     static void* allocateObject(Cache *cache);
  29:src/../h/slabAllocator.hpp **** 
  30:src/../h/slabAllocator.hpp ****     static void* allocateBuffer(size_t size);
  31:src/../h/slabAllocator.hpp **** 
  32:src/../h/slabAllocator.hpp ****     static void freeSlot(Slab* slab, uint64 index);
  33:src/../h/slabAllocator.hpp **** 
  34:src/../h/slabAllocator.hpp ****     static bool freeObject(Cache* cache,const void* addr);
  35:src/../h/slabAllocator.hpp **** 
  36:src/../h/slabAllocator.hpp ****     static void freeBuffer(const void* addr);
  37:src/../h/slabAllocator.hpp **** 
  38:src/../h/slabAllocator.hpp ****     static void printSlab(Slab *slab);
  39:src/../h/slabAllocator.hpp **** 
  40:src/../h/slabAllocator.hpp ****     static void printCache(Cache *cache);
GAS LISTING /tmp/ccr33Mli.s 			page 28


  41:src/../h/slabAllocator.hpp **** 
  42:src/../h/slabAllocator.hpp ****     static Cache *sizeN[13];
  43:src/../h/slabAllocator.hpp ****     static Cache *cache;
  44:src/../h/slabAllocator.hpp ****     static void* startAddr;
  45:src/../h/slabAllocator.hpp ****     static uint64 blocksResponsibleFor;
  46:src/../h/slabAllocator.hpp **** 
  47:src/../h/slabAllocator.hpp **** private:
  48:src/../h/slabAllocator.hpp ****     static void insertIntoList(Slab* &head, Slab* slab);
  49:src/../h/slabAllocator.hpp ****     static void removeFromList(Slab* &head, Slab* slab);
  50:src/../h/slabAllocator.hpp ****     static void move(Slab* &headFrom, Slab* &headTo, Slab* slab);
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getUpperBound(Slab* slab){return (uint64)slab->objectOffset + slab->totalN
  52:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
  53:src/../h/slabAllocator.hpp **** 
  54:src/../h/slabAllocator.hpp ****     static inline void* allocateFromList(Slab* head){
  55:src/../h/slabAllocator.hpp ****         while(head != nullptr){
 1009              		.loc 3 55 9 is_stmt 1
 1010              		.loc 3 55 20
 1011 069c 638C0400 		beqz	s1,.L56
 1012              	.LBB53:
  56:src/../h/slabAllocator.hpp ****             void* ret = allocateSlot(head);
 1013              		.loc 3 56 13
 1014              		.loc 3 56 37 is_stmt 0
 1015 06a0 13850400 		mv	a0,s1
 1016 06a4 97000000 		call	_ZN13SlabAllocator12allocateSlotEP4Slab
 1016      E7800000 
 1017              	.LVL96:
  57:src/../h/slabAllocator.hpp ****             if(ret != nullptr)
 1018              		.loc 3 57 13 is_stmt 1
 1019 06ac E30805FE 		beqz	a0,.L57
  58:src/../h/slabAllocator.hpp ****                 return ret;
 1020              		.loc 3 58 24 is_stmt 0
 1021 06b0 93040500 		mv	s1,a0
 1022              	.LVL97:
 1023              	.L56:
 1024              	.LBE53:
 1025              	.LBE52:
 1026              	.LBE51:
  70:src/slabAllocator.cpp ****     if(ret){
 1027              		.loc 1 70 5 is_stmt 1
 1028 06b4 63800402 		beqz	s1,.L62
 1029              	.L55:
  83:src/slabAllocator.cpp **** }
 1030              		.loc 1 83 1 is_stmt 0
 1031 06b8 13850400 		mv	a0,s1
 1032 06bc 83308101 		ld	ra,24(sp)
 1033              		.cfi_remember_state
 1034              		.cfi_restore 1
 1035 06c0 03340101 		ld	s0,16(sp)
 1036              		.cfi_restore 8
 1037              		.cfi_def_cfa 2, 32
 1038 06c4 83348100 		ld	s1,8(sp)
 1039              		.cfi_restore 9
 1040              	.LVL98:
 1041 06c8 03390100 		ld	s2,0(sp)
 1042              		.cfi_restore 18
 1043              	.LVL99:
 1044 06cc 13010102 		addi	sp,sp,32
GAS LISTING /tmp/ccr33Mli.s 			page 29


 1045              		.cfi_def_cfa_offset 0
 1046 06d0 67800000 		jr	ra
 1047              	.LVL100:
 1048              	.L62:
 1049              		.cfi_restore_state
  73:src/slabAllocator.cpp ****     ret = SlabAllocator::allocateFromList(cache->emptyHead);
 1050              		.loc 1 73 5 is_stmt 1
  73:src/slabAllocator.cpp ****     ret = SlabAllocator::allocateFromList(cache->emptyHead);
 1051              		.loc 1 73 42 is_stmt 0
 1052 06d4 83340906 		ld	s1,96(s2)
 1053              	.LVL101:
 1054              	.L60:
 1055              	.LBB54:
 1056              	.LBB55:
  55:src/../h/slabAllocator.hpp ****             void* ret = allocateSlot(head);
 1057              		.loc 3 55 9 is_stmt 1
  55:src/../h/slabAllocator.hpp ****             void* ret = allocateSlot(head);
 1058              		.loc 3 55 20
 1059 06d8 638C0400 		beqz	s1,.L59
 1060              	.LBB56:
  56:src/../h/slabAllocator.hpp ****             if(ret != nullptr)
 1061              		.loc 3 56 13
  56:src/../h/slabAllocator.hpp ****             if(ret != nullptr)
 1062              		.loc 3 56 37 is_stmt 0
 1063 06dc 13850400 		mv	a0,s1
 1064 06e0 97000000 		call	_ZN13SlabAllocator12allocateSlotEP4Slab
 1064      E7800000 
 1065              	.LVL102:
  57:src/../h/slabAllocator.hpp ****                 return ret;
 1066              		.loc 3 57 13 is_stmt 1
 1067 06e8 E30805FE 		beqz	a0,.L60
 1068              		.loc 3 58 24 is_stmt 0
 1069 06ec 93040500 		mv	s1,a0
 1070              	.LVL103:
 1071              	.L59:
 1072              	.LBE56:
 1073              	.LBE55:
 1074              	.LBE54:
  74:src/slabAllocator.cpp ****     if(ret){
 1075              		.loc 1 74 5 is_stmt 1
 1076 06f0 E39404FC 		bnez	s1,.L55
  77:src/slabAllocator.cpp ****     if(!SlabAllocator::allocateSlab(cache))
 1077              		.loc 1 77 5
  77:src/slabAllocator.cpp ****     if(!SlabAllocator::allocateSlab(cache))
 1078              		.loc 1 77 36 is_stmt 0
 1079 06f4 13050900 		mv	a0,s2
 1080 06f8 97000000 		call	_ZN13SlabAllocator12allocateSlabEP5Cache
 1080      E7800000 
 1081              	.LVL104:
  77:src/slabAllocator.cpp ****     if(!SlabAllocator::allocateSlab(cache))
 1082              		.loc 1 77 5
 1083 0700 E30C05FA 		beqz	a0,.L55
  80:src/slabAllocator.cpp ****     ret = SlabAllocator::allocateSlot(cache->emptyHead);
 1084              		.loc 1 80 5 is_stmt 1
  80:src/slabAllocator.cpp ****     ret = SlabAllocator::allocateSlot(cache->emptyHead);
 1085              		.loc 1 80 38 is_stmt 0
 1086 0704 03350906 		ld	a0,96(s2)
GAS LISTING /tmp/ccr33Mli.s 			page 30


 1087 0708 97000000 		call	_ZN13SlabAllocator12allocateSlotEP4Slab
 1087      E7800000 
 1088              	.LVL105:
 1089 0710 93040500 		mv	s1,a0
 1090              	.LVL106:
  82:src/slabAllocator.cpp ****     return ret;
 1091              		.loc 1 82 5 is_stmt 1
  82:src/slabAllocator.cpp ****     return ret;
 1092              		.loc 1 82 12 is_stmt 0
 1093 0714 6FF05FFA 		j	.L55
 1094              		.cfi_endproc
 1095              	.LFE13:
 1097              		.align	2
 1098              		.globl	_ZN13SlabAllocator14allocateBufferEm
 1100              	_ZN13SlabAllocator14allocateBufferEm:
 1101              	.LFB14:
  85:src/slabAllocator.cpp **** void* SlabAllocator::allocateBuffer(size_t size) {
 1102              		.loc 1 85 50 is_stmt 1
 1103              		.cfi_startproc
 1104              	.LVL107:
  86:src/slabAllocator.cpp ****     uint64 level = Buddy::getDeg(Buddy::ceil(size));
 1105              		.loc 1 86 5
 1106              	.LBB57:
 1107              	.LBB58:
 1108              		.file 4 "src/../h/../h/buddyAllocator.hpp"
   1:src/../h/../h/buddyAllocator.hpp **** //
   2:src/../h/../h/buddyAllocator.hpp **** // Created by os on 12/24/22.
   3:src/../h/../h/buddyAllocator.hpp **** //
   4:src/../h/../h/buddyAllocator.hpp **** 
   5:src/../h/../h/buddyAllocator.hpp **** #ifndef KERNEL_FOR_RISCV_ARCHITECURE_BUDDYALLOCATOR_HPP
   6:src/../h/../h/buddyAllocator.hpp **** #define KERNEL_FOR_RISCV_ARCHITECURE_BUDDYALLOCATOR_HPP
   7:src/../h/../h/buddyAllocator.hpp **** 
   8:src/../h/../h/buddyAllocator.hpp **** #include "../lib/hw.h"
   9:src/../h/../h/buddyAllocator.hpp **** #include "../h/utility.hpp"
  10:src/../h/../h/buddyAllocator.hpp **** 
  11:src/../h/../h/buddyAllocator.hpp **** class SlabAllocator;
  12:src/../h/../h/buddyAllocator.hpp **** 
  13:src/../h/../h/buddyAllocator.hpp **** class Buddy{
  14:src/../h/../h/buddyAllocator.hpp **** public:
  15:src/../h/../h/buddyAllocator.hpp ****     static void initialize(void* addr, uint64 block_num);
  16:src/../h/../h/buddyAllocator.hpp **** 
  17:src/../h/../h/buddyAllocator.hpp ****     static void* alloc(uint64 num);
  18:src/../h/../h/buddyAllocator.hpp **** 
  19:src/../h/../h/buddyAllocator.hpp ****     static void free(void *addr, uint64 size);
  20:src/../h/../h/buddyAllocator.hpp **** 
  21:src/../h/../h/buddyAllocator.hpp ****     typedef struct Block{
  22:src/../h/../h/buddyAllocator.hpp ****         Block *next;
  23:src/../h/../h/buddyAllocator.hpp ****     }Bucket;
  24:src/../h/../h/buddyAllocator.hpp **** 
  25:src/../h/../h/buddyAllocator.hpp ****     static void printList();
  26:src/../h/../h/buddyAllocator.hpp **** 
  27:src/../h/../h/buddyAllocator.hpp ****     static inline bool canAllocate(uint64 size){
  28:src/../h/../h/buddyAllocator.hpp ****         return head[size] != nullptr;
  29:src/../h/../h/buddyAllocator.hpp ****     };
  30:src/../h/../h/buddyAllocator.hpp **** 
  31:src/../h/../h/buddyAllocator.hpp **** private:
  32:src/../h/../h/buddyAllocator.hpp ****     static void* BUDDY_META_DATA_ADDR;
GAS LISTING /tmp/ccr33Mli.s 			page 31


  33:src/../h/../h/buddyAllocator.hpp ****     static void* BUDDY_START_ADDR;
  34:src/../h/../h/buddyAllocator.hpp ****     static uint64 BLOCKS_AVAILABLE;
  35:src/../h/../h/buddyAllocator.hpp ****     static Bucket *head[BUCKET_SIZE], *tail[BUCKET_SIZE];
  36:src/../h/../h/buddyAllocator.hpp **** 
  37:src/../h/../h/buddyAllocator.hpp ****     static inline uint64 ceil(uint64 num){
  38:src/../h/../h/buddyAllocator.hpp ****         num--;
 1109              		.loc 4 38 9
 1110              		.loc 4 38 12 is_stmt 0
 1111 0718 9307F5FF 		addi	a5,a0,-1
 1112              	.LVL108:
  39:src/../h/../h/buddyAllocator.hpp ****         num |= num>>1;
 1113              		.loc 4 39 9 is_stmt 1
 1114              		.loc 4 39 19 is_stmt 0
 1115 071c 13D51700 		srli	a0,a5,1
 1116              	.LVL109:
 1117              		.loc 4 39 13
 1118 0720 B3E7A700 		or	a5,a5,a0
 1119              	.LVL110:
  40:src/../h/../h/buddyAllocator.hpp ****         num |= num>>2;
 1120              		.loc 4 40 9 is_stmt 1
 1121              		.loc 4 40 19 is_stmt 0
 1122 0724 13D72700 		srli	a4,a5,2
 1123              		.loc 4 40 13
 1124 0728 B3E7E700 		or	a5,a5,a4
 1125              	.LVL111:
  41:src/../h/../h/buddyAllocator.hpp ****         num |= num>>4;
 1126              		.loc 4 41 9 is_stmt 1
 1127              		.loc 4 41 19 is_stmt 0
 1128 072c 13D74700 		srli	a4,a5,4
 1129              		.loc 4 41 13
 1130 0730 B3E7E700 		or	a5,a5,a4
 1131              	.LVL112:
  42:src/../h/../h/buddyAllocator.hpp ****         num |= num>>8;
 1132              		.loc 4 42 9 is_stmt 1
 1133              		.loc 4 42 19 is_stmt 0
 1134 0734 13D78700 		srli	a4,a5,8
 1135              		.loc 4 42 13
 1136 0738 B3E7E700 		or	a5,a5,a4
 1137              	.LVL113:
  43:src/../h/../h/buddyAllocator.hpp ****         num |= num>>16;
 1138              		.loc 4 43 9 is_stmt 1
 1139              		.loc 4 43 19 is_stmt 0
 1140 073c 13D70701 		srli	a4,a5,16
 1141              		.loc 4 43 13
 1142 0740 B3E7E700 		or	a5,a5,a4
 1143              	.LVL114:
  44:src/../h/../h/buddyAllocator.hpp ****         num |= num>>32;
 1144              		.loc 4 44 9 is_stmt 1
 1145              		.loc 4 44 19 is_stmt 0
 1146 0744 13D70702 		srli	a4,a5,32
 1147              		.loc 4 44 13
 1148 0748 B3E7E700 		or	a5,a5,a4
 1149              	.LVL115:
  45:src/../h/../h/buddyAllocator.hpp ****         return ++num;
 1150              		.loc 4 45 9 is_stmt 1
 1151              		.loc 4 45 18 is_stmt 0
 1152 074c 93871700 		addi	a5,a5,1
GAS LISTING /tmp/ccr33Mli.s 			page 32


 1153              	.LVL116:
 1154              	.LBE58:
 1155              	.LBE57:
 1156              	.LBB59:
 1157              	.LBB60:
  46:src/../h/../h/buddyAllocator.hpp ****     }
  47:src/../h/../h/buddyAllocator.hpp **** 
  48:src/../h/../h/buddyAllocator.hpp ****     static inline uint64 getDeg(uint64 num){
  49:src/../h/../h/buddyAllocator.hpp ****         uint64 deg = 0;
 1158              		.loc 4 49 16
 1159 0750 13070000 		li	a4,0
 1160              	.L65:
 1161              	.LVL117:
  50:src/../h/../h/buddyAllocator.hpp ****         while(num>1){
 1162              		.loc 4 50 9 is_stmt 1
 1163              		.loc 4 50 18
 1164 0754 93061000 		li	a3,1
 1165 0758 63F8F600 		bleu	a5,a3,.L64
  51:src/../h/../h/buddyAllocator.hpp ****             num/=2;
 1166              		.loc 4 51 13
 1167              		.loc 4 51 16 is_stmt 0
 1168 075c 93D71700 		srli	a5,a5,1
 1169              	.LVL118:
  52:src/../h/../h/buddyAllocator.hpp ****             deg++;
 1170              		.loc 4 52 13 is_stmt 1
 1171              		.loc 4 52 16 is_stmt 0
 1172 0760 13071700 		addi	a4,a4,1
 1173              	.LVL119:
  50:src/../h/../h/buddyAllocator.hpp ****         while(num>1){
 1174              		.loc 4 50 9
 1175 0764 6FF01FFF 		j	.L65
 1176              	.L64:
  53:src/../h/../h/buddyAllocator.hpp ****         }
  54:src/../h/../h/buddyAllocator.hpp ****         return deg;
 1177              		.loc 4 54 9 is_stmt 1
 1178              	.LVL120:
 1179              	.LBE60:
 1180              	.LBE59:
  87:src/slabAllocator.cpp ****     if(level < CACHE_LOWER_BOUND || level > CACHE_UPPER_BOUND)
 1181              		.loc 1 87 5
  87:src/slabAllocator.cpp ****     if(level < CACHE_LOWER_BOUND || level > CACHE_UPPER_BOUND)
 1182              		.loc 1 87 34 is_stmt 0
 1183 0768 1307B7FF 		addi	a4,a4,-5
 1184              	.LVL121:
  87:src/slabAllocator.cpp ****     if(level < CACHE_LOWER_BOUND || level > CACHE_UPPER_BOUND)
 1185              		.loc 1 87 5
 1186 076c 9307C000 		li	a5,12
 1187 0770 63E0E704 		bgtu	a4,a5,.L67
  85:src/slabAllocator.cpp **** void* SlabAllocator::allocateBuffer(size_t size) {
 1188              		.loc 1 85 50
 1189 0774 130101FF 		addi	sp,sp,-16
 1190              		.cfi_def_cfa_offset 16
 1191 0778 23341100 		sd	ra,8(sp)
 1192 077c 23308100 		sd	s0,0(sp)
 1193              		.cfi_offset 1, -8
 1194              		.cfi_offset 8, -16
 1195 0780 13040101 		addi	s0,sp,16
GAS LISTING /tmp/ccr33Mli.s 			page 33


 1196              		.cfi_def_cfa 8, 0
  90:src/slabAllocator.cpp ****         level -= CACHE_LOWER_BOUND;
 1197              		.loc 1 90 9 is_stmt 1
 1198              	.LVL122:
  91:src/slabAllocator.cpp ****     return SlabAllocator::allocateObject(sizeN[level]);
 1199              		.loc 1 91 5
  91:src/slabAllocator.cpp ****     return SlabAllocator::allocateObject(sizeN[level]);
 1200              		.loc 1 91 41 is_stmt 0
 1201 0784 13173700 		slli	a4,a4,3
 1202              	.LVL123:
 1203 0788 97070000 		lla	a5,.LANCHOR0
 1203      93870700 
 1204 0790 3387E700 		add	a4,a5,a4
 1205 0794 03350700 		ld	a0,0(a4)
 1206 0798 97000000 		call	_ZN13SlabAllocator14allocateObjectEP5Cache
 1206      E7800000 
 1207              	.LVL124:
  92:src/slabAllocator.cpp **** }
 1208              		.loc 1 92 1
 1209 07a0 83308100 		ld	ra,8(sp)
 1210              		.cfi_restore 1
 1211 07a4 03340100 		ld	s0,0(sp)
 1212              		.cfi_restore 8
 1213              		.cfi_def_cfa 2, 16
 1214 07a8 13010101 		addi	sp,sp,16
 1215              		.cfi_def_cfa_offset 0
 1216 07ac 67800000 		jr	ra
 1217              	.LVL125:
 1218              	.L67:
  88:src/slabAllocator.cpp ****         return nullptr;
 1219              		.loc 1 88 16
 1220 07b0 13050000 		li	a0,0
  92:src/slabAllocator.cpp **** }
 1221              		.loc 1 92 1
 1222 07b4 67800000 		ret
 1223              		.cfi_endproc
 1224              	.LFE14:
 1226              		.align	2
 1227              		.globl	_ZN13SlabAllocator11createCacheEPKcmPFvPvES4_
 1229              	_ZN13SlabAllocator11createCacheEPKcmPFvPvES4_:
 1230              	.LFB18:
 132:src/slabAllocator.cpp **** Cache* SlabAllocator::createCache(const char *name, size_t size, void (*ctor)(void *), void (*dtor)
 1231              		.loc 1 132 110 is_stmt 1
 1232              		.cfi_startproc
 1233              	.LVL126:
 1234 07b8 130101FC 		addi	sp,sp,-64
 1235              		.cfi_def_cfa_offset 64
 1236 07bc 233C1102 		sd	ra,56(sp)
 1237 07c0 23388102 		sd	s0,48(sp)
 1238 07c4 23349102 		sd	s1,40(sp)
 1239 07c8 23302103 		sd	s2,32(sp)
 1240 07cc 233C3101 		sd	s3,24(sp)
 1241 07d0 23384101 		sd	s4,16(sp)
 1242 07d4 23345101 		sd	s5,8(sp)
 1243              		.cfi_offset 1, -8
 1244              		.cfi_offset 8, -16
 1245              		.cfi_offset 9, -24
GAS LISTING /tmp/ccr33Mli.s 			page 34


 1246              		.cfi_offset 18, -32
 1247              		.cfi_offset 19, -40
 1248              		.cfi_offset 20, -48
 1249              		.cfi_offset 21, -56
 1250 07d8 13040104 		addi	s0,sp,64
 1251              		.cfi_def_cfa 8, 0
 1252 07dc 13090500 		mv	s2,a0
 1253 07e0 93890500 		mv	s3,a1
 1254 07e4 930A0600 		mv	s5,a2
 1255 07e8 138A0600 		mv	s4,a3
 133:src/slabAllocator.cpp ****     Cache* ret = (Cache*)SlabAllocator::allocateObject(SlabAllocator::cache);
 1256              		.loc 1 133 5
 133:src/slabAllocator.cpp ****     Cache* ret = (Cache*)SlabAllocator::allocateObject(SlabAllocator::cache);
 1257              		.loc 1 133 55 is_stmt 0
 1258 07ec 17050000 		ld	a0,.LANCHOR0+104
 1258      03350500 
 1259              	.LVL127:
 1260 07f4 97000000 		call	_ZN13SlabAllocator14allocateObjectEP5Cache
 1260      E7800000 
 1261              	.LVL128:
 1262 07fc 93040500 		mv	s1,a0
 1263              	.LVL129:
 134:src/slabAllocator.cpp ****     ret->ctor = ctor;
 1264              		.loc 1 134 5 is_stmt 1
 134:src/slabAllocator.cpp ****     ret->ctor = ctor;
 1265              		.loc 1 134 15 is_stmt 0
 1266 0800 23385505 		sd	s5,80(a0)
 135:src/slabAllocator.cpp ****     ret->dtor = dtor;
 1267              		.loc 1 135 5 is_stmt 1
 135:src/slabAllocator.cpp ****     ret->dtor = dtor;
 1268              		.loc 1 135 15 is_stmt 0
 1269 0804 233C4505 		sd	s4,88(a0)
 136:src/slabAllocator.cpp ****     ret->emptyHead = ret->partialHead = ret->fullHead = nullptr;
 1270              		.loc 1 136 5 is_stmt 1
 136:src/slabAllocator.cpp ****     ret->emptyHead = ret->partialHead = ret->fullHead = nullptr;
 1271              		.loc 1 136 55 is_stmt 0
 1272 0808 23380506 		sd	zero,112(a0)
 136:src/slabAllocator.cpp ****     ret->emptyHead = ret->partialHead = ret->fullHead = nullptr;
 1273              		.loc 1 136 39
 1274 080c 23340506 		sd	zero,104(a0)
 136:src/slabAllocator.cpp ****     ret->emptyHead = ret->partialHead = ret->fullHead = nullptr;
 1275              		.loc 1 136 20
 1276 0810 23300506 		sd	zero,96(a0)
 137:src/slabAllocator.cpp ****     ret->objectSize = size;
 1277              		.loc 1 137 5 is_stmt 1
 137:src/slabAllocator.cpp ****     ret->objectSize = size;
 1278              		.loc 1 137 21 is_stmt 0
 1279 0814 23303505 		sd	s3,64(a0)
 138:src/slabAllocator.cpp ****     ret->slabSize = DEFAULT_SLAB_SIZE;
 1280              		.loc 1 138 5 is_stmt 1
 138:src/slabAllocator.cpp ****     ret->slabSize = DEFAULT_SLAB_SIZE;
 1281              		.loc 1 138 19 is_stmt 0
 1282 0818 93072000 		li	a5,2
 1283 081c 2334F504 		sd	a5,72(a0)
 139:src/slabAllocator.cpp ****     strcpy(name, ret->name);
 1284              		.loc 1 139 5 is_stmt 1
 139:src/slabAllocator.cpp ****     strcpy(name, ret->name);
GAS LISTING /tmp/ccr33Mli.s 			page 35


 1285              		.loc 1 139 11 is_stmt 0
 1286 0820 93050500 		mv	a1,a0
 1287 0824 13050900 		mv	a0,s2
 1288 0828 97000000 		call	_Z6strcpyPKcPc@plt
 1288      E7800000 
 1289              	.LVL130:
 140:src/slabAllocator.cpp ****     return ret;
 1290              		.loc 1 140 5 is_stmt 1
 141:src/slabAllocator.cpp **** }
 1291              		.loc 1 141 1 is_stmt 0
 1292 0830 13850400 		mv	a0,s1
 1293 0834 83308103 		ld	ra,56(sp)
 1294              		.cfi_restore 1
 1295 0838 03340103 		ld	s0,48(sp)
 1296              		.cfi_restore 8
 1297              		.cfi_def_cfa 2, 64
 1298 083c 83348102 		ld	s1,40(sp)
 1299              		.cfi_restore 9
 1300              	.LVL131:
 1301 0840 03390102 		ld	s2,32(sp)
 1302              		.cfi_restore 18
 1303              	.LVL132:
 1304 0844 83398101 		ld	s3,24(sp)
 1305              		.cfi_restore 19
 1306              	.LVL133:
 1307 0848 033A0101 		ld	s4,16(sp)
 1308              		.cfi_restore 20
 1309              	.LVL134:
 1310 084c 833A8100 		ld	s5,8(sp)
 1311              		.cfi_restore 21
 1312              	.LVL135:
 1313 0850 13010104 		addi	sp,sp,64
 1314              		.cfi_def_cfa_offset 0
 1315 0854 67800000 		jr	ra
 1316              		.cfi_endproc
 1317              	.LFE18:
 1319              		.section	.rodata.str1.8
 1320 0166 0000     		.align	3
 1321              	.LC19:
 1322 0168 4D61696E 		.string	"Main Cache"
 1322      20436163 
 1322      686500
 1323              		.text
 1324              		.align	2
 1325              		.globl	_ZN13SlabAllocator10initializeEPvm
 1327              	_ZN13SlabAllocator10initializeEPvm:
 1328              	.LFB10:
  12:src/slabAllocator.cpp **** void SlabAllocator::initialize(void* space, uint64 blockNum) {
 1329              		.loc 1 12 62 is_stmt 1
 1330              		.cfi_startproc
 1331              	.LVL136:
 1332 0858 130101FE 		addi	sp,sp,-32
 1333              		.cfi_def_cfa_offset 32
 1334 085c 233C1100 		sd	ra,24(sp)
 1335 0860 23388100 		sd	s0,16(sp)
 1336 0864 23349100 		sd	s1,8(sp)
 1337 0868 23302101 		sd	s2,0(sp)
GAS LISTING /tmp/ccr33Mli.s 			page 36


 1338              		.cfi_offset 1, -8
 1339              		.cfi_offset 8, -16
 1340              		.cfi_offset 9, -24
 1341              		.cfi_offset 18, -32
 1342 086c 13040102 		addi	s0,sp,32
 1343              		.cfi_def_cfa 8, 0
 1344 0870 13090500 		mv	s2,a0
 1345 0874 93840500 		mv	s1,a1
  13:src/slabAllocator.cpp ****     Buddy::initialize(space, blockNum);
 1346              		.loc 1 13 5
  13:src/slabAllocator.cpp ****     Buddy::initialize(space, blockNum);
 1347              		.loc 1 13 22 is_stmt 0
 1348 0878 97000000 		call	_ZN5Buddy10initializeEPvm@plt
 1348      E7800000 
 1349              	.LVL137:
  14:src/slabAllocator.cpp ****     startAddr = space;
 1350              		.loc 1 14 5 is_stmt 1
  14:src/slabAllocator.cpp ****     startAddr = space;
 1351              		.loc 1 14 15 is_stmt 0
 1352 0880 97070000 		lla	a5,.LANCHOR0
 1352      93870700 
 1353 0888 23B82707 		sd	s2,112(a5)
  15:src/slabAllocator.cpp ****     blocksResponsibleFor = blockNum;
 1354              		.loc 1 15 5 is_stmt 1
  15:src/slabAllocator.cpp ****     blocksResponsibleFor = blockNum;
 1355              		.loc 1 15 26 is_stmt 0
 1356 088c 23BC9706 		sd	s1,120(a5)
  16:src/slabAllocator.cpp ****     cache = (Cache*)SLAB_META_ADDR_CONST;
 1357              		.loc 1 16 5 is_stmt 1
  16:src/slabAllocator.cpp ****     cache = (Cache*)SLAB_META_ADDR_CONST;
 1358              		.loc 1 16 21 is_stmt 0
 1359 0890 17070000 		la	a4,HEAP_START_ADDR
 1359      03370700 
 1360 0898 83350700 		ld	a1,0(a4)
 1361 089c 93D5C500 		srli	a1,a1,12
 1362 08a0 93851500 		addi	a1,a1,1
 1363 08a4 9395C500 		slli	a1,a1,12
  16:src/slabAllocator.cpp ****     cache = (Cache*)SLAB_META_ADDR_CONST;
 1364              		.loc 1 16 11
 1365 08a8 23B4B706 		sd	a1,104(a5)
  17:src/slabAllocator.cpp ****     cache->ctor = nullptr;
 1366              		.loc 1 17 5 is_stmt 1
  17:src/slabAllocator.cpp ****     cache->ctor = nullptr;
 1367              		.loc 1 17 17 is_stmt 0
 1368 08ac 23B80504 		sd	zero,80(a1)
  18:src/slabAllocator.cpp ****     cache->dtor = nullptr;
 1369              		.loc 1 18 5 is_stmt 1
  18:src/slabAllocator.cpp ****     cache->dtor = nullptr;
 1370              		.loc 1 18 17 is_stmt 0
 1371 08b0 23BC0504 		sd	zero,88(a1)
  19:src/slabAllocator.cpp ****     cache->emptyHead = nullptr;
 1372              		.loc 1 19 5 is_stmt 1
  19:src/slabAllocator.cpp ****     cache->emptyHead = nullptr;
 1373              		.loc 1 19 22 is_stmt 0
 1374 08b4 23B00506 		sd	zero,96(a1)
  20:src/slabAllocator.cpp ****     cache->partialHead = nullptr;
 1375              		.loc 1 20 5 is_stmt 1
GAS LISTING /tmp/ccr33Mli.s 			page 37


  20:src/slabAllocator.cpp ****     cache->partialHead = nullptr;
 1376              		.loc 1 20 24 is_stmt 0
 1377 08b8 23B40506 		sd	zero,104(a1)
  21:src/slabAllocator.cpp ****     cache->fullHead = nullptr;
 1378              		.loc 1 21 5 is_stmt 1
  21:src/slabAllocator.cpp ****     cache->fullHead = nullptr;
 1379              		.loc 1 21 21 is_stmt 0
 1380 08bc 23B80506 		sd	zero,112(a1)
  22:src/slabAllocator.cpp ****     cache->objectSize = sizeof(Cache);
 1381              		.loc 1 22 5 is_stmt 1
  22:src/slabAllocator.cpp ****     cache->objectSize = sizeof(Cache);
 1382              		.loc 1 22 23 is_stmt 0
 1383 08c0 93078007 		li	a5,120
 1384 08c4 23B0F504 		sd	a5,64(a1)
  23:src/slabAllocator.cpp ****     cache->slabSize = DEFAULT_SLAB_SIZE;
 1385              		.loc 1 23 5 is_stmt 1
  23:src/slabAllocator.cpp ****     cache->slabSize = DEFAULT_SLAB_SIZE;
 1386              		.loc 1 23 21 is_stmt 0
 1387 08c8 93072000 		li	a5,2
 1388 08cc 23B4F504 		sd	a5,72(a1)
  24:src/slabAllocator.cpp ****     strcpy("Main Cache", cache->name);
 1389              		.loc 1 24 5 is_stmt 1
  24:src/slabAllocator.cpp ****     strcpy("Main Cache", cache->name);
 1390              		.loc 1 24 11 is_stmt 0
 1391 08d0 17050000 		lla	a0,.LC19
 1391      13050500 
 1392 08d8 97000000 		call	_Z6strcpyPKcPc@plt
 1392      E7800000 
 1393              	.LVL138:
  26:src/slabAllocator.cpp ****     for(int i=0;i<BUCKET_SIZE;i++){
 1394              		.loc 1 26 5 is_stmt 1
 1395              	.LBB61:
  26:src/slabAllocator.cpp ****     for(int i=0;i<BUCKET_SIZE;i++){
 1396              		.loc 1 26 13 is_stmt 0
 1397 08e0 93040000 		li	s1,0
 1398              	.LVL139:
 1399 08e4 6F004004 		j	.L76
 1400              	.LVL140:
 1401              	.L78:
  27:src/slabAllocator.cpp ****         sizeN[i] = SlabAllocator::createCache(names[i], 2<<i, nullptr, nullptr);
 1402              		.loc 1 27 9 is_stmt 1 discriminator 2
  27:src/slabAllocator.cpp ****         sizeN[i] = SlabAllocator::createCache(names[i], 2<<i, nullptr, nullptr);
 1403              		.loc 1 27 46 is_stmt 0 discriminator 2
 1404 08e8 13993400 		slli	s2,s1,3
 1405 08ec 97070000 		lla	a5,.LANCHOR1
 1405      93870700 
 1406 08f4 B3872701 		add	a5,a5,s2
 1407 08f8 93060000 		li	a3,0
 1408 08fc 13060000 		li	a2,0
 1409 0900 93052000 		li	a1,2
 1410 0904 BB959500 		sllw	a1,a1,s1
 1411 0908 03B50700 		ld	a0,0(a5)
 1412 090c 97000000 		call	_ZN13SlabAllocator11createCacheEPKcmPFvPvES4_
 1412      E7800000 
 1413              	.LVL141:
  27:src/slabAllocator.cpp ****         sizeN[i] = SlabAllocator::createCache(names[i], 2<<i, nullptr, nullptr);
 1414              		.loc 1 27 18 discriminator 2
GAS LISTING /tmp/ccr33Mli.s 			page 38


 1415 0914 97070000 		lla	a5,.LANCHOR0
 1415      93870700 
 1416 091c B3872701 		add	a5,a5,s2
 1417 0920 23B0A700 		sd	a0,0(a5)
  26:src/slabAllocator.cpp ****     for(int i=0;i<BUCKET_SIZE;i++){
 1418              		.loc 1 26 5 is_stmt 1 discriminator 2
 1419 0924 9B841400 		addiw	s1,s1,1
 1420              	.LVL142:
 1421              	.L76:
  26:src/slabAllocator.cpp ****     for(int i=0;i<BUCKET_SIZE;i++){
 1422              		.loc 1 26 18 discriminator 3
 1423 0928 9307C000 		li	a5,12
 1424 092c E3DE97FA 		ble	s1,a5,.L78
 1425              	.LBE61:
  29:src/slabAllocator.cpp **** }
 1426              		.loc 1 29 1 is_stmt 0
 1427 0930 83308101 		ld	ra,24(sp)
 1428              		.cfi_restore 1
 1429 0934 03340101 		ld	s0,16(sp)
 1430              		.cfi_restore 8
 1431              		.cfi_def_cfa 2, 32
 1432 0938 83348100 		ld	s1,8(sp)
 1433              		.cfi_restore 9
 1434              	.LVL143:
 1435 093c 03390100 		ld	s2,0(sp)
 1436              		.cfi_restore 18
 1437 0940 13010102 		addi	sp,sp,32
 1438              		.cfi_def_cfa_offset 0
 1439 0944 67800000 		jr	ra
 1440              		.cfi_endproc
 1441              	.LFE10:
 1443              		.align	2
 1444              		.globl	_ZN13SlabAllocator8freeSlotEP4Slabm
 1446              	_ZN13SlabAllocator8freeSlotEP4Slabm:
 1447              	.LFB15:
  94:src/slabAllocator.cpp **** void SlabAllocator::freeSlot(Slab *slab, uint64 index) {
 1448              		.loc 1 94 56 is_stmt 1
 1449              		.cfi_startproc
 1450              	.LVL144:
  95:src/slabAllocator.cpp ****     if(slab->allocated[index/8] & (1<<(7 - index%8))) {
 1451              		.loc 1 95 5
 1452              	.LBB62:
  95:src/slabAllocator.cpp ****     if(slab->allocated[index/8] & (1<<(7 - index%8))) {
 1453              		.loc 1 95 14 is_stmt 0
 1454 0948 83370502 		ld	a5,32(a0)
  95:src/slabAllocator.cpp ****     if(slab->allocated[index/8] & (1<<(7 - index%8))) {
 1455              		.loc 1 95 29
 1456 094c 13D73500 		srli	a4,a1,3
  95:src/slabAllocator.cpp ****     if(slab->allocated[index/8] & (1<<(7 - index%8))) {
 1457              		.loc 1 95 31
 1458 0950 B387E700 		add	a5,a5,a4
 1459 0954 83C60700 		lbu	a3,0(a5)
  95:src/slabAllocator.cpp ****     if(slab->allocated[index/8] & (1<<(7 - index%8))) {
 1460              		.loc 1 95 42
 1461 0958 93C5F5FF 		not	a1,a1
 1462              	.LVL145:
 1463 095c 93F57500 		andi	a1,a1,7
GAS LISTING /tmp/ccr33Mli.s 			page 39


 1464              	.LVL146:
  95:src/slabAllocator.cpp ****     if(slab->allocated[index/8] & (1<<(7 - index%8))) {
 1465              		.loc 1 95 53
 1466 0960 3BD7B640 		sraw	a4,a3,a1
 1467 0964 13771700 		andi	a4,a4,1
  95:src/slabAllocator.cpp ****     if(slab->allocated[index/8] & (1<<(7 - index%8))) {
 1468              		.loc 1 95 5
 1469 0968 6302070C 		beqz	a4,.L87
 1470              	.LBE62:
  94:src/slabAllocator.cpp **** void SlabAllocator::freeSlot(Slab *slab, uint64 index) {
 1471              		.loc 1 94 56
 1472 096c 130101FE 		addi	sp,sp,-32
 1473              		.cfi_def_cfa_offset 32
 1474 0970 233C1100 		sd	ra,24(sp)
 1475 0974 23388100 		sd	s0,16(sp)
 1476 0978 23349100 		sd	s1,8(sp)
 1477              		.cfi_offset 1, -8
 1478              		.cfi_offset 8, -16
 1479              		.cfi_offset 9, -24
 1480 097c 13040102 		addi	s0,sp,32
 1481              		.cfi_def_cfa 8, 0
 1482 0980 93040500 		mv	s1,a0
 1483              	.LBB70:
 1484              	.LBB63:
  96:src/slabAllocator.cpp ****         slab->allocated[index/8] &= ~(1<<(7 - index%8));
 1485              		.loc 1 96 9 is_stmt 1
  96:src/slabAllocator.cpp ****         slab->allocated[index/8] &= ~(1<<(7 - index%8));
 1486              		.loc 1 96 40 is_stmt 0
 1487 0984 13071000 		li	a4,1
 1488 0988 BB15B700 		sllw	a1,a4,a1
  96:src/slabAllocator.cpp ****         slab->allocated[index/8] &= ~(1<<(7 - index%8));
 1489              		.loc 1 96 34
 1490 098c 93C5F5FF 		not	a1,a1
 1491 0990 B3F5D500 		and	a1,a1,a3
 1492 0994 2380B700 		sb	a1,0(a5)
  97:src/slabAllocator.cpp ****         Slab *&headFrom = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 1493              		.loc 1 97 9 is_stmt 1
 1494              	.LVL147:
 1495              	.LBB64:
 1496              	.LBB65:
  13:src/../h/../h/../h/slab_t.hpp ****     inline bool isEmpty(){return numOfFreeSlots == totalNumOfSlots;}
 1497              		.loc 2 13 26
  13:src/../h/../h/../h/slab_t.hpp ****     inline bool isEmpty(){return numOfFreeSlots == totalNumOfSlots;}
 1498              		.loc 2 13 33 is_stmt 0
 1499 0998 83370501 		ld	a5,16(a0)
 1500              	.LVL148:
 1501              	.LBE65:
 1502              	.LBE64:
  97:src/slabAllocator.cpp ****         Slab *&headFrom = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 1503              		.loc 1 97 83
 1504 099c 639A0704 		bnez	a5,.L81
  97:src/slabAllocator.cpp ****         Slab *&headFrom = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 1505              		.loc 1 97 50 discriminator 1
 1506 09a0 03350503 		ld	a0,48(a0)
 1507              	.LVL149:
  97:src/slabAllocator.cpp ****         Slab *&headFrom = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 1508              		.loc 1 97 83 discriminator 1
GAS LISTING /tmp/ccr33Mli.s 			page 40


 1509 09a4 13050507 		addi	a0,a0,112
 1510              	.L82:
 1511              	.LVL150:
  98:src/slabAllocator.cpp ****         slab->numOfFreeSlots++;
 1512              		.loc 1 98 9 is_stmt 1 discriminator 4
  98:src/slabAllocator.cpp ****         slab->numOfFreeSlots++;
 1513              		.loc 1 98 29 is_stmt 0 discriminator 4
 1514 09a8 93871700 		addi	a5,a5,1
 1515 09ac 23B8F400 		sd	a5,16(s1)
  99:src/slabAllocator.cpp ****         Slab *&headTo = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead;
 1516              		.loc 1 99 9 is_stmt 1 discriminator 4
 1517              	.LVL151:
 1518              	.LBB66:
 1519              	.LBB67:
 1520              		.loc 2 14 27 discriminator 4
 1521              		.loc 2 14 52 is_stmt 0 discriminator 4
 1522 09b0 03B78401 		ld	a4,24(s1)
 1523              	.LVL152:
 1524              	.LBE67:
 1525              	.LBE66:
  99:src/slabAllocator.cpp ****         Slab *&headTo = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead;
 1526              		.loc 1 99 83 discriminator 4
 1527 09b4 6384E704 		beq	a5,a4,.L90
  99:src/slabAllocator.cpp ****         Slab *&headTo = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead;
 1528              		.loc 1 99 75 discriminator 2
 1529 09b8 83B50403 		ld	a1,48(s1)
  99:src/slabAllocator.cpp ****         Slab *&headTo = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead;
 1530              		.loc 1 99 83 discriminator 2
 1531 09bc 93858506 		addi	a1,a1,104
 1532              	.L84:
 1533              	.LVL153:
 101:src/slabAllocator.cpp ****         if(slab->isEmpty()) {
 1534              		.loc 1 101 9 is_stmt 1 discriminator 4
 1535              	.LBE63:
 1536              	.LBE70:
 1537              		.loc 2 14 27 discriminator 4
 1538              	.LBB71:
 1539              	.LBB68:
 101:src/slabAllocator.cpp ****         if(slab->isEmpty()) {
 1540              		.loc 1 101 9 is_stmt 0 discriminator 4
 1541 09c0 6384E704 		beq	a5,a4,.L91
 106:src/slabAllocator.cpp ****             if (headTo != headFrom)
 1542              		.loc 1 106 13 is_stmt 1
 106:src/slabAllocator.cpp ****             if (headTo != headFrom)
 1543              		.loc 1 106 17 is_stmt 0
 1544 09c4 03B70500 		ld	a4,0(a1)
 106:src/slabAllocator.cpp ****             if (headTo != headFrom)
 1545              		.loc 1 106 27
 1546 09c8 83370500 		ld	a5,0(a0)
 106:src/slabAllocator.cpp ****             if (headTo != headFrom)
 1547              		.loc 1 106 13
 1548 09cc 6308F700 		beq	a4,a5,.L79
 107:src/slabAllocator.cpp ****                 SlabAllocator::move(headFrom, headTo, slab);
 1549              		.loc 1 107 17 is_stmt 1
 107:src/slabAllocator.cpp ****                 SlabAllocator::move(headFrom, headTo, slab);
 1550              		.loc 1 107 36 is_stmt 0
 1551 09d0 13860400 		mv	a2,s1
GAS LISTING /tmp/ccr33Mli.s 			page 41


 1552 09d4 97000000 		call	_ZN13SlabAllocator4moveERP4SlabS2_S1_
 1552      E7800000 
 1553              	.LVL154:
 1554              	.L79:
 1555              	.LBE68:
 1556              	.LBE71:
 109:src/slabAllocator.cpp **** }
 1557              		.loc 1 109 1
 1558 09dc 83308101 		ld	ra,24(sp)
 1559              		.cfi_remember_state
 1560              		.cfi_restore 1
 1561 09e0 03340101 		ld	s0,16(sp)
 1562              		.cfi_restore 8
 1563              		.cfi_def_cfa 2, 32
 1564 09e4 83348100 		ld	s1,8(sp)
 1565              		.cfi_restore 9
 1566              	.LVL155:
 1567 09e8 13010102 		addi	sp,sp,32
 1568              		.cfi_def_cfa_offset 0
 1569 09ec 67800000 		jr	ra
 1570              	.LVL156:
 1571              	.L81:
 1572              		.cfi_restore_state
 1573              	.LBB72:
 1574              	.LBB69:
  97:src/slabAllocator.cpp ****         Slab *&headFrom = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 1575              		.loc 1 97 75 discriminator 2
 1576 09f0 03350503 		ld	a0,48(a0)
  97:src/slabAllocator.cpp ****         Slab *&headFrom = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 1577              		.loc 1 97 83 discriminator 2
 1578 09f4 13058506 		addi	a0,a0,104
 1579 09f8 6FF01FFB 		j	.L82
 1580              	.LVL157:
 1581              	.L90:
  99:src/slabAllocator.cpp ****         Slab *&headTo = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead;
 1582              		.loc 1 99 49 discriminator 1
 1583 09fc 83B50403 		ld	a1,48(s1)
  99:src/slabAllocator.cpp ****         Slab *&headTo = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead;
 1584              		.loc 1 99 83 discriminator 1
 1585 0a00 93850506 		addi	a1,a1,96
 1586 0a04 6FF0DFFB 		j	.L84
 1587              	.LVL158:
 1588              	.L91:
 102:src/slabAllocator.cpp ****             SlabAllocator::removeFromList(headFrom, slab);
 1589              		.loc 1 102 13 is_stmt 1
 102:src/slabAllocator.cpp ****             SlabAllocator::removeFromList(headFrom, slab);
 1590              		.loc 1 102 42 is_stmt 0
 1591 0a08 93850400 		mv	a1,s1
 1592              	.LVL159:
 1593 0a0c 97000000 		call	_ZN13SlabAllocator14removeFromListERP4SlabS1_
 1593      E7800000 
 1594              	.LVL160:
 103:src/slabAllocator.cpp ****             Buddy::free(slab, slab->parent->slabSize);
 1595              		.loc 1 103 13 is_stmt 1
 103:src/slabAllocator.cpp ****             Buddy::free(slab, slab->parent->slabSize);
 1596              		.loc 1 103 37 is_stmt 0
 1597 0a14 83B70403 		ld	a5,48(s1)
GAS LISTING /tmp/ccr33Mli.s 			page 42


 103:src/slabAllocator.cpp ****             Buddy::free(slab, slab->parent->slabSize);
 1598              		.loc 1 103 24
 1599 0a18 83B58704 		ld	a1,72(a5)
 1600 0a1c 13850400 		mv	a0,s1
 1601 0a20 97000000 		call	_ZN5Buddy4freeEPvm@plt
 1601      E7800000 
 1602              	.LVL161:
 1603 0a28 6FF05FFB 		j	.L79
 1604              	.LVL162:
 1605              	.L87:
 1606              		.cfi_def_cfa_register 2
 1607              		.cfi_restore 1
 1608              		.cfi_restore 8
 1609              		.cfi_restore 9
 1610 0a2c 67800000 		ret
 1611              	.LBE69:
 1612              	.LBE72:
 1613              		.cfi_endproc
 1614              	.LFE15:
 1616              		.align	2
 1617              		.globl	_ZN13SlabAllocator10freeObjectEP5CachePKv
 1619              	_ZN13SlabAllocator10freeObjectEP5CachePKv:
 1620              	.LFB16:
 111:src/slabAllocator.cpp **** bool SlabAllocator::freeObject(Cache* cache, const void *addr) {
 1621              		.loc 1 111 64 is_stmt 1
 1622              		.cfi_startproc
 1623              	.LVL163:
 1624 0a30 130101FE 		addi	sp,sp,-32
 1625              		.cfi_def_cfa_offset 32
 1626 0a34 233C1100 		sd	ra,24(sp)
 1627 0a38 23388100 		sd	s0,16(sp)
 1628 0a3c 23349100 		sd	s1,8(sp)
 1629 0a40 23302101 		sd	s2,0(sp)
 1630              		.cfi_offset 1, -8
 1631              		.cfi_offset 8, -16
 1632              		.cfi_offset 9, -24
 1633              		.cfi_offset 18, -32
 1634 0a44 13040102 		addi	s0,sp,32
 1635              		.cfi_def_cfa 8, 0
 1636 0a48 13090500 		mv	s2,a0
 1637 0a4c 93840500 		mv	s1,a1
 112:src/slabAllocator.cpp ****     if(cache->dtor)
 1638              		.loc 1 112 5
 112:src/slabAllocator.cpp ****     if(cache->dtor)
 1639              		.loc 1 112 15 is_stmt 0
 1640 0a50 83378505 		ld	a5,88(a0)
 112:src/slabAllocator.cpp ****     if(cache->dtor)
 1641              		.loc 1 112 5
 1642 0a54 63860700 		beqz	a5,.L93
 113:src/slabAllocator.cpp ****         cache->dtor((void*)addr);
 1643              		.loc 1 113 9 is_stmt 1
 113:src/slabAllocator.cpp ****         cache->dtor((void*)addr);
 1644              		.loc 1 113 20 is_stmt 0
 1645 0a58 13850500 		mv	a0,a1
 1646              	.LVL164:
 1647 0a5c E7800700 		jalr	a5
 1648              	.LVL165:
GAS LISTING /tmp/ccr33Mli.s 			page 43


 1649              	.L93:
 114:src/slabAllocator.cpp ****     if(cache->ctor)
 1650              		.loc 1 114 5 is_stmt 1
 114:src/slabAllocator.cpp ****     if(cache->ctor)
 1651              		.loc 1 114 15 is_stmt 0
 1652 0a60 83370905 		ld	a5,80(s2)
 114:src/slabAllocator.cpp ****     if(cache->ctor)
 1653              		.loc 1 114 5
 1654 0a64 63860700 		beqz	a5,.L94
 115:src/slabAllocator.cpp ****         cache->ctor((void*)addr);
 1655              		.loc 1 115 9 is_stmt 1
 115:src/slabAllocator.cpp ****         cache->ctor((void*)addr);
 1656              		.loc 1 115 20 is_stmt 0
 1657 0a68 13850400 		mv	a0,s1
 1658 0a6c E7800700 		jalr	a5
 1659              	.LVL166:
 1660              	.L94:
 117:src/slabAllocator.cpp ****     bool deleted = SlabAllocator::freeFromList(cache->fullHead, addr);
 1661              		.loc 1 117 5 is_stmt 1
 117:src/slabAllocator.cpp ****     bool deleted = SlabAllocator::freeFromList(cache->fullHead, addr);
 1662              		.loc 1 117 47 is_stmt 0
 1663 0a70 03350907 		ld	a0,112(s2)
 1664              	.LVL167:
 1665 0a74 6F008000 		j	.L97
 1666              	.LVL168:
 1667              	.L96:
 1668              	.LBB87:
 1669              	.LBB88:
 1670              	.LBB89:
  59:src/../h/slabAllocator.hpp ****         }
  60:src/../h/slabAllocator.hpp ****         return nullptr;
  61:src/../h/slabAllocator.hpp ****     }
  62:src/../h/slabAllocator.hpp **** 
  63:src/../h/slabAllocator.hpp ****     static inline bool freeFromList(Slab* head,const void* addr){
  64:src/../h/slabAllocator.hpp ****         while(head){
  65:src/../h/slabAllocator.hpp ****             uint64 upperBound = SlabAllocator::getUpperBound(head);
  66:src/../h/slabAllocator.hpp ****             uint64 lowerBound = SlabAllocator::getLowerBound(head);
  67:src/../h/slabAllocator.hpp ****             if((uint64)addr < upperBound && (uint64)addr >= lowerBound){
  68:src/../h/slabAllocator.hpp ****                 uint64 index = ((uint64)addr - lowerBound) / head->parent->objectSize;
  69:src/../h/slabAllocator.hpp ****                 freeSlot(head, index);
  70:src/../h/slabAllocator.hpp ****                 return true;
  71:src/../h/slabAllocator.hpp ****             }
  72:src/../h/slabAllocator.hpp ****             head = head->next;
 1671              		.loc 3 72 13 is_stmt 1
 1672              		.loc 3 72 18 is_stmt 0
 1673 0a78 03358500 		ld	a0,8(a0)
 1674              	.LVL169:
 1675              	.L97:
 1676              	.LBE89:
  64:src/../h/slabAllocator.hpp ****             uint64 upperBound = SlabAllocator::getUpperBound(head);
 1677              		.loc 3 64 9 is_stmt 1
  64:src/../h/slabAllocator.hpp ****             uint64 upperBound = SlabAllocator::getUpperBound(head);
 1678              		.loc 3 64 15
 1679 0a7c 630E0502 		beqz	a0,.L102
 1680              	.LBB94:
  65:src/../h/slabAllocator.hpp ****             uint64 lowerBound = SlabAllocator::getLowerBound(head);
 1681              		.loc 3 65 13
GAS LISTING /tmp/ccr33Mli.s 			page 44


 1682              	.LVL170:
 1683              	.LBB90:
 1684              	.LBB91:
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1685              		.loc 3 51 52
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1686              		.loc 3 51 73 is_stmt 0
 1687 0a80 03378502 		ld	a4,40(a0)
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1688              		.loc 3 51 94
 1689 0a84 83378501 		ld	a5,24(a0)
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1690              		.loc 3 51 116
 1691 0a88 83360503 		ld	a3,48(a0)
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1692              		.loc 3 51 124
 1693 0a8c 83B50604 		ld	a1,64(a3)
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1694              		.loc 3 51 109
 1695 0a90 B387B702 		mul	a5,a5,a1
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1696              		.loc 3 51 124
 1697 0a94 B307F700 		add	a5,a4,a5
 1698              	.LVL171:
 1699              	.LBE91:
 1700              	.LBE90:
  66:src/../h/slabAllocator.hpp ****             if((uint64)addr < upperBound && (uint64)addr >= lowerBound){
 1701              		.loc 3 66 13 is_stmt 1
 1702              	.LBE94:
 1703              	.LBE88:
 1704              	.LBE87:
  52:src/../h/slabAllocator.hpp **** 
 1705              		.loc 3 52 52
 1706              	.LBB97:
 1707              	.LBB96:
 1708              	.LBB95:
  67:src/../h/slabAllocator.hpp ****                 uint64 index = ((uint64)addr - lowerBound) / head->parent->objectSize;
 1709              		.loc 3 67 13
 1710              	.LBB92:
 1711 0a98 E3F0F4FE 		bleu	a5,s1,.L96
  67:src/../h/slabAllocator.hpp ****                 uint64 index = ((uint64)addr - lowerBound) / head->parent->objectSize;
 1712              		.loc 3 67 42 is_stmt 0
 1713 0a9c E3EEE4FC 		bgtu	a4,s1,.L96
 1714              	.LBB93:
  68:src/../h/slabAllocator.hpp ****                 freeSlot(head, index);
 1715              		.loc 3 68 17 is_stmt 1
  68:src/../h/slabAllocator.hpp ****                 freeSlot(head, index);
 1716              		.loc 3 68 46 is_stmt 0
 1717 0aa0 3387E440 		sub	a4,s1,a4
 1718              	.LVL172:
  69:src/../h/slabAllocator.hpp ****                 return true;
 1719              		.loc 3 69 17 is_stmt 1
  69:src/../h/slabAllocator.hpp ****                 return true;
 1720              		.loc 3 69 25 is_stmt 0
 1721 0aa4 B355B702 		divu	a1,a4,a1
 1722              	.LVL173:
 1723 0aa8 97000000 		call	_ZN13SlabAllocator8freeSlotEP4Slabm
GAS LISTING /tmp/ccr33Mli.s 			page 45


 1723      E7800000 
 1724              	.LVL174:
  70:src/../h/slabAllocator.hpp ****             }
 1725              		.loc 3 70 17 is_stmt 1
  70:src/../h/slabAllocator.hpp ****             }
 1726              		.loc 3 70 24 is_stmt 0
 1727 0ab0 13051000 		li	a0,1
 1728 0ab4 6F008000 		j	.L95
 1729              	.LVL175:
 1730              	.L102:
 1731              	.LBE93:
 1732              	.LBE92:
 1733              	.LBE95:
  73:src/../h/slabAllocator.hpp ****         }
  74:src/../h/slabAllocator.hpp ****         return false;
 1734              		.loc 3 74 16
 1735 0ab8 13050000 		li	a0,0
 1736              	.LVL176:
 1737              	.L95:
 1738              	.LBE96:
 1739              	.LBE97:
 118:src/slabAllocator.cpp ****     if(deleted)
 1740              		.loc 1 118 5 is_stmt 1
 1741 0abc 630E0500 		beqz	a0,.L104
 1742              	.LVL177:
 1743              	.L98:
 124:src/slabAllocator.cpp **** }
 1744              		.loc 1 124 1 is_stmt 0
 1745 0ac0 83308101 		ld	ra,24(sp)
 1746              		.cfi_remember_state
 1747              		.cfi_restore 1
 1748 0ac4 03340101 		ld	s0,16(sp)
 1749              		.cfi_restore 8
 1750              		.cfi_def_cfa 2, 32
 1751 0ac8 83348100 		ld	s1,8(sp)
 1752              		.cfi_restore 9
 1753              	.LVL178:
 1754 0acc 03390100 		ld	s2,0(sp)
 1755              		.cfi_restore 18
 1756              	.LVL179:
 1757 0ad0 13010102 		addi	sp,sp,32
 1758              		.cfi_def_cfa_offset 0
 1759 0ad4 67800000 		jr	ra
 1760              	.LVL180:
 1761              	.L104:
 1762              		.cfi_restore_state
 121:src/slabAllocator.cpp ****     deleted = SlabAllocator::freeFromList(cache->partialHead, addr);
 1763              		.loc 1 121 5 is_stmt 1
 121:src/slabAllocator.cpp ****     deleted = SlabAllocator::freeFromList(cache->partialHead, addr);
 1764              		.loc 1 121 42 is_stmt 0
 1765 0ad8 83378906 		ld	a5,104(s2)
 1766              	.LVL181:
 1767 0adc 6F008000 		j	.L101
 1768              	.LVL182:
 1769              	.L100:
 1770              	.LBB98:
 1771              	.LBB99:
GAS LISTING /tmp/ccr33Mli.s 			page 46


 1772              	.LBB100:
  72:src/../h/slabAllocator.hpp ****         }
 1773              		.loc 3 72 13 is_stmt 1
  72:src/../h/slabAllocator.hpp ****         }
 1774              		.loc 3 72 18 is_stmt 0
 1775 0ae0 83B78700 		ld	a5,8(a5)
 1776              	.LVL183:
 1777              	.L101:
 1778              	.LBE100:
  64:src/../h/slabAllocator.hpp ****             uint64 upperBound = SlabAllocator::getUpperBound(head);
 1779              		.loc 3 64 9 is_stmt 1
  64:src/../h/slabAllocator.hpp ****             uint64 upperBound = SlabAllocator::getUpperBound(head);
 1780              		.loc 3 64 15
 1781 0ae4 E38E07FC 		beqz	a5,.L98
 1782              	.LBB105:
  65:src/../h/slabAllocator.hpp ****             uint64 lowerBound = SlabAllocator::getLowerBound(head);
 1783              		.loc 3 65 13
 1784              	.LVL184:
 1785              	.LBB101:
 1786              	.LBB102:
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1787              		.loc 3 51 52
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1788              		.loc 3 51 73 is_stmt 0
 1789 0ae8 83B68702 		ld	a3,40(a5)
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1790              		.loc 3 51 94
 1791 0aec 03B78701 		ld	a4,24(a5)
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1792              		.loc 3 51 116
 1793 0af0 03B60703 		ld	a2,48(a5)
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1794              		.loc 3 51 124
 1795 0af4 83350604 		ld	a1,64(a2)
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1796              		.loc 3 51 109
 1797 0af8 3307B702 		mul	a4,a4,a1
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1798              		.loc 3 51 124
 1799 0afc 3387E600 		add	a4,a3,a4
 1800              	.LVL185:
 1801              	.LBE102:
 1802              	.LBE101:
  66:src/../h/slabAllocator.hpp ****             if((uint64)addr < upperBound && (uint64)addr >= lowerBound){
 1803              		.loc 3 66 13 is_stmt 1
 1804              	.LBE105:
 1805              	.LBE99:
 1806              	.LBE98:
  52:src/../h/slabAllocator.hpp **** 
 1807              		.loc 3 52 52
 1808              	.LBB108:
 1809              	.LBB107:
 1810              	.LBB106:
  67:src/../h/slabAllocator.hpp ****                 uint64 index = ((uint64)addr - lowerBound) / head->parent->objectSize;
 1811              		.loc 3 67 13
 1812              	.LBB103:
 1813 0b00 E3F0E4FE 		bleu	a4,s1,.L100
GAS LISTING /tmp/ccr33Mli.s 			page 47


  67:src/../h/slabAllocator.hpp ****                 uint64 index = ((uint64)addr - lowerBound) / head->parent->objectSize;
 1814              		.loc 3 67 42 is_stmt 0
 1815 0b04 E3EED4FC 		bgtu	a3,s1,.L100
 1816              	.LBB104:
  68:src/../h/slabAllocator.hpp ****                 freeSlot(head, index);
 1817              		.loc 3 68 17 is_stmt 1
  68:src/../h/slabAllocator.hpp ****                 freeSlot(head, index);
 1818              		.loc 3 68 46 is_stmt 0
 1819 0b08 B386D440 		sub	a3,s1,a3
 1820              	.LVL186:
  69:src/../h/slabAllocator.hpp ****                 return true;
 1821              		.loc 3 69 17 is_stmt 1
  69:src/../h/slabAllocator.hpp ****                 return true;
 1822              		.loc 3 69 25 is_stmt 0
 1823 0b0c B3D5B602 		divu	a1,a3,a1
 1824              	.LVL187:
 1825 0b10 13850700 		mv	a0,a5
 1826              	.LVL188:
 1827 0b14 97000000 		call	_ZN13SlabAllocator8freeSlotEP4Slabm
 1827      E7800000 
 1828              	.LVL189:
  70:src/../h/slabAllocator.hpp ****             }
 1829              		.loc 3 70 17 is_stmt 1
  70:src/../h/slabAllocator.hpp ****             }
 1830              		.loc 3 70 24 is_stmt 0
 1831 0b1c 13051000 		li	a0,1
 1832 0b20 6FF01FFA 		j	.L98
 1833              	.LBE104:
 1834              	.LBE103:
 1835              	.LBE106:
 1836              	.LBE107:
 1837              	.LBE108:
 1838              		.cfi_endproc
 1839              	.LFE16:
 1841              		.align	2
 1842              		.globl	_ZN13SlabAllocator10freeBufferEPKv
 1844              	_ZN13SlabAllocator10freeBufferEPKv:
 1845              	.LFB17:
 126:src/slabAllocator.cpp **** void SlabAllocator::freeBuffer(const void *addr) {
 1846              		.loc 1 126 50 is_stmt 1
 1847              		.cfi_startproc
 1848              	.LVL190:
 1849 0b24 130101FE 		addi	sp,sp,-32
 1850              		.cfi_def_cfa_offset 32
 1851 0b28 233C1100 		sd	ra,24(sp)
 1852 0b2c 23388100 		sd	s0,16(sp)
 1853 0b30 23349100 		sd	s1,8(sp)
 1854 0b34 23302101 		sd	s2,0(sp)
 1855              		.cfi_offset 1, -8
 1856              		.cfi_offset 8, -16
 1857              		.cfi_offset 9, -24
 1858              		.cfi_offset 18, -32
 1859 0b38 13040102 		addi	s0,sp,32
 1860              		.cfi_def_cfa 8, 0
 1861 0b3c 13090500 		mv	s2,a0
 127:src/slabAllocator.cpp ****     for(int i=0;i<BUCKET_SIZE;i++)
 1862              		.loc 1 127 5
GAS LISTING /tmp/ccr33Mli.s 			page 48


 1863              	.LVL191:
 1864              	.LBB109:
 127:src/slabAllocator.cpp ****     for(int i=0;i<BUCKET_SIZE;i++)
 1865              		.loc 1 127 13 is_stmt 0
 1866 0b40 93040000 		li	s1,0
 1867              	.LVL192:
 1868              	.L107:
 127:src/slabAllocator.cpp ****     for(int i=0;i<BUCKET_SIZE;i++)
 1869              		.loc 1 127 18 is_stmt 1 discriminator 1
 1870 0b44 9307C000 		li	a5,12
 1871 0b48 63C89702 		bgt	s1,a5,.L105
 128:src/slabAllocator.cpp ****         if(SlabAllocator::freeObject(sizeN[i], addr))
 1872              		.loc 1 128 9
 128:src/slabAllocator.cpp ****         if(SlabAllocator::freeObject(sizeN[i], addr))
 1873              		.loc 1 128 37 is_stmt 0
 1874 0b4c 13973400 		slli	a4,s1,3
 1875 0b50 97070000 		lla	a5,.LANCHOR0
 1875      93870700 
 1876 0b58 B387E700 		add	a5,a5,a4
 1877 0b5c 93050900 		mv	a1,s2
 1878 0b60 03B50700 		ld	a0,0(a5)
 1879 0b64 97000000 		call	_ZN13SlabAllocator10freeObjectEP5CachePKv
 1879      E7800000 
 1880              	.LVL193:
 128:src/slabAllocator.cpp ****         if(SlabAllocator::freeObject(sizeN[i], addr))
 1881              		.loc 1 128 9
 1882 0b6c 63160500 		bnez	a0,.L105
 127:src/slabAllocator.cpp ****     for(int i=0;i<BUCKET_SIZE;i++)
 1883              		.loc 1 127 5 is_stmt 1 discriminator 2
 1884 0b70 9B841400 		addiw	s1,s1,1
 1885              	.LVL194:
 1886 0b74 6FF01FFD 		j	.L107
 1887              	.LVL195:
 1888              	.L105:
 1889              	.LBE109:
 130:src/slabAllocator.cpp **** }
 1890              		.loc 1 130 1 is_stmt 0
 1891 0b78 83308101 		ld	ra,24(sp)
 1892              		.cfi_restore 1
 1893 0b7c 03340101 		ld	s0,16(sp)
 1894              		.cfi_restore 8
 1895              		.cfi_def_cfa 2, 32
 1896 0b80 83348100 		ld	s1,8(sp)
 1897              		.cfi_restore 9
 1898              	.LVL196:
 1899 0b84 03390100 		ld	s2,0(sp)
 1900              		.cfi_restore 18
 1901              	.LVL197:
 1902 0b88 13010102 		addi	sp,sp,32
 1903              		.cfi_def_cfa_offset 0
 1904 0b8c 67800000 		jr	ra
 1905              		.cfi_endproc
 1906              	.LFE17:
 1908              		.align	2
 1909              		.globl	_ZN13SlabAllocator11deleteCacheERP5Cache
 1911              	_ZN13SlabAllocator11deleteCacheERP5Cache:
 1912              	.LFB19:
GAS LISTING /tmp/ccr33Mli.s 			page 49


 143:src/slabAllocator.cpp **** void SlabAllocator::deleteCache(Cache* &cache) {
 1913              		.loc 1 143 48 is_stmt 1
 1914              		.cfi_startproc
 1915              	.LVL198:
 1916 0b90 130101FE 		addi	sp,sp,-32
 1917              		.cfi_def_cfa_offset 32
 1918 0b94 233C1100 		sd	ra,24(sp)
 1919 0b98 23388100 		sd	s0,16(sp)
 1920 0b9c 23349100 		sd	s1,8(sp)
 1921 0ba0 23302101 		sd	s2,0(sp)
 1922              		.cfi_offset 1, -8
 1923              		.cfi_offset 8, -16
 1924              		.cfi_offset 9, -24
 1925              		.cfi_offset 18, -32
 1926 0ba4 13040102 		addi	s0,sp,32
 1927              		.cfi_def_cfa 8, 0
 1928 0ba8 93040500 		mv	s1,a0
 144:src/slabAllocator.cpp ****     deleteList(cache->fullHead);
 1929              		.loc 1 144 5
 144:src/slabAllocator.cpp ****     deleteList(cache->fullHead);
 1930              		.loc 1 144 16 is_stmt 0
 1931 0bac 03390500 		ld	s2,0(a0)
 144:src/slabAllocator.cpp ****     deleteList(cache->fullHead);
 1932              		.loc 1 144 23
 1933 0bb0 13090907 		addi	s2,s2,112
 1934              	.LVL199:
 1935              	.L111:
 1936              	.LBB119:
 1937              	.LBB120:
  75:src/../h/slabAllocator.hpp ****     }
  76:src/../h/slabAllocator.hpp **** 
  77:src/../h/slabAllocator.hpp ****     static inline void deleteList(Slab* &head){
  78:src/../h/slabAllocator.hpp ****         while(head){
 1938              		.loc 3 78 9 is_stmt 1
 1939              		.loc 3 78 15
 1940 0bb4 03350900 		ld	a0,0(s2)
 1941 0bb8 63020502 		beqz	a0,.L110
 1942              	.LBB121:
  79:src/../h/slabAllocator.hpp ****             Slab* tmp = head;
 1943              		.loc 3 79 13
 1944              	.LVL200:
  80:src/../h/slabAllocator.hpp ****             Buddy::free(tmp, head->parent->slabSize);
 1945              		.loc 3 80 13
 1946              		.loc 3 80 36 is_stmt 0
 1947 0bbc 83370503 		ld	a5,48(a0)
 1948              		.loc 3 80 24
 1949 0bc0 83B58704 		ld	a1,72(a5)
 1950 0bc4 97000000 		call	_ZN5Buddy4freeEPvm@plt
 1950      E7800000 
 1951              	.LVL201:
  81:src/../h/slabAllocator.hpp ****             head = head->next;
 1952              		.loc 3 81 13 is_stmt 1
 1953              		.loc 3 81 20 is_stmt 0
 1954 0bcc 83370900 		ld	a5,0(s2)
 1955              		.loc 3 81 26
 1956 0bd0 83B78700 		ld	a5,8(a5)
 1957              		.loc 3 81 18
GAS LISTING /tmp/ccr33Mli.s 			page 50


 1958 0bd4 2330F900 		sd	a5,0(s2)
 1959              	.LBE121:
  78:src/../h/slabAllocator.hpp ****             Slab* tmp = head;
 1960              		.loc 3 78 9
 1961 0bd8 6FF0DFFD 		j	.L111
 1962              	.L110:
 1963              	.LVL202:
 1964              	.LBE120:
 1965              	.LBE119:
 145:src/slabAllocator.cpp ****     deleteList(cache->partialHead);
 1966              		.loc 1 145 5 is_stmt 1
 145:src/slabAllocator.cpp ****     deleteList(cache->partialHead);
 1967              		.loc 1 145 16 is_stmt 0
 1968 0bdc 03B90400 		ld	s2,0(s1)
 145:src/slabAllocator.cpp ****     deleteList(cache->partialHead);
 1969              		.loc 1 145 23
 1970 0be0 13098906 		addi	s2,s2,104
 1971              	.LVL203:
 1972              	.L113:
 1973              	.LBB122:
 1974              	.LBB123:
  78:src/../h/slabAllocator.hpp ****             Slab* tmp = head;
 1975              		.loc 3 78 9 is_stmt 1
  78:src/../h/slabAllocator.hpp ****             Slab* tmp = head;
 1976              		.loc 3 78 15
 1977 0be4 03350900 		ld	a0,0(s2)
 1978 0be8 63020502 		beqz	a0,.L112
 1979              	.LBB124:
  79:src/../h/slabAllocator.hpp ****             Buddy::free(tmp, head->parent->slabSize);
 1980              		.loc 3 79 13
 1981              	.LVL204:
  80:src/../h/slabAllocator.hpp ****             head = head->next;
 1982              		.loc 3 80 13
  80:src/../h/slabAllocator.hpp ****             head = head->next;
 1983              		.loc 3 80 36 is_stmt 0
 1984 0bec 83370503 		ld	a5,48(a0)
  80:src/../h/slabAllocator.hpp ****             head = head->next;
 1985              		.loc 3 80 24
 1986 0bf0 83B58704 		ld	a1,72(a5)
 1987 0bf4 97000000 		call	_ZN5Buddy4freeEPvm@plt
 1987      E7800000 
 1988              	.LVL205:
 1989              		.loc 3 81 13 is_stmt 1
 1990              		.loc 3 81 20 is_stmt 0
 1991 0bfc 83370900 		ld	a5,0(s2)
 1992              		.loc 3 81 26
 1993 0c00 83B78700 		ld	a5,8(a5)
 1994              		.loc 3 81 18
 1995 0c04 2330F900 		sd	a5,0(s2)
 1996              	.LBE124:
  78:src/../h/slabAllocator.hpp ****             Slab* tmp = head;
 1997              		.loc 3 78 9
 1998 0c08 6FF0DFFD 		j	.L113
 1999              	.L112:
 2000              	.LVL206:
 2001              	.LBE123:
 2002              	.LBE122:
GAS LISTING /tmp/ccr33Mli.s 			page 51


 146:src/slabAllocator.cpp ****     deleteList(cache->emptyHead);
 2003              		.loc 1 146 5 is_stmt 1
 146:src/slabAllocator.cpp ****     deleteList(cache->emptyHead);
 2004              		.loc 1 146 16 is_stmt 0
 2005 0c0c 03B90400 		ld	s2,0(s1)
 146:src/slabAllocator.cpp ****     deleteList(cache->emptyHead);
 2006              		.loc 1 146 23
 2007 0c10 13090906 		addi	s2,s2,96
 2008              	.LVL207:
 2009              	.L115:
 2010              	.LBB125:
 2011              	.LBB126:
  78:src/../h/slabAllocator.hpp ****             Slab* tmp = head;
 2012              		.loc 3 78 9 is_stmt 1
  78:src/../h/slabAllocator.hpp ****             Slab* tmp = head;
 2013              		.loc 3 78 15
 2014 0c14 03350900 		ld	a0,0(s2)
 2015 0c18 63020502 		beqz	a0,.L114
 2016              	.LBB127:
  79:src/../h/slabAllocator.hpp ****             Buddy::free(tmp, head->parent->slabSize);
 2017              		.loc 3 79 13
 2018              	.LVL208:
  80:src/../h/slabAllocator.hpp ****             head = head->next;
 2019              		.loc 3 80 13
  80:src/../h/slabAllocator.hpp ****             head = head->next;
 2020              		.loc 3 80 36 is_stmt 0
 2021 0c1c 83370503 		ld	a5,48(a0)
  80:src/../h/slabAllocator.hpp ****             head = head->next;
 2022              		.loc 3 80 24
 2023 0c20 83B58704 		ld	a1,72(a5)
 2024 0c24 97000000 		call	_ZN5Buddy4freeEPvm@plt
 2024      E7800000 
 2025              	.LVL209:
 2026              		.loc 3 81 13 is_stmt 1
 2027              		.loc 3 81 20 is_stmt 0
 2028 0c2c 83370900 		ld	a5,0(s2)
 2029              		.loc 3 81 26
 2030 0c30 83B78700 		ld	a5,8(a5)
 2031              		.loc 3 81 18
 2032 0c34 2330F900 		sd	a5,0(s2)
 2033              	.LBE127:
  78:src/../h/slabAllocator.hpp ****             Slab* tmp = head;
 2034              		.loc 3 78 9
 2035 0c38 6FF0DFFD 		j	.L115
 2036              	.L114:
 2037              	.LVL210:
 2038              	.LBE126:
 2039              	.LBE125:
 147:src/slabAllocator.cpp ****     SlabAllocator::freeObject(SlabAllocator::cache, cache);
 2040              		.loc 1 147 5 is_stmt 1
 147:src/slabAllocator.cpp ****     SlabAllocator::freeObject(SlabAllocator::cache, cache);
 2041              		.loc 1 147 30 is_stmt 0
 2042 0c3c 83B50400 		ld	a1,0(s1)
 2043 0c40 17050000 		ld	a0,.LANCHOR0+104
 2043      03350500 
 2044 0c48 97000000 		call	_ZN13SlabAllocator10freeObjectEP5CachePKv
 2044      E7800000 
GAS LISTING /tmp/ccr33Mli.s 			page 52


 2045              	.LVL211:
 148:src/slabAllocator.cpp ****     cache = nullptr;
 2046              		.loc 1 148 5 is_stmt 1
 148:src/slabAllocator.cpp ****     cache = nullptr;
 2047              		.loc 1 148 11 is_stmt 0
 2048 0c50 23B00400 		sd	zero,0(s1)
 149:src/slabAllocator.cpp **** }
 2049              		.loc 1 149 1
 2050 0c54 83308101 		ld	ra,24(sp)
 2051              		.cfi_restore 1
 2052 0c58 03340101 		ld	s0,16(sp)
 2053              		.cfi_restore 8
 2054              		.cfi_def_cfa 2, 32
 2055 0c5c 83348100 		ld	s1,8(sp)
 2056              		.cfi_restore 9
 2057              	.LVL212:
 2058 0c60 03390100 		ld	s2,0(sp)
 2059              		.cfi_restore 18
 2060 0c64 13010102 		addi	sp,sp,32
 2061              		.cfi_def_cfa_offset 0
 2062 0c68 67800000 		jr	ra
 2063              		.cfi_endproc
 2064              	.LFE19:
 2066              		.globl	_ZN13SlabAllocator20blocksResponsibleForE
 2067              		.globl	_ZN13SlabAllocator9startAddrE
 2068              		.globl	_ZN13SlabAllocator5namesE
 2069              		.section	.rodata.str1.8
 2070 0173 00000000 		.align	3
 2070      00
 2071              	.LC20:
 2072 0178 42756666 		.string	"Buffer Cache No. 0"
 2072      65722043 
 2072      61636865 
 2072      204E6F2E 
 2072      203000
 2073 018b 00000000 		.align	3
 2073      00
 2074              	.LC21:
 2075 0190 42756666 		.string	"Buffer Cache No. 1"
 2075      65722043 
 2075      61636865 
 2075      204E6F2E 
 2075      203100
 2076 01a3 00000000 		.align	3
 2076      00
 2077              	.LC22:
 2078 01a8 42756666 		.string	"Buffer Cache No. 2"
 2078      65722043 
 2078      61636865 
 2078      204E6F2E 
 2078      203200
 2079 01bb 00000000 		.align	3
 2079      00
 2080              	.LC23:
 2081 01c0 42756666 		.string	"Buffer Cache No. 3"
 2081      65722043 
 2081      61636865 
GAS LISTING /tmp/ccr33Mli.s 			page 53


 2081      204E6F2E 
 2081      203300
 2082 01d3 00000000 		.align	3
 2082      00
 2083              	.LC24:
 2084 01d8 42756666 		.string	"Buffer Cache No. 4"
 2084      65722043 
 2084      61636865 
 2084      204E6F2E 
 2084      203400
 2085 01eb 00000000 		.align	3
 2085      00
 2086              	.LC25:
 2087 01f0 42756666 		.string	"Buffer Cache No. 5"
 2087      65722043 
 2087      61636865 
 2087      204E6F2E 
 2087      203500
 2088 0203 00000000 		.align	3
 2088      00
 2089              	.LC26:
 2090 0208 42756666 		.string	"Buffer Cache No. 6"
 2090      65722043 
 2090      61636865 
 2090      204E6F2E 
 2090      203600
 2091 021b 00000000 		.align	3
 2091      00
 2092              	.LC27:
 2093 0220 42756666 		.string	"Buffer Cache No. 7"
 2093      65722043 
 2093      61636865 
 2093      204E6F2E 
 2093      203700
 2094 0233 00000000 		.align	3
 2094      00
 2095              	.LC28:
 2096 0238 42756666 		.string	"Buffer Cache No. 8"
 2096      65722043 
 2096      61636865 
 2096      204E6F2E 
 2096      203800
 2097 024b 00000000 		.align	3
 2097      00
 2098              	.LC29:
 2099 0250 42756666 		.string	"Buffer Cache No. 9"
 2099      65722043 
 2099      61636865 
 2099      204E6F2E 
 2099      203900
 2100 0263 00000000 		.align	3
 2100      00
 2101              	.LC30:
 2102 0268 42756666 		.string	"Buffer Cache No. 10"
 2102      65722043 
 2102      61636865 
 2102      204E6F2E 
GAS LISTING /tmp/ccr33Mli.s 			page 54


 2102      20313000 
 2103 027c 00000000 		.align	3
 2104              	.LC31:
 2105 0280 42756666 		.string	"Buffer Cache No. 11"
 2105      65722043 
 2105      61636865 
 2105      204E6F2E 
 2105      20313100 
 2106 0294 00000000 		.align	3
 2107              	.LC32:
 2108 0298 42756666 		.string	"Buffer Cache No. 12"
 2108      65722043 
 2108      61636865 
 2108      204E6F2E 
 2108      20313200 
 2109              		.globl	_ZN13SlabAllocator5sizeNE
 2110              		.globl	_ZN13SlabAllocator5cacheE
 2111              		.bss
 2112              		.align	3
 2113              		.set	.LANCHOR0,. + 0
 2116              	_ZN13SlabAllocator5sizeNE:
 2117 0000 00000000 		.zero	104
 2117      00000000 
 2117      00000000 
 2117      00000000 
 2117      00000000 
 2120              	_ZN13SlabAllocator5cacheE:
 2121 0068 00000000 		.zero	8
 2121      00000000 
 2124              	_ZN13SlabAllocator9startAddrE:
 2125 0070 00000000 		.zero	8
 2125      00000000 
 2128              	_ZN13SlabAllocator20blocksResponsibleForE:
 2129 0078 00000000 		.zero	8
 2129      00000000 
 2130              		.section	.data.rel.local,"aw"
 2131              		.align	3
 2132              		.set	.LANCHOR1,. + 0
 2135              	_ZN13SlabAllocator5namesE:
 2136 0000 00000000 		.dword	.LC20
 2136      00000000 
 2137 0008 00000000 		.dword	.LC21
 2137      00000000 
 2138 0010 00000000 		.dword	.LC22
 2138      00000000 
 2139 0018 00000000 		.dword	.LC23
 2139      00000000 
 2140 0020 00000000 		.dword	.LC24
 2140      00000000 
 2141 0028 00000000 		.dword	.LC25
 2141      00000000 
 2142 0030 00000000 		.dword	.LC26
 2142      00000000 
 2143 0038 00000000 		.dword	.LC27
 2143      00000000 
 2144 0040 00000000 		.dword	.LC28
 2144      00000000 
GAS LISTING /tmp/ccr33Mli.s 			page 55


 2145 0048 00000000 		.dword	.LC29
 2145      00000000 
 2146 0050 00000000 		.dword	.LC30
 2146      00000000 
 2147 0058 00000000 		.dword	.LC31
 2147      00000000 
 2148 0060 00000000 		.dword	.LC32
 2148      00000000 
 2149              		.text
 2150              	.Letext0:
 2151              		.file 5 "src/../h/../h/../lib/hw.h"
 2152              		.file 6 "src/../h/../h/utility.hpp"
 2153              		.file 7 "src/../h/../h/consoleUtil.hpp"
 2154              		.file 8 "src/../h/../h/cache_t.hpp"
GAS LISTING /tmp/ccr33Mli.s 			page 56


DEFINED SYMBOLS
                            *ABS*:0000000000000000 slabAllocator.cpp
     /tmp/ccr33Mli.s:9      .text:0000000000000000 _ZN13SlabAllocator11shrinkCacheEP5Cache
     /tmp/ccr33Mli.s:13     .text:0000000000000000 .L0 
     /tmp/ccr33Mli.s:15     .text:0000000000000000 .L0 
     /tmp/ccr33Mli.s:16     .text:0000000000000004 .L0 
     /tmp/ccr33Mli.s:21     .text:0000000000000014 .L0 
     /tmp/ccr33Mli.s:22     .text:0000000000000014 .L0 
     /tmp/ccr33Mli.s:23     .text:0000000000000014 .L0 
     /tmp/ccr33Mli.s:24     .text:0000000000000014 .L0 
     /tmp/ccr33Mli.s:26     .text:0000000000000018 .L0 
     /tmp/ccr33Mli.s:30     .text:000000000000001c .L0 
     /tmp/ccr33Mli.s:31     .text:000000000000001c .L0 
     /tmp/ccr33Mli.s:35     .text:0000000000000020 .L0 
     /tmp/ccr33Mli.s:36     .text:0000000000000020 .L0 
     /tmp/ccr33Mli.s:39     .text:0000000000000028 .L0 
     /tmp/ccr33Mli.s:40     .text:0000000000000028 .L0 
     /tmp/ccr33Mli.s:44     .text:0000000000000034 .L0 
     /tmp/ccr33Mli.s:45     .text:0000000000000034 .L0 
     /tmp/ccr33Mli.s:47     .text:0000000000000038 .L0 
     /tmp/ccr33Mli.s:49     .text:000000000000003c .L0 
     /tmp/ccr33Mli.s:52     .text:0000000000000040 .L0 
     /tmp/ccr33Mli.s:53     .text:0000000000000040 .L0 
     /tmp/ccr33Mli.s:55     .text:0000000000000044 .L0 
     /tmp/ccr33Mli.s:57     .text:0000000000000048 .L0 
     /tmp/ccr33Mli.s:61     .text:000000000000004c .L0 
     /tmp/ccr33Mli.s:62     .text:000000000000004c .L0 
     /tmp/ccr33Mli.s:64     .text:0000000000000054 .L0 
     /tmp/ccr33Mli.s:66     .text:0000000000000058 .L0 
     /tmp/ccr33Mli.s:67     .text:0000000000000058 .L0 
     /tmp/ccr33Mli.s:69     .text:000000000000005c .L0 
     /tmp/ccr33Mli.s:72     .text:0000000000000060 .L0 
     /tmp/ccr33Mli.s:75     .text:0000000000000064 .L0 
     /tmp/ccr33Mli.s:77     .text:0000000000000068 .L0 
     /tmp/ccr33Mli.s:115    .text:0000000000000068 _ZN13SlabAllocator9printSlabEP4Slab
     /tmp/ccr33Mli.s:118    .text:0000000000000068 .L0 
     /tmp/ccr33Mli.s:120    .text:0000000000000068 .L0 
     /tmp/ccr33Mli.s:122    .text:0000000000000068 .L0 
     /tmp/ccr33Mli.s:125    .text:000000000000006c .L0 
     /tmp/ccr33Mli.s:126    .text:0000000000000070 .L0 
     /tmp/ccr33Mli.s:131    .text:0000000000000080 .L0 
     /tmp/ccr33Mli.s:132    .text:0000000000000080 .L0 
     /tmp/ccr33Mli.s:133    .text:0000000000000080 .L0 
     /tmp/ccr33Mli.s:134    .text:0000000000000080 .L0 
     /tmp/ccr33Mli.s:136    .text:0000000000000084 .L0 
     /tmp/ccr33Mli.s:141    .text:0000000000000088 .L0 
     /tmp/ccr33Mli.s:142    .text:0000000000000088 .L0 
     /tmp/ccr33Mli.s:149    .text:00000000000000a4 .L0 
     /tmp/ccr33Mli.s:150    .text:00000000000000a4 .L0 
     /tmp/ccr33Mli.s:156    .text:00000000000000c0 .L0 
     /tmp/ccr33Mli.s:157    .text:00000000000000c0 .L0 
     /tmp/ccr33Mli.s:163    .text:00000000000000dc .L0 
     /tmp/ccr33Mli.s:164    .text:00000000000000dc .L0 
     /tmp/ccr33Mli.s:170    .text:00000000000000f8 .L0 
     /tmp/ccr33Mli.s:171    .text:00000000000000f8 .L0 
     /tmp/ccr33Mli.s:177    .text:0000000000000114 .L0 
     /tmp/ccr33Mli.s:178    .text:0000000000000114 .L0 
GAS LISTING /tmp/ccr33Mli.s 			page 57


     /tmp/ccr33Mli.s:184    .text:0000000000000130 .L0 
     /tmp/ccr33Mli.s:185    .text:0000000000000130 .L0 
     /tmp/ccr33Mli.s:190    .text:0000000000000140 .L0 
     /tmp/ccr33Mli.s:191    .text:0000000000000140 .L0 
     /tmp/ccr33Mli.s:196    .text:0000000000000148 .L0 
     /tmp/ccr33Mli.s:197    .text:0000000000000148 .L0 
     /tmp/ccr33Mli.s:199    .text:000000000000014c .L0 
     /tmp/ccr33Mli.s:201    .text:0000000000000150 .L0 
     /tmp/ccr33Mli.s:207    .text:000000000000016c .L0 
     /tmp/ccr33Mli.s:211    .text:0000000000000170 .L0 
     /tmp/ccr33Mli.s:212    .text:0000000000000170 .L0 
     /tmp/ccr33Mli.s:214    .text:0000000000000174 .L0 
     /tmp/ccr33Mli.s:216    .text:0000000000000178 .L0 
     /tmp/ccr33Mli.s:218    .text:000000000000017c .L0 
     /tmp/ccr33Mli.s:221    .text:0000000000000180 .L0 
     /tmp/ccr33Mli.s:222    .text:0000000000000180 .L0 
     /tmp/ccr33Mli.s:228    .text:0000000000000190 .L0 
     /tmp/ccr33Mli.s:229    .text:0000000000000194 .L0 
     /tmp/ccr33Mli.s:231    .text:0000000000000198 .L0 
     /tmp/ccr33Mli.s:232    .text:0000000000000198 .L0 
     /tmp/ccr33Mli.s:234    .text:000000000000019c .L0 
     /tmp/ccr33Mli.s:237    .text:00000000000001a0 .L0 
     /tmp/ccr33Mli.s:240    .text:00000000000001a4 .L0 
     /tmp/ccr33Mli.s:245    .text:00000000000001ac .L0 
     /tmp/ccr33Mli.s:280    .text:00000000000001ac _ZN13SlabAllocator10printCacheEP5Cache
     /tmp/ccr33Mli.s:283    .text:00000000000001ac .L0 
     /tmp/ccr33Mli.s:285    .text:00000000000001ac .L0 
     /tmp/ccr33Mli.s:286    .text:00000000000001b0 .L0 
     /tmp/ccr33Mli.s:291    .text:00000000000001c0 .L0 
     /tmp/ccr33Mli.s:292    .text:00000000000001c0 .L0 
     /tmp/ccr33Mli.s:293    .text:00000000000001c0 .L0 
     /tmp/ccr33Mli.s:294    .text:00000000000001c0 .L0 
     /tmp/ccr33Mli.s:296    .text:00000000000001c4 .L0 
     /tmp/ccr33Mli.s:299    .text:00000000000001c8 .L0 
     /tmp/ccr33Mli.s:300    .text:00000000000001c8 .L0 
     /tmp/ccr33Mli.s:305    .text:00000000000001d8 .L0 
     /tmp/ccr33Mli.s:306    .text:00000000000001d8 .L0 
     /tmp/ccr33Mli.s:310    .text:00000000000001e4 .L0 
     /tmp/ccr33Mli.s:311    .text:00000000000001e4 .L0 
     /tmp/ccr33Mli.s:315    .text:00000000000001f4 .L0 
     /tmp/ccr33Mli.s:316    .text:00000000000001f4 .L0 
     /tmp/ccr33Mli.s:323    .text:0000000000000218 .L0 
     /tmp/ccr33Mli.s:324    .text:0000000000000218 .L0 
     /tmp/ccr33Mli.s:330    .text:0000000000000234 .L0 
     /tmp/ccr33Mli.s:331    .text:0000000000000234 .L0 
     /tmp/ccr33Mli.s:337    .text:0000000000000250 .L0 
     /tmp/ccr33Mli.s:338    .text:0000000000000250 .L0 
     /tmp/ccr33Mli.s:344    .text:000000000000026c .L0 
     /tmp/ccr33Mli.s:345    .text:000000000000026c .L0 
     /tmp/ccr33Mli.s:351    .text:0000000000000288 .L0 
     /tmp/ccr33Mli.s:352    .text:0000000000000288 .L0 
     /tmp/ccr33Mli.s:356    .text:000000000000028c .L0 
     /tmp/ccr33Mli.s:357    .text:000000000000028c .L0 
     /tmp/ccr33Mli.s:359    .text:0000000000000290 .L0 
     /tmp/ccr33Mli.s:360    .text:0000000000000290 .L0 
     /tmp/ccr33Mli.s:366    .text:00000000000002ac .L0 
     /tmp/ccr33Mli.s:367    .text:00000000000002ac .L0 
GAS LISTING /tmp/ccr33Mli.s 			page 58


     /tmp/ccr33Mli.s:370    .text:00000000000002b0 .L0 
     /tmp/ccr33Mli.s:373    .text:00000000000002b4 .L0 
     /tmp/ccr33Mli.s:374    .text:00000000000002b4 .L0 
     /tmp/ccr33Mli.s:378    .text:00000000000002c4 .L0 
     /tmp/ccr33Mli.s:379    .text:00000000000002c4 .L0 
     /tmp/ccr33Mli.s:385    .text:00000000000002e0 .L0 
     /tmp/ccr33Mli.s:386    .text:00000000000002e0 .L0 
     /tmp/ccr33Mli.s:390    .text:00000000000002e4 .L0 
     /tmp/ccr33Mli.s:391    .text:00000000000002e4 .L0 
     /tmp/ccr33Mli.s:393    .text:00000000000002e8 .L0 
     /tmp/ccr33Mli.s:394    .text:00000000000002e8 .L0 
     /tmp/ccr33Mli.s:400    .text:0000000000000304 .L0 
     /tmp/ccr33Mli.s:401    .text:0000000000000304 .L0 
     /tmp/ccr33Mli.s:404    .text:0000000000000308 .L0 
     /tmp/ccr33Mli.s:407    .text:000000000000030c .L0 
     /tmp/ccr33Mli.s:408    .text:000000000000030c .L0 
     /tmp/ccr33Mli.s:412    .text:000000000000031c .L0 
     /tmp/ccr33Mli.s:413    .text:000000000000031c .L0 
     /tmp/ccr33Mli.s:419    .text:0000000000000338 .L0 
     /tmp/ccr33Mli.s:420    .text:0000000000000338 .L0 
     /tmp/ccr33Mli.s:424    .text:000000000000033c .L0 
     /tmp/ccr33Mli.s:425    .text:000000000000033c .L0 
     /tmp/ccr33Mli.s:427    .text:0000000000000340 .L0 
     /tmp/ccr33Mli.s:428    .text:0000000000000340 .L0 
     /tmp/ccr33Mli.s:434    .text:000000000000035c .L0 
     /tmp/ccr33Mli.s:435    .text:000000000000035c .L0 
     /tmp/ccr33Mli.s:438    .text:0000000000000360 .L0 
     /tmp/ccr33Mli.s:441    .text:0000000000000364 .L0 
     /tmp/ccr33Mli.s:442    .text:0000000000000364 .L0 
     /tmp/ccr33Mli.s:446    .text:0000000000000374 .L0 
     /tmp/ccr33Mli.s:447    .text:0000000000000374 .L0 
     /tmp/ccr33Mli.s:453    .text:0000000000000390 .L0 
     /tmp/ccr33Mli.s:454    .text:0000000000000394 .L0 
     /tmp/ccr33Mli.s:456    .text:0000000000000398 .L0 
     /tmp/ccr33Mli.s:457    .text:0000000000000398 .L0 
     /tmp/ccr33Mli.s:459    .text:000000000000039c .L0 
     /tmp/ccr33Mli.s:462    .text:00000000000003a0 .L0 
     /tmp/ccr33Mli.s:465    .text:00000000000003a4 .L0 
     /tmp/ccr33Mli.s:467    .text:00000000000003a8 .L0 
     /tmp/ccr33Mli.s:473    .text:00000000000003a8 _ZN13SlabAllocator14insertIntoListERP4SlabS1_
     /tmp/ccr33Mli.s:476    .text:00000000000003a8 .L0 
     /tmp/ccr33Mli.s:478    .text:00000000000003a8 .L0 
     /tmp/ccr33Mli.s:479    .text:00000000000003ac .L0 
     /tmp/ccr33Mli.s:481    .text:00000000000003b0 .L0 
     /tmp/ccr33Mli.s:483    .text:00000000000003b4 .L0 
     /tmp/ccr33Mli.s:485    .text:00000000000003b4 .L0 
     /tmp/ccr33Mli.s:486    .text:00000000000003b4 .L0 
     /tmp/ccr33Mli.s:488    .text:00000000000003b8 .L0 
     /tmp/ccr33Mli.s:490    .text:00000000000003bc .L0 
     /tmp/ccr33Mli.s:492    .text:00000000000003c0 .L0 
     /tmp/ccr33Mli.s:493    .text:00000000000003c0 .L0 
     /tmp/ccr33Mli.s:496    .text:00000000000003c4 .L0 
     /tmp/ccr33Mli.s:497    .text:00000000000003c4 .L0 
     /tmp/ccr33Mli.s:499    .text:00000000000003c8 .L0 
     /tmp/ccr33Mli.s:500    .text:00000000000003c8 .L0 
     /tmp/ccr33Mli.s:502    .text:00000000000003cc .L0 
     /tmp/ccr33Mli.s:503    .text:00000000000003d0 .L0 
GAS LISTING /tmp/ccr33Mli.s 			page 59


     /tmp/ccr33Mli.s:504    .text:00000000000003d0 .L0 
     /tmp/ccr33Mli.s:506    .text:00000000000003d4 .L0 
     /tmp/ccr33Mli.s:508    .text:00000000000003d8 .L0 
     /tmp/ccr33Mli.s:514    .text:00000000000003d8 _ZN13SlabAllocator12allocateSlabEP5Cache
     /tmp/ccr33Mli.s:517    .text:00000000000003d8 .L0 
     /tmp/ccr33Mli.s:519    .text:00000000000003d8 .L0 
     /tmp/ccr33Mli.s:520    .text:00000000000003dc .L0 
     /tmp/ccr33Mli.s:526    .text:00000000000003f0 .L0 
     /tmp/ccr33Mli.s:527    .text:00000000000003f0 .L0 
     /tmp/ccr33Mli.s:528    .text:00000000000003f0 .L0 
     /tmp/ccr33Mli.s:529    .text:00000000000003f0 .L0 
     /tmp/ccr33Mli.s:530    .text:00000000000003f0 .L0 
     /tmp/ccr33Mli.s:532    .text:00000000000003f4 .L0 
     /tmp/ccr33Mli.s:535    .text:00000000000003f8 .L0 
     /tmp/ccr33Mli.s:536    .text:00000000000003f8 .L0 
     /tmp/ccr33Mli.s:541    .text:0000000000000404 .L0 
     /tmp/ccr33Mli.s:544    .text:000000000000040c .L0 
     /tmp/ccr33Mli.s:545    .text:000000000000040c .L0 
     /tmp/ccr33Mli.s:551    .text:000000000000041c .L0 
     /tmp/ccr33Mli.s:552    .text:000000000000041c .L0 
     /tmp/ccr33Mli.s:554    .text:0000000000000420 .L0 
     /tmp/ccr33Mli.s:556    .text:0000000000000424 .L0 
     /tmp/ccr33Mli.s:558    .text:0000000000000428 .L0 
     /tmp/ccr33Mli.s:560    .text:000000000000042c .L0 
     /tmp/ccr33Mli.s:562    .text:0000000000000430 .L0 
     /tmp/ccr33Mli.s:564    .text:0000000000000434 .L0 
     /tmp/ccr33Mli.s:566    .text:0000000000000438 .L0 
     /tmp/ccr33Mli.s:567    .text:0000000000000438 .L0 
     /tmp/ccr33Mli.s:569    .text:000000000000043c .L0 
     /tmp/ccr33Mli.s:571    .text:0000000000000440 .L0 
     /tmp/ccr33Mli.s:573    .text:0000000000000444 .L0 
     /tmp/ccr33Mli.s:575    .text:0000000000000448 .L0 
     /tmp/ccr33Mli.s:576    .text:0000000000000448 .L0 
     /tmp/ccr33Mli.s:578    .text:000000000000044c .L0 
     /tmp/ccr33Mli.s:580    .text:0000000000000450 .L0 
     /tmp/ccr33Mli.s:581    .text:0000000000000450 .L0 
     /tmp/ccr33Mli.s:585    .text:0000000000000454 .L0 
     /tmp/ccr33Mli.s:586    .text:0000000000000454 .L0 
     /tmp/ccr33Mli.s:590    .text:0000000000000458 .L0 
     /tmp/ccr33Mli.s:591    .text:0000000000000458 .L0 
     /tmp/ccr33Mli.s:593    .text:000000000000045c .L0 
     /tmp/ccr33Mli.s:595    .text:0000000000000460 .L0 
     /tmp/ccr33Mli.s:597    .text:0000000000000464 .L0 
     /tmp/ccr33Mli.s:599    .text:0000000000000468 .L0 
     /tmp/ccr33Mli.s:600    .text:0000000000000468 .L0 
     /tmp/ccr33Mli.s:602    .text:000000000000046c .L0 
     /tmp/ccr33Mli.s:604    .text:0000000000000470 .L0 
     /tmp/ccr33Mli.s:606    .text:0000000000000474 .L0 
     /tmp/ccr33Mli.s:613    .text:000000000000047c .L0 
     /tmp/ccr33Mli.s:614    .text:000000000000047c .L0 
     /tmp/ccr33Mli.s:616    .text:0000000000000480 .L0 
     /tmp/ccr33Mli.s:619    .text:0000000000000484 .L0 
     /tmp/ccr33Mli.s:623    .text:0000000000000488 .L0 
     /tmp/ccr33Mli.s:624    .text:0000000000000488 .L0 
     /tmp/ccr33Mli.s:626    .text:000000000000048c .L0 
     /tmp/ccr33Mli.s:628    .text:0000000000000490 .L0 
     /tmp/ccr33Mli.s:629    .text:0000000000000490 .L0 
GAS LISTING /tmp/ccr33Mli.s 			page 60


     /tmp/ccr33Mli.s:631    .text:0000000000000494 .L0 
     /tmp/ccr33Mli.s:633    .text:0000000000000498 .L0 
     /tmp/ccr33Mli.s:635    .text:000000000000049c .L0 
     /tmp/ccr33Mli.s:637    .text:00000000000004a0 .L0 
     /tmp/ccr33Mli.s:639    .text:00000000000004a4 .L0 
     /tmp/ccr33Mli.s:643    .text:00000000000004ac .L0 
     /tmp/ccr33Mli.s:651    .text:00000000000004b4 .L0 
     /tmp/ccr33Mli.s:657    .text:00000000000004bc .L0 
     /tmp/ccr33Mli.s:665    .text:00000000000004c8 .L0 
     /tmp/ccr33Mli.s:666    .text:00000000000004cc .L0 
     /tmp/ccr33Mli.s:668    .text:00000000000004d0 .L0 
     /tmp/ccr33Mli.s:669    .text:00000000000004d0 .L0 
     /tmp/ccr33Mli.s:671    .text:00000000000004d4 .L0 
     /tmp/ccr33Mli.s:673    .text:00000000000004d8 .L0 
     /tmp/ccr33Mli.s:675    .text:00000000000004dc .L0 
     /tmp/ccr33Mli.s:678    .text:00000000000004e0 .L0 
     /tmp/ccr33Mli.s:680    .text:00000000000004e4 .L0 
     /tmp/ccr33Mli.s:686    .text:00000000000004e4 _ZN13SlabAllocator14removeFromListERP4SlabS1_
     /tmp/ccr33Mli.s:689    .text:00000000000004e4 .L0 
     /tmp/ccr33Mli.s:691    .text:00000000000004e4 .L0 
     /tmp/ccr33Mli.s:692    .text:00000000000004e8 .L0 
     /tmp/ccr33Mli.s:694    .text:00000000000004ec .L0 
     /tmp/ccr33Mli.s:696    .text:00000000000004f0 .L0 
     /tmp/ccr33Mli.s:698    .text:00000000000004f0 .L0 
     /tmp/ccr33Mli.s:699    .text:00000000000004f0 .L0 
     /tmp/ccr33Mli.s:701    .text:00000000000004f4 .L0 
     /tmp/ccr33Mli.s:704    .text:00000000000004f8 .L0 
     /tmp/ccr33Mli.s:705    .text:00000000000004f8 .L0 
     /tmp/ccr33Mli.s:707    .text:00000000000004fc .L0 
     /tmp/ccr33Mli.s:709    .text:0000000000000500 .L0 
     /tmp/ccr33Mli.s:710    .text:0000000000000500 .L0 
     /tmp/ccr33Mli.s:712    .text:0000000000000504 .L0 
     /tmp/ccr33Mli.s:715    .text:0000000000000508 .L0 
     /tmp/ccr33Mli.s:716    .text:0000000000000508 .L0 
     /tmp/ccr33Mli.s:718    .text:000000000000050c .L0 
     /tmp/ccr33Mli.s:720    .text:0000000000000510 .L0 
     /tmp/ccr33Mli.s:721    .text:0000000000000510 .L0 
     /tmp/ccr33Mli.s:723    .text:0000000000000514 .L0 
     /tmp/ccr33Mli.s:726    .text:0000000000000518 .L0 
     /tmp/ccr33Mli.s:727    .text:0000000000000518 .L0 
     /tmp/ccr33Mli.s:729    .text:000000000000051c .L0 
     /tmp/ccr33Mli.s:730    .text:000000000000051c .L0 
     /tmp/ccr33Mli.s:732    .text:0000000000000520 .L0 
     /tmp/ccr33Mli.s:733    .text:0000000000000524 .L0 
     /tmp/ccr33Mli.s:734    .text:0000000000000524 .L0 
     /tmp/ccr33Mli.s:735    .text:0000000000000524 .L0 
     /tmp/ccr33Mli.s:737    .text:0000000000000528 .L0 
     /tmp/ccr33Mli.s:740    .text:000000000000052c .L0 
     /tmp/ccr33Mli.s:742    .text:000000000000052c .L0 
     /tmp/ccr33Mli.s:743    .text:000000000000052c .L0 
     /tmp/ccr33Mli.s:745    .text:0000000000000530 .L0 
     /tmp/ccr33Mli.s:747    .text:0000000000000538 .L0 
     /tmp/ccr33Mli.s:753    .text:0000000000000538 _ZN13SlabAllocator4moveERP4SlabS2_S1_
     /tmp/ccr33Mli.s:756    .text:0000000000000538 .L0 
     /tmp/ccr33Mli.s:758    .text:0000000000000538 .L0 
     /tmp/ccr33Mli.s:759    .text:000000000000053c .L0 
     /tmp/ccr33Mli.s:764    .text:000000000000054c .L0 
GAS LISTING /tmp/ccr33Mli.s 			page 61


     /tmp/ccr33Mli.s:765    .text:000000000000054c .L0 
     /tmp/ccr33Mli.s:766    .text:000000000000054c .L0 
     /tmp/ccr33Mli.s:767    .text:000000000000054c .L0 
     /tmp/ccr33Mli.s:769    .text:0000000000000550 .L0 
     /tmp/ccr33Mli.s:773    .text:0000000000000558 .L0 
     /tmp/ccr33Mli.s:774    .text:0000000000000558 .L0 
     /tmp/ccr33Mli.s:779    .text:0000000000000564 .L0 
     /tmp/ccr33Mli.s:780    .text:0000000000000564 .L0 
     /tmp/ccr33Mli.s:785    .text:0000000000000574 .L0 
     /tmp/ccr33Mli.s:786    .text:0000000000000578 .L0 
     /tmp/ccr33Mli.s:788    .text:000000000000057c .L0 
     /tmp/ccr33Mli.s:789    .text:000000000000057c .L0 
     /tmp/ccr33Mli.s:791    .text:0000000000000580 .L0 
     /tmp/ccr33Mli.s:794    .text:0000000000000584 .L0 
     /tmp/ccr33Mli.s:797    .text:0000000000000588 .L0 
     /tmp/ccr33Mli.s:799    .text:000000000000058c .L0 
     /tmp/ccr33Mli.s:805    .text:000000000000058c _ZN13SlabAllocator12allocateSlotEP4Slab
     /tmp/ccr33Mli.s:808    .text:000000000000058c .L0 
     /tmp/ccr33Mli.s:810    .text:000000000000058c .L0 
     /tmp/ccr33Mli.s:811    .text:0000000000000590 .L0 
     /tmp/ccr33Mli.s:816    .text:00000000000005a0 .L0 
     /tmp/ccr33Mli.s:817    .text:00000000000005a0 .L0 
     /tmp/ccr33Mli.s:818    .text:00000000000005a0 .L0 
     /tmp/ccr33Mli.s:819    .text:00000000000005a0 .L0 
     /tmp/ccr33Mli.s:821    .text:00000000000005a4 .L0 
     /tmp/ccr33Mli.s:826    .text:00000000000005a8 .L0 
     /tmp/ccr33Mli.s:827    .text:00000000000005a8 .L0 
     /tmp/ccr33Mli.s:831    .text:00000000000005ac .L0 
     /tmp/ccr33Mli.s:832    .text:00000000000005ac .L0 
     /tmp/ccr33Mli.s:834    .text:00000000000005b0 .L0 
     /tmp/ccr33Mli.s:839    .text:00000000000005b4 .L0 
     /tmp/ccr33Mli.s:840    .text:00000000000005b4 .L0 
     /tmp/ccr33Mli.s:842    .text:00000000000005b8 .L0 
     /tmp/ccr33Mli.s:844    .text:00000000000005bc .L0 
     /tmp/ccr33Mli.s:847    .text:00000000000005c4 .L0 
     /tmp/ccr33Mli.s:850    .text:00000000000005cc .L0 
     /tmp/ccr33Mli.s:853    .text:00000000000005d4 .L0 
     /tmp/ccr33Mli.s:856    .text:00000000000005d8 .L0 
     /tmp/ccr33Mli.s:863    .text:00000000000005e0 .L0 
     /tmp/ccr33Mli.s:864    .text:00000000000005e0 .L0 
     /tmp/ccr33Mli.s:867    .text:00000000000005e8 .L0 
     /tmp/ccr33Mli.s:874    .text:00000000000005f0 .L0 
     /tmp/ccr33Mli.s:875    .text:00000000000005f0 .L0 
     /tmp/ccr33Mli.s:876    .text:00000000000005f0 .L0 
     /tmp/ccr33Mli.s:878    .text:00000000000005f4 .L0 
     /tmp/ccr33Mli.s:883    .text:00000000000005f8 .L0 
     /tmp/ccr33Mli.s:885    .text:00000000000005fc .L0 
     /tmp/ccr33Mli.s:888    .text:0000000000000600 .L0 
     /tmp/ccr33Mli.s:892    .text:0000000000000604 .L0 
     /tmp/ccr33Mli.s:893    .text:0000000000000604 .L0 
     /tmp/ccr33Mli.s:900    .text:000000000000060c .L0 
     /tmp/ccr33Mli.s:904    .text:000000000000060c .L0 
     /tmp/ccr33Mli.s:905    .text:000000000000060c .L0 
     /tmp/ccr33Mli.s:907    .text:0000000000000610 .L0 
     /tmp/ccr33Mli.s:909    .text:0000000000000614 .L0 
     /tmp/ccr33Mli.s:913    .text:0000000000000618 .L0 
     /tmp/ccr33Mli.s:914    .text:0000000000000618 .L0 
GAS LISTING /tmp/ccr33Mli.s 			page 62


     /tmp/ccr33Mli.s:916    .text:000000000000061c .L0 
     /tmp/ccr33Mli.s:918    .text:0000000000000620 .L0 
     /tmp/ccr33Mli.s:920    .text:0000000000000624 .L0 
     /tmp/ccr33Mli.s:921    .text:0000000000000624 .L0 
     /tmp/ccr33Mli.s:926    .text:0000000000000630 .L0 
     /tmp/ccr33Mli.s:927    .text:0000000000000630 .L0 
     /tmp/ccr33Mli.s:929    .text:0000000000000634 .L0 
     /tmp/ccr33Mli.s:931    .text:0000000000000638 .L0 
     /tmp/ccr33Mli.s:933    .text:000000000000063c .L0 
     /tmp/ccr33Mli.s:936    .text:0000000000000640 .L0 
     /tmp/ccr33Mli.s:938    .text:0000000000000644 .L0 
     /tmp/ccr33Mli.s:942    .text:0000000000000648 .L0 
     /tmp/ccr33Mli.s:945    .text:000000000000064c .L0 
     /tmp/ccr33Mli.s:950    .text:0000000000000654 .L0 
     /tmp/ccr33Mli.s:952    .text:0000000000000658 .L0 
     /tmp/ccr33Mli.s:960    .text:0000000000000660 .L0 
     /tmp/ccr33Mli.s:964    .text:0000000000000664 .L0 
     /tmp/ccr33Mli.s:965    .text:0000000000000668 .L0 
     /tmp/ccr33Mli.s:967    .text:000000000000066c .L0 
     /tmp/ccr33Mli.s:968    .text:000000000000066c .L0 
     /tmp/ccr33Mli.s:970    .text:0000000000000670 .L0 
     /tmp/ccr33Mli.s:972    .text:0000000000000674 .L0 
     /tmp/ccr33Mli.s:975    .text:0000000000000678 .L0 
     /tmp/ccr33Mli.s:977    .text:000000000000067c .L0 
     /tmp/ccr33Mli.s:983    .text:000000000000067c _ZN13SlabAllocator14allocateObjectEP5Cache
     /tmp/ccr33Mli.s:986    .text:000000000000067c .L0 
     /tmp/ccr33Mli.s:988    .text:000000000000067c .L0 
     /tmp/ccr33Mli.s:989    .text:0000000000000680 .L0 
     /tmp/ccr33Mli.s:994    .text:0000000000000690 .L0 
     /tmp/ccr33Mli.s:995    .text:0000000000000690 .L0 
     /tmp/ccr33Mli.s:996    .text:0000000000000690 .L0 
     /tmp/ccr33Mli.s:997    .text:0000000000000690 .L0 
     /tmp/ccr33Mli.s:999    .text:0000000000000694 .L0 
     /tmp/ccr33Mli.s:1002   .text:0000000000000698 .L0 
     /tmp/ccr33Mli.s:1003   .text:0000000000000698 .L0 
     /tmp/ccr33Mli.s:1010   .text:000000000000069c .L0 
     /tmp/ccr33Mli.s:1011   .text:000000000000069c .L0 
     /tmp/ccr33Mli.s:1014   .text:00000000000006a0 .L0 
     /tmp/ccr33Mli.s:1015   .text:00000000000006a0 .L0 
     /tmp/ccr33Mli.s:1019   .text:00000000000006ac .L0 
     /tmp/ccr33Mli.s:1021   .text:00000000000006b0 .L0 
     /tmp/ccr33Mli.s:1028   .text:00000000000006b4 .L0 
     /tmp/ccr33Mli.s:1031   .text:00000000000006b8 .L0 
     /tmp/ccr33Mli.s:1033   .text:00000000000006c0 .L0 
     /tmp/ccr33Mli.s:1034   .text:00000000000006c0 .L0 
     /tmp/ccr33Mli.s:1036   .text:00000000000006c4 .L0 
     /tmp/ccr33Mli.s:1037   .text:00000000000006c4 .L0 
     /tmp/ccr33Mli.s:1039   .text:00000000000006c8 .L0 
     /tmp/ccr33Mli.s:1042   .text:00000000000006cc .L0 
     /tmp/ccr33Mli.s:1045   .text:00000000000006d0 .L0 
     /tmp/ccr33Mli.s:1049   .text:00000000000006d4 .L0 
     /tmp/ccr33Mli.s:1051   .text:00000000000006d4 .L0 
     /tmp/ccr33Mli.s:1052   .text:00000000000006d4 .L0 
     /tmp/ccr33Mli.s:1058   .text:00000000000006d8 .L0 
     /tmp/ccr33Mli.s:1059   .text:00000000000006d8 .L0 
     /tmp/ccr33Mli.s:1062   .text:00000000000006dc .L0 
     /tmp/ccr33Mli.s:1063   .text:00000000000006dc .L0 
GAS LISTING /tmp/ccr33Mli.s 			page 63


     /tmp/ccr33Mli.s:1067   .text:00000000000006e8 .L0 
     /tmp/ccr33Mli.s:1069   .text:00000000000006ec .L0 
     /tmp/ccr33Mli.s:1076   .text:00000000000006f0 .L0 
     /tmp/ccr33Mli.s:1078   .text:00000000000006f4 .L0 
     /tmp/ccr33Mli.s:1079   .text:00000000000006f4 .L0 
     /tmp/ccr33Mli.s:1083   .text:0000000000000700 .L0 
     /tmp/ccr33Mli.s:1085   .text:0000000000000704 .L0 
     /tmp/ccr33Mli.s:1086   .text:0000000000000704 .L0 
     /tmp/ccr33Mli.s:1092   .text:0000000000000714 .L0 
     /tmp/ccr33Mli.s:1093   .text:0000000000000714 .L0 
     /tmp/ccr33Mli.s:1094   .text:0000000000000718 .L0 
     /tmp/ccr33Mli.s:1100   .text:0000000000000718 _ZN13SlabAllocator14allocateBufferEm
     /tmp/ccr33Mli.s:1103   .text:0000000000000718 .L0 
     /tmp/ccr33Mli.s:1105   .text:0000000000000718 .L0 
     /tmp/ccr33Mli.s:1109   .text:0000000000000718 .L0 
     /tmp/ccr33Mli.s:1110   .text:0000000000000718 .L0 
     /tmp/ccr33Mli.s:1111   .text:0000000000000718 .L0 
     /tmp/ccr33Mli.s:1114   .text:000000000000071c .L0 
     /tmp/ccr33Mli.s:1115   .text:000000000000071c .L0 
     /tmp/ccr33Mli.s:1118   .text:0000000000000720 .L0 
     /tmp/ccr33Mli.s:1121   .text:0000000000000724 .L0 
     /tmp/ccr33Mli.s:1122   .text:0000000000000724 .L0 
     /tmp/ccr33Mli.s:1124   .text:0000000000000728 .L0 
     /tmp/ccr33Mli.s:1127   .text:000000000000072c .L0 
     /tmp/ccr33Mli.s:1128   .text:000000000000072c .L0 
     /tmp/ccr33Mli.s:1130   .text:0000000000000730 .L0 
     /tmp/ccr33Mli.s:1133   .text:0000000000000734 .L0 
     /tmp/ccr33Mli.s:1134   .text:0000000000000734 .L0 
     /tmp/ccr33Mli.s:1136   .text:0000000000000738 .L0 
     /tmp/ccr33Mli.s:1139   .text:000000000000073c .L0 
     /tmp/ccr33Mli.s:1140   .text:000000000000073c .L0 
     /tmp/ccr33Mli.s:1142   .text:0000000000000740 .L0 
     /tmp/ccr33Mli.s:1145   .text:0000000000000744 .L0 
     /tmp/ccr33Mli.s:1146   .text:0000000000000744 .L0 
     /tmp/ccr33Mli.s:1148   .text:0000000000000748 .L0 
     /tmp/ccr33Mli.s:1151   .text:000000000000074c .L0 
     /tmp/ccr33Mli.s:1152   .text:000000000000074c .L0 
     /tmp/ccr33Mli.s:1159   .text:0000000000000750 .L0 
     /tmp/ccr33Mli.s:1163   .text:0000000000000754 .L0 
     /tmp/ccr33Mli.s:1164   .text:0000000000000754 .L0 
     /tmp/ccr33Mli.s:1167   .text:000000000000075c .L0 
     /tmp/ccr33Mli.s:1168   .text:000000000000075c .L0 
     /tmp/ccr33Mli.s:1171   .text:0000000000000760 .L0 
     /tmp/ccr33Mli.s:1172   .text:0000000000000760 .L0 
     /tmp/ccr33Mli.s:1175   .text:0000000000000764 .L0 
     /tmp/ccr33Mli.s:1181   .text:0000000000000768 .L0 
     /tmp/ccr33Mli.s:1182   .text:0000000000000768 .L0 
     /tmp/ccr33Mli.s:1183   .text:0000000000000768 .L0 
     /tmp/ccr33Mli.s:1186   .text:000000000000076c .L0 
     /tmp/ccr33Mli.s:1189   .text:0000000000000774 .L0 
     /tmp/ccr33Mli.s:1190   .text:0000000000000778 .L0 
     /tmp/ccr33Mli.s:1193   .text:0000000000000780 .L0 
     /tmp/ccr33Mli.s:1194   .text:0000000000000780 .L0 
     /tmp/ccr33Mli.s:1196   .text:0000000000000784 .L0 
     /tmp/ccr33Mli.s:1199   .text:0000000000000784 .L0 
     /tmp/ccr33Mli.s:1200   .text:0000000000000784 .L0 
     /tmp/ccr33Mli.s:1201   .text:0000000000000784 .L0 
GAS LISTING /tmp/ccr33Mli.s 			page 64


     /tmp/ccr33Mli.s:1209   .text:00000000000007a0 .L0 
     /tmp/ccr33Mli.s:1210   .text:00000000000007a4 .L0 
     /tmp/ccr33Mli.s:1212   .text:00000000000007a8 .L0 
     /tmp/ccr33Mli.s:1213   .text:00000000000007a8 .L0 
     /tmp/ccr33Mli.s:1215   .text:00000000000007ac .L0 
     /tmp/ccr33Mli.s:1220   .text:00000000000007b0 .L0 
     /tmp/ccr33Mli.s:1222   .text:00000000000007b4 .L0 
     /tmp/ccr33Mli.s:1223   .text:00000000000007b8 .L0 
     /tmp/ccr33Mli.s:1229   .text:00000000000007b8 _ZN13SlabAllocator11createCacheEPKcmPFvPvES4_
     /tmp/ccr33Mli.s:1232   .text:00000000000007b8 .L0 
     /tmp/ccr33Mli.s:1234   .text:00000000000007b8 .L0 
     /tmp/ccr33Mli.s:1235   .text:00000000000007bc .L0 
     /tmp/ccr33Mli.s:1243   .text:00000000000007d8 .L0 
     /tmp/ccr33Mli.s:1244   .text:00000000000007d8 .L0 
     /tmp/ccr33Mli.s:1245   .text:00000000000007d8 .L0 
     /tmp/ccr33Mli.s:1246   .text:00000000000007d8 .L0 
     /tmp/ccr33Mli.s:1247   .text:00000000000007d8 .L0 
     /tmp/ccr33Mli.s:1248   .text:00000000000007d8 .L0 
     /tmp/ccr33Mli.s:1249   .text:00000000000007d8 .L0 
     /tmp/ccr33Mli.s:1251   .text:00000000000007dc .L0 
     /tmp/ccr33Mli.s:1257   .text:00000000000007ec .L0 
     /tmp/ccr33Mli.s:1258   .text:00000000000007ec .L0 
     /tmp/ccr33Mli.s:1265   .text:0000000000000800 .L0 
     /tmp/ccr33Mli.s:1266   .text:0000000000000800 .L0 
     /tmp/ccr33Mli.s:1268   .text:0000000000000804 .L0 
     /tmp/ccr33Mli.s:1269   .text:0000000000000804 .L0 
     /tmp/ccr33Mli.s:1271   .text:0000000000000808 .L0 
     /tmp/ccr33Mli.s:1272   .text:0000000000000808 .L0 
     /tmp/ccr33Mli.s:1274   .text:000000000000080c .L0 
     /tmp/ccr33Mli.s:1276   .text:0000000000000810 .L0 
     /tmp/ccr33Mli.s:1278   .text:0000000000000814 .L0 
     /tmp/ccr33Mli.s:1279   .text:0000000000000814 .L0 
     /tmp/ccr33Mli.s:1281   .text:0000000000000818 .L0 
     /tmp/ccr33Mli.s:1282   .text:0000000000000818 .L0 
     /tmp/ccr33Mli.s:1285   .text:0000000000000820 .L0 
     /tmp/ccr33Mli.s:1286   .text:0000000000000820 .L0 
     /tmp/ccr33Mli.s:1291   .text:0000000000000830 .L0 
     /tmp/ccr33Mli.s:1292   .text:0000000000000830 .L0 
     /tmp/ccr33Mli.s:1294   .text:0000000000000838 .L0 
     /tmp/ccr33Mli.s:1296   .text:000000000000083c .L0 
     /tmp/ccr33Mli.s:1297   .text:000000000000083c .L0 
     /tmp/ccr33Mli.s:1299   .text:0000000000000840 .L0 
     /tmp/ccr33Mli.s:1302   .text:0000000000000844 .L0 
     /tmp/ccr33Mli.s:1305   .text:0000000000000848 .L0 
     /tmp/ccr33Mli.s:1308   .text:000000000000084c .L0 
     /tmp/ccr33Mli.s:1311   .text:0000000000000850 .L0 
     /tmp/ccr33Mli.s:1314   .text:0000000000000854 .L0 
     /tmp/ccr33Mli.s:1316   .text:0000000000000858 .L0 
     /tmp/ccr33Mli.s:1327   .text:0000000000000858 _ZN13SlabAllocator10initializeEPvm
     /tmp/ccr33Mli.s:1330   .text:0000000000000858 .L0 
     /tmp/ccr33Mli.s:1332   .text:0000000000000858 .L0 
     /tmp/ccr33Mli.s:1333   .text:000000000000085c .L0 
     /tmp/ccr33Mli.s:1338   .text:000000000000086c .L0 
     /tmp/ccr33Mli.s:1339   .text:000000000000086c .L0 
     /tmp/ccr33Mli.s:1340   .text:000000000000086c .L0 
     /tmp/ccr33Mli.s:1341   .text:000000000000086c .L0 
     /tmp/ccr33Mli.s:1343   .text:0000000000000870 .L0 
GAS LISTING /tmp/ccr33Mli.s 			page 65


     /tmp/ccr33Mli.s:1347   .text:0000000000000878 .L0 
     /tmp/ccr33Mli.s:1348   .text:0000000000000878 .L0 
     /tmp/ccr33Mli.s:1351   .text:0000000000000880 .L0 
     /tmp/ccr33Mli.s:1352   .text:0000000000000880 .L0 
     /tmp/ccr33Mli.s:1355   .text:000000000000088c .L0 
     /tmp/ccr33Mli.s:1356   .text:000000000000088c .L0 
     /tmp/ccr33Mli.s:1358   .text:0000000000000890 .L0 
     /tmp/ccr33Mli.s:1359   .text:0000000000000890 .L0 
     /tmp/ccr33Mli.s:1365   .text:00000000000008a8 .L0 
     /tmp/ccr33Mli.s:1367   .text:00000000000008ac .L0 
     /tmp/ccr33Mli.s:1368   .text:00000000000008ac .L0 
     /tmp/ccr33Mli.s:1370   .text:00000000000008b0 .L0 
     /tmp/ccr33Mli.s:1371   .text:00000000000008b0 .L0 
     /tmp/ccr33Mli.s:1373   .text:00000000000008b4 .L0 
     /tmp/ccr33Mli.s:1374   .text:00000000000008b4 .L0 
     /tmp/ccr33Mli.s:1376   .text:00000000000008b8 .L0 
     /tmp/ccr33Mli.s:1377   .text:00000000000008b8 .L0 
     /tmp/ccr33Mli.s:1379   .text:00000000000008bc .L0 
     /tmp/ccr33Mli.s:1380   .text:00000000000008bc .L0 
     /tmp/ccr33Mli.s:1382   .text:00000000000008c0 .L0 
     /tmp/ccr33Mli.s:1383   .text:00000000000008c0 .L0 
     /tmp/ccr33Mli.s:1386   .text:00000000000008c8 .L0 
     /tmp/ccr33Mli.s:1387   .text:00000000000008c8 .L0 
     /tmp/ccr33Mli.s:1390   .text:00000000000008d0 .L0 
     /tmp/ccr33Mli.s:1391   .text:00000000000008d0 .L0 
     /tmp/ccr33Mli.s:1396   .text:00000000000008e0 .L0 
     /tmp/ccr33Mli.s:1397   .text:00000000000008e0 .L0 
     /tmp/ccr33Mli.s:1403   .text:00000000000008e8 .L0 
     /tmp/ccr33Mli.s:1404   .text:00000000000008e8 .L0 
     /tmp/ccr33Mli.s:1415   .text:0000000000000914 .L0 
     /tmp/ccr33Mli.s:1419   .text:0000000000000924 .L0 
     /tmp/ccr33Mli.s:1423   .text:0000000000000928 .L0 
     /tmp/ccr33Mli.s:1427   .text:0000000000000930 .L0 
     /tmp/ccr33Mli.s:1428   .text:0000000000000934 .L0 
     /tmp/ccr33Mli.s:1430   .text:0000000000000938 .L0 
     /tmp/ccr33Mli.s:1431   .text:0000000000000938 .L0 
     /tmp/ccr33Mli.s:1433   .text:000000000000093c .L0 
     /tmp/ccr33Mli.s:1436   .text:0000000000000940 .L0 
     /tmp/ccr33Mli.s:1438   .text:0000000000000944 .L0 
     /tmp/ccr33Mli.s:1440   .text:0000000000000948 .L0 
     /tmp/ccr33Mli.s:1446   .text:0000000000000948 _ZN13SlabAllocator8freeSlotEP4Slabm
     /tmp/ccr33Mli.s:1449   .text:0000000000000948 .L0 
     /tmp/ccr33Mli.s:1451   .text:0000000000000948 .L0 
     /tmp/ccr33Mli.s:1453   .text:0000000000000948 .L0 
     /tmp/ccr33Mli.s:1454   .text:0000000000000948 .L0 
     /tmp/ccr33Mli.s:1456   .text:000000000000094c .L0 
     /tmp/ccr33Mli.s:1458   .text:0000000000000950 .L0 
     /tmp/ccr33Mli.s:1461   .text:0000000000000958 .L0 
     /tmp/ccr33Mli.s:1466   .text:0000000000000960 .L0 
     /tmp/ccr33Mli.s:1469   .text:0000000000000968 .L0 
     /tmp/ccr33Mli.s:1472   .text:000000000000096c .L0 
     /tmp/ccr33Mli.s:1473   .text:0000000000000970 .L0 
     /tmp/ccr33Mli.s:1477   .text:000000000000097c .L0 
     /tmp/ccr33Mli.s:1478   .text:000000000000097c .L0 
     /tmp/ccr33Mli.s:1479   .text:000000000000097c .L0 
     /tmp/ccr33Mli.s:1481   .text:0000000000000980 .L0 
     /tmp/ccr33Mli.s:1486   .text:0000000000000984 .L0 
GAS LISTING /tmp/ccr33Mli.s 			page 66


     /tmp/ccr33Mli.s:1487   .text:0000000000000984 .L0 
     /tmp/ccr33Mli.s:1490   .text:000000000000098c .L0 
     /tmp/ccr33Mli.s:1497   .text:0000000000000998 .L0 
     /tmp/ccr33Mli.s:1498   .text:0000000000000998 .L0 
     /tmp/ccr33Mli.s:1499   .text:0000000000000998 .L0 
     /tmp/ccr33Mli.s:1504   .text:000000000000099c .L0 
     /tmp/ccr33Mli.s:1506   .text:00000000000009a0 .L0 
     /tmp/ccr33Mli.s:1509   .text:00000000000009a4 .L0 
     /tmp/ccr33Mli.s:1513   .text:00000000000009a8 .L0 
     /tmp/ccr33Mli.s:1514   .text:00000000000009a8 .L0 
     /tmp/ccr33Mli.s:1520   .text:00000000000009b0 .L0 
     /tmp/ccr33Mli.s:1521   .text:00000000000009b0 .L0 
     /tmp/ccr33Mli.s:1522   .text:00000000000009b0 .L0 
     /tmp/ccr33Mli.s:1527   .text:00000000000009b4 .L0 
     /tmp/ccr33Mli.s:1529   .text:00000000000009b8 .L0 
     /tmp/ccr33Mli.s:1531   .text:00000000000009bc .L0 
     /tmp/ccr33Mli.s:1537   .text:00000000000009c0 .L0 
     /tmp/ccr33Mli.s:1540   .text:00000000000009c0 .L0 
     /tmp/ccr33Mli.s:1541   .text:00000000000009c0 .L0 
     /tmp/ccr33Mli.s:1543   .text:00000000000009c4 .L0 
     /tmp/ccr33Mli.s:1544   .text:00000000000009c4 .L0 
     /tmp/ccr33Mli.s:1546   .text:00000000000009c8 .L0 
     /tmp/ccr33Mli.s:1548   .text:00000000000009cc .L0 
     /tmp/ccr33Mli.s:1550   .text:00000000000009d0 .L0 
     /tmp/ccr33Mli.s:1551   .text:00000000000009d0 .L0 
     /tmp/ccr33Mli.s:1558   .text:00000000000009dc .L0 
     /tmp/ccr33Mli.s:1559   .text:00000000000009e0 .L0 
     /tmp/ccr33Mli.s:1560   .text:00000000000009e0 .L0 
     /tmp/ccr33Mli.s:1562   .text:00000000000009e4 .L0 
     /tmp/ccr33Mli.s:1563   .text:00000000000009e4 .L0 
     /tmp/ccr33Mli.s:1565   .text:00000000000009e8 .L0 
     /tmp/ccr33Mli.s:1568   .text:00000000000009ec .L0 
     /tmp/ccr33Mli.s:1572   .text:00000000000009f0 .L0 
     /tmp/ccr33Mli.s:1576   .text:00000000000009f0 .L0 
     /tmp/ccr33Mli.s:1578   .text:00000000000009f4 .L0 
     /tmp/ccr33Mli.s:1583   .text:00000000000009fc .L0 
     /tmp/ccr33Mli.s:1585   .text:0000000000000a00 .L0 
     /tmp/ccr33Mli.s:1590   .text:0000000000000a08 .L0 
     /tmp/ccr33Mli.s:1591   .text:0000000000000a08 .L0 
     /tmp/ccr33Mli.s:1596   .text:0000000000000a14 .L0 
     /tmp/ccr33Mli.s:1597   .text:0000000000000a14 .L0 
     /tmp/ccr33Mli.s:1599   .text:0000000000000a18 .L0 
     /tmp/ccr33Mli.s:1606   .text:0000000000000a2c .L0 
     /tmp/ccr33Mli.s:1607   .text:0000000000000a2c .L0 
     /tmp/ccr33Mli.s:1608   .text:0000000000000a2c .L0 
     /tmp/ccr33Mli.s:1609   .text:0000000000000a2c .L0 
     /tmp/ccr33Mli.s:1613   .text:0000000000000a30 .L0 
     /tmp/ccr33Mli.s:1619   .text:0000000000000a30 _ZN13SlabAllocator10freeObjectEP5CachePKv
     /tmp/ccr33Mli.s:1622   .text:0000000000000a30 .L0 
     /tmp/ccr33Mli.s:1624   .text:0000000000000a30 .L0 
     /tmp/ccr33Mli.s:1625   .text:0000000000000a34 .L0 
     /tmp/ccr33Mli.s:1630   .text:0000000000000a44 .L0 
     /tmp/ccr33Mli.s:1631   .text:0000000000000a44 .L0 
     /tmp/ccr33Mli.s:1632   .text:0000000000000a44 .L0 
     /tmp/ccr33Mli.s:1633   .text:0000000000000a44 .L0 
     /tmp/ccr33Mli.s:1635   .text:0000000000000a48 .L0 
     /tmp/ccr33Mli.s:1639   .text:0000000000000a50 .L0 
GAS LISTING /tmp/ccr33Mli.s 			page 67


     /tmp/ccr33Mli.s:1640   .text:0000000000000a50 .L0 
     /tmp/ccr33Mli.s:1642   .text:0000000000000a54 .L0 
     /tmp/ccr33Mli.s:1644   .text:0000000000000a58 .L0 
     /tmp/ccr33Mli.s:1645   .text:0000000000000a58 .L0 
     /tmp/ccr33Mli.s:1651   .text:0000000000000a60 .L0 
     /tmp/ccr33Mli.s:1652   .text:0000000000000a60 .L0 
     /tmp/ccr33Mli.s:1654   .text:0000000000000a64 .L0 
     /tmp/ccr33Mli.s:1656   .text:0000000000000a68 .L0 
     /tmp/ccr33Mli.s:1657   .text:0000000000000a68 .L0 
     /tmp/ccr33Mli.s:1662   .text:0000000000000a70 .L0 
     /tmp/ccr33Mli.s:1663   .text:0000000000000a70 .L0 
     /tmp/ccr33Mli.s:1672   .text:0000000000000a78 .L0 
     /tmp/ccr33Mli.s:1673   .text:0000000000000a78 .L0 
     /tmp/ccr33Mli.s:1678   .text:0000000000000a7c .L0 
     /tmp/ccr33Mli.s:1679   .text:0000000000000a7c .L0 
     /tmp/ccr33Mli.s:1685   .text:0000000000000a80 .L0 
     /tmp/ccr33Mli.s:1686   .text:0000000000000a80 .L0 
     /tmp/ccr33Mli.s:1687   .text:0000000000000a80 .L0 
     /tmp/ccr33Mli.s:1689   .text:0000000000000a84 .L0 
     /tmp/ccr33Mli.s:1691   .text:0000000000000a88 .L0 
     /tmp/ccr33Mli.s:1693   .text:0000000000000a8c .L0 
     /tmp/ccr33Mli.s:1695   .text:0000000000000a90 .L0 
     /tmp/ccr33Mli.s:1697   .text:0000000000000a94 .L0 
     /tmp/ccr33Mli.s:1705   .text:0000000000000a98 .L0 
     /tmp/ccr33Mli.s:1709   .text:0000000000000a98 .L0 
     /tmp/ccr33Mli.s:1711   .text:0000000000000a98 .L0 
     /tmp/ccr33Mli.s:1713   .text:0000000000000a9c .L0 
     /tmp/ccr33Mli.s:1716   .text:0000000000000aa0 .L0 
     /tmp/ccr33Mli.s:1717   .text:0000000000000aa0 .L0 
     /tmp/ccr33Mli.s:1720   .text:0000000000000aa4 .L0 
     /tmp/ccr33Mli.s:1721   .text:0000000000000aa4 .L0 
     /tmp/ccr33Mli.s:1726   .text:0000000000000ab0 .L0 
     /tmp/ccr33Mli.s:1727   .text:0000000000000ab0 .L0 
     /tmp/ccr33Mli.s:1735   .text:0000000000000ab8 .L0 
     /tmp/ccr33Mli.s:1741   .text:0000000000000abc .L0 
     /tmp/ccr33Mli.s:1745   .text:0000000000000ac0 .L0 
     /tmp/ccr33Mli.s:1746   .text:0000000000000ac4 .L0 
     /tmp/ccr33Mli.s:1747   .text:0000000000000ac4 .L0 
     /tmp/ccr33Mli.s:1749   .text:0000000000000ac8 .L0 
     /tmp/ccr33Mli.s:1750   .text:0000000000000ac8 .L0 
     /tmp/ccr33Mli.s:1752   .text:0000000000000acc .L0 
     /tmp/ccr33Mli.s:1755   .text:0000000000000ad0 .L0 
     /tmp/ccr33Mli.s:1758   .text:0000000000000ad4 .L0 
     /tmp/ccr33Mli.s:1762   .text:0000000000000ad8 .L0 
     /tmp/ccr33Mli.s:1764   .text:0000000000000ad8 .L0 
     /tmp/ccr33Mli.s:1765   .text:0000000000000ad8 .L0 
     /tmp/ccr33Mli.s:1774   .text:0000000000000ae0 .L0 
     /tmp/ccr33Mli.s:1775   .text:0000000000000ae0 .L0 
     /tmp/ccr33Mli.s:1780   .text:0000000000000ae4 .L0 
     /tmp/ccr33Mli.s:1781   .text:0000000000000ae4 .L0 
     /tmp/ccr33Mli.s:1787   .text:0000000000000ae8 .L0 
     /tmp/ccr33Mli.s:1788   .text:0000000000000ae8 .L0 
     /tmp/ccr33Mli.s:1789   .text:0000000000000ae8 .L0 
     /tmp/ccr33Mli.s:1791   .text:0000000000000aec .L0 
     /tmp/ccr33Mli.s:1793   .text:0000000000000af0 .L0 
     /tmp/ccr33Mli.s:1795   .text:0000000000000af4 .L0 
     /tmp/ccr33Mli.s:1797   .text:0000000000000af8 .L0 
GAS LISTING /tmp/ccr33Mli.s 			page 68


     /tmp/ccr33Mli.s:1799   .text:0000000000000afc .L0 
     /tmp/ccr33Mli.s:1807   .text:0000000000000b00 .L0 
     /tmp/ccr33Mli.s:1811   .text:0000000000000b00 .L0 
     /tmp/ccr33Mli.s:1813   .text:0000000000000b00 .L0 
     /tmp/ccr33Mli.s:1815   .text:0000000000000b04 .L0 
     /tmp/ccr33Mli.s:1818   .text:0000000000000b08 .L0 
     /tmp/ccr33Mli.s:1819   .text:0000000000000b08 .L0 
     /tmp/ccr33Mli.s:1822   .text:0000000000000b0c .L0 
     /tmp/ccr33Mli.s:1823   .text:0000000000000b0c .L0 
     /tmp/ccr33Mli.s:1830   .text:0000000000000b1c .L0 
     /tmp/ccr33Mli.s:1831   .text:0000000000000b1c .L0 
     /tmp/ccr33Mli.s:1838   .text:0000000000000b24 .L0 
     /tmp/ccr33Mli.s:1844   .text:0000000000000b24 _ZN13SlabAllocator10freeBufferEPKv
     /tmp/ccr33Mli.s:1847   .text:0000000000000b24 .L0 
     /tmp/ccr33Mli.s:1849   .text:0000000000000b24 .L0 
     /tmp/ccr33Mli.s:1850   .text:0000000000000b28 .L0 
     /tmp/ccr33Mli.s:1855   .text:0000000000000b38 .L0 
     /tmp/ccr33Mli.s:1856   .text:0000000000000b38 .L0 
     /tmp/ccr33Mli.s:1857   .text:0000000000000b38 .L0 
     /tmp/ccr33Mli.s:1858   .text:0000000000000b38 .L0 
     /tmp/ccr33Mli.s:1860   .text:0000000000000b3c .L0 
     /tmp/ccr33Mli.s:1865   .text:0000000000000b40 .L0 
     /tmp/ccr33Mli.s:1866   .text:0000000000000b40 .L0 
     /tmp/ccr33Mli.s:1870   .text:0000000000000b44 .L0 
     /tmp/ccr33Mli.s:1873   .text:0000000000000b4c .L0 
     /tmp/ccr33Mli.s:1874   .text:0000000000000b4c .L0 
     /tmp/ccr33Mli.s:1882   .text:0000000000000b6c .L0 
     /tmp/ccr33Mli.s:1884   .text:0000000000000b70 .L0 
     /tmp/ccr33Mli.s:1891   .text:0000000000000b78 .L0 
     /tmp/ccr33Mli.s:1892   .text:0000000000000b7c .L0 
     /tmp/ccr33Mli.s:1894   .text:0000000000000b80 .L0 
     /tmp/ccr33Mli.s:1895   .text:0000000000000b80 .L0 
     /tmp/ccr33Mli.s:1897   .text:0000000000000b84 .L0 
     /tmp/ccr33Mli.s:1900   .text:0000000000000b88 .L0 
     /tmp/ccr33Mli.s:1903   .text:0000000000000b8c .L0 
     /tmp/ccr33Mli.s:1905   .text:0000000000000b90 .L0 
     /tmp/ccr33Mli.s:1911   .text:0000000000000b90 _ZN13SlabAllocator11deleteCacheERP5Cache
     /tmp/ccr33Mli.s:1914   .text:0000000000000b90 .L0 
     /tmp/ccr33Mli.s:1916   .text:0000000000000b90 .L0 
     /tmp/ccr33Mli.s:1917   .text:0000000000000b94 .L0 
     /tmp/ccr33Mli.s:1922   .text:0000000000000ba4 .L0 
     /tmp/ccr33Mli.s:1923   .text:0000000000000ba4 .L0 
     /tmp/ccr33Mli.s:1924   .text:0000000000000ba4 .L0 
     /tmp/ccr33Mli.s:1925   .text:0000000000000ba4 .L0 
     /tmp/ccr33Mli.s:1927   .text:0000000000000ba8 .L0 
     /tmp/ccr33Mli.s:1930   .text:0000000000000bac .L0 
     /tmp/ccr33Mli.s:1931   .text:0000000000000bac .L0 
     /tmp/ccr33Mli.s:1933   .text:0000000000000bb0 .L0 
     /tmp/ccr33Mli.s:1939   .text:0000000000000bb4 .L0 
     /tmp/ccr33Mli.s:1940   .text:0000000000000bb4 .L0 
     /tmp/ccr33Mli.s:1945   .text:0000000000000bbc .L0 
     /tmp/ccr33Mli.s:1946   .text:0000000000000bbc .L0 
     /tmp/ccr33Mli.s:1947   .text:0000000000000bbc .L0 
     /tmp/ccr33Mli.s:1949   .text:0000000000000bc0 .L0 
     /tmp/ccr33Mli.s:1953   .text:0000000000000bcc .L0 
     /tmp/ccr33Mli.s:1954   .text:0000000000000bcc .L0 
     /tmp/ccr33Mli.s:1956   .text:0000000000000bd0 .L0 
GAS LISTING /tmp/ccr33Mli.s 			page 69


     /tmp/ccr33Mli.s:1958   .text:0000000000000bd4 .L0 
     /tmp/ccr33Mli.s:1961   .text:0000000000000bd8 .L0 
     /tmp/ccr33Mli.s:1967   .text:0000000000000bdc .L0 
     /tmp/ccr33Mli.s:1968   .text:0000000000000bdc .L0 
     /tmp/ccr33Mli.s:1970   .text:0000000000000be0 .L0 
     /tmp/ccr33Mli.s:1976   .text:0000000000000be4 .L0 
     /tmp/ccr33Mli.s:1977   .text:0000000000000be4 .L0 
     /tmp/ccr33Mli.s:1982   .text:0000000000000bec .L0 
     /tmp/ccr33Mli.s:1983   .text:0000000000000bec .L0 
     /tmp/ccr33Mli.s:1984   .text:0000000000000bec .L0 
     /tmp/ccr33Mli.s:1986   .text:0000000000000bf0 .L0 
     /tmp/ccr33Mli.s:1990   .text:0000000000000bfc .L0 
     /tmp/ccr33Mli.s:1991   .text:0000000000000bfc .L0 
     /tmp/ccr33Mli.s:1993   .text:0000000000000c00 .L0 
     /tmp/ccr33Mli.s:1995   .text:0000000000000c04 .L0 
     /tmp/ccr33Mli.s:1998   .text:0000000000000c08 .L0 
     /tmp/ccr33Mli.s:2004   .text:0000000000000c0c .L0 
     /tmp/ccr33Mli.s:2005   .text:0000000000000c0c .L0 
     /tmp/ccr33Mli.s:2007   .text:0000000000000c10 .L0 
     /tmp/ccr33Mli.s:2013   .text:0000000000000c14 .L0 
     /tmp/ccr33Mli.s:2014   .text:0000000000000c14 .L0 
     /tmp/ccr33Mli.s:2019   .text:0000000000000c1c .L0 
     /tmp/ccr33Mli.s:2020   .text:0000000000000c1c .L0 
     /tmp/ccr33Mli.s:2021   .text:0000000000000c1c .L0 
     /tmp/ccr33Mli.s:2023   .text:0000000000000c20 .L0 
     /tmp/ccr33Mli.s:2027   .text:0000000000000c2c .L0 
     /tmp/ccr33Mli.s:2028   .text:0000000000000c2c .L0 
     /tmp/ccr33Mli.s:2030   .text:0000000000000c30 .L0 
     /tmp/ccr33Mli.s:2032   .text:0000000000000c34 .L0 
     /tmp/ccr33Mli.s:2035   .text:0000000000000c38 .L0 
     /tmp/ccr33Mli.s:2041   .text:0000000000000c3c .L0 
     /tmp/ccr33Mli.s:2042   .text:0000000000000c3c .L0 
     /tmp/ccr33Mli.s:2047   .text:0000000000000c50 .L0 
     /tmp/ccr33Mli.s:2048   .text:0000000000000c50 .L0 
     /tmp/ccr33Mli.s:2050   .text:0000000000000c54 .L0 
     /tmp/ccr33Mli.s:2051   .text:0000000000000c58 .L0 
     /tmp/ccr33Mli.s:2053   .text:0000000000000c5c .L0 
     /tmp/ccr33Mli.s:2054   .text:0000000000000c5c .L0 
     /tmp/ccr33Mli.s:2056   .text:0000000000000c60 .L0 
     /tmp/ccr33Mli.s:2059   .text:0000000000000c64 .L0 
     /tmp/ccr33Mli.s:2061   .text:0000000000000c68 .L0 
     /tmp/ccr33Mli.s:2063   .text:0000000000000c6c .L0 
     /tmp/ccr33Mli.s:2128   .bss:0000000000000078 _ZN13SlabAllocator20blocksResponsibleForE
     /tmp/ccr33Mli.s:2124   .bss:0000000000000070 _ZN13SlabAllocator9startAddrE
     /tmp/ccr33Mli.s:2135   .data.rel.local:0000000000000000 _ZN13SlabAllocator5namesE
     /tmp/ccr33Mli.s:2116   .bss:0000000000000000 _ZN13SlabAllocator5sizeNE
     /tmp/ccr33Mli.s:2120   .bss:0000000000000068 _ZN13SlabAllocator5cacheE
     /tmp/ccr33Mli.s:2113   .bss:0000000000000000 .LANCHOR0
     /tmp/ccr33Mli.s:2132   .data.rel.local:0000000000000000 .LANCHOR1
     /tmp/ccr33Mli.s:2155   .text:0000000000000c6c .L0 
     /tmp/ccr33Mli.s:82     .rodata.str1.8:0000000000000000 .LC0
     /tmp/ccr33Mli.s:142    .text:0000000000000088 .L0 
     /tmp/ccr33Mli.s:85     .rodata.str1.8:0000000000000008 .LC1
     /tmp/ccr33Mli.s:144    .text:0000000000000094 .L0 
     /tmp/ccr33Mli.s:150    .text:00000000000000a4 .L0 
     /tmp/ccr33Mli.s:88     .rodata.str1.8:0000000000000018 .LC2
     /tmp/ccr33Mli.s:152    .text:00000000000000b0 .L0 
GAS LISTING /tmp/ccr33Mli.s 			page 70


     /tmp/ccr33Mli.s:157    .text:00000000000000c0 .L0 
     /tmp/ccr33Mli.s:91     .rodata.str1.8:0000000000000030 .LC3
     /tmp/ccr33Mli.s:159    .text:00000000000000cc .L0 
     /tmp/ccr33Mli.s:164    .text:00000000000000dc .L0 
     /tmp/ccr33Mli.s:94     .rodata.str1.8:0000000000000048 .LC4
     /tmp/ccr33Mli.s:166    .text:00000000000000e8 .L0 
     /tmp/ccr33Mli.s:171    .text:00000000000000f8 .L0 
     /tmp/ccr33Mli.s:97     .rodata.str1.8:0000000000000060 .LC5
     /tmp/ccr33Mli.s:173    .text:0000000000000104 .L0 
     /tmp/ccr33Mli.s:178    .text:0000000000000114 .L0 
     /tmp/ccr33Mli.s:100    .rodata.str1.8:0000000000000070 .LC6
     /tmp/ccr33Mli.s:180    .text:0000000000000120 .L0 
     /tmp/ccr33Mli.s:103    .rodata.str1.8:0000000000000090 .LC7
     /tmp/ccr33Mli.s:185    .text:0000000000000130 .L0 
     /tmp/ccr33Mli.s:106    .rodata.str1.8:00000000000000b0 .LC8
     /tmp/ccr33Mli.s:201    .text:0000000000000150 .L0 
     /tmp/ccr33Mli.s:109    .rodata.str1.8:00000000000000b8 .LC9
     /tmp/ccr33Mli.s:203    .text:000000000000015c .L0 
     /tmp/ccr33Mli.s:222    .text:0000000000000180 .L0 
     /tmp/ccr33Mli.s:250    .rodata.str1.8:00000000000000c0 .LC10
     /tmp/ccr33Mli.s:300    .text:00000000000001c8 .L0 
     /tmp/ccr33Mli.s:311    .text:00000000000001e4 .L0 
     /tmp/ccr33Mli.s:316    .text:00000000000001f4 .L0 
     /tmp/ccr33Mli.s:317    .text:00000000000001fc .L0 
     /tmp/ccr33Mli.s:253    .rodata.str1.8:00000000000000d0 .LC11
     /tmp/ccr33Mli.s:319    .text:0000000000000208 .L0 
     /tmp/ccr33Mli.s:324    .text:0000000000000218 .L0 
     /tmp/ccr33Mli.s:256    .rodata.str1.8:00000000000000e8 .LC12
     /tmp/ccr33Mli.s:326    .text:0000000000000224 .L0 
     /tmp/ccr33Mli.s:331    .text:0000000000000234 .L0 
     /tmp/ccr33Mli.s:259    .rodata.str1.8:00000000000000f8 .LC13
     /tmp/ccr33Mli.s:333    .text:0000000000000240 .L0 
     /tmp/ccr33Mli.s:338    .text:0000000000000250 .L0 
     /tmp/ccr33Mli.s:262    .rodata.str1.8:0000000000000110 .LC14
     /tmp/ccr33Mli.s:340    .text:000000000000025c .L0 
     /tmp/ccr33Mli.s:345    .text:000000000000026c .L0 
     /tmp/ccr33Mli.s:265    .rodata.str1.8:0000000000000128 .LC15
     /tmp/ccr33Mli.s:347    .text:0000000000000278 .L0 
     /tmp/ccr33Mli.s:360    .text:0000000000000290 .L0 
     /tmp/ccr33Mli.s:362    .text:000000000000029c .L0 
     /tmp/ccr33Mli.s:374    .text:00000000000002b4 .L0 
     /tmp/ccr33Mli.s:379    .text:00000000000002c4 .L0 
     /tmp/ccr33Mli.s:268    .rodata.str1.8:0000000000000138 .LC16
     /tmp/ccr33Mli.s:381    .text:00000000000002d0 .L0 
     /tmp/ccr33Mli.s:394    .text:00000000000002e8 .L0 
     /tmp/ccr33Mli.s:396    .text:00000000000002f4 .L0 
     /tmp/ccr33Mli.s:408    .text:000000000000030c .L0 
     /tmp/ccr33Mli.s:413    .text:000000000000031c .L0 
     /tmp/ccr33Mli.s:271    .rodata.str1.8:0000000000000148 .LC17
     /tmp/ccr33Mli.s:415    .text:0000000000000328 .L0 
     /tmp/ccr33Mli.s:428    .text:0000000000000340 .L0 
     /tmp/ccr33Mli.s:430    .text:000000000000034c .L0 
     /tmp/ccr33Mli.s:442    .text:0000000000000364 .L0 
     /tmp/ccr33Mli.s:447    .text:0000000000000374 .L0 
     /tmp/ccr33Mli.s:274    .rodata.str1.8:0000000000000158 .LC18
     /tmp/ccr33Mli.s:449    .text:0000000000000380 .L0 
     /tmp/ccr33Mli.s:1203   .text:0000000000000788 .L0 
GAS LISTING /tmp/ccr33Mli.s 			page 71


     /tmp/ccr33Mli.s:1258   .text:00000000000007ec .L0 
     /tmp/ccr33Mli.s:1352   .text:0000000000000880 .L0 
     /tmp/ccr33Mli.s:1359   .text:0000000000000890 .L0 
     /tmp/ccr33Mli.s:1321   .rodata.str1.8:0000000000000168 .LC19
     /tmp/ccr33Mli.s:1391   .text:00000000000008d0 .L0 
     /tmp/ccr33Mli.s:1405   .text:00000000000008ec .L0 
     /tmp/ccr33Mli.s:1415   .text:0000000000000914 .L0 
     /tmp/ccr33Mli.s:1875   .text:0000000000000b50 .L0 
     /tmp/ccr33Mli.s:2043   .text:0000000000000c40 .L0 
     /tmp/ccr33Mli.s:59     .text:000000000000004c .L2
     /tmp/ccr33Mli.s:33     .text:0000000000000020 .L3
     /tmp/ccr33Mli.s:243    .text:00000000000001a8 .L10
     /tmp/ccr33Mli.s:209    .text:0000000000000170 .L8
     /tmp/ccr33Mli.s:194    .text:0000000000000148 .L13
     /tmp/ccr33Mli.s:371    .text:00000000000002b4 .L15
     /tmp/ccr33Mli.s:354    .text:000000000000028c .L16
     /tmp/ccr33Mli.s:405    .text:000000000000030c .L17
     /tmp/ccr33Mli.s:388    .text:00000000000002e4 .L18
     /tmp/ccr33Mli.s:439    .text:0000000000000364 .L19
     /tmp/ccr33Mli.s:422    .text:000000000000033c .L20
     /tmp/ccr33Mli.s:494    .text:00000000000003c4 .L23
     /tmp/ccr33Mli.s:647    .text:00000000000004b4 .L30
     /tmp/ccr33Mli.s:609    .text:000000000000047c .L27
     /tmp/ccr33Mli.s:588    .text:0000000000000458 .L28
     /tmp/ccr33Mli.s:655    .text:00000000000004bc .L31
     /tmp/ccr33Mli.s:660    .text:00000000000004c4 .L32
     /tmp/ccr33Mli.s:621    .text:0000000000000488 .L29
     /tmp/ccr33Mli.s:663    .text:00000000000004c8 .L26
     /tmp/ccr33Mli.s:739    .text:000000000000052c .L39
     /tmp/ccr33Mli.s:713    .text:0000000000000508 .L36
     /tmp/ccr33Mli.s:724    .text:0000000000000518 .L37
     /tmp/ccr33Mli.s:702    .text:00000000000004f8 .L35
     /tmp/ccr33Mli.s:955    .text:0000000000000660 .L51
     /tmp/ccr33Mli.s:859    .text:00000000000005e0 .L53
     /tmp/ccr33Mli.s:829    .text:00000000000005ac .L50
     /tmp/ccr33Mli.s:940    .text:0000000000000648 .L54
     /tmp/ccr33Mli.s:948    .text:0000000000000654 .L47
     /tmp/ccr33Mli.s:924    .text:0000000000000630 .L49
     /tmp/ccr33Mli.s:962    .text:0000000000000664 .L42
     /tmp/ccr33Mli.s:889    .text:0000000000000604 .L46
     /tmp/ccr33Mli.s:910    .text:0000000000000618 .L48
     /tmp/ccr33Mli.s:1023   .text:00000000000006b4 .L56
     /tmp/ccr33Mli.s:1005   .text:000000000000069c .L57
     /tmp/ccr33Mli.s:1048   .text:00000000000006d4 .L62
     /tmp/ccr33Mli.s:1071   .text:00000000000006f0 .L59
     /tmp/ccr33Mli.s:1054   .text:00000000000006d8 .L60
     /tmp/ccr33Mli.s:1029   .text:00000000000006b8 .L55
     /tmp/ccr33Mli.s:1176   .text:0000000000000768 .L64
     /tmp/ccr33Mli.s:1160   .text:0000000000000754 .L65
     /tmp/ccr33Mli.s:1218   .text:00000000000007b0 .L67
     /tmp/ccr33Mli.s:1421   .text:0000000000000928 .L76
     /tmp/ccr33Mli.s:1401   .text:00000000000008e8 .L78
     /tmp/ccr33Mli.s:1605   .text:0000000000000a2c .L87
     /tmp/ccr33Mli.s:1571   .text:00000000000009f0 .L81
     /tmp/ccr33Mli.s:1581   .text:00000000000009fc .L90
     /tmp/ccr33Mli.s:1588   .text:0000000000000a08 .L91
     /tmp/ccr33Mli.s:1554   .text:00000000000009dc .L79
GAS LISTING /tmp/ccr33Mli.s 			page 72


     /tmp/ccr33Mli.s:1510   .text:00000000000009a8 .L82
     /tmp/ccr33Mli.s:1532   .text:00000000000009c0 .L84
     /tmp/ccr33Mli.s:1649   .text:0000000000000a60 .L93
     /tmp/ccr33Mli.s:1660   .text:0000000000000a70 .L94
     /tmp/ccr33Mli.s:1675   .text:0000000000000a7c .L97
     /tmp/ccr33Mli.s:1730   .text:0000000000000ab8 .L102
     /tmp/ccr33Mli.s:1667   .text:0000000000000a78 .L96
     /tmp/ccr33Mli.s:1737   .text:0000000000000abc .L95
     /tmp/ccr33Mli.s:1761   .text:0000000000000ad8 .L104
     /tmp/ccr33Mli.s:1777   .text:0000000000000ae4 .L101
     /tmp/ccr33Mli.s:1743   .text:0000000000000ac0 .L98
     /tmp/ccr33Mli.s:1769   .text:0000000000000ae0 .L100
     /tmp/ccr33Mli.s:1888   .text:0000000000000b78 .L105
     /tmp/ccr33Mli.s:1868   .text:0000000000000b44 .L107
     /tmp/ccr33Mli.s:1962   .text:0000000000000bdc .L110
     /tmp/ccr33Mli.s:1935   .text:0000000000000bb4 .L111
     /tmp/ccr33Mli.s:1999   .text:0000000000000c0c .L112
     /tmp/ccr33Mli.s:1972   .text:0000000000000be4 .L113
     /tmp/ccr33Mli.s:2036   .text:0000000000000c3c .L114
     /tmp/ccr33Mli.s:2009   .text:0000000000000c14 .L115
     /tmp/ccr33Mli.s:2071   .rodata.str1.8:0000000000000178 .LC20
     /tmp/ccr33Mli.s:2074   .rodata.str1.8:0000000000000190 .LC21
     /tmp/ccr33Mli.s:2077   .rodata.str1.8:00000000000001a8 .LC22
     /tmp/ccr33Mli.s:2080   .rodata.str1.8:00000000000001c0 .LC23
     /tmp/ccr33Mli.s:2083   .rodata.str1.8:00000000000001d8 .LC24
     /tmp/ccr33Mli.s:2086   .rodata.str1.8:00000000000001f0 .LC25
     /tmp/ccr33Mli.s:2089   .rodata.str1.8:0000000000000208 .LC26
     /tmp/ccr33Mli.s:2092   .rodata.str1.8:0000000000000220 .LC27
     /tmp/ccr33Mli.s:2095   .rodata.str1.8:0000000000000238 .LC28
     /tmp/ccr33Mli.s:2098   .rodata.str1.8:0000000000000250 .LC29
     /tmp/ccr33Mli.s:2101   .rodata.str1.8:0000000000000268 .LC30
     /tmp/ccr33Mli.s:2104   .rodata.str1.8:0000000000000280 .LC31
     /tmp/ccr33Mli.s:2107   .rodata.str1.8:0000000000000298 .LC32
     /tmp/ccr33Mli.s:4819   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccr33Mli.s:7103   .debug_str:0000000000000916 .LASF159
     /tmp/ccr33Mli.s:7007   .debug_str:0000000000000606 .LASF160
     /tmp/ccr33Mli.s:7163   .debug_str:0000000000000b9e .LASF161
     /tmp/ccr33Mli.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccr33Mli.s:2150   .text:0000000000000c6c .Letext0
     /tmp/ccr33Mli.s:6827   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccr33Mli.s:7077   .debug_str:000000000000080f .LASF0
     /tmp/ccr33Mli.s:7001   .debug_str:00000000000005c7 .LASF1
     /tmp/ccr33Mli.s:7029   .debug_str:00000000000006a3 .LASF2
     /tmp/ccr33Mli.s:6987   .debug_str:0000000000000536 .LASF3
     /tmp/ccr33Mli.s:6949   .debug_str:0000000000000438 .LASF4
     /tmp/ccr33Mli.s:6865   .debug_str:000000000000016d .LASF5
     /tmp/ccr33Mli.s:7033   .debug_str:00000000000006d2 .LASF6
     /tmp/ccr33Mli.s:6999   .debug_str:00000000000005b4 .LASF7
     /tmp/ccr33Mli.s:7123   .debug_str:0000000000000a68 .LASF8
     /tmp/ccr33Mli.s:6931   .debug_str:00000000000003c2 .LASF9
     /tmp/ccr33Mli.s:7051   .debug_str:0000000000000738 .LASF10
     /tmp/ccr33Mli.s:7109   .debug_str:00000000000009ef .LASF11
     /tmp/ccr33Mli.s:6869   .debug_str:000000000000017b .LASF12
     /tmp/ccr33Mli.s:6835   .debug_str:000000000000002c .LASF13
     /tmp/ccr33Mli.s:6875   .debug_str:00000000000001b6 .LASF14
     /tmp/ccr33Mli.s:7069   .debug_str:00000000000007bd .LASF15
     /tmp/ccr33Mli.s:6893   .debug_str:00000000000002ae .LASF16
GAS LISTING /tmp/ccr33Mli.s 			page 73


     /tmp/ccr33Mli.s:7037   .debug_str:00000000000006ea .LASF17
     /tmp/ccr33Mli.s:6899   .debug_str:00000000000002d9 .LASF18
     /tmp/ccr33Mli.s:6897   .debug_str:00000000000002d3 .LASF41
     /tmp/ccr33Mli.s:6889   .debug_str:000000000000027d .LASF162
     /tmp/ccr33Mli.s:7161   .debug_str:0000000000000b99 .LASF86
     /tmp/ccr33Mli.s:6985   .debug_str:000000000000052b .LASF19
     /tmp/ccr33Mli.s:7113   .debug_str:0000000000000a27 .LASF21
     /tmp/ccr33Mli.s:7011   .debug_str:000000000000062d .LASF23
     /tmp/ccr33Mli.s:7049   .debug_str:0000000000000726 .LASF25
     /tmp/ccr33Mli.s:6917   .debug_str:0000000000000393 .LASF20
     /tmp/ccr33Mli.s:6841   .debug_str:0000000000000073 .LASF22
     /tmp/ccr33Mli.s:6963   .debug_str:000000000000049d .LASF55
     /tmp/ccr33Mli.s:6977   .debug_str:00000000000004f5 .LASF57
     /tmp/ccr33Mli.s:7133   .debug_str:0000000000000ac1 .LASF24
     /tmp/ccr33Mli.s:7139   .debug_str:0000000000000af4 .LASF26
     /tmp/ccr33Mli.s:7063   .debug_str:000000000000078c .LASF27
     /tmp/ccr33Mli.s:7067   .debug_str:00000000000007ac .LASF28
     /tmp/ccr33Mli.s:7023   .debug_str:000000000000067c .LASF29
     /tmp/ccr33Mli.s:7015   .debug_str:0000000000000642 .LASF163
     /tmp/ccr33Mli.s:6901   .debug_str:00000000000002e1 .LASF30
     /tmp/ccr33Mli.s:6981   .debug_str:000000000000051a .LASF31
     /tmp/ccr33Mli.s:6863   .debug_str:0000000000000168 .LASF32
     /tmp/ccr33Mli.s:6907   .debug_str:000000000000031b .LASF33
     /tmp/ccr33Mli.s:7017   .debug_str:0000000000000649 .LASF34
     /tmp/ccr33Mli.s:7089   .debug_str:0000000000000894 .LASF35
     /tmp/ccr33Mli.s:7127   .debug_str:0000000000000a9c .LASF36
     /tmp/ccr33Mli.s:7137   .debug_str:0000000000000ad6 .LASF38
     /tmp/ccr33Mli.s:7057   .debug_str:0000000000000770 .LASF37
     /tmp/ccr33Mli.s:7073   .debug_str:00000000000007f0 .LASF39
     /tmp/ccr33Mli.s:7151   .debug_str:0000000000000b72 .LASF164
     /tmp/ccr33Mli.s:6845   .debug_str:00000000000000a0 .LASF165
     /tmp/ccr33Mli.s:6919   .debug_str:0000000000000398 .LASF40
     /tmp/ccr33Mli.s:6937   .debug_str:00000000000003e3 .LASF42
     /tmp/ccr33Mli.s:6873   .debug_str:00000000000001aa .LASF43
     /tmp/ccr33Mli.s:7027   .debug_str:0000000000000697 .LASF44
     /tmp/ccr33Mli.s:7119   .debug_str:0000000000000a59 .LASF45
     /tmp/ccr33Mli.s:6933   .debug_str:00000000000003d0 .LASF46
     /tmp/ccr33Mli.s:7099   .debug_str:00000000000008ed .LASF118
     /tmp/ccr33Mli.s:6983   .debug_str:000000000000051f .LASF47
     /tmp/ccr33Mli.s:7047   .debug_str:0000000000000719 .LASF48
     /tmp/ccr33Mli.s:7025   .debug_str:000000000000068d .LASF49
     /tmp/ccr33Mli.s:6935   .debug_str:00000000000003d9 .LASF50
     /tmp/ccr33Mli.s:7093   .debug_str:00000000000008b5 .LASF51
     /tmp/ccr33Mli.s:6995   .debug_str:00000000000005a3 .LASF52
     /tmp/ccr33Mli.s:7059   .debug_str:0000000000000777 .LASF53
     /tmp/ccr33Mli.s:7031   .debug_str:00000000000006b6 .LASF54
     /tmp/ccr33Mli.s:6965   .debug_str:00000000000004a7 .LASF56
     /tmp/ccr33Mli.s:6831   .debug_str:0000000000000006 .LASF58
     /tmp/ccr33Mli.s:6851   .debug_str:00000000000000e4 .LASF59
     /tmp/ccr33Mli.s:7071   .debug_str:00000000000007d3 .LASF60
     /tmp/ccr33Mli.s:7075   .debug_str:0000000000000805 .LASF61
     /tmp/ccr33Mli.s:6911   .debug_str:0000000000000352 .LASF62
     /tmp/ccr33Mli.s:7021   .debug_str:000000000000065d .LASF166
     /tmp/ccr33Mli.s:6945   .debug_str:000000000000041e .LASF63
     /tmp/ccr33Mli.s:7055   .debug_str:000000000000074c .LASF64
     /tmp/ccr33Mli.s:6925   .debug_str:00000000000003a9 .LASF65
     /tmp/ccr33Mli.s:7101   .debug_str:00000000000008f8 .LASF66
GAS LISTING /tmp/ccr33Mli.s 			page 74


     /tmp/ccr33Mli.s:6957   .debug_str:000000000000045b .LASF67
     /tmp/ccr33Mli.s:6849   .debug_str:00000000000000c2 .LASF68
     /tmp/ccr33Mli.s:6997   .debug_str:00000000000005ae .LASF69
     /tmp/ccr33Mli.s:6871   .debug_str:000000000000018b .LASF70
     /tmp/ccr33Mli.s:6951   .debug_str:000000000000043f .LASF71
     /tmp/ccr33Mli.s:6969   .debug_str:00000000000004bb .LASF72
     /tmp/ccr33Mli.s:6953   .debug_str:0000000000000445 .LASF73
     /tmp/ccr33Mli.s:6929   .debug_str:00000000000003b9 .LASF74
     /tmp/ccr33Mli.s:7035   .debug_str:00000000000006e5 .LASF75
     /tmp/ccr33Mli.s:7149   .debug_str:0000000000000b6d .LASF76
     /tmp/ccr33Mli.s:6947   .debug_str:000000000000042e .LASF77
     /tmp/ccr33Mli.s:7061   .debug_str:0000000000000780 .LASF78
     /tmp/ccr33Mli.s:7115   .debug_str:0000000000000a41 .LASF79
     /tmp/ccr33Mli.s:7155   .debug_str:0000000000000b83 .LASF80
     /tmp/ccr33Mli.s:6923   .debug_str:00000000000003a2 .LASF81
     /tmp/ccr33Mli.s:7129   .debug_str:0000000000000aa2 .LASF83
     /tmp/ccr33Mli.s:6887   .debug_str:0000000000000275 .LASF82
     /tmp/ccr33Mli.s:6961   .debug_str:000000000000048a .LASF84
     /tmp/ccr33Mli.s:7143   .debug_str:0000000000000b31 .LASF85
     /tmp/ccr33Mli.s:7105   .debug_str:00000000000009da .LASF87
     /tmp/ccr33Mli.s:6943   .debug_str:000000000000040e .LASF88
     /tmp/ccr33Mli.s:6939   .debug_str:00000000000003ef .LASF89
     /tmp/ccr33Mli.s:6847   .debug_str:00000000000000b5 .LASF90
     /tmp/ccr33Mli.s:6927   .debug_str:00000000000003b2 .LASF91
     /tmp/ccr33Mli.s:7091   .debug_str:00000000000008a7 .LASF92
     /tmp/ccr33Mli.s:6959   .debug_str:0000000000000467 .LASF93
     /tmp/ccr33Mli.s:7159   .debug_str:0000000000000b8d .LASF94
     /tmp/ccr33Mli.s:6837   .debug_str:000000000000003c .LASF95
     /tmp/ccr33Mli.s:6903   .debug_str:00000000000002e6 .LASF96
     /tmp/ccr33Mli.s:6905   .debug_str:00000000000002f2 .LASF97
     /tmp/ccr33Mli.s:7019   .debug_str:0000000000000650 .LASF98
     /tmp/ccr33Mli.s:7111   .debug_str:00000000000009fe .LASF99
     /tmp/ccr33Mli.s:7083   .debug_str:0000000000000874 .LASF100
     /tmp/ccr33Mli.s:6861   .debug_str:0000000000000140 .LASF101
     /tmp/ccr33Mli.s:6989   .debug_str:0000000000000544 .LASF102
     /tmp/ccr33Mli.s:7097   .debug_str:00000000000008c5 .LASF103
     /tmp/ccr33Mli.s:7045   .debug_str:000000000000070a .LASF104
     /tmp/ccr33Mli.s:6891   .debug_str:0000000000000283 .LASF105
     /tmp/ccr33Mli.s:7117   .debug_str:0000000000000a4a .LASF106
     /tmp/ccr33Mli.s:7081   .debug_str:000000000000084f .LASF107
     /tmp/ccr33Mli.s:7135   .debug_str:0000000000000acd .LASF108
     /tmp/ccr33Mli.s:7125   .debug_str:0000000000000a78 .LASF109
     /tmp/ccr33Mli.s:6857   .debug_str:0000000000000112 .LASF110
     /tmp/ccr33Mli.s:6971   .debug_str:00000000000004c0 .LASF111
     /tmp/ccr33Mli.s:6967   .debug_str:00000000000004b0 .LASF112
     /tmp/ccr33Mli.s:6859   .debug_str:000000000000011d .LASF113
     /tmp/ccr33Mli.s:6833   .debug_str:0000000000000022 .LASF114
     /tmp/ccr33Mli.s:7141   .debug_str:0000000000000b0d .LASF115
     /tmp/ccr33Mli.s:6883   .debug_str:0000000000000240 .LASF116
     /tmp/ccr33Mli.s:6879   .debug_str:00000000000001f0 .LASF117
     /tmp/ccr33Mli.s:6975   .debug_str:00000000000004ef .LASF119
     /tmp/ccr33Mli.s:6913   .debug_str:000000000000036f .LASF120
     /tmp/ccr33Mli.s:6853   .debug_str:00000000000000ee .LASF121
     /tmp/ccr33Mli.s:6941   .debug_str:00000000000003f9 .LASF122
     /tmp/ccr33Mli.s:7013   .debug_str:0000000000000633 .LASF123
     /tmp/ccr33Mli.s:6877   .debug_str:00000000000001c2 .LASF124
     /tmp/ccr33Mli.s:6895   .debug_str:00000000000002c4 .LASF125
GAS LISTING /tmp/ccr33Mli.s 			page 75


     /tmp/ccr33Mli.s:7079   .debug_str:0000000000000821 .LASF126
     /tmp/ccr33Mli.s:7157   .debug_str:0000000000000b88 .LASF127
     /tmp/ccr33Mli.s:6909   .debug_str:000000000000032c .LASF128
     /tmp/ccr33Mli.s:7085   .debug_str:0000000000000880 .LASF129
     /tmp/ccr33Mli.s:6881   .debug_str:0000000000000217 .LASF130
     /tmp/ccr33Mli.s:7147   .debug_str:0000000000000b5f .LASF131
     /tmp/ccr33Mli.s:7145   .debug_str:0000000000000b36 .LASF132
     /tmp/ccr33Mli.s:7009   .debug_str:000000000000061c .LASF133
     /tmp/ccr33Mli.s:7003   .debug_str:00000000000005d4 .LASF134
     /tmp/ccr33Mli.s:7131   .debug_str:0000000000000ab4 .LASF135
     /tmp/ccr33Mli.s:6993   .debug_str:0000000000000578 .LASF136
     /tmp/ccr33Mli.s:7065   .debug_str:00000000000007a1 .LASF137
     /tmp/ccr33Mli.s:6991   .debug_str:0000000000000551 .LASF138
     /tmp/ccr33Mli.s:7005   .debug_str:0000000000000600 .LASF139
     /tmp/ccr33Mli.s:7165   .debug_str:0000000000000bcf .LASF140
     /tmp/ccr33Mli.s:6843   .debug_str:0000000000000086 .LASF141
     /tmp/ccr33Mli.s:6855   .debug_str:00000000000000f8 .LASF142
     /tmp/ccr33Mli.s:6915   .debug_str:0000000000000375 .LASF143
     /tmp/ccr33Mli.s:6885   .debug_str:000000000000024b .LASF144
     /tmp/ccr33Mli.s:754    .text:0000000000000538 .LFB25
     /tmp/ccr33Mli.s:800    .text:000000000000058c .LFE25
     /tmp/ccr33Mli.s:7041   .debug_str:00000000000006f6 .LASF145
     /tmp/ccr33Mli.s:5843   .debug_loc:0000000000000000 .LLST10
     /tmp/ccr33Mli.s:7039   .debug_str:00000000000006ef .LASF146
     /tmp/ccr33Mli.s:5857   .debug_loc:0000000000000039 .LLST11
     /tmp/ccr33Mli.s:6921   .debug_str:000000000000039d .LASF147
     /tmp/ccr33Mli.s:5875   .debug_loc:0000000000000085 .LLST12
     /tmp/ccr33Mli.s:777    .text:0000000000000564 .LVL72
     /tmp/ccr33Mli.s:783    .text:0000000000000574 .LVL73
     /tmp/ccr33Mli.s:687    .text:00000000000004e4 .LFB24
     /tmp/ccr33Mli.s:748    .text:0000000000000538 .LFE24
     /tmp/ccr33Mli.s:474    .text:00000000000003a8 .LFB23
     /tmp/ccr33Mli.s:509    .text:00000000000003d8 .LFE23
     /tmp/ccr33Mli.s:281    .text:00000000000001ac .LFB22
     /tmp/ccr33Mli.s:468    .text:00000000000003a8 .LFE22
     /tmp/ccr33Mli.s:5893   .debug_loc:00000000000000d1 .LLST4
     /tmp/ccr33Mli.s:7121   .debug_str:0000000000000a63 .LASF148
     /tmp/ccr33Mli.s:5911   .debug_loc:000000000000011d .LLST5
     /tmp/ccr33Mli.s:303    .text:00000000000001d8 .LVL26
     /tmp/ccr33Mli.s:308    .text:00000000000001e4 .LVL27
     /tmp/ccr33Mli.s:313    .text:00000000000001f4 .LVL28
     /tmp/ccr33Mli.s:321    .text:0000000000000218 .LVL29
     /tmp/ccr33Mli.s:328    .text:0000000000000234 .LVL30
     /tmp/ccr33Mli.s:335    .text:0000000000000250 .LVL31
     /tmp/ccr33Mli.s:342    .text:000000000000026c .LVL32
     /tmp/ccr33Mli.s:349    .text:0000000000000288 .LVL33
     /tmp/ccr33Mli.s:364    .text:00000000000002ac .LVL35
     /tmp/ccr33Mli.s:376    .text:00000000000002c4 .LVL37
     /tmp/ccr33Mli.s:383    .text:00000000000002e0 .LVL38
     /tmp/ccr33Mli.s:398    .text:0000000000000304 .LVL40
     /tmp/ccr33Mli.s:410    .text:000000000000031c .LVL42
     /tmp/ccr33Mli.s:417    .text:0000000000000338 .LVL43
     /tmp/ccr33Mli.s:432    .text:000000000000035c .LVL45
     /tmp/ccr33Mli.s:444    .text:0000000000000374 .LVL47
     /tmp/ccr33Mli.s:451    .text:0000000000000390 .LVL48
     /tmp/ccr33Mli.s:116    .text:0000000000000068 .LFB21
     /tmp/ccr33Mli.s:246    .text:00000000000001ac .LFE21
GAS LISTING /tmp/ccr33Mli.s 			page 76


     /tmp/ccr33Mli.s:5918   .debug_loc:0000000000000140 .LLST2
     /tmp/ccr33Mli.s:189    .text:0000000000000140 .LBB36
     /tmp/ccr33Mli.s:219    .text:0000000000000180 .LBE36
     /tmp/ccr33Mli.s:5940   .debug_loc:000000000000019f .LLST3
     /tmp/ccr33Mli.s:205    .text:000000000000016c .LVL18
     /tmp/ccr33Mli.s:147    .text:00000000000000a4 .LVL10
     /tmp/ccr33Mli.s:154    .text:00000000000000c0 .LVL11
     /tmp/ccr33Mli.s:161    .text:00000000000000dc .LVL12
     /tmp/ccr33Mli.s:168    .text:00000000000000f8 .LVL13
     /tmp/ccr33Mli.s:175    .text:0000000000000114 .LVL14
     /tmp/ccr33Mli.s:182    .text:0000000000000130 .LVL15
     /tmp/ccr33Mli.s:187    .text:0000000000000140 .LVL16
     /tmp/ccr33Mli.s:224    .text:0000000000000190 .LVL20
     /tmp/ccr33Mli.s:10     .text:0000000000000000 .LFB20
     /tmp/ccr33Mli.s:78     .text:0000000000000068 .LFE20
     /tmp/ccr33Mli.s:5952   .debug_loc:00000000000001d6 .LLST0
     /tmp/ccr33Mli.s:5970   .debug_loc:0000000000000222 .LLST1
     /tmp/ccr33Mli.s:42     .text:0000000000000034 .LVL3
     /tmp/ccr33Mli.s:1912   .text:0000000000000b90 .LFB19
     /tmp/ccr33Mli.s:2064   .text:0000000000000c6c .LFE19
     /tmp/ccr33Mli.s:5986   .debug_loc:000000000000026c .LLST59
     /tmp/ccr33Mli.s:1936   .text:0000000000000bb4 .LBB119
     /tmp/ccr33Mli.s:1965   .text:0000000000000bdc .LBE119
     /tmp/ccr33Mli.s:6004   .debug_loc:00000000000002b8 .LLST60
     /tmp/ccr33Mli.s:1942   .text:0000000000000bbc .LBB121
     /tmp/ccr33Mli.s:1959   .text:0000000000000bd8 .LBE121
     /tmp/ccr33Mli.s:6011   .debug_loc:00000000000002db .LLST61
     /tmp/ccr33Mli.s:1951   .text:0000000000000bcc .LVL201
     /tmp/ccr33Mli.s:1973   .text:0000000000000be4 .LBB122
     /tmp/ccr33Mli.s:2002   .text:0000000000000c0c .LBE122
     /tmp/ccr33Mli.s:6018   .debug_loc:00000000000002fe .LLST62
     /tmp/ccr33Mli.s:1979   .text:0000000000000bec .LBB124
     /tmp/ccr33Mli.s:1996   .text:0000000000000c08 .LBE124
     /tmp/ccr33Mli.s:6025   .debug_loc:0000000000000321 .LLST63
     /tmp/ccr33Mli.s:1988   .text:0000000000000bfc .LVL205
     /tmp/ccr33Mli.s:2010   .text:0000000000000c14 .LBB125
     /tmp/ccr33Mli.s:2039   .text:0000000000000c3c .LBE125
     /tmp/ccr33Mli.s:6032   .debug_loc:0000000000000344 .LLST64
     /tmp/ccr33Mli.s:2016   .text:0000000000000c1c .LBB127
     /tmp/ccr33Mli.s:2033   .text:0000000000000c38 .LBE127
     /tmp/ccr33Mli.s:6039   .debug_loc:0000000000000367 .LLST65
     /tmp/ccr33Mli.s:2025   .text:0000000000000c2c .LVL209
     /tmp/ccr33Mli.s:2045   .text:0000000000000c50 .LVL211
     /tmp/ccr33Mli.s:1230   .text:00000000000007b8 .LFB18
     /tmp/ccr33Mli.s:1317   .text:0000000000000858 .LFE18
     /tmp/ccr33Mli.s:6046   .debug_loc:000000000000038a .LLST29
     /tmp/ccr33Mli.s:7095   .debug_str:00000000000008c0 .LASF149
     /tmp/ccr33Mli.s:6064   .debug_loc:00000000000003d6 .LLST30
     /tmp/ccr33Mli.s:6082   .debug_loc:0000000000000422 .LLST31
     /tmp/ccr33Mli.s:6100   .debug_loc:000000000000046e .LLST32
     /tmp/ccr33Mli.s:6118   .debug_loc:00000000000004ba .LLST33
     /tmp/ccr33Mli.s:1261   .text:00000000000007fc .LVL128
     /tmp/ccr33Mli.s:1289   .text:0000000000000830 .LVL130
     /tmp/ccr33Mli.s:1845   .text:0000000000000b24 .LFB17
     /tmp/ccr33Mli.s:1906   .text:0000000000000b90 .LFE17
     /tmp/ccr33Mli.s:7053   .debug_str:0000000000000747 .LASF150
     /tmp/ccr33Mli.s:6129   .debug_loc:00000000000004f0 .LLST57
GAS LISTING /tmp/ccr33Mli.s 			page 77


     /tmp/ccr33Mli.s:1864   .text:0000000000000b40 .LBB109
     /tmp/ccr33Mli.s:1889   .text:0000000000000b78 .LBE109
     /tmp/ccr33Mli.s:6147   .debug_loc:000000000000053c .LLST58
     /tmp/ccr33Mli.s:1880   .text:0000000000000b6c .LVL193
     /tmp/ccr33Mli.s:1620   .text:0000000000000a30 .LFB16
     /tmp/ccr33Mli.s:1839   .text:0000000000000b24 .LFE16
     /tmp/ccr33Mli.s:6163   .debug_loc:0000000000000586 .LLST43
     /tmp/ccr33Mli.s:6185   .debug_loc:00000000000005e5 .LLST44
     /tmp/ccr33Mli.s:7153   .debug_str:0000000000000b7b .LASF151
     /tmp/ccr33Mli.s:6207   .debug_loc:0000000000000644 .LLST45
     /tmp/ccr33Mli.s:1668   .text:0000000000000a78 .LBB87
     /tmp/ccr33Mli.s:6775   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccr33Mli.s:6218   .debug_loc:000000000000067a .LLST46
     /tmp/ccr33Mli.s:6225   .debug_loc:000000000000069d .LLST47
     /tmp/ccr33Mli.s:6236   .debug_loc:00000000000006d3 .LLST48
     /tmp/ccr33Mli.s:6247   .debug_loc:0000000000000709 .LLST49
     /tmp/ccr33Mli.s:1683   .text:0000000000000a80 .LBB90
     /tmp/ccr33Mli.s:1700   .text:0000000000000a98 .LBE90
     /tmp/ccr33Mli.s:6263   .debug_loc:0000000000000753 .LLST50
     /tmp/ccr33Mli.s:1714   .text:0000000000000aa0 .LBB93
     /tmp/ccr33Mli.s:1731   .text:0000000000000ab8 .LBE93
     /tmp/ccr33Mli.s:6270   .debug_loc:0000000000000776 .LLST51
     /tmp/ccr33Mli.s:1724   .text:0000000000000ab0 .LVL174
     /tmp/ccr33Mli.s:1770   .text:0000000000000ae0 .LBB98
     /tmp/ccr33Mli.s:6292   .debug_loc:00000000000007b7 .LLST52
     /tmp/ccr33Mli.s:6299   .debug_loc:00000000000007da .LLST53
     /tmp/ccr33Mli.s:6310   .debug_loc:0000000000000810 .LLST54
     /tmp/ccr33Mli.s:1785   .text:0000000000000ae8 .LBB101
     /tmp/ccr33Mli.s:1802   .text:0000000000000b00 .LBE101
     /tmp/ccr33Mli.s:6326   .debug_loc:000000000000085a .LLST55
     /tmp/ccr33Mli.s:1816   .text:0000000000000b08 .LBB104
     /tmp/ccr33Mli.s:1833   .text:0000000000000b24 .LBE104
     /tmp/ccr33Mli.s:6333   .debug_loc:000000000000087d .LLST56
     /tmp/ccr33Mli.s:1828   .text:0000000000000b1c .LVL189
     /tmp/ccr33Mli.s:1648   .text:0000000000000a60 .LVL165
     /tmp/ccr33Mli.s:1659   .text:0000000000000a70 .LVL166
     /tmp/ccr33Mli.s:1447   .text:0000000000000948 .LFB15
     /tmp/ccr33Mli.s:1614   .text:0000000000000a30 .LFE15
     /tmp/ccr33Mli.s:6355   .debug_loc:00000000000008be .LLST37
     /tmp/ccr33Mli.s:7087   .debug_str:000000000000088e .LASF152
     /tmp/ccr33Mli.s:6381   .debug_loc:0000000000000930 .LLST38
     /tmp/ccr33Mli.s:6402   .debug_loc:000000000000097f .LLST39
     /tmp/ccr33Mli.s:6413   .debug_loc:00000000000009b5 .LLST40
     /tmp/ccr33Mli.s:1495   .text:0000000000000998 .LBB64
     /tmp/ccr33Mli.s:1502   .text:000000000000099c .LBE64
     /tmp/ccr33Mli.s:6424   .debug_loc:00000000000009eb .LLST41
     /tmp/ccr33Mli.s:1518   .text:00000000000009b0 .LBB66
     /tmp/ccr33Mli.s:1525   .text:00000000000009b4 .LBE66
     /tmp/ccr33Mli.s:6431   .debug_loc:0000000000000a0e .LLST42
     /tmp/ccr33Mli.s:1553   .text:00000000000009dc .LVL154
     /tmp/ccr33Mli.s:1594   .text:0000000000000a14 .LVL160
     /tmp/ccr33Mli.s:1602   .text:0000000000000a28 .LVL161
     /tmp/ccr33Mli.s:1101   .text:0000000000000718 .LFB14
     /tmp/ccr33Mli.s:1224   .text:00000000000007b8 .LFE14
     /tmp/ccr33Mli.s:6438   .debug_loc:0000000000000a31 .LLST24
     /tmp/ccr33Mli.s:7107   .debug_str:00000000000009e9 .LASF153
     /tmp/ccr33Mli.s:6458   .debug_loc:0000000000000a7f .LLST25
GAS LISTING /tmp/ccr33Mli.s 			page 78


     /tmp/ccr33Mli.s:1106   .text:0000000000000718 .LBB57
     /tmp/ccr33Mli.s:1155   .text:0000000000000750 .LBE57
     /tmp/ccr33Mli.s:6481   .debug_loc:0000000000000adf .LLST26
     /tmp/ccr33Mli.s:1156   .text:0000000000000750 .LBB59
     /tmp/ccr33Mli.s:1180   .text:0000000000000768 .LBE59
     /tmp/ccr33Mli.s:6492   .debug_loc:0000000000000b15 .LLST27
     /tmp/ccr33Mli.s:6499   .debug_loc:0000000000000b38 .LLST28
     /tmp/ccr33Mli.s:1207   .text:00000000000007a0 .LVL124
     /tmp/ccr33Mli.s:984    .text:000000000000067c .LFB13
     /tmp/ccr33Mli.s:1095   .text:0000000000000718 .LFE13
     /tmp/ccr33Mli.s:6506   .debug_loc:0000000000000b5b .LLST18
     /tmp/ccr33Mli.s:6528   .debug_loc:0000000000000bba .LLST19
     /tmp/ccr33Mli.s:1006   .text:000000000000069c .LBB51
     /tmp/ccr33Mli.s:1026   .text:00000000000006b4 .LBE51
     /tmp/ccr33Mli.s:6547   .debug_loc:0000000000000c16 .LLST20
     /tmp/ccr33Mli.s:1012   .text:00000000000006a0 .LBB53
     /tmp/ccr33Mli.s:1024   .text:00000000000006b4 .LBE53
     /tmp/ccr33Mli.s:6554   .debug_loc:0000000000000c39 .LLST21
     /tmp/ccr33Mli.s:1017   .text:00000000000006ac .LVL96
     /tmp/ccr33Mli.s:1055   .text:00000000000006d8 .LBB54
     /tmp/ccr33Mli.s:1074   .text:00000000000006f0 .LBE54
     /tmp/ccr33Mli.s:6561   .debug_loc:0000000000000c5c .LLST22
     /tmp/ccr33Mli.s:1060   .text:00000000000006dc .LBB56
     /tmp/ccr33Mli.s:1072   .text:00000000000006f0 .LBE56
     /tmp/ccr33Mli.s:6568   .debug_loc:0000000000000c7f .LLST23
     /tmp/ccr33Mli.s:1065   .text:00000000000006e8 .LVL102
     /tmp/ccr33Mli.s:1081   .text:0000000000000700 .LVL104
     /tmp/ccr33Mli.s:1088   .text:0000000000000710 .LVL105
     /tmp/ccr33Mli.s:806    .text:000000000000058c .LFB12
     /tmp/ccr33Mli.s:978    .text:000000000000067c .LFE12
     /tmp/ccr33Mli.s:6575   .debug_loc:0000000000000ca2 .LLST13
     /tmp/ccr33Mli.s:6609   .debug_loc:0000000000000d3a .LLST14
     /tmp/ccr33Mli.s:6625   .debug_loc:0000000000000d84 .LLST15
     /tmp/ccr33Mli.s:6636   .debug_loc:0000000000000dba .LLST16
     /tmp/ccr33Mli.s:871    .text:00000000000005f0 .LBB44
     /tmp/ccr33Mli.s:881    .text:00000000000005f8 .LBE44
     /tmp/ccr33Mli.s:6643   .debug_loc:0000000000000ddd .LLST17
     /tmp/ccr33Mli.s:923    .text:0000000000000630 .LVL86
     /tmp/ccr33Mli.s:515    .text:00000000000003d8 .LFB11
     /tmp/ccr33Mli.s:681    .text:00000000000004e4 .LFE11
     /tmp/ccr33Mli.s:6650   .debug_loc:0000000000000e00 .LLST6
     /tmp/ccr33Mli.s:6668   .debug_loc:0000000000000e4c .LLST7
     /tmp/ccr33Mli.s:584    .text:0000000000000454 .LBB38
     /tmp/ccr33Mli.s:610    .text:000000000000047c .LBE38
     /tmp/ccr33Mli.s:6687   .debug_loc:0000000000000ea8 .LLST8
     /tmp/ccr33Mli.s:617    .text:0000000000000484 .LBB40
     /tmp/ccr33Mli.s:648    .text:00000000000004b4 .LBE40
     /tmp/ccr33Mli.s:6703   .debug_loc:0000000000000ef2 .LLST9
     /tmp/ccr33Mli.s:539    .text:0000000000000404 .LVL54
     /tmp/ccr33Mli.s:549    .text:000000000000041c .LVL56
     /tmp/ccr33Mli.s:1328   .text:0000000000000858 .LFB10
     /tmp/ccr33Mli.s:1441   .text:0000000000000948 .LFE10
     /tmp/ccr33Mli.s:6829   .debug_str:0000000000000000 .LASF154
     /tmp/ccr33Mli.s:6714   .debug_loc:0000000000000f28 .LLST34
     /tmp/ccr33Mli.s:6839   .debug_str:000000000000006a .LASF155
     /tmp/ccr33Mli.s:6732   .debug_loc:0000000000000f74 .LLST35
     /tmp/ccr33Mli.s:1395   .text:00000000000008e0 .LBB61
GAS LISTING /tmp/ccr33Mli.s 			page 79


     /tmp/ccr33Mli.s:1425   .text:0000000000000930 .LBE61
     /tmp/ccr33Mli.s:6750   .debug_loc:0000000000000fc0 .LLST36
     /tmp/ccr33Mli.s:1413   .text:0000000000000914 .LVL141
     /tmp/ccr33Mli.s:1349   .text:0000000000000880 .LVL137
     /tmp/ccr33Mli.s:1393   .text:00000000000008e0 .LVL138
     /tmp/ccr33Mli.s:6955   .debug_str:0000000000000450 .LASF156
     /tmp/ccr33Mli.s:7043   .debug_str:00000000000006ff .LASF157
     /tmp/ccr33Mli.s:6973   .debug_str:00000000000004ea .LASF158
     /tmp/ccr33Mli.s:6979   .debug_str:000000000000050b .LASF167
     /tmp/ccr33Mli.s:6867   .debug_str:0000000000000174 .LASF168
     /tmp/ccr33Mli.s:757    .text:0000000000000538 .LVL70
     /tmp/ccr33Mli.s:775    .text:000000000000055c .LVL71
     /tmp/ccr33Mli.s:795    .text:0000000000000584 .LVL75
     /tmp/ccr33Mli.s:792    .text:0000000000000580 .LVL74
     /tmp/ccr33Mli.s:284    .text:00000000000001ac .LVL24
     /tmp/ccr33Mli.s:301    .text:00000000000001d0 .LVL25
     /tmp/ccr33Mli.s:463    .text:00000000000003a0 .LVL50
     /tmp/ccr33Mli.s:353    .text:000000000000028c .LVL34
     /tmp/ccr33Mli.s:460    .text:000000000000039c .LVL49
     /tmp/ccr33Mli.s:119    .text:0000000000000068 .LVL8
     /tmp/ccr33Mli.s:145    .text:000000000000009c .LVL9
     /tmp/ccr33Mli.s:238    .text:00000000000001a0 .LVL22
     /tmp/ccr33Mli.s:242    .text:00000000000001a8 .LVL23
     /tmp/ccr33Mli.s:193    .text:0000000000000148 .LVL17
     /tmp/ccr33Mli.s:235    .text:000000000000019c .LVL21
     /tmp/ccr33Mli.s:14     .text:0000000000000000 .LVL0
     /tmp/ccr33Mli.s:32     .text:0000000000000020 .LVL2
     /tmp/ccr33Mli.s:70     .text:000000000000005c .LVL6
     /tmp/ccr33Mli.s:29     .text:000000000000001c .LVL1
     /tmp/ccr33Mli.s:50     .text:0000000000000040 .LVL4
     /tmp/ccr33Mli.s:58     .text:000000000000004c .LVL5
     /tmp/ccr33Mli.s:73     .text:0000000000000060 .LVL7
     /tmp/ccr33Mli.s:1915   .text:0000000000000b90 .LVL198
     /tmp/ccr33Mli.s:1934   .text:0000000000000bb4 .LVL199
     /tmp/ccr33Mli.s:2057   .text:0000000000000c60 .LVL212
     /tmp/ccr33Mli.s:1963   .text:0000000000000bdc .LVL202
     /tmp/ccr33Mli.s:1944   .text:0000000000000bbc .LVL200
     /tmp/ccr33Mli.s:1971   .text:0000000000000be4 .LVL203
     /tmp/ccr33Mli.s:2000   .text:0000000000000c0c .LVL206
     /tmp/ccr33Mli.s:1981   .text:0000000000000bec .LVL204
     /tmp/ccr33Mli.s:2008   .text:0000000000000c14 .LVL207
     /tmp/ccr33Mli.s:2037   .text:0000000000000c3c .LVL210
     /tmp/ccr33Mli.s:2018   .text:0000000000000c1c .LVL208
     /tmp/ccr33Mli.s:1233   .text:00000000000007b8 .LVL126
     /tmp/ccr33Mli.s:1259   .text:00000000000007f4 .LVL127
     /tmp/ccr33Mli.s:1303   .text:0000000000000844 .LVL132
     /tmp/ccr33Mli.s:1306   .text:0000000000000848 .LVL133
     /tmp/ccr33Mli.s:1312   .text:0000000000000850 .LVL135
     /tmp/ccr33Mli.s:1309   .text:000000000000084c .LVL134
     /tmp/ccr33Mli.s:1263   .text:0000000000000800 .LVL129
     /tmp/ccr33Mli.s:1300   .text:0000000000000840 .LVL131
     /tmp/ccr33Mli.s:1848   .text:0000000000000b24 .LVL190
     /tmp/ccr33Mli.s:1867   .text:0000000000000b44 .LVL192
     /tmp/ccr33Mli.s:1901   .text:0000000000000b88 .LVL197
     /tmp/ccr33Mli.s:1863   .text:0000000000000b40 .LVL191
     /tmp/ccr33Mli.s:1885   .text:0000000000000b74 .LVL194
     /tmp/ccr33Mli.s:1887   .text:0000000000000b78 .LVL195
GAS LISTING /tmp/ccr33Mli.s 			page 80


     /tmp/ccr33Mli.s:1898   .text:0000000000000b84 .LVL196
     /tmp/ccr33Mli.s:1623   .text:0000000000000a30 .LVL163
     /tmp/ccr33Mli.s:1646   .text:0000000000000a5c .LVL164
     /tmp/ccr33Mli.s:1756   .text:0000000000000ad0 .LVL179
     /tmp/ccr33Mli.s:1760   .text:0000000000000ad8 .LVL180
     /tmp/ccr33Mli.s:1753   .text:0000000000000acc .LVL178
     /tmp/ccr33Mli.s:1736   .text:0000000000000abc .LVL176
     /tmp/ccr33Mli.s:1742   .text:0000000000000ac0 .LVL177
     /tmp/ccr33Mli.s:1826   .text:0000000000000b14 .LVL188
     /tmp/ccr33Mli.s:1664   .text:0000000000000a74 .LVL167
     /tmp/ccr33Mli.s:1729   .text:0000000000000ab8 .LVL175
     /tmp/ccr33Mli.s:1666   .text:0000000000000a78 .LVL168
     /tmp/ccr33Mli.s:1674   .text:0000000000000a7c .LVL169
     /tmp/ccr33Mli.s:1698   .text:0000000000000a98 .LVL171
     /tmp/ccr33Mli.s:1718   .text:0000000000000aa4 .LVL172
     /tmp/ccr33Mli.s:1682   .text:0000000000000a80 .LVL170
     /tmp/ccr33Mli.s:1722   .text:0000000000000aa8 .LVL173
     /tmp/ccr33Mli.s:1766   .text:0000000000000adc .LVL181
     /tmp/ccr33Mli.s:1768   .text:0000000000000ae0 .LVL182
     /tmp/ccr33Mli.s:1776   .text:0000000000000ae4 .LVL183
     /tmp/ccr33Mli.s:1800   .text:0000000000000b00 .LVL185
     /tmp/ccr33Mli.s:1820   .text:0000000000000b0c .LVL186
     /tmp/ccr33Mli.s:1784   .text:0000000000000ae8 .LVL184
     /tmp/ccr33Mli.s:1824   .text:0000000000000b10 .LVL187
     /tmp/ccr33Mli.s:1450   .text:0000000000000948 .LVL144
     /tmp/ccr33Mli.s:1507   .text:00000000000009a4 .LVL149
     /tmp/ccr33Mli.s:1566   .text:00000000000009e8 .LVL155
     /tmp/ccr33Mli.s:1570   .text:00000000000009f0 .LVL156
     /tmp/ccr33Mli.s:1604   .text:0000000000000a2c .LVL162
     /tmp/ccr33Mli.s:1462   .text:000000000000095c .LVL145
     /tmp/ccr33Mli.s:1464   .text:0000000000000960 .LVL146
     /tmp/ccr33Mli.s:1511   .text:00000000000009a8 .LVL150
     /tmp/ccr33Mli.s:1580   .text:00000000000009fc .LVL157
     /tmp/ccr33Mli.s:1533   .text:00000000000009c0 .LVL153
     /tmp/ccr33Mli.s:1587   .text:0000000000000a08 .LVL158
     /tmp/ccr33Mli.s:1592   .text:0000000000000a0c .LVL159
     /tmp/ccr33Mli.s:1494   .text:0000000000000998 .LVL147
     /tmp/ccr33Mli.s:1500   .text:000000000000099c .LVL148
     /tmp/ccr33Mli.s:1517   .text:00000000000009b0 .LVL151
     /tmp/ccr33Mli.s:1523   .text:00000000000009b4 .LVL152
     /tmp/ccr33Mli.s:1104   .text:0000000000000718 .LVL107
     /tmp/ccr33Mli.s:1116   .text:0000000000000720 .LVL109
     /tmp/ccr33Mli.s:1119   .text:0000000000000724 .LVL110
     /tmp/ccr33Mli.s:1178   .text:0000000000000768 .LVL120
     /tmp/ccr33Mli.s:1184   .text:000000000000076c .LVL121
     /tmp/ccr33Mli.s:1198   .text:0000000000000784 .LVL122
     /tmp/ccr33Mli.s:1202   .text:0000000000000788 .LVL123
     /tmp/ccr33Mli.s:1217   .text:00000000000007b0 .LVL125
     /tmp/ccr33Mli.s:1112   .text:000000000000071c .LVL108
     /tmp/ccr33Mli.s:1153   .text:0000000000000750 .LVL116
     /tmp/ccr33Mli.s:1161   .text:0000000000000754 .LVL117
     /tmp/ccr33Mli.s:987    .text:000000000000067c .LVL94
     /tmp/ccr33Mli.s:1004   .text:000000000000069c .LVL95
     /tmp/ccr33Mli.s:1043   .text:00000000000006cc .LVL99
     /tmp/ccr33Mli.s:1047   .text:00000000000006d4 .LVL100
     /tmp/ccr33Mli.s:1022   .text:00000000000006b4 .LVL97
     /tmp/ccr33Mli.s:1040   .text:00000000000006c8 .LVL98
GAS LISTING /tmp/ccr33Mli.s 			page 81


     /tmp/ccr33Mli.s:1053   .text:00000000000006d8 .LVL101
     /tmp/ccr33Mli.s:1070   .text:00000000000006f0 .LVL103
     /tmp/ccr33Mli.s:809    .text:000000000000058c .LVL76
     /tmp/ccr33Mli.s:886    .text:0000000000000600 .LVL82
     /tmp/ccr33Mli.s:939    .text:0000000000000648 .LVL88
     /tmp/ccr33Mli.s:943    .text:000000000000064c .LVL89
     /tmp/ccr33Mli.s:954    .text:0000000000000660 .LVL91
     /tmp/ccr33Mli.s:961    .text:0000000000000664 .LVL92
     /tmp/ccr33Mli.s:973    .text:0000000000000674 .LVL93
     /tmp/ccr33Mli.s:824    .text:00000000000005a8 .LVL77
     /tmp/ccr33Mli.s:828    .text:00000000000005ac .LVL78
     /tmp/ccr33Mli.s:934    .text:0000000000000640 .LVL87
     /tmp/ccr33Mli.s:890    .text:0000000000000604 .LVL83
     /tmp/ccr33Mli.s:947    .text:0000000000000654 .LVL90
     /tmp/ccr33Mli.s:911    .text:0000000000000618 .LVL85
     /tmp/ccr33Mli.s:870    .text:00000000000005f0 .LVL80
     /tmp/ccr33Mli.s:879    .text:00000000000005f8 .LVL81
     /tmp/ccr33Mli.s:518    .text:00000000000003d8 .LVL52
     /tmp/ccr33Mli.s:537    .text:00000000000003fc .LVL53
     /tmp/ccr33Mli.s:676    .text:00000000000004dc .LVL68
     /tmp/ccr33Mli.s:547    .text:0000000000000414 .LVL55
     /tmp/ccr33Mli.s:646    .text:00000000000004b4 .LVL63
     /tmp/ccr33Mli.s:652    .text:00000000000004b8 .LVL64
     /tmp/ccr33Mli.s:654    .text:00000000000004bc .LVL65
     /tmp/ccr33Mli.s:662    .text:00000000000004c8 .LVL67
     /tmp/ccr33Mli.s:583    .text:0000000000000454 .LVL57
     /tmp/ccr33Mli.s:587    .text:0000000000000458 .LVL58
     /tmp/ccr33Mli.s:620    .text:0000000000000488 .LVL60
     /tmp/ccr33Mli.s:659    .text:00000000000004c4 .LVL66
     /tmp/ccr33Mli.s:1331   .text:0000000000000858 .LVL136
     /tmp/ccr33Mli.s:1400   .text:00000000000008e8 .LVL140
     /tmp/ccr33Mli.s:1398   .text:00000000000008e4 .LVL139
     /tmp/ccr33Mli.s:1434   .text:000000000000093c .LVL143
     /tmp/ccr33Mli.s:2156   .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccr33Mli.s:825    .text:00000000000005a8 .LBB41
     /tmp/ccr33Mli.s:835    .text:00000000000005b4 .LBE41
     /tmp/ccr33Mli.s:837    .text:00000000000005b4 .LBB49
     /tmp/ccr33Mli.s:899    .text:000000000000060c .LBE49
     /tmp/ccr33Mli.s:901    .text:000000000000060c .LBB50
     /tmp/ccr33Mli.s:958    .text:0000000000000660 .LBE50
     /tmp/ccr33Mli.s:861    .text:00000000000005e0 .LBB43
     /tmp/ccr33Mli.s:897    .text:000000000000060c .LBE43
     /tmp/ccr33Mli.s:903    .text:000000000000060c .LBB46
     /tmp/ccr33Mli.s:956    .text:0000000000000660 .LBE46
     /tmp/ccr33Mli.s:1484   .text:0000000000000984 .LBB63
     /tmp/ccr33Mli.s:1535   .text:00000000000009c0 .LBE63
     /tmp/ccr33Mli.s:1539   .text:00000000000009c0 .LBB68
     /tmp/ccr33Mli.s:1555   .text:00000000000009dc .LBE68
     /tmp/ccr33Mli.s:1574   .text:00000000000009f0 .LBB69
     /tmp/ccr33Mli.s:1611   .text:0000000000000a30 .LBE69
     /tmp/ccr33Mli.s:1704   .text:0000000000000a98 .LBE87
     /tmp/ccr33Mli.s:1706   .text:0000000000000a98 .LBB97
     /tmp/ccr33Mli.s:1739   .text:0000000000000abc .LBE97
     /tmp/ccr33Mli.s:1670   .text:0000000000000a78 .LBB89
     /tmp/ccr33Mli.s:1676   .text:0000000000000a7c .LBE89
     /tmp/ccr33Mli.s:1680   .text:0000000000000a80 .LBB94
     /tmp/ccr33Mli.s:1702   .text:0000000000000a98 .LBE94
GAS LISTING /tmp/ccr33Mli.s 			page 82


     /tmp/ccr33Mli.s:1708   .text:0000000000000a98 .LBB95
     /tmp/ccr33Mli.s:1733   .text:0000000000000ab8 .LBE95
     /tmp/ccr33Mli.s:1806   .text:0000000000000b00 .LBE98
     /tmp/ccr33Mli.s:1808   .text:0000000000000b00 .LBB108
     /tmp/ccr33Mli.s:1837   .text:0000000000000b24 .LBE108
     /tmp/ccr33Mli.s:1772   .text:0000000000000ae0 .LBB100
     /tmp/ccr33Mli.s:1778   .text:0000000000000ae4 .LBE100
     /tmp/ccr33Mli.s:1782   .text:0000000000000ae8 .LBB105
     /tmp/ccr33Mli.s:1804   .text:0000000000000b00 .LBE105
     /tmp/ccr33Mli.s:1810   .text:0000000000000b00 .LBB106
     /tmp/ccr33Mli.s:1835   .text:0000000000000b24 .LBE106

UNDEFINED SYMBOLS
_ZN5Buddy4freeEPvm
_ZN11ConsoleUtil5printEPKciS1_
_ZN11ConsoleUtil11printStringEPKc
HEAP_START_ADDR
_ZN5Buddy5allocEm
_Z6strcpyPKcPc
_ZN5Buddy10initializeEPvm
