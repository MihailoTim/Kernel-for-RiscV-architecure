GAS LISTING /tmp/cchWk8xb.s 			page 1


   1              		.file	"slabAllocator.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN13SlabAllocator11shrinkCacheEP5Cache
   9              	_ZN13SlabAllocator11shrinkCacheEP5Cache:
  10              	.LFB20:
  11              		.file 1 "src/slabAllocator.cpp"
   1:src/slabAllocator.cpp **** //
   2:src/slabAllocator.cpp **** // Created by os on 12/25/22.
   3:src/slabAllocator.cpp **** //
   4:src/slabAllocator.cpp **** #include "../h/slabAllocator.hpp"
   5:src/slabAllocator.cpp **** 
   6:src/slabAllocator.cpp **** Cache* SlabAllocator::cache = nullptr;
   7:src/slabAllocator.cpp **** Cache* SlabAllocator::sizeN[BUCKET_SIZE] = {nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, n
   8:src/slabAllocator.cpp **** const char* SlabAllocator::names[13] = {"Buffer Cache No. 0", "Buffer Cache No. 1", "Buffer Cache N
   9:src/slabAllocator.cpp **** void* SlabAllocator::startAddr = nullptr;
  10:src/slabAllocator.cpp **** uint64 SlabAllocator::blocksResponsibleFor = 0;
  11:src/slabAllocator.cpp **** 
  12:src/slabAllocator.cpp **** void SlabAllocator::initialize(void* space, uint64 blockNum) {
  13:src/slabAllocator.cpp ****     Buddy::initialize(space, blockNum);
  14:src/slabAllocator.cpp ****     startAddr = space;
  15:src/slabAllocator.cpp ****     blocksResponsibleFor = blockNum;
  16:src/slabAllocator.cpp ****     cache = (Cache*)SLAB_META_ADDR_CONST;
  17:src/slabAllocator.cpp ****     cache->ctor = nullptr;
  18:src/slabAllocator.cpp ****     cache->dtor = nullptr;
  19:src/slabAllocator.cpp ****     cache->emptyHead = nullptr;
  20:src/slabAllocator.cpp ****     cache->partialHead = nullptr;
  21:src/slabAllocator.cpp ****     cache->fullHead = nullptr;
  22:src/slabAllocator.cpp ****     cache->objectSize = sizeof(Cache);
  23:src/slabAllocator.cpp ****     cache->slabSize = DEFAULT_SLAB_SIZE;
  24:src/slabAllocator.cpp ****     strcpy("Main Cache", cache->name);
  25:src/slabAllocator.cpp **** 
  26:src/slabAllocator.cpp ****     for(int i=0;i<BUCKET_SIZE;i++){
  27:src/slabAllocator.cpp ****         sizeN[i] = SlabAllocator::createCache(names[i], 2<<i, nullptr, nullptr);
  28:src/slabAllocator.cpp ****     }
  29:src/slabAllocator.cpp **** }
  30:src/slabAllocator.cpp **** 
  31:src/slabAllocator.cpp **** bool SlabAllocator::allocateSlab(Cache *cache) {
  32:src/slabAllocator.cpp ****     Slab* slab = (Slab*)Buddy::alloc(cache->slabSize);
  33:src/slabAllocator.cpp ****     if(!slab)
  34:src/slabAllocator.cpp ****         return false;
  35:src/slabAllocator.cpp ****     SlabAllocator::insertIntoList(cache->emptyHead, slab);
  36:src/slabAllocator.cpp ****     slab->totalNumOfSlots = slab->numOfFreeSlots = ((cache->slabSize << BLOCK_SIZE_BITS) - sizeof(S
  37:src/slabAllocator.cpp ****     slab->objectOffset = (void*)((uint64)slab + sizeof(Slab) + slab->totalNumOfSlots/8 + 1);
  38:src/slabAllocator.cpp ****     slab->allocated = (char*)((uint64)slab + sizeof(Slab));
  39:src/slabAllocator.cpp ****     slab->parent = cache;
  40:src/slabAllocator.cpp ****     for(uint64 i=0;i<slab->totalNumOfSlots/8 + 1;i++)
  41:src/slabAllocator.cpp ****         slab->allocated[i] = 0;
  42:src/slabAllocator.cpp **** 
  43:src/slabAllocator.cpp ****     if(cache->ctor) {
  44:src/slabAllocator.cpp ****         for (uint64 i = 0; i < slab->totalNumOfSlots; i++) {
  45:src/slabAllocator.cpp ****             cache->ctor((void *) ((uint64) slab->objectOffset + i * slab->parent->objectSize));
  46:src/slabAllocator.cpp ****         }
  47:src/slabAllocator.cpp ****     }
GAS LISTING /tmp/cchWk8xb.s 			page 2


  48:src/slabAllocator.cpp ****     return true;
  49:src/slabAllocator.cpp **** }
  50:src/slabAllocator.cpp **** 
  51:src/slabAllocator.cpp **** void* SlabAllocator::allocateSlot(Slab *slab) {
  52:src/slabAllocator.cpp ****     for(uint64 i=0; i<slab->totalNumOfSlots; i++){
  53:src/slabAllocator.cpp ****         if(!(slab->allocated[i/8] & (1<<(7 - i%8)))){
  54:src/slabAllocator.cpp ****             slab->allocated[i/8] |= (1<<(7 - i%8));
  55:src/slabAllocator.cpp ****             Slab* &headFrom = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead
  56:src/slabAllocator.cpp ****             slab->numOfFreeSlots--;
  57:src/slabAllocator.cpp ****             Slab* &headTo = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
  58:src/slabAllocator.cpp **** 
  59:src/slabAllocator.cpp ****             if(headTo != headFrom)
  60:src/slabAllocator.cpp ****                 SlabAllocator::move(headFrom, headTo, slab);
  61:src/slabAllocator.cpp **** 
  62:src/slabAllocator.cpp ****             return (void*)((uint64)slab->objectOffset + i*slab->parent->objectSize);
  63:src/slabAllocator.cpp ****         }
  64:src/slabAllocator.cpp ****     }
  65:src/slabAllocator.cpp ****     return nullptr;
  66:src/slabAllocator.cpp **** }
  67:src/slabAllocator.cpp **** 
  68:src/slabAllocator.cpp **** void* SlabAllocator::allocateObject(Cache *cache) {
  69:src/slabAllocator.cpp ****     void* ret = SlabAllocator::allocateFromList(cache->partialHead);
  70:src/slabAllocator.cpp ****     if(ret){
  71:src/slabAllocator.cpp ****         return ret;
  72:src/slabAllocator.cpp ****     }
  73:src/slabAllocator.cpp ****     ret = SlabAllocator::allocateFromList(cache->emptyHead);
  74:src/slabAllocator.cpp ****     if(ret){
  75:src/slabAllocator.cpp ****         return ret;
  76:src/slabAllocator.cpp ****     }
  77:src/slabAllocator.cpp ****     if(!SlabAllocator::allocateSlab(cache))
  78:src/slabAllocator.cpp ****         return nullptr;
  79:src/slabAllocator.cpp **** 
  80:src/slabAllocator.cpp ****     ret = SlabAllocator::allocateSlot(cache->emptyHead);
  81:src/slabAllocator.cpp **** 
  82:src/slabAllocator.cpp ****     return ret;
  83:src/slabAllocator.cpp **** }
  84:src/slabAllocator.cpp **** 
  85:src/slabAllocator.cpp **** void* SlabAllocator::allocateBuffer(size_t size) {
  86:src/slabAllocator.cpp ****     uint64 level = Buddy::getDeg(Buddy::ceil(size));
  87:src/slabAllocator.cpp ****     if(level < CACHE_LOWER_BOUND || level > CACHE_UPPER_BOUND)
  88:src/slabAllocator.cpp ****         return nullptr;
  89:src/slabAllocator.cpp ****     else
  90:src/slabAllocator.cpp ****         level -= CACHE_LOWER_BOUND;
  91:src/slabAllocator.cpp ****     return SlabAllocator::allocateObject(sizeN[level]);
  92:src/slabAllocator.cpp **** }
  93:src/slabAllocator.cpp **** 
  94:src/slabAllocator.cpp **** void SlabAllocator::freeSlot(Slab *slab, uint64 index) {
  95:src/slabAllocator.cpp ****     if(slab->allocated[index/8] & (1<<(7 - index%8))) {
  96:src/slabAllocator.cpp ****         slab->allocated[index/8] &= ~(1<<(7 - index%8));
  97:src/slabAllocator.cpp ****         Slab *&headFrom = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
  98:src/slabAllocator.cpp ****         slab->numOfFreeSlots++;
  99:src/slabAllocator.cpp ****         Slab *&headTo = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead;
 100:src/slabAllocator.cpp **** 
 101:src/slabAllocator.cpp ****         if(slab->isEmpty()) {
 102:src/slabAllocator.cpp ****             SlabAllocator::removeFromList(headFrom, slab);
 103:src/slabAllocator.cpp ****             Buddy::free(slab, slab->parent->slabSize);
 104:src/slabAllocator.cpp ****         }
GAS LISTING /tmp/cchWk8xb.s 			page 3


 105:src/slabAllocator.cpp ****         else
 106:src/slabAllocator.cpp ****             if (headTo != headFrom)
 107:src/slabAllocator.cpp ****                 SlabAllocator::move(headFrom, headTo, slab);
 108:src/slabAllocator.cpp ****     }
 109:src/slabAllocator.cpp **** }
 110:src/slabAllocator.cpp **** 
 111:src/slabAllocator.cpp **** bool SlabAllocator::freeObject(Cache* cache, const void *addr) {
 112:src/slabAllocator.cpp ****     if(cache->dtor)
 113:src/slabAllocator.cpp ****         cache->dtor((void*)addr);
 114:src/slabAllocator.cpp ****     if(cache->ctor)
 115:src/slabAllocator.cpp ****         cache->ctor((void*)addr);
 116:src/slabAllocator.cpp **** 
 117:src/slabAllocator.cpp ****     bool deleted = SlabAllocator::freeFromList(cache->fullHead, addr);
 118:src/slabAllocator.cpp ****     if(deleted)
 119:src/slabAllocator.cpp ****         return deleted;
 120:src/slabAllocator.cpp **** 
 121:src/slabAllocator.cpp ****     deleted = SlabAllocator::freeFromList(cache->partialHead, addr);
 122:src/slabAllocator.cpp **** 
 123:src/slabAllocator.cpp ****     return deleted;
 124:src/slabAllocator.cpp **** }
 125:src/slabAllocator.cpp **** 
 126:src/slabAllocator.cpp **** void SlabAllocator::freeBuffer(const void *addr) {
 127:src/slabAllocator.cpp ****     for(int i=0;i<BUCKET_SIZE;i++)
 128:src/slabAllocator.cpp ****         if(SlabAllocator::freeObject(sizeN[i], addr))
 129:src/slabAllocator.cpp ****             return;
 130:src/slabAllocator.cpp **** }
 131:src/slabAllocator.cpp **** 
 132:src/slabAllocator.cpp **** Cache* SlabAllocator::createCache(const char *name, size_t size, void (*ctor)(void *), void (*dtor)
 133:src/slabAllocator.cpp ****     Cache* ret = (Cache*)SlabAllocator::allocateObject(SlabAllocator::cache);
 134:src/slabAllocator.cpp ****     if(ret == nullptr)
 135:src/slabAllocator.cpp ****         return nullptr;
 136:src/slabAllocator.cpp ****     ret->ctor = ctor;
 137:src/slabAllocator.cpp ****     ret->dtor = dtor;
 138:src/slabAllocator.cpp ****     ret->emptyHead = ret->partialHead = ret->fullHead = nullptr;
 139:src/slabAllocator.cpp ****     ret->objectSize = size;
 140:src/slabAllocator.cpp ****     ret->slabSize = DEFAULT_SLAB_SIZE;
 141:src/slabAllocator.cpp ****     strcpy(name, ret->name);
 142:src/slabAllocator.cpp ****     return ret;
 143:src/slabAllocator.cpp **** }
 144:src/slabAllocator.cpp **** 
 145:src/slabAllocator.cpp **** void SlabAllocator::deleteCache(Cache* &cache) {
 146:src/slabAllocator.cpp ****     deleteList(cache->fullHead);
 147:src/slabAllocator.cpp ****     deleteList(cache->partialHead);
 148:src/slabAllocator.cpp ****     deleteList(cache->emptyHead);
 149:src/slabAllocator.cpp ****     SlabAllocator::freeObject(SlabAllocator::cache, cache);
 150:src/slabAllocator.cpp ****     cache = nullptr;
 151:src/slabAllocator.cpp **** }
 152:src/slabAllocator.cpp **** 
 153:src/slabAllocator.cpp **** int SlabAllocator::shrinkCache(Cache *cache) {
  12              		.loc 1 153 46
  13              		.cfi_startproc
  14              	.LVL0:
  15 0000 130101FE 		addi	sp,sp,-32
  16              		.cfi_def_cfa_offset 32
  17 0004 233C1100 		sd	ra,24(sp)
  18 0008 23388100 		sd	s0,16(sp)
  19 000c 23349100 		sd	s1,8(sp)
GAS LISTING /tmp/cchWk8xb.s 			page 4


  20 0010 23302101 		sd	s2,0(sp)
  21              		.cfi_offset 1, -8
  22              		.cfi_offset 8, -16
  23              		.cfi_offset 9, -24
  24              		.cfi_offset 18, -32
  25 0014 13040102 		addi	s0,sp,32
  26              		.cfi_def_cfa 8, 0
  27 0018 93040500 		mv	s1,a0
 154:src/slabAllocator.cpp ****     int ret = 0;
  28              		.loc 1 154 5
  29              	.LVL1:
  30              		.loc 1 154 9 is_stmt 0
  31 001c 13090000 		li	s2,0
  32              	.LVL2:
  33              	.L3:
 155:src/slabAllocator.cpp ****     while(cache->emptyHead){
  34              		.loc 1 155 5 is_stmt 1
  35              		.loc 1 155 18
  36 0020 03B50406 		ld	a0,96(s1)
  37 0024 63040502 		beqz	a0,.L2
 156:src/slabAllocator.cpp ****         Buddy::free(cache->emptyHead, cache->slabSize);
  38              		.loc 1 156 9
  39              		.loc 1 156 20 is_stmt 0
  40 0028 83B58404 		ld	a1,72(s1)
  41 002c 97000000 		call	_ZN5Buddy4freeEPvm@plt
  41      E7800000 
  42              	.LVL3:
 157:src/slabAllocator.cpp ****         ret += cache->emptyHead->totalNumOfSlots;
  43              		.loc 1 157 9 is_stmt 1
  44              		.loc 1 157 23 is_stmt 0
  45 0034 83B70406 		ld	a5,96(s1)
  46              		.loc 1 157 34
  47 0038 03B78701 		ld	a4,24(a5)
  48              		.loc 1 157 13
  49 003c 3B092701 		addw	s2,a4,s2
  50              	.LVL4:
 158:src/slabAllocator.cpp ****         cache->emptyHead = cache->emptyHead->next;
  51              		.loc 1 158 9 is_stmt 1
  52              		.loc 1 158 46 is_stmt 0
  53 0040 83B78700 		ld	a5,8(a5)
  54              		.loc 1 158 26
  55 0044 23B0F406 		sd	a5,96(s1)
 155:src/slabAllocator.cpp ****         Buddy::free(cache->emptyHead, cache->slabSize);
  56              		.loc 1 155 5
  57 0048 6FF09FFD 		j	.L3
  58              	.LVL5:
  59              	.L2:
 159:src/slabAllocator.cpp ****     }
 160:src/slabAllocator.cpp ****     return ret;
  60              		.loc 1 160 5 is_stmt 1
 161:src/slabAllocator.cpp **** }
  61              		.loc 1 161 1 is_stmt 0
  62 004c 13050900 		mv	a0,s2
  63 0050 83308101 		ld	ra,24(sp)
  64              		.cfi_restore 1
  65 0054 03340101 		ld	s0,16(sp)
  66              		.cfi_restore 8
GAS LISTING /tmp/cchWk8xb.s 			page 5


  67              		.cfi_def_cfa 2, 32
  68 0058 83348100 		ld	s1,8(sp)
  69              		.cfi_restore 9
  70              	.LVL6:
  71 005c 03390100 		ld	s2,0(sp)
  72              		.cfi_restore 18
  73              	.LVL7:
  74 0060 13010102 		addi	sp,sp,32
  75              		.cfi_def_cfa_offset 0
  76 0064 67800000 		jr	ra
  77              		.cfi_endproc
  78              	.LFE20:
  80              		.section	.rodata.str1.8,"aMS",@progbits,1
  81              		.align	3
  82              	.LC0:
  83 0000 0A00     		.string	"\n"
  84 0002 00000000 		.align	3
  84      0000
  85              	.LC1:
  86 0008 536C6162 		.string	"Slab address:"
  86      20616464 
  86      72657373 
  86      3A00
  87 0016 0000     		.align	3
  88              	.LC2:
  89 0018 4E756D62 		.string	"Number of slots:"
  89      6572206F 
  89      6620736C 
  89      6F74733A 
  89      00
  90 0029 00000000 		.align	3
  90      000000
  91              	.LC3:
  92 0030 4E756D62 		.string	"Number of free slots:"
  92      6572206F 
  92      66206672 
  92      65652073 
  92      6C6F7473 
  93 0046 0000     		.align	3
  94              	.LC4:
  95 0048 536C6162 		.string	"Slab object size:"
  95      206F626A 
  95      65637420 
  95      73697A65 
  95      3A00
  96 005a 00000000 		.align	3
  96      0000
  97              	.LC5:
  98 0060 4F626A65 		.string	"Object offset:"
  98      6374206F 
  98      66667365 
  98      743A00
  99 006f 00       		.align	3
 100              	.LC6:
 101 0070 536C6162 		.string	"Slab allocated array address:"
 101      20616C6C 
 101      6F636174 
GAS LISTING /tmp/cchWk8xb.s 			page 6


 101      65642061 
 101      72726179 
 102 008e 0000     		.align	3
 103              	.LC7:
 104 0090 416C6C6F 		.string	"Allocated status array:\n"
 104      63617465 
 104      64207374 
 104      61747573 
 104      20617272 
 105 00a9 00000000 		.align	3
 105      000000
 106              	.LC8:
 107 00b0 2000     		.string	" "
 108 00b2 00000000 		.align	3
 108      0000
 109              	.LC9:
 110 00b8 00       		.string	""
 111              		.text
 112              		.align	2
 113              		.globl	_ZN13SlabAllocator9printSlabEP4Slab
 115              	_ZN13SlabAllocator9printSlabEP4Slab:
 116              	.LFB21:
 162:src/slabAllocator.cpp **** 
 163:src/slabAllocator.cpp **** void SlabAllocator::printSlab(Slab *slab) {
 117              		.loc 1 163 43 is_stmt 1
 118              		.cfi_startproc
 119              	.LVL8:
 164:src/slabAllocator.cpp ****     if(slab) {
 120              		.loc 1 164 5
 121              	.LBB34:
 122 0068 630E0514 		beqz	a0,.L10
 123              	.LBE34:
 163:src/slabAllocator.cpp ****     if(slab) {
 124              		.loc 1 163 43 is_stmt 0
 125 006c 130101FE 		addi	sp,sp,-32
 126              		.cfi_def_cfa_offset 32
 127 0070 233C1100 		sd	ra,24(sp)
 128 0074 23388100 		sd	s0,16(sp)
 129 0078 23349100 		sd	s1,8(sp)
 130 007c 23302101 		sd	s2,0(sp)
 131              		.cfi_offset 1, -8
 132              		.cfi_offset 8, -16
 133              		.cfi_offset 9, -24
 134              		.cfi_offset 18, -32
 135 0080 13040102 		addi	s0,sp,32
 136              		.cfi_def_cfa 8, 0
 137 0084 13090500 		mv	s2,a0
 138              	.LBB37:
 139              	.LBB35:
 165:src/slabAllocator.cpp ****         ConsoleUtil::print("Slab address:", (uint64) slab, "\n");
 140              		.loc 1 165 9 is_stmt 1
 141              		.loc 1 165 27 is_stmt 0
 142 0088 93060001 		li	a3,16
 143 008c 17060000 		lla	a2,.LC0
 143      13060600 
 144 0094 9B050500 		sext.w	a1,a0
 145 0098 17050000 		lla	a0,.LC1
GAS LISTING /tmp/cchWk8xb.s 			page 7


 145      13050500 
 146              	.LVL9:
 147 00a0 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_i@plt
 147      E7800000 
 148              	.LVL10:
 166:src/slabAllocator.cpp ****         ConsoleUtil::print("Number of slots:", (uint64) slab->totalNumOfSlots, "\n");
 149              		.loc 1 166 9 is_stmt 1
 150              		.loc 1 166 27 is_stmt 0
 151 00a8 93060001 		li	a3,16
 152 00ac 17060000 		lla	a2,.LC0
 152      13060600 
 153 00b4 83258901 		lw	a1,24(s2)
 154 00b8 17050000 		lla	a0,.LC2
 154      13050500 
 155 00c0 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_i@plt
 155      E7800000 
 156              	.LVL11:
 167:src/slabAllocator.cpp ****         ConsoleUtil::print("Number of free slots:", (uint64) slab->numOfFreeSlots, "\n");
 157              		.loc 1 167 9 is_stmt 1
 158              		.loc 1 167 27 is_stmt 0
 159 00c8 93060001 		li	a3,16
 160 00cc 17060000 		lla	a2,.LC0
 160      13060600 
 161 00d4 83250901 		lw	a1,16(s2)
 162 00d8 17050000 		lla	a0,.LC3
 162      13050500 
 163 00e0 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_i@plt
 163      E7800000 
 164              	.LVL12:
 168:src/slabAllocator.cpp ****         ConsoleUtil::print("Slab object size:", (uint64) sizeof(Slab), "\n");
 165              		.loc 1 168 9 is_stmt 1
 166              		.loc 1 168 27 is_stmt 0
 167 00e8 93060001 		li	a3,16
 168 00ec 17060000 		lla	a2,.LC0
 168      13060600 
 169 00f4 93058003 		li	a1,56
 170 00f8 17050000 		lla	a0,.LC4
 170      13050500 
 171 0100 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_i@plt
 171      E7800000 
 172              	.LVL13:
 169:src/slabAllocator.cpp ****         ConsoleUtil::print("Object offset:", (uint64) slab->objectOffset, "\n");
 173              		.loc 1 169 9 is_stmt 1
 174              		.loc 1 169 27 is_stmt 0
 175 0108 93060001 		li	a3,16
 176 010c 17060000 		lla	a2,.LC0
 176      13060600 
 177 0114 83258902 		lw	a1,40(s2)
 178 0118 17050000 		lla	a0,.LC5
 178      13050500 
 179 0120 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_i@plt
 179      E7800000 
 180              	.LVL14:
 170:src/slabAllocator.cpp ****         ConsoleUtil::print("Slab allocated array address:", (uint64) slab->allocated, "\n");
 181              		.loc 1 170 9 is_stmt 1
 182              		.loc 1 170 27 is_stmt 0
 183 0128 93060001 		li	a3,16
GAS LISTING /tmp/cchWk8xb.s 			page 8


 184 012c 17060000 		lla	a2,.LC0
 184      13060600 
 185 0134 83250902 		lw	a1,32(s2)
 186 0138 17050000 		lla	a0,.LC6
 186      13050500 
 187 0140 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_i@plt
 187      E7800000 
 188              	.LVL15:
 171:src/slabAllocator.cpp ****         ConsoleUtil::printString("Allocated status array:\n");
 189              		.loc 1 171 9 is_stmt 1
 190              		.loc 1 171 33 is_stmt 0
 191 0148 17050000 		lla	a0,.LC7
 191      13050500 
 192 0150 97000000 		call	_ZN11ConsoleUtil11printStringEPKc@plt
 192      E7800000 
 193              	.LVL16:
 172:src/slabAllocator.cpp ****         for (uint64 i = 0; i < slab->totalNumOfSlots/8 + 1; i++) {
 194              		.loc 1 172 9 is_stmt 1
 195              	.LBB36:
 196              		.loc 1 172 21 is_stmt 0
 197 0158 93040000 		li	s1,0
 198 015c 6F000003 		j	.L8
 199              	.LVL17:
 200              	.L13:
 173:src/slabAllocator.cpp ****             ConsoleUtil::print("", slab->allocated[i], " ");
 201              		.loc 1 173 13 is_stmt 1 discriminator 2
 202              		.loc 1 173 42 is_stmt 0 discriminator 2
 203 0160 83370902 		ld	a5,32(s2)
 204              		.loc 1 173 53 discriminator 2
 205 0164 B3879700 		add	a5,a5,s1
 206              		.loc 1 173 31 discriminator 2
 207 0168 93060001 		li	a3,16
 208 016c 17060000 		lla	a2,.LC8
 208      13060600 
 209 0174 83C50700 		lbu	a1,0(a5)
 210 0178 17050000 		lla	a0,.LC9
 210      13050500 
 211 0180 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_i@plt
 211      E7800000 
 212              	.LVL18:
 172:src/slabAllocator.cpp ****         for (uint64 i = 0; i < slab->totalNumOfSlots/8 + 1; i++) {
 213              		.loc 1 172 9 is_stmt 1 discriminator 2
 214 0188 93841400 		addi	s1,s1,1
 215              	.LVL19:
 216              	.L8:
 172:src/slabAllocator.cpp ****         for (uint64 i = 0; i < slab->totalNumOfSlots/8 + 1; i++) {
 217              		.loc 1 172 30 discriminator 3
 172:src/slabAllocator.cpp ****         for (uint64 i = 0; i < slab->totalNumOfSlots/8 + 1; i++) {
 218              		.loc 1 172 38 is_stmt 0 discriminator 3
 219 018c 83378901 		ld	a5,24(s2)
 172:src/slabAllocator.cpp ****         for (uint64 i = 0; i < slab->totalNumOfSlots/8 + 1; i++) {
 220              		.loc 1 172 53 discriminator 3
 221 0190 93D73700 		srli	a5,a5,3
 172:src/slabAllocator.cpp ****         for (uint64 i = 0; i < slab->totalNumOfSlots/8 + 1; i++) {
 222              		.loc 1 172 56 discriminator 3
 223 0194 93871700 		addi	a5,a5,1
 172:src/slabAllocator.cpp ****         for (uint64 i = 0; i < slab->totalNumOfSlots/8 + 1; i++) {
GAS LISTING /tmp/cchWk8xb.s 			page 9


 224              		.loc 1 172 30 discriminator 3
 225 0198 E3E4F4FC 		bgtu	a5,s1,.L13
 226              	.LBE36:
 174:src/slabAllocator.cpp ****         }
 175:src/slabAllocator.cpp ****         ConsoleUtil::printString("\n");
 227              		.loc 1 175 9 is_stmt 1
 228              		.loc 1 175 33 is_stmt 0
 229 019c 17050000 		lla	a0,.LC0
 229      13050500 
 230 01a4 97000000 		call	_ZN11ConsoleUtil11printStringEPKc@plt
 230      E7800000 
 231              	.LVL20:
 232              	.LBE35:
 233              	.LBE37:
 176:src/slabAllocator.cpp ****     }
 177:src/slabAllocator.cpp **** }
 234              		.loc 1 177 1
 235 01ac 83308101 		ld	ra,24(sp)
 236              		.cfi_restore 1
 237 01b0 03340101 		ld	s0,16(sp)
 238              		.cfi_restore 8
 239              		.cfi_def_cfa 2, 32
 240 01b4 83348100 		ld	s1,8(sp)
 241              		.cfi_restore 9
 242              	.LVL21:
 243 01b8 03390100 		ld	s2,0(sp)
 244              		.cfi_restore 18
 245              	.LVL22:
 246 01bc 13010102 		addi	sp,sp,32
 247              		.cfi_def_cfa_offset 0
 248 01c0 67800000 		jr	ra
 249              	.LVL23:
 250              	.L10:
 251 01c4 67800000 		ret
 252              		.cfi_endproc
 253              	.LFE21:
 255              		.section	.rodata.str1.8
 256 00b9 00000000 		.align	3
 256      000000
 257              	.LC10:
 258 00c0 43616368 		.string	"Cache name: "
 258      65206E61 
 258      6D653A20 
 258      00
 259 00cd 000000   		.align	3
 260              	.LC11:
 261 00d0 48454150 		.string	"HEAP_START_ADDR: "
 261      5F535441 
 261      52545F41 
 261      4444523A 
 261      2000
 262 00e2 00000000 		.align	3
 262      0000
 263              	.LC12:
 264 00e8 43616368 		.string	"Cache address: "
 264      65206164 
 264      64726573 
GAS LISTING /tmp/cchWk8xb.s 			page 10


 264      733A2000 
 265              		.align	3
 266              	.LC13:
 267 00f8 43616368 		.string	"Cache slab size: "
 267      6520736C 
 267      61622073 
 267      697A653A 
 267      2000
 268 010a 00000000 		.align	3
 268      0000
 269              	.LC14:
 270 0110 43616368 		.string	"Cache object size: "
 270      65206F62 
 270      6A656374 
 270      2073697A 
 270      653A2000 
 271 0124 00000000 		.align	3
 272              	.LC15:
 273 0128 456D7074 		.string	"Empty head: "
 273      79206865 
 273      61643A20 
 273      00
 274 0135 000000   		.align	3
 275              	.LC16:
 276 0138 50617274 		.string	"Partial head: "
 276      69616C20 
 276      68656164 
 276      3A2000
 277 0147 00       		.align	3
 278              	.LC17:
 279 0148 46756C6C 		.string	"Full head: "
 279      20686561 
 279      643A2000 
 280              		.text
 281              		.align	2
 282              		.globl	_ZN13SlabAllocator10printCacheEP5Cache
 284              	_ZN13SlabAllocator10printCacheEP5Cache:
 285              	.LFB22:
 178:src/slabAllocator.cpp **** 
 179:src/slabAllocator.cpp **** void SlabAllocator::printCache(Cache *cache) {
 286              		.loc 1 179 46 is_stmt 1
 287              		.cfi_startproc
 288              	.LVL24:
 289 01c8 130101FE 		addi	sp,sp,-32
 290              		.cfi_def_cfa_offset 32
 291 01cc 233C1100 		sd	ra,24(sp)
 292 01d0 23388100 		sd	s0,16(sp)
 293 01d4 23349100 		sd	s1,8(sp)
 294 01d8 23302101 		sd	s2,0(sp)
 295              		.cfi_offset 1, -8
 296              		.cfi_offset 8, -16
 297              		.cfi_offset 9, -24
 298              		.cfi_offset 18, -32
 299 01dc 13040102 		addi	s0,sp,32
 300              		.cfi_def_cfa 8, 0
 301 01e0 13090500 		mv	s2,a0
 180:src/slabAllocator.cpp ****     ConsoleUtil::printString("Cache name: ");
GAS LISTING /tmp/cchWk8xb.s 			page 11


 302              		.loc 1 180 5
 303              		.loc 1 180 29 is_stmt 0
 304 01e4 17050000 		lla	a0,.LC10
 304      13050500 
 305              	.LVL25:
 306 01ec 97000000 		call	_ZN11ConsoleUtil11printStringEPKc@plt
 306      E7800000 
 307              	.LVL26:
 181:src/slabAllocator.cpp ****     ConsoleUtil::printString(cache->name);
 308              		.loc 1 181 5 is_stmt 1
 309              		.loc 1 181 29 is_stmt 0
 310 01f4 13050900 		mv	a0,s2
 311 01f8 97000000 		call	_ZN11ConsoleUtil11printStringEPKc@plt
 311      E7800000 
 312              	.LVL27:
 182:src/slabAllocator.cpp ****     ConsoleUtil::printString("\n");
 313              		.loc 1 182 5 is_stmt 1
 314              		.loc 1 182 29 is_stmt 0
 315 0200 17050000 		lla	a0,.LC0
 315      13050500 
 316 0208 97000000 		call	_ZN11ConsoleUtil11printStringEPKc@plt
 316      E7800000 
 317              	.LVL28:
 183:src/slabAllocator.cpp ****     ConsoleUtil::print("HEAP_START_ADDR: ", (uint64)HEAP_START_ADDR, "\n");
 318              		.loc 1 183 5 is_stmt 1
 319              		.loc 1 183 23 is_stmt 0
 320 0210 93060001 		li	a3,16
 321 0214 17060000 		lla	a2,.LC0
 321      13060600 
 322 021c 97070000 		la	a5,HEAP_START_ADDR
 322      83B70700 
 323 0224 83A50700 		lw	a1,0(a5)
 324 0228 17050000 		lla	a0,.LC11
 324      13050500 
 325 0230 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_i@plt
 325      E7800000 
 326              	.LVL29:
 184:src/slabAllocator.cpp ****     ConsoleUtil::print("Cache address: ", (uint64)cache, "\n");
 327              		.loc 1 184 5 is_stmt 1
 328              		.loc 1 184 23 is_stmt 0
 329 0238 93060001 		li	a3,16
 330 023c 17060000 		lla	a2,.LC0
 330      13060600 
 331 0244 9B050900 		sext.w	a1,s2
 332 0248 17050000 		lla	a0,.LC12
 332      13050500 
 333 0250 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_i@plt
 333      E7800000 
 334              	.LVL30:
 185:src/slabAllocator.cpp ****     ConsoleUtil::print("Cache slab size: ", (uint64)cache->slabSize, "\n");
 335              		.loc 1 185 5 is_stmt 1
 336              		.loc 1 185 23 is_stmt 0
 337 0258 93060001 		li	a3,16
 338 025c 17060000 		lla	a2,.LC0
 338      13060600 
 339 0264 83258904 		lw	a1,72(s2)
 340 0268 17050000 		lla	a0,.LC13
GAS LISTING /tmp/cchWk8xb.s 			page 12


 340      13050500 
 341 0270 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_i@plt
 341      E7800000 
 342              	.LVL31:
 186:src/slabAllocator.cpp ****     ConsoleUtil::print("Cache object size: ", (uint64)cache->objectSize, "\n");
 343              		.loc 1 186 5 is_stmt 1
 344              		.loc 1 186 23 is_stmt 0
 345 0278 93060001 		li	a3,16
 346 027c 17060000 		lla	a2,.LC0
 346      13060600 
 347 0284 83250904 		lw	a1,64(s2)
 348 0288 17050000 		lla	a0,.LC14
 348      13050500 
 349 0290 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_i@plt
 349      E7800000 
 350              	.LVL32:
 187:src/slabAllocator.cpp ****     ConsoleUtil::print("Empty head: ", (uint64)cache->emptyHead, "\n");
 351              		.loc 1 187 5 is_stmt 1
 352              		.loc 1 187 23 is_stmt 0
 353 0298 93060001 		li	a3,16
 354 029c 17060000 		lla	a2,.LC0
 354      13060600 
 355 02a4 83250906 		lw	a1,96(s2)
 356 02a8 17050000 		lla	a0,.LC15
 356      13050500 
 357 02b0 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_i@plt
 357      E7800000 
 358              	.LVL33:
 188:src/slabAllocator.cpp **** 
 189:src/slabAllocator.cpp ****     Slab* iter = cache->emptyHead;
 359              		.loc 1 189 5 is_stmt 1
 360              		.loc 1 189 11 is_stmt 0
 361 02b8 83340906 		ld	s1,96(s2)
 362              	.LVL34:
 363              	.L16:
 190:src/slabAllocator.cpp ****     while(iter){
 364              		.loc 1 190 5 is_stmt 1
 365              		.loc 1 190 11
 366 02bc 63860402 		beqz	s1,.L15
 191:src/slabAllocator.cpp ****         ConsoleUtil::print("", (uint64)iter, " ");
 367              		.loc 1 191 9
 368              		.loc 1 191 27 is_stmt 0
 369 02c0 93060001 		li	a3,16
 370 02c4 17060000 		lla	a2,.LC8
 370      13060600 
 371 02cc 9B850400 		sext.w	a1,s1
 372 02d0 17050000 		lla	a0,.LC9
 372      13050500 
 373 02d8 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_i@plt
 373      E7800000 
 374              	.LVL35:
 192:src/slabAllocator.cpp ****         iter = iter->next;
 375              		.loc 1 192 9 is_stmt 1
 376              		.loc 1 192 14 is_stmt 0
 377 02e0 83B48400 		ld	s1,8(s1)
 378              	.LVL36:
 190:src/slabAllocator.cpp ****     while(iter){
GAS LISTING /tmp/cchWk8xb.s 			page 13


 379              		.loc 1 190 5
 380 02e4 6FF09FFD 		j	.L16
 381              	.L15:
 193:src/slabAllocator.cpp ****     }
 194:src/slabAllocator.cpp ****     ConsoleUtil::printString("\n");
 382              		.loc 1 194 5 is_stmt 1
 383              		.loc 1 194 29 is_stmt 0
 384 02e8 17050000 		lla	a0,.LC0
 384      13050500 
 385 02f0 97000000 		call	_ZN11ConsoleUtil11printStringEPKc@plt
 385      E7800000 
 386              	.LVL37:
 195:src/slabAllocator.cpp **** 
 196:src/slabAllocator.cpp ****     ConsoleUtil::print("Partial head: ", (uint64)cache->partialHead, "\n");
 387              		.loc 1 196 5 is_stmt 1
 388              		.loc 1 196 23 is_stmt 0
 389 02f8 93060001 		li	a3,16
 390 02fc 17060000 		lla	a2,.LC0
 390      13060600 
 391 0304 83258906 		lw	a1,104(s2)
 392 0308 17050000 		lla	a0,.LC16
 392      13050500 
 393 0310 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_i@plt
 393      E7800000 
 394              	.LVL38:
 197:src/slabAllocator.cpp **** 
 198:src/slabAllocator.cpp ****     iter = cache->partialHead;
 395              		.loc 1 198 5 is_stmt 1
 396              		.loc 1 198 10 is_stmt 0
 397 0318 83348906 		ld	s1,104(s2)
 398              	.LVL39:
 399              	.L18:
 199:src/slabAllocator.cpp ****     while(iter){
 400              		.loc 1 199 5 is_stmt 1
 401              		.loc 1 199 11
 402 031c 63860402 		beqz	s1,.L17
 200:src/slabAllocator.cpp ****         ConsoleUtil::print("", (uint64)iter, " ");
 403              		.loc 1 200 9
 404              		.loc 1 200 27 is_stmt 0
 405 0320 93060001 		li	a3,16
 406 0324 17060000 		lla	a2,.LC8
 406      13060600 
 407 032c 9B850400 		sext.w	a1,s1
 408 0330 17050000 		lla	a0,.LC9
 408      13050500 
 409 0338 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_i@plt
 409      E7800000 
 410              	.LVL40:
 201:src/slabAllocator.cpp ****         iter = iter->next;
 411              		.loc 1 201 9 is_stmt 1
 412              		.loc 1 201 14 is_stmt 0
 413 0340 83B48400 		ld	s1,8(s1)
 414              	.LVL41:
 199:src/slabAllocator.cpp ****     while(iter){
 415              		.loc 1 199 5
 416 0344 6FF09FFD 		j	.L18
 417              	.L17:
GAS LISTING /tmp/cchWk8xb.s 			page 14


 202:src/slabAllocator.cpp ****     }
 203:src/slabAllocator.cpp ****     ConsoleUtil::printString("\n");
 418              		.loc 1 203 5 is_stmt 1
 419              		.loc 1 203 29 is_stmt 0
 420 0348 17050000 		lla	a0,.LC0
 420      13050500 
 421 0350 97000000 		call	_ZN11ConsoleUtil11printStringEPKc@plt
 421      E7800000 
 422              	.LVL42:
 204:src/slabAllocator.cpp **** 
 205:src/slabAllocator.cpp ****     ConsoleUtil::print("Full head: ", (uint64)cache->fullHead, "\n");
 423              		.loc 1 205 5 is_stmt 1
 424              		.loc 1 205 23 is_stmt 0
 425 0358 93060001 		li	a3,16
 426 035c 17060000 		lla	a2,.LC0
 426      13060600 
 427 0364 83250907 		lw	a1,112(s2)
 428 0368 17050000 		lla	a0,.LC17
 428      13050500 
 429 0370 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_i@plt
 429      E7800000 
 430              	.LVL43:
 206:src/slabAllocator.cpp **** 
 207:src/slabAllocator.cpp ****     iter = cache->fullHead;
 431              		.loc 1 207 5 is_stmt 1
 432              		.loc 1 207 10 is_stmt 0
 433 0378 83340907 		ld	s1,112(s2)
 434              	.LVL44:
 435              	.L20:
 208:src/slabAllocator.cpp ****     while(iter){
 436              		.loc 1 208 5 is_stmt 1
 437              		.loc 1 208 11
 438 037c 63860402 		beqz	s1,.L19
 209:src/slabAllocator.cpp ****         ConsoleUtil::print("", (uint64)iter, " ");
 439              		.loc 1 209 9
 440              		.loc 1 209 27 is_stmt 0
 441 0380 93060001 		li	a3,16
 442 0384 17060000 		lla	a2,.LC8
 442      13060600 
 443 038c 9B850400 		sext.w	a1,s1
 444 0390 17050000 		lla	a0,.LC9
 444      13050500 
 445 0398 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_i@plt
 445      E7800000 
 446              	.LVL45:
 210:src/slabAllocator.cpp ****         iter = iter->next;
 447              		.loc 1 210 9 is_stmt 1
 448              		.loc 1 210 14 is_stmt 0
 449 03a0 83B48400 		ld	s1,8(s1)
 450              	.LVL46:
 208:src/slabAllocator.cpp ****     while(iter){
 451              		.loc 1 208 5
 452 03a4 6FF09FFD 		j	.L20
 453              	.L19:
 211:src/slabAllocator.cpp ****     }
 212:src/slabAllocator.cpp ****     ConsoleUtil::printString("\n");
 454              		.loc 1 212 5 is_stmt 1
GAS LISTING /tmp/cchWk8xb.s 			page 15


 455              		.loc 1 212 29 is_stmt 0
 456 03a8 17050000 		lla	a0,.LC0
 456      13050500 
 457 03b0 97000000 		call	_ZN11ConsoleUtil11printStringEPKc@plt
 457      E7800000 
 458              	.LVL47:
 213:src/slabAllocator.cpp **** }
 459              		.loc 1 213 1
 460 03b8 83308101 		ld	ra,24(sp)
 461              		.cfi_restore 1
 462 03bc 03340101 		ld	s0,16(sp)
 463              		.cfi_restore 8
 464              		.cfi_def_cfa 2, 32
 465 03c0 83348100 		ld	s1,8(sp)
 466              		.cfi_restore 9
 467              	.LVL48:
 468 03c4 03390100 		ld	s2,0(sp)
 469              		.cfi_restore 18
 470              	.LVL49:
 471 03c8 13010102 		addi	sp,sp,32
 472              		.cfi_def_cfa_offset 0
 473 03cc 67800000 		jr	ra
 474              		.cfi_endproc
 475              	.LFE22:
 477              		.align	2
 478              		.globl	_ZN13SlabAllocator14insertIntoListERP4SlabS1_
 480              	_ZN13SlabAllocator14insertIntoListERP4SlabS1_:
 481              	.LFB23:
 214:src/slabAllocator.cpp **** 
 215:src/slabAllocator.cpp **** void SlabAllocator::insertIntoList(Slab *&head, Slab *slab) {
 482              		.loc 1 215 61 is_stmt 1
 483              		.cfi_startproc
 484              	.LVL50:
 485 03d0 130101FF 		addi	sp,sp,-16
 486              		.cfi_def_cfa_offset 16
 487 03d4 23348100 		sd	s0,8(sp)
 488              		.cfi_offset 8, -8
 489 03d8 13040101 		addi	s0,sp,16
 490              		.cfi_def_cfa 8, 0
 216:src/slabAllocator.cpp ****     slab->next = head;
 491              		.loc 1 216 5
 492              		.loc 1 216 18 is_stmt 0
 493 03dc 83370500 		ld	a5,0(a0)
 494              		.loc 1 216 16
 495 03e0 23B4F500 		sd	a5,8(a1)
 217:src/slabAllocator.cpp ****     if(head)
 496              		.loc 1 217 5 is_stmt 1
 497 03e4 63840700 		beqz	a5,.L23
 218:src/slabAllocator.cpp ****         head->prev = slab;
 498              		.loc 1 218 9
 499              		.loc 1 218 20 is_stmt 0
 500 03e8 23B0B700 		sd	a1,0(a5)
 501              	.L23:
 219:src/slabAllocator.cpp ****     slab->prev = nullptr;
 502              		.loc 1 219 5 is_stmt 1
 503              		.loc 1 219 16 is_stmt 0
 504 03ec 23B00500 		sd	zero,0(a1)
GAS LISTING /tmp/cchWk8xb.s 			page 16


 220:src/slabAllocator.cpp ****     head = slab;
 505              		.loc 1 220 5 is_stmt 1
 506              		.loc 1 220 10 is_stmt 0
 507 03f0 2330B500 		sd	a1,0(a0)
 221:src/slabAllocator.cpp **** }
 508              		.loc 1 221 1
 509 03f4 03348100 		ld	s0,8(sp)
 510              		.cfi_restore 8
 511              		.cfi_def_cfa 2, 16
 512 03f8 13010101 		addi	sp,sp,16
 513              		.cfi_def_cfa_offset 0
 514 03fc 67800000 		jr	ra
 515              		.cfi_endproc
 516              	.LFE23:
 518              		.align	2
 519              		.globl	_ZN13SlabAllocator12allocateSlabEP5Cache
 521              	_ZN13SlabAllocator12allocateSlabEP5Cache:
 522              	.LFB11:
  31:src/slabAllocator.cpp ****     Slab* slab = (Slab*)Buddy::alloc(cache->slabSize);
 523              		.loc 1 31 48 is_stmt 1
 524              		.cfi_startproc
 525              	.LVL51:
 526 0400 130101FD 		addi	sp,sp,-48
 527              		.cfi_def_cfa_offset 48
 528 0404 23341102 		sd	ra,40(sp)
 529 0408 23308102 		sd	s0,32(sp)
 530 040c 233C9100 		sd	s1,24(sp)
 531 0410 23382101 		sd	s2,16(sp)
 532 0414 23343101 		sd	s3,8(sp)
 533              		.cfi_offset 1, -8
 534              		.cfi_offset 8, -16
 535              		.cfi_offset 9, -24
 536              		.cfi_offset 18, -32
 537              		.cfi_offset 19, -40
 538 0418 13040103 		addi	s0,sp,48
 539              		.cfi_def_cfa 8, 0
 540 041c 93090500 		mv	s3,a0
  32:src/slabAllocator.cpp ****     if(!slab)
 541              		.loc 1 32 5
  32:src/slabAllocator.cpp ****     if(!slab)
 542              		.loc 1 32 37 is_stmt 0
 543 0420 03358504 		ld	a0,72(a0)
 544              	.LVL52:
 545 0424 97000000 		call	_ZN5Buddy5allocEm@plt
 545      E7800000 
 546              	.LVL53:
  33:src/slabAllocator.cpp ****         return false;
 547              		.loc 1 33 5 is_stmt 1
 548 042c 6308050A 		beqz	a0,.L30
 549 0430 93040500 		mv	s1,a0
  35:src/slabAllocator.cpp ****     slab->totalNumOfSlots = slab->numOfFreeSlots = ((cache->slabSize << BLOCK_SIZE_BITS) - sizeof(S
 550              		.loc 1 35 5
  35:src/slabAllocator.cpp ****     slab->totalNumOfSlots = slab->numOfFreeSlots = ((cache->slabSize << BLOCK_SIZE_BITS) - sizeof(S
 551              		.loc 1 35 34 is_stmt 0
 552 0434 93050500 		mv	a1,a0
 553 0438 13850906 		addi	a0,s3,96
 554              	.LVL54:
GAS LISTING /tmp/cchWk8xb.s 			page 17


 555 043c 97000000 		call	_ZN13SlabAllocator14insertIntoListERP4SlabS1_
 555      E7800000 
 556              	.LVL55:
  36:src/slabAllocator.cpp ****     slab->objectOffset = (void*)((uint64)slab + sizeof(Slab) + slab->totalNumOfSlots/8 + 1);
 557              		.loc 1 36 5 is_stmt 1
  36:src/slabAllocator.cpp ****     slab->objectOffset = (void*)((uint64)slab + sizeof(Slab) + slab->totalNumOfSlots/8 + 1);
 558              		.loc 1 36 61 is_stmt 0
 559 0444 83B78904 		ld	a5,72(s3)
  36:src/slabAllocator.cpp ****     slab->objectOffset = (void*)((uint64)slab + sizeof(Slab) + slab->totalNumOfSlots/8 + 1);
 560              		.loc 1 36 70
 561 0448 9397C700 		slli	a5,a5,12
  36:src/slabAllocator.cpp ****     slab->objectOffset = (void*)((uint64)slab + sizeof(Slab) + slab->totalNumOfSlots/8 + 1);
 562              		.loc 1 36 90
 563 044c 938787FC 		addi	a5,a5,-56
  36:src/slabAllocator.cpp ****     slab->objectOffset = (void*)((uint64)slab + sizeof(Slab) + slab->totalNumOfSlots/8 + 1);
 564              		.loc 1 36 115
 565 0450 03B70904 		ld	a4,64(s3)
  36:src/slabAllocator.cpp ****     slab->objectOffset = (void*)((uint64)slab + sizeof(Slab) + slab->totalNumOfSlots/8 + 1);
 566              		.loc 1 36 106
 567 0454 B3D7E702 		divu	a5,a5,a4
  36:src/slabAllocator.cpp ****     slab->objectOffset = (void*)((uint64)slab + sizeof(Slab) + slab->totalNumOfSlots/8 + 1);
 568              		.loc 1 36 50
 569 0458 23B8F400 		sd	a5,16(s1)
  36:src/slabAllocator.cpp ****     slab->objectOffset = (void*)((uint64)slab + sizeof(Slab) + slab->totalNumOfSlots/8 + 1);
 570              		.loc 1 36 27
 571 045c 23BCF400 		sd	a5,24(s1)
  37:src/slabAllocator.cpp ****     slab->allocated = (char*)((uint64)slab + sizeof(Slab));
 572              		.loc 1 37 5 is_stmt 1
  37:src/slabAllocator.cpp ****     slab->allocated = (char*)((uint64)slab + sizeof(Slab));
 573              		.loc 1 37 85 is_stmt 0
 574 0460 93D73700 		srli	a5,a5,3
  37:src/slabAllocator.cpp ****     slab->allocated = (char*)((uint64)slab + sizeof(Slab));
 575              		.loc 1 37 62
 576 0464 B3879700 		add	a5,a5,s1
  37:src/slabAllocator.cpp ****     slab->allocated = (char*)((uint64)slab + sizeof(Slab));
 577              		.loc 1 37 88
 578 0468 93879703 		addi	a5,a5,57
  37:src/slabAllocator.cpp ****     slab->allocated = (char*)((uint64)slab + sizeof(Slab));
 579              		.loc 1 37 24
 580 046c 23B4F402 		sd	a5,40(s1)
  38:src/slabAllocator.cpp ****     slab->parent = cache;
 581              		.loc 1 38 5 is_stmt 1
  38:src/slabAllocator.cpp ****     slab->parent = cache;
 582              		.loc 1 38 44 is_stmt 0
 583 0470 93878403 		addi	a5,s1,56
  38:src/slabAllocator.cpp ****     slab->parent = cache;
 584              		.loc 1 38 21
 585 0474 23B0F402 		sd	a5,32(s1)
  39:src/slabAllocator.cpp ****     for(uint64 i=0;i<slab->totalNumOfSlots/8 + 1;i++)
 586              		.loc 1 39 5 is_stmt 1
  39:src/slabAllocator.cpp ****     for(uint64 i=0;i<slab->totalNumOfSlots/8 + 1;i++)
 587              		.loc 1 39 18 is_stmt 0
 588 0478 23B83403 		sd	s3,48(s1)
  40:src/slabAllocator.cpp ****         slab->allocated[i] = 0;
 589              		.loc 1 40 5 is_stmt 1
 590              	.LVL56:
 591              	.LBB38:
GAS LISTING /tmp/cchWk8xb.s 			page 18


  40:src/slabAllocator.cpp ****         slab->allocated[i] = 0;
 592              		.loc 1 40 16 is_stmt 0
 593 047c 13070000 		li	a4,0
 594              	.LVL57:
 595              	.L28:
  40:src/slabAllocator.cpp ****         slab->allocated[i] = 0;
 596              		.loc 1 40 21 is_stmt 1 discriminator 3
  40:src/slabAllocator.cpp ****         slab->allocated[i] = 0;
 597              		.loc 1 40 28 is_stmt 0 discriminator 3
 598 0480 83B78401 		ld	a5,24(s1)
  40:src/slabAllocator.cpp ****         slab->allocated[i] = 0;
 599              		.loc 1 40 43 discriminator 3
 600 0484 93D73700 		srli	a5,a5,3
  40:src/slabAllocator.cpp ****         slab->allocated[i] = 0;
 601              		.loc 1 40 46 discriminator 3
 602 0488 93871700 		addi	a5,a5,1
  40:src/slabAllocator.cpp ****         slab->allocated[i] = 0;
 603              		.loc 1 40 21 discriminator 3
 604 048c 637CF700 		bleu	a5,a4,.L27
  41:src/slabAllocator.cpp **** 
 605              		.loc 1 41 9 is_stmt 1 discriminator 2
  41:src/slabAllocator.cpp **** 
 606              		.loc 1 41 15 is_stmt 0 discriminator 2
 607 0490 83B70402 		ld	a5,32(s1)
  41:src/slabAllocator.cpp **** 
 608              		.loc 1 41 26 discriminator 2
 609 0494 B387E700 		add	a5,a5,a4
  41:src/slabAllocator.cpp **** 
 610              		.loc 1 41 28 discriminator 2
 611 0498 23800700 		sb	zero,0(a5)
  40:src/slabAllocator.cpp ****         slab->allocated[i] = 0;
 612              		.loc 1 40 5 is_stmt 1 discriminator 2
 613 049c 13071700 		addi	a4,a4,1
 614              	.LVL58:
 615 04a0 6FF01FFE 		j	.L28
 616              	.L27:
 617              	.LBE38:
  43:src/slabAllocator.cpp ****         for (uint64 i = 0; i < slab->totalNumOfSlots; i++) {
 618              		.loc 1 43 5
 619              	.LBB39:
  43:src/slabAllocator.cpp ****         for (uint64 i = 0; i < slab->totalNumOfSlots; i++) {
 620              		.loc 1 43 15 is_stmt 0
 621 04a4 83B70905 		ld	a5,80(s3)
  43:src/slabAllocator.cpp ****         for (uint64 i = 0; i < slab->totalNumOfSlots; i++) {
 622              		.loc 1 43 5
 623 04a8 638E0702 		beqz	a5,.L31
 624              	.LBB40:
  44:src/slabAllocator.cpp ****             cache->ctor((void *) ((uint64) slab->objectOffset + i * slab->parent->objectSize));
 625              		.loc 1 44 21
 626 04ac 13090000 		li	s2,0
 627              	.LVL59:
 628              	.L29:
  44:src/slabAllocator.cpp ****             cache->ctor((void *) ((uint64) slab->objectOffset + i * slab->parent->objectSize));
 629              		.loc 1 44 30 is_stmt 1 discriminator 3
  44:src/slabAllocator.cpp ****             cache->ctor((void *) ((uint64) slab->objectOffset + i * slab->parent->objectSize));
 630              		.loc 1 44 38 is_stmt 0 discriminator 3
 631 04b0 83B78401 		ld	a5,24(s1)
GAS LISTING /tmp/cchWk8xb.s 			page 19


  44:src/slabAllocator.cpp ****             cache->ctor((void *) ((uint64) slab->objectOffset + i * slab->parent->objectSize));
 632              		.loc 1 44 30 discriminator 3
 633 04b4 637CF902 		bleu	a5,s2,.L32
  45:src/slabAllocator.cpp ****         }
 634              		.loc 1 45 13 is_stmt 1 discriminator 2
  45:src/slabAllocator.cpp ****         }
 635              		.loc 1 45 20 is_stmt 0 discriminator 2
 636 04b8 03B70905 		ld	a4,80(s3)
  45:src/slabAllocator.cpp ****         }
 637              		.loc 1 45 50 discriminator 2
 638 04bc 03B58402 		ld	a0,40(s1)
  45:src/slabAllocator.cpp ****         }
 639              		.loc 1 45 75 discriminator 2
 640 04c0 83B70403 		ld	a5,48(s1)
  45:src/slabAllocator.cpp ****         }
 641              		.loc 1 45 83 discriminator 2
 642 04c4 83B70704 		ld	a5,64(a5)
  45:src/slabAllocator.cpp ****         }
 643              		.loc 1 45 67 discriminator 2
 644 04c8 B3872703 		mul	a5,a5,s2
  45:src/slabAllocator.cpp ****         }
 645              		.loc 1 45 24 discriminator 2
 646 04cc 3305F500 		add	a0,a0,a5
 647 04d0 E7000700 		jalr	a4
 648              	.LVL60:
  44:src/slabAllocator.cpp ****             cache->ctor((void *) ((uint64) slab->objectOffset + i * slab->parent->objectSize));
 649              		.loc 1 44 9 is_stmt 1 discriminator 2
 650 04d4 13091900 		addi	s2,s2,1
 651              	.LVL61:
 652 04d8 6FF09FFD 		j	.L29
 653              	.LVL62:
 654              	.L30:
 655              	.LBE40:
 656              	.LBE39:
  34:src/slabAllocator.cpp ****     SlabAllocator::insertIntoList(cache->emptyHead, slab);
 657              		.loc 1 34 16 is_stmt 0
 658 04dc 13050000 		li	a0,0
 659              	.LVL63:
 660 04e0 6F000001 		j	.L26
 661              	.LVL64:
 662              	.L31:
  48:src/slabAllocator.cpp **** }
 663              		.loc 1 48 12
 664 04e4 13051000 		li	a0,1
 665 04e8 6F008000 		j	.L26
 666              	.LVL65:
 667              	.L32:
 668 04ec 13051000 		li	a0,1
 669              	.LVL66:
 670              	.L26:
  49:src/slabAllocator.cpp **** 
 671              		.loc 1 49 1
 672 04f0 83308102 		ld	ra,40(sp)
 673              		.cfi_restore 1
 674 04f4 03340102 		ld	s0,32(sp)
 675              		.cfi_restore 8
 676              		.cfi_def_cfa 2, 48
GAS LISTING /tmp/cchWk8xb.s 			page 20


 677 04f8 83348101 		ld	s1,24(sp)
 678              		.cfi_restore 9
 679 04fc 03390101 		ld	s2,16(sp)
 680              		.cfi_restore 18
 681 0500 83398100 		ld	s3,8(sp)
 682              		.cfi_restore 19
 683              	.LVL67:
 684 0504 13010103 		addi	sp,sp,48
 685              		.cfi_def_cfa_offset 0
 686 0508 67800000 		jr	ra
 687              		.cfi_endproc
 688              	.LFE11:
 690              		.align	2
 691              		.globl	_ZN13SlabAllocator14removeFromListERP4SlabS1_
 693              	_ZN13SlabAllocator14removeFromListERP4SlabS1_:
 694              	.LFB24:
 222:src/slabAllocator.cpp **** 
 223:src/slabAllocator.cpp **** void SlabAllocator::removeFromList(Slab* &head, Slab* slab) {
 695              		.loc 1 223 61 is_stmt 1
 696              		.cfi_startproc
 697              	.LVL68:
 698 050c 130101FF 		addi	sp,sp,-16
 699              		.cfi_def_cfa_offset 16
 700 0510 23348100 		sd	s0,8(sp)
 701              		.cfi_offset 8, -8
 702 0514 13040101 		addi	s0,sp,16
 703              		.cfi_def_cfa 8, 0
 224:src/slabAllocator.cpp ****     if(slab == head)
 704              		.loc 1 224 5
 705              		.loc 1 224 16 is_stmt 0
 706 0518 83370500 		ld	a5,0(a0)
 707              		.loc 1 224 5
 708 051c 638CB702 		beq	a5,a1,.L39
 709              	.L35:
 225:src/slabAllocator.cpp ****         head = slab->next;
 226:src/slabAllocator.cpp ****     if(slab->next)
 710              		.loc 1 226 5 is_stmt 1
 711              		.loc 1 226 14 is_stmt 0
 712 0520 83B78500 		ld	a5,8(a1)
 713              		.loc 1 226 5
 714 0524 63860700 		beqz	a5,.L36
 227:src/slabAllocator.cpp ****         slab->next->prev = slab->prev;
 715              		.loc 1 227 9 is_stmt 1
 716              		.loc 1 227 34 is_stmt 0
 717 0528 03B70500 		ld	a4,0(a1)
 718              		.loc 1 227 26
 719 052c 23B0E700 		sd	a4,0(a5)
 720              	.L36:
 228:src/slabAllocator.cpp ****     if(slab->prev)
 721              		.loc 1 228 5 is_stmt 1
 722              		.loc 1 228 14 is_stmt 0
 723 0530 83B70500 		ld	a5,0(a1)
 724              		.loc 1 228 5
 725 0534 63860700 		beqz	a5,.L37
 229:src/slabAllocator.cpp ****         slab->prev->next = slab->next;
 726              		.loc 1 229 9 is_stmt 1
 727              		.loc 1 229 34 is_stmt 0
GAS LISTING /tmp/cchWk8xb.s 			page 21


 728 0538 03B78500 		ld	a4,8(a1)
 729              		.loc 1 229 26
 730 053c 23B4E700 		sd	a4,8(a5)
 731              	.L37:
 230:src/slabAllocator.cpp ****     slab->prev = nullptr;
 732              		.loc 1 230 5 is_stmt 1
 733              		.loc 1 230 16 is_stmt 0
 734 0540 23B00500 		sd	zero,0(a1)
 231:src/slabAllocator.cpp ****     slab->next = nullptr;
 735              		.loc 1 231 5 is_stmt 1
 736              		.loc 1 231 16 is_stmt 0
 737 0544 23B40500 		sd	zero,8(a1)
 232:src/slabAllocator.cpp **** }
 738              		.loc 1 232 1
 739 0548 03348100 		ld	s0,8(sp)
 740              		.cfi_remember_state
 741              		.cfi_restore 8
 742              		.cfi_def_cfa 2, 16
 743 054c 13010101 		addi	sp,sp,16
 744              		.cfi_def_cfa_offset 0
 745 0550 67800000 		jr	ra
 746              	.L39:
 747              		.cfi_restore_state
 225:src/slabAllocator.cpp ****     if(slab->next)
 748              		.loc 1 225 9 is_stmt 1
 225:src/slabAllocator.cpp ****     if(slab->next)
 749              		.loc 1 225 22 is_stmt 0
 750 0554 83B78500 		ld	a5,8(a1)
 225:src/slabAllocator.cpp ****     if(slab->next)
 751              		.loc 1 225 14
 752 0558 2330F500 		sd	a5,0(a0)
 753 055c 6FF05FFC 		j	.L35
 754              		.cfi_endproc
 755              	.LFE24:
 757              		.align	2
 758              		.globl	_ZN13SlabAllocator4moveERP4SlabS2_S1_
 760              	_ZN13SlabAllocator4moveERP4SlabS2_S1_:
 761              	.LFB25:
 233:src/slabAllocator.cpp **** 
 234:src/slabAllocator.cpp **** void SlabAllocator::move(Slab* &headFrom, Slab* &headTo, Slab* slab) {
 762              		.loc 1 234 70 is_stmt 1
 763              		.cfi_startproc
 764              	.LVL69:
 765 0560 130101FE 		addi	sp,sp,-32
 766              		.cfi_def_cfa_offset 32
 767 0564 233C1100 		sd	ra,24(sp)
 768 0568 23388100 		sd	s0,16(sp)
 769 056c 23349100 		sd	s1,8(sp)
 770 0570 23302101 		sd	s2,0(sp)
 771              		.cfi_offset 1, -8
 772              		.cfi_offset 8, -16
 773              		.cfi_offset 9, -24
 774              		.cfi_offset 18, -32
 775 0574 13040102 		addi	s0,sp,32
 776              		.cfi_def_cfa 8, 0
 777 0578 13890500 		mv	s2,a1
 778 057c 93040600 		mv	s1,a2
GAS LISTING /tmp/cchWk8xb.s 			page 22


 235:src/slabAllocator.cpp ****     SlabAllocator::removeFromList(headFrom, slab);
 779              		.loc 1 235 5
 780              		.loc 1 235 34 is_stmt 0
 781 0580 93050600 		mv	a1,a2
 782              	.LVL70:
 783 0584 97000000 		call	_ZN13SlabAllocator14removeFromListERP4SlabS1_
 783      E7800000 
 784              	.LVL71:
 236:src/slabAllocator.cpp ****     SlabAllocator::insertIntoList(headTo, slab);
 785              		.loc 1 236 5 is_stmt 1
 786              		.loc 1 236 34 is_stmt 0
 787 058c 93850400 		mv	a1,s1
 788 0590 13050900 		mv	a0,s2
 789 0594 97000000 		call	_ZN13SlabAllocator14insertIntoListERP4SlabS1_
 789      E7800000 
 790              	.LVL72:
 237:src/slabAllocator.cpp **** }...
 791              		.loc 1 237 1
 792 059c 83308101 		ld	ra,24(sp)
 793              		.cfi_restore 1
 794 05a0 03340101 		ld	s0,16(sp)
 795              		.cfi_restore 8
 796              		.cfi_def_cfa 2, 32
 797 05a4 83348100 		ld	s1,8(sp)
 798              		.cfi_restore 9
 799              	.LVL73:
 800 05a8 03390100 		ld	s2,0(sp)
 801              		.cfi_restore 18
 802              	.LVL74:
 803 05ac 13010102 		addi	sp,sp,32
 804              		.cfi_def_cfa_offset 0
 805 05b0 67800000 		jr	ra
 806              		.cfi_endproc
 807              	.LFE25:
 809              		.align	2
 810              		.globl	_ZN13SlabAllocator12allocateSlotEP4Slab
 812              	_ZN13SlabAllocator12allocateSlotEP4Slab:
 813              	.LFB12:
  51:src/slabAllocator.cpp **** void* SlabAllocator::allocateSlot(Slab *slab) {
 814              		.loc 1 51 47 is_stmt 1
 815              		.cfi_startproc
 816              	.LVL75:
 817 05b4 130101FE 		addi	sp,sp,-32
 818              		.cfi_def_cfa_offset 32
 819 05b8 233C1100 		sd	ra,24(sp)
 820 05bc 23388100 		sd	s0,16(sp)
 821 05c0 23349100 		sd	s1,8(sp)
 822 05c4 23302101 		sd	s2,0(sp)
 823              		.cfi_offset 1, -8
 824              		.cfi_offset 8, -16
 825              		.cfi_offset 9, -24
 826              		.cfi_offset 18, -32
 827 05c8 13040102 		addi	s0,sp,32
 828              		.cfi_def_cfa 8, 0
 829 05cc 13090500 		mv	s2,a0
  52:src/slabAllocator.cpp ****     for(uint64 i=0; i<slab->totalNumOfSlots; i++){
 830              		.loc 1 52 5
GAS LISTING /tmp/cchWk8xb.s 			page 23


 831              	.LVL76:
 832              	.LBB41:
  52:src/slabAllocator.cpp ****     for(uint64 i=0; i<slab->totalNumOfSlots; i++){
 833              		.loc 1 52 16 is_stmt 0
 834 05d0 93040000 		li	s1,0
 835              	.LVL77:
 836              	.L50:
  52:src/slabAllocator.cpp ****     for(uint64 i=0; i<slab->totalNumOfSlots; i++){
 837              		.loc 1 52 22 is_stmt 1 discriminator 1
  52:src/slabAllocator.cpp ****     for(uint64 i=0; i<slab->totalNumOfSlots; i++){
 838              		.loc 1 52 29 is_stmt 0 discriminator 1
 839 05d4 83378901 		ld	a5,24(s2)
  52:src/slabAllocator.cpp ****     for(uint64 i=0; i<slab->totalNumOfSlots; i++){
 840              		.loc 1 52 22 discriminator 1
 841 05d8 63F8F40A 		bleu	a5,s1,.L51
 842              	.LBE41:
  53:src/slabAllocator.cpp ****         if(!(slab->allocated[i/8] & (1<<(7 - i%8)))){
 843              		.loc 1 53 9 is_stmt 1
 844              	.LBB49:
 845              	.LBB42:
  53:src/slabAllocator.cpp ****         if(!(slab->allocated[i/8] & (1<<(7 - i%8)))){
 846              		.loc 1 53 20 is_stmt 0
 847 05dc 83370902 		ld	a5,32(s2)
  53:src/slabAllocator.cpp ****         if(!(slab->allocated[i/8] & (1<<(7 - i%8)))){
 848              		.loc 1 53 31
 849 05e0 13D73400 		srli	a4,s1,3
  53:src/slabAllocator.cpp ****         if(!(slab->allocated[i/8] & (1<<(7 - i%8)))){
 850              		.loc 1 53 33
 851 05e4 B387E700 		add	a5,a5,a4
 852 05e8 03C60700 		lbu	a2,0(a5)
  53:src/slabAllocator.cpp ****         if(!(slab->allocated[i/8] & (1<<(7 - i%8)))){
 853              		.loc 1 53 44
 854 05ec 13C7F4FF 		not	a4,s1
 855 05f0 13777700 		andi	a4,a4,7
  53:src/slabAllocator.cpp ****         if(!(slab->allocated[i/8] & (1<<(7 - i%8)))){
 856              		.loc 1 53 12
 857 05f4 BB56E640 		sraw	a3,a2,a4
 858 05f8 93F61600 		andi	a3,a3,1
  53:src/slabAllocator.cpp ****         if(!(slab->allocated[i/8] & (1<<(7 - i%8)))){
 859              		.loc 1 53 9
 860 05fc 63860600 		beqz	a3,.L53
 861              	.LBE42:
  52:src/slabAllocator.cpp ****     for(uint64 i=0; i<slab->totalNumOfSlots; i++){
 862              		.loc 1 52 5 is_stmt 1 discriminator 2
 863 0600 93841400 		addi	s1,s1,1
 864              	.LVL78:
 865 0604 6FF01FFD 		j	.L50
 866              	.L53:
 867              	.LBB47:
 868              	.LBB43:
  54:src/slabAllocator.cpp ****             slab->allocated[i/8] |= (1<<(7 - i%8));
 869              		.loc 1 54 13
  54:src/slabAllocator.cpp ****             slab->allocated[i/8] |= (1<<(7 - i%8));
 870              		.loc 1 54 39 is_stmt 0
 871 0608 93061000 		li	a3,1
 872 060c 3B97E600 		sllw	a4,a3,a4
  54:src/slabAllocator.cpp ****             slab->allocated[i/8] |= (1<<(7 - i%8));
GAS LISTING /tmp/cchWk8xb.s 			page 24


 873              		.loc 1 54 34
 874 0610 3366E600 		or	a2,a2,a4
 875 0614 2380C700 		sb	a2,0(a5)
  55:src/slabAllocator.cpp ****             Slab* &headFrom = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead
 876              		.loc 1 55 13 is_stmt 1
 877              	.LVL79:
 878              	.LBB44:
 879              	.LBB45:
 880              		.file 2 "src/../h/../h/../h/slab_t.hpp"
   1:src/../h/../h/../h/slab_t.hpp **** //
   2:src/../h/../h/../h/slab_t.hpp **** // Created by os on 1/2/23.
   3:src/../h/../h/../h/slab_t.hpp **** //
   4:src/../h/../h/../h/slab_t.hpp **** 
   5:src/../h/../h/../h/slab_t.hpp **** #ifndef KERNEL_FOR_RISCV_ARCHITECURE_SLAB_T_HPP
   6:src/../h/../h/../h/slab_t.hpp **** #define KERNEL_FOR_RISCV_ARCHITECURE_SLAB_T_HPP
   7:src/../h/../h/../h/slab_t.hpp **** #include "../lib/hw.h"
   8:src/../h/../h/../h/slab_t.hpp **** 
   9:src/../h/../h/../h/slab_t.hpp **** typedef class Cache kmem_cache_t;
  10:src/../h/../h/../h/slab_t.hpp **** 
  11:src/../h/../h/../h/slab_t.hpp **** typedef class Slab{
  12:src/../h/../h/../h/slab_t.hpp **** public:
  13:src/../h/../h/../h/slab_t.hpp ****     inline bool isFull(){return numOfFreeSlots == 0;}
  14:src/../h/../h/../h/slab_t.hpp ****     inline bool isEmpty(){return numOfFreeSlots == totalNumOfSlots;}
 881              		.loc 2 14 27
 882              		.loc 2 14 34 is_stmt 0
 883 0618 83370901 		ld	a5,16(s2)
 884              		.loc 2 14 52
 885 061c 03378901 		ld	a4,24(s2)
 886              	.LVL80:
 887              	.LBE45:
 888              	.LBE44:
  55:src/slabAllocator.cpp ****             Slab* &headFrom = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead
 889              		.loc 1 55 89
 890 0620 6308F704 		beq	a4,a5,.L54
  55:src/slabAllocator.cpp ****             Slab* &headFrom = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead
 891              		.loc 1 55 81 discriminator 2
 892 0624 03350903 		ld	a0,48(s2)
 893              	.LVL81:
  55:src/slabAllocator.cpp ****             Slab* &headFrom = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead
 894              		.loc 1 55 89 discriminator 2
 895 0628 13058506 		addi	a0,a0,104
 896              	.L46:
 897              	.LVL82:
  56:src/slabAllocator.cpp ****             slab->numOfFreeSlots--;
 898              		.loc 1 56 13 is_stmt 1 discriminator 4
  56:src/slabAllocator.cpp ****             slab->numOfFreeSlots--;
 899              		.loc 1 56 33 is_stmt 0 discriminator 4
 900 062c 9387F7FF 		addi	a5,a5,-1
 901 0630 2338F900 		sd	a5,16(s2)
  57:src/slabAllocator.cpp ****             Slab* &headTo = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 902              		.loc 1 57 13 is_stmt 1 discriminator 4
 903              	.LVL83:
 904              	.LBE43:
 905              	.LBE47:
 906              	.LBE49:
  13:src/../h/../h/../h/slab_t.hpp ****     inline bool isEmpty(){return numOfFreeSlots == totalNumOfSlots;}
 907              		.loc 2 13 26 discriminator 4
GAS LISTING /tmp/cchWk8xb.s 			page 25


 908              	.LBB50:
 909              	.LBB48:
 910              	.LBB46:
  57:src/slabAllocator.cpp ****             Slab* &headTo = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 911              		.loc 1 57 85 is_stmt 0 discriminator 4
 912 0634 63940704 		bnez	a5,.L47
  57:src/slabAllocator.cpp ****             Slab* &headTo = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 913              		.loc 1 57 52 discriminator 1
 914 0638 83350903 		ld	a1,48(s2)
  57:src/slabAllocator.cpp ****             Slab* &headTo = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 915              		.loc 1 57 85 discriminator 1
 916 063c 93850507 		addi	a1,a1,112
 917              	.L48:
 918              	.LVL84:
  59:src/slabAllocator.cpp ****             if(headTo != headFrom)
 919              		.loc 1 59 13 is_stmt 1 discriminator 4
  59:src/slabAllocator.cpp ****             if(headTo != headFrom)
 920              		.loc 1 59 16 is_stmt 0 discriminator 4
 921 0640 03B70500 		ld	a4,0(a1)
  59:src/slabAllocator.cpp ****             if(headTo != headFrom)
 922              		.loc 1 59 26 discriminator 4
 923 0644 83370500 		ld	a5,0(a0)
  59:src/slabAllocator.cpp ****             if(headTo != headFrom)
 924              		.loc 1 59 13 discriminator 4
 925 0648 6308F700 		beq	a4,a5,.L49
  60:src/slabAllocator.cpp ****                 SlabAllocator::move(headFrom, headTo, slab);
 926              		.loc 1 60 17 is_stmt 1
  60:src/slabAllocator.cpp ****                 SlabAllocator::move(headFrom, headTo, slab);
 927              		.loc 1 60 36 is_stmt 0
 928 064c 13060900 		mv	a2,s2
 929 0650 97000000 		call	_ZN13SlabAllocator4moveERP4SlabS2_S1_
 929      E7800000 
 930              	.LVL85:
 931              	.L49:
  62:src/slabAllocator.cpp ****             return (void*)((uint64)slab->objectOffset + i*slab->parent->objectSize);
 932              		.loc 1 62 13 is_stmt 1
  62:src/slabAllocator.cpp ****             return (void*)((uint64)slab->objectOffset + i*slab->parent->objectSize);
 933              		.loc 1 62 42 is_stmt 0
 934 0658 03358902 		ld	a0,40(s2)
  62:src/slabAllocator.cpp ****             return (void*)((uint64)slab->objectOffset + i*slab->parent->objectSize);
 935              		.loc 1 62 65
 936 065c 83370903 		ld	a5,48(s2)
  62:src/slabAllocator.cpp ****             return (void*)((uint64)slab->objectOffset + i*slab->parent->objectSize);
 937              		.loc 1 62 73
 938 0660 83B70704 		ld	a5,64(a5)
  62:src/slabAllocator.cpp ****             return (void*)((uint64)slab->objectOffset + i*slab->parent->objectSize);
 939              		.loc 1 62 58
 940 0664 B3849702 		mul	s1,a5,s1
 941              	.LVL86:
  62:src/slabAllocator.cpp ****             return (void*)((uint64)slab->objectOffset + i*slab->parent->objectSize);
 942              		.loc 1 62 55
 943 0668 33059500 		add	a0,a0,s1
  62:src/slabAllocator.cpp ****             return (void*)((uint64)slab->objectOffset + i*slab->parent->objectSize);
 944              		.loc 1 62 83
 945 066c 6F000002 		j	.L42
 946              	.LVL87:
 947              	.L54:
GAS LISTING /tmp/cchWk8xb.s 			page 26


  55:src/slabAllocator.cpp ****             Slab* &headFrom = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead
 948              		.loc 1 55 55 discriminator 1
 949 0670 03350903 		ld	a0,48(s2)
 950              	.LVL88:
  55:src/slabAllocator.cpp ****             Slab* &headFrom = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead
 951              		.loc 1 55 89 discriminator 1
 952 0674 13050506 		addi	a0,a0,96
 953 0678 6FF05FFB 		j	.L46
 954              	.LVL89:
 955              	.L47:
  57:src/slabAllocator.cpp ****             Slab* &headTo = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 956              		.loc 1 57 77 discriminator 2
 957 067c 83350903 		ld	a1,48(s2)
  57:src/slabAllocator.cpp ****             Slab* &headTo = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 958              		.loc 1 57 85 discriminator 2
 959 0680 93858506 		addi	a1,a1,104
 960 0684 6FF0DFFB 		j	.L48
 961              	.LVL90:
 962              	.L51:
 963              	.LBE46:
 964              	.LBE48:
 965              	.LBE50:
  65:src/slabAllocator.cpp ****     return nullptr;
 966              		.loc 1 65 12
 967 0688 13050000 		li	a0,0
 968              	.LVL91:
 969              	.L42:
  66:src/slabAllocator.cpp **** }
 970              		.loc 1 66 1
 971 068c 83308101 		ld	ra,24(sp)
 972              		.cfi_restore 1
 973 0690 03340101 		ld	s0,16(sp)
 974              		.cfi_restore 8
 975              		.cfi_def_cfa 2, 32
 976 0694 83348100 		ld	s1,8(sp)
 977              		.cfi_restore 9
 978 0698 03390100 		ld	s2,0(sp)
 979              		.cfi_restore 18
 980              	.LVL92:
 981 069c 13010102 		addi	sp,sp,32
 982              		.cfi_def_cfa_offset 0
 983 06a0 67800000 		jr	ra
 984              		.cfi_endproc
 985              	.LFE12:
 987              		.align	2
 988              		.globl	_ZN13SlabAllocator14allocateObjectEP5Cache
 990              	_ZN13SlabAllocator14allocateObjectEP5Cache:
 991              	.LFB13:
  68:src/slabAllocator.cpp **** void* SlabAllocator::allocateObject(Cache *cache) {
 992              		.loc 1 68 51 is_stmt 1
 993              		.cfi_startproc
 994              	.LVL93:
 995 06a4 130101FE 		addi	sp,sp,-32
 996              		.cfi_def_cfa_offset 32
 997 06a8 233C1100 		sd	ra,24(sp)
 998 06ac 23388100 		sd	s0,16(sp)
 999 06b0 23349100 		sd	s1,8(sp)
GAS LISTING /tmp/cchWk8xb.s 			page 27


 1000 06b4 23302101 		sd	s2,0(sp)
 1001              		.cfi_offset 1, -8
 1002              		.cfi_offset 8, -16
 1003              		.cfi_offset 9, -24
 1004              		.cfi_offset 18, -32
 1005 06b8 13040102 		addi	s0,sp,32
 1006              		.cfi_def_cfa 8, 0
 1007 06bc 13090500 		mv	s2,a0
  69:src/slabAllocator.cpp ****     void* ret = SlabAllocator::allocateFromList(cache->partialHead);
 1008              		.loc 1 69 5
  69:src/slabAllocator.cpp ****     void* ret = SlabAllocator::allocateFromList(cache->partialHead);
 1009              		.loc 1 69 48 is_stmt 0
 1010 06c0 83348506 		ld	s1,104(a0)
 1011              	.LVL94:
 1012              	.L57:
 1013              	.LBB51:
 1014              	.LBB52:
 1015              		.file 3 "src/../h/slabAllocator.hpp"
   1:src/../h/slabAllocator.hpp **** //
   2:src/../h/slabAllocator.hpp **** // Created by os on 12/25/22.
   3:src/../h/slabAllocator.hpp **** //
   4:src/../h/slabAllocator.hpp **** 
   5:src/../h/slabAllocator.hpp **** #ifndef KERNEL_FOR_RISCV_ARCHITECURE_SLAN_HPP
   6:src/../h/slabAllocator.hpp **** #define KERNEL_FOR_RISCV_ARCHITECURE_SLAN_HPP
   7:src/../h/slabAllocator.hpp **** 
   8:src/../h/slabAllocator.hpp **** #include "../h/utility.hpp"
   9:src/../h/slabAllocator.hpp **** #include "../h/buddyAllocator.hpp"
  10:src/../h/slabAllocator.hpp **** #include "../h/consoleUtil.hpp"
  11:src/../h/slabAllocator.hpp **** #include "../h/cache_t.hpp"
  12:src/../h/slabAllocator.hpp **** 
  13:src/../h/slabAllocator.hpp **** class SlabAllocator{
  14:src/../h/slabAllocator.hpp **** public:
  15:src/../h/slabAllocator.hpp **** 
  16:src/../h/slabAllocator.hpp ****     static void initialize(void* space, uint64 blockNum);
  17:src/../h/slabAllocator.hpp **** 
  18:src/../h/slabAllocator.hpp ****     static Cache* createCache(const char* name, size_t size, void (*ctor)(void*), void (*dtor)(void
  19:src/../h/slabAllocator.hpp **** 
  20:src/../h/slabAllocator.hpp ****     static void deleteCache(Cache* &cache);
  21:src/../h/slabAllocator.hpp **** 
  22:src/../h/slabAllocator.hpp ****     static bool allocateSlab(Cache *cache);
  23:src/../h/slabAllocator.hpp **** 
  24:src/../h/slabAllocator.hpp ****     static int shrinkCache(Cache* cache);
  25:src/../h/slabAllocator.hpp **** 
  26:src/../h/slabAllocator.hpp ****     static void* allocateSlot(Slab* slab);
  27:src/../h/slabAllocator.hpp **** 
  28:src/../h/slabAllocator.hpp ****     static void* allocateObject(Cache *cache);
  29:src/../h/slabAllocator.hpp **** 
  30:src/../h/slabAllocator.hpp ****     static void* allocateBuffer(size_t size);
  31:src/../h/slabAllocator.hpp **** 
  32:src/../h/slabAllocator.hpp ****     static void freeSlot(Slab* slab, uint64 index);
  33:src/../h/slabAllocator.hpp **** 
  34:src/../h/slabAllocator.hpp ****     static bool freeObject(Cache* cache,const void* addr);
  35:src/../h/slabAllocator.hpp **** 
  36:src/../h/slabAllocator.hpp ****     static void freeBuffer(const void* addr);
  37:src/../h/slabAllocator.hpp **** 
  38:src/../h/slabAllocator.hpp ****     static void printSlab(Slab *slab);
  39:src/../h/slabAllocator.hpp **** 
GAS LISTING /tmp/cchWk8xb.s 			page 28


  40:src/../h/slabAllocator.hpp ****     static void printCache(Cache *cache);
  41:src/../h/slabAllocator.hpp **** 
  42:src/../h/slabAllocator.hpp ****     static Cache *sizeN[13];
  43:src/../h/slabAllocator.hpp ****     static Cache *cache;
  44:src/../h/slabAllocator.hpp ****     static void* startAddr;
  45:src/../h/slabAllocator.hpp ****     static uint64 blocksResponsibleFor;
  46:src/../h/slabAllocator.hpp **** 
  47:src/../h/slabAllocator.hpp **** private:
  48:src/../h/slabAllocator.hpp ****     static void insertIntoList(Slab* &head, Slab* slab);
  49:src/../h/slabAllocator.hpp ****     static void removeFromList(Slab* &head, Slab* slab);
  50:src/../h/slabAllocator.hpp ****     static void move(Slab* &headFrom, Slab* &headTo, Slab* slab);
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getUpperBound(Slab* slab){return (uint64)slab->objectOffset + slab->totalN
  52:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
  53:src/../h/slabAllocator.hpp **** 
  54:src/../h/slabAllocator.hpp ****     static inline void* allocateFromList(Slab* head){
  55:src/../h/slabAllocator.hpp ****         while(head != nullptr){
 1016              		.loc 3 55 9 is_stmt 1
 1017              		.loc 3 55 20
 1018 06c4 638C0400 		beqz	s1,.L56
 1019              	.LBB53:
  56:src/../h/slabAllocator.hpp ****             void* ret = allocateSlot(head);
 1020              		.loc 3 56 13
 1021              		.loc 3 56 37 is_stmt 0
 1022 06c8 13850400 		mv	a0,s1
 1023 06cc 97000000 		call	_ZN13SlabAllocator12allocateSlotEP4Slab
 1023      E7800000 
 1024              	.LVL95:
  57:src/../h/slabAllocator.hpp ****             if(ret != nullptr)
 1025              		.loc 3 57 13 is_stmt 1
 1026 06d4 E30805FE 		beqz	a0,.L57
  58:src/../h/slabAllocator.hpp ****                 return ret;
 1027              		.loc 3 58 24 is_stmt 0
 1028 06d8 93040500 		mv	s1,a0
 1029              	.LVL96:
 1030              	.L56:
 1031              	.LBE53:
 1032              	.LBE52:
 1033              	.LBE51:
  70:src/slabAllocator.cpp ****     if(ret){
 1034              		.loc 1 70 5 is_stmt 1
 1035 06dc 63800402 		beqz	s1,.L62
 1036              	.L55:
  83:src/slabAllocator.cpp **** }
 1037              		.loc 1 83 1 is_stmt 0
 1038 06e0 13850400 		mv	a0,s1
 1039 06e4 83308101 		ld	ra,24(sp)
 1040              		.cfi_remember_state
 1041              		.cfi_restore 1
 1042 06e8 03340101 		ld	s0,16(sp)
 1043              		.cfi_restore 8
 1044              		.cfi_def_cfa 2, 32
 1045 06ec 83348100 		ld	s1,8(sp)
 1046              		.cfi_restore 9
 1047              	.LVL97:
 1048 06f0 03390100 		ld	s2,0(sp)
 1049              		.cfi_restore 18
 1050              	.LVL98:
GAS LISTING /tmp/cchWk8xb.s 			page 29


 1051 06f4 13010102 		addi	sp,sp,32
 1052              		.cfi_def_cfa_offset 0
 1053 06f8 67800000 		jr	ra
 1054              	.LVL99:
 1055              	.L62:
 1056              		.cfi_restore_state
  73:src/slabAllocator.cpp ****     ret = SlabAllocator::allocateFromList(cache->emptyHead);
 1057              		.loc 1 73 5 is_stmt 1
  73:src/slabAllocator.cpp ****     ret = SlabAllocator::allocateFromList(cache->emptyHead);
 1058              		.loc 1 73 42 is_stmt 0
 1059 06fc 83340906 		ld	s1,96(s2)
 1060              	.LVL100:
 1061              	.L60:
 1062              	.LBB54:
 1063              	.LBB55:
  55:src/../h/slabAllocator.hpp ****             void* ret = allocateSlot(head);
 1064              		.loc 3 55 9 is_stmt 1
  55:src/../h/slabAllocator.hpp ****             void* ret = allocateSlot(head);
 1065              		.loc 3 55 20
 1066 0700 638C0400 		beqz	s1,.L59
 1067              	.LBB56:
  56:src/../h/slabAllocator.hpp ****             if(ret != nullptr)
 1068              		.loc 3 56 13
  56:src/../h/slabAllocator.hpp ****             if(ret != nullptr)
 1069              		.loc 3 56 37 is_stmt 0
 1070 0704 13850400 		mv	a0,s1
 1071 0708 97000000 		call	_ZN13SlabAllocator12allocateSlotEP4Slab
 1071      E7800000 
 1072              	.LVL101:
  57:src/../h/slabAllocator.hpp ****                 return ret;
 1073              		.loc 3 57 13 is_stmt 1
 1074 0710 E30805FE 		beqz	a0,.L60
 1075              		.loc 3 58 24 is_stmt 0
 1076 0714 93040500 		mv	s1,a0
 1077              	.LVL102:
 1078              	.L59:
 1079              	.LBE56:
 1080              	.LBE55:
 1081              	.LBE54:
  74:src/slabAllocator.cpp ****     if(ret){
 1082              		.loc 1 74 5 is_stmt 1
 1083 0718 E39404FC 		bnez	s1,.L55
  77:src/slabAllocator.cpp ****     if(!SlabAllocator::allocateSlab(cache))
 1084              		.loc 1 77 5
  77:src/slabAllocator.cpp ****     if(!SlabAllocator::allocateSlab(cache))
 1085              		.loc 1 77 36 is_stmt 0
 1086 071c 13050900 		mv	a0,s2
 1087 0720 97000000 		call	_ZN13SlabAllocator12allocateSlabEP5Cache
 1087      E7800000 
 1088              	.LVL103:
  77:src/slabAllocator.cpp ****     if(!SlabAllocator::allocateSlab(cache))
 1089              		.loc 1 77 5
 1090 0728 E30C05FA 		beqz	a0,.L55
  80:src/slabAllocator.cpp ****     ret = SlabAllocator::allocateSlot(cache->emptyHead);
 1091              		.loc 1 80 5 is_stmt 1
  80:src/slabAllocator.cpp ****     ret = SlabAllocator::allocateSlot(cache->emptyHead);
 1092              		.loc 1 80 38 is_stmt 0
GAS LISTING /tmp/cchWk8xb.s 			page 30


 1093 072c 03350906 		ld	a0,96(s2)
 1094 0730 97000000 		call	_ZN13SlabAllocator12allocateSlotEP4Slab
 1094      E7800000 
 1095              	.LVL104:
 1096 0738 93040500 		mv	s1,a0
 1097              	.LVL105:
  82:src/slabAllocator.cpp ****     return ret;
 1098              		.loc 1 82 5 is_stmt 1
  82:src/slabAllocator.cpp ****     return ret;
 1099              		.loc 1 82 12 is_stmt 0
 1100 073c 6FF05FFA 		j	.L55
 1101              		.cfi_endproc
 1102              	.LFE13:
 1104              		.align	2
 1105              		.globl	_ZN13SlabAllocator14allocateBufferEm
 1107              	_ZN13SlabAllocator14allocateBufferEm:
 1108              	.LFB14:
  85:src/slabAllocator.cpp **** void* SlabAllocator::allocateBuffer(size_t size) {
 1109              		.loc 1 85 50 is_stmt 1
 1110              		.cfi_startproc
 1111              	.LVL106:
  86:src/slabAllocator.cpp ****     uint64 level = Buddy::getDeg(Buddy::ceil(size));
 1112              		.loc 1 86 5
 1113              	.LBB57:
 1114              	.LBB58:
 1115              		.file 4 "src/../h/../h/buddyAllocator.hpp"
   1:src/../h/../h/buddyAllocator.hpp **** //
   2:src/../h/../h/buddyAllocator.hpp **** // Created by os on 12/24/22.
   3:src/../h/../h/buddyAllocator.hpp **** //
   4:src/../h/../h/buddyAllocator.hpp **** 
   5:src/../h/../h/buddyAllocator.hpp **** #ifndef KERNEL_FOR_RISCV_ARCHITECURE_BUDDYALLOCATOR_HPP
   6:src/../h/../h/buddyAllocator.hpp **** #define KERNEL_FOR_RISCV_ARCHITECURE_BUDDYALLOCATOR_HPP
   7:src/../h/../h/buddyAllocator.hpp **** 
   8:src/../h/../h/buddyAllocator.hpp **** #include "../lib/hw.h"
   9:src/../h/../h/buddyAllocator.hpp **** #include "../h/utility.hpp"
  10:src/../h/../h/buddyAllocator.hpp **** 
  11:src/../h/../h/buddyAllocator.hpp **** class SlabAllocator;
  12:src/../h/../h/buddyAllocator.hpp **** 
  13:src/../h/../h/buddyAllocator.hpp **** class Buddy{
  14:src/../h/../h/buddyAllocator.hpp **** public:
  15:src/../h/../h/buddyAllocator.hpp ****     static void initialize(void* addr, uint64 block_num);
  16:src/../h/../h/buddyAllocator.hpp **** 
  17:src/../h/../h/buddyAllocator.hpp ****     static void* alloc(uint64 num);
  18:src/../h/../h/buddyAllocator.hpp **** 
  19:src/../h/../h/buddyAllocator.hpp ****     static void free(void *addr, uint64 size);
  20:src/../h/../h/buddyAllocator.hpp **** 
  21:src/../h/../h/buddyAllocator.hpp ****     typedef struct Block{
  22:src/../h/../h/buddyAllocator.hpp ****         Block *next;
  23:src/../h/../h/buddyAllocator.hpp ****     }Bucket;
  24:src/../h/../h/buddyAllocator.hpp **** 
  25:src/../h/../h/buddyAllocator.hpp ****     static void printList();
  26:src/../h/../h/buddyAllocator.hpp **** 
  27:src/../h/../h/buddyAllocator.hpp ****     static inline bool canAllocate(uint64 size){
  28:src/../h/../h/buddyAllocator.hpp ****         return head[size] != nullptr;
  29:src/../h/../h/buddyAllocator.hpp ****     };
  30:src/../h/../h/buddyAllocator.hpp **** 
  31:src/../h/../h/buddyAllocator.hpp **** private:
GAS LISTING /tmp/cchWk8xb.s 			page 31


  32:src/../h/../h/buddyAllocator.hpp ****     static void* BUDDY_META_DATA_ADDR;
  33:src/../h/../h/buddyAllocator.hpp ****     static void* BUDDY_START_ADDR;
  34:src/../h/../h/buddyAllocator.hpp ****     static uint64 BLOCKS_AVAILABLE;
  35:src/../h/../h/buddyAllocator.hpp ****     static Bucket *head[BUCKET_SIZE], *tail[BUCKET_SIZE];
  36:src/../h/../h/buddyAllocator.hpp **** 
  37:src/../h/../h/buddyAllocator.hpp ****     static inline uint64 ceil(uint64 num){
  38:src/../h/../h/buddyAllocator.hpp ****         num--;
 1116              		.loc 4 38 9
 1117              		.loc 4 38 12 is_stmt 0
 1118 0740 9307F5FF 		addi	a5,a0,-1
 1119              	.LVL107:
  39:src/../h/../h/buddyAllocator.hpp ****         num |= num>>1;
 1120              		.loc 4 39 9 is_stmt 1
 1121              		.loc 4 39 19 is_stmt 0
 1122 0744 13D51700 		srli	a0,a5,1
 1123              	.LVL108:
 1124              		.loc 4 39 13
 1125 0748 B3E7A700 		or	a5,a5,a0
 1126              	.LVL109:
  40:src/../h/../h/buddyAllocator.hpp ****         num |= num>>2;
 1127              		.loc 4 40 9 is_stmt 1
 1128              		.loc 4 40 19 is_stmt 0
 1129 074c 13D72700 		srli	a4,a5,2
 1130              		.loc 4 40 13
 1131 0750 B3E7E700 		or	a5,a5,a4
 1132              	.LVL110:
  41:src/../h/../h/buddyAllocator.hpp ****         num |= num>>4;
 1133              		.loc 4 41 9 is_stmt 1
 1134              		.loc 4 41 19 is_stmt 0
 1135 0754 13D74700 		srli	a4,a5,4
 1136              		.loc 4 41 13
 1137 0758 B3E7E700 		or	a5,a5,a4
 1138              	.LVL111:
  42:src/../h/../h/buddyAllocator.hpp ****         num |= num>>8;
 1139              		.loc 4 42 9 is_stmt 1
 1140              		.loc 4 42 19 is_stmt 0
 1141 075c 13D78700 		srli	a4,a5,8
 1142              		.loc 4 42 13
 1143 0760 B3E7E700 		or	a5,a5,a4
 1144              	.LVL112:
  43:src/../h/../h/buddyAllocator.hpp ****         num |= num>>16;
 1145              		.loc 4 43 9 is_stmt 1
 1146              		.loc 4 43 19 is_stmt 0
 1147 0764 13D70701 		srli	a4,a5,16
 1148              		.loc 4 43 13
 1149 0768 B3E7E700 		or	a5,a5,a4
 1150              	.LVL113:
  44:src/../h/../h/buddyAllocator.hpp ****         num |= num>>32;
 1151              		.loc 4 44 9 is_stmt 1
 1152              		.loc 4 44 19 is_stmt 0
 1153 076c 13D70702 		srli	a4,a5,32
 1154              		.loc 4 44 13
 1155 0770 B3E7E700 		or	a5,a5,a4
 1156              	.LVL114:
  45:src/../h/../h/buddyAllocator.hpp ****         return ++num;
 1157              		.loc 4 45 9 is_stmt 1
 1158              		.loc 4 45 18 is_stmt 0
GAS LISTING /tmp/cchWk8xb.s 			page 32


 1159 0774 93871700 		addi	a5,a5,1
 1160              	.LVL115:
 1161              	.LBE58:
 1162              	.LBE57:
 1163              	.LBB59:
 1164              	.LBB60:
  46:src/../h/../h/buddyAllocator.hpp ****     }
  47:src/../h/../h/buddyAllocator.hpp **** 
  48:src/../h/../h/buddyAllocator.hpp ****     static inline uint64 getDeg(uint64 num){
  49:src/../h/../h/buddyAllocator.hpp ****         uint64 deg = 0;
 1165              		.loc 4 49 16
 1166 0778 13070000 		li	a4,0
 1167              	.L65:
 1168              	.LVL116:
  50:src/../h/../h/buddyAllocator.hpp ****         while(num>1){
 1169              		.loc 4 50 9 is_stmt 1
 1170              		.loc 4 50 18
 1171 077c 93061000 		li	a3,1
 1172 0780 63F8F600 		bleu	a5,a3,.L64
  51:src/../h/../h/buddyAllocator.hpp ****             num/=2;
 1173              		.loc 4 51 13
 1174              		.loc 4 51 16 is_stmt 0
 1175 0784 93D71700 		srli	a5,a5,1
 1176              	.LVL117:
  52:src/../h/../h/buddyAllocator.hpp ****             deg++;
 1177              		.loc 4 52 13 is_stmt 1
 1178              		.loc 4 52 16 is_stmt 0
 1179 0788 13071700 		addi	a4,a4,1
 1180              	.LVL118:
  50:src/../h/../h/buddyAllocator.hpp ****         while(num>1){
 1181              		.loc 4 50 9
 1182 078c 6FF01FFF 		j	.L65
 1183              	.L64:
  53:src/../h/../h/buddyAllocator.hpp ****         }
  54:src/../h/../h/buddyAllocator.hpp ****         return deg;
 1184              		.loc 4 54 9 is_stmt 1
 1185              	.LVL119:
 1186              	.LBE60:
 1187              	.LBE59:
  87:src/slabAllocator.cpp ****     if(level < CACHE_LOWER_BOUND || level > CACHE_UPPER_BOUND)
 1188              		.loc 1 87 5
  87:src/slabAllocator.cpp ****     if(level < CACHE_LOWER_BOUND || level > CACHE_UPPER_BOUND)
 1189              		.loc 1 87 34 is_stmt 0
 1190 0790 1307B7FF 		addi	a4,a4,-5
 1191              	.LVL120:
  87:src/slabAllocator.cpp ****     if(level < CACHE_LOWER_BOUND || level > CACHE_UPPER_BOUND)
 1192              		.loc 1 87 5
 1193 0794 9307C000 		li	a5,12
 1194 0798 63E0E704 		bgtu	a4,a5,.L67
  85:src/slabAllocator.cpp **** void* SlabAllocator::allocateBuffer(size_t size) {
 1195              		.loc 1 85 50
 1196 079c 130101FF 		addi	sp,sp,-16
 1197              		.cfi_def_cfa_offset 16
 1198 07a0 23341100 		sd	ra,8(sp)
 1199 07a4 23308100 		sd	s0,0(sp)
 1200              		.cfi_offset 1, -8
 1201              		.cfi_offset 8, -16
GAS LISTING /tmp/cchWk8xb.s 			page 33


 1202 07a8 13040101 		addi	s0,sp,16
 1203              		.cfi_def_cfa 8, 0
  90:src/slabAllocator.cpp ****         level -= CACHE_LOWER_BOUND;
 1204              		.loc 1 90 9 is_stmt 1
 1205              	.LVL121:
  91:src/slabAllocator.cpp ****     return SlabAllocator::allocateObject(sizeN[level]);
 1206              		.loc 1 91 5
  91:src/slabAllocator.cpp ****     return SlabAllocator::allocateObject(sizeN[level]);
 1207              		.loc 1 91 41 is_stmt 0
 1208 07ac 13173700 		slli	a4,a4,3
 1209              	.LVL122:
 1210 07b0 97070000 		lla	a5,.LANCHOR0
 1210      93870700 
 1211 07b8 3387E700 		add	a4,a5,a4
 1212 07bc 03350700 		ld	a0,0(a4)
 1213 07c0 97000000 		call	_ZN13SlabAllocator14allocateObjectEP5Cache
 1213      E7800000 
 1214              	.LVL123:
  92:src/slabAllocator.cpp **** }
 1215              		.loc 1 92 1
 1216 07c8 83308100 		ld	ra,8(sp)
 1217              		.cfi_restore 1
 1218 07cc 03340100 		ld	s0,0(sp)
 1219              		.cfi_restore 8
 1220              		.cfi_def_cfa 2, 16
 1221 07d0 13010101 		addi	sp,sp,16
 1222              		.cfi_def_cfa_offset 0
 1223 07d4 67800000 		jr	ra
 1224              	.LVL124:
 1225              	.L67:
  88:src/slabAllocator.cpp ****         return nullptr;
 1226              		.loc 1 88 16
 1227 07d8 13050000 		li	a0,0
  92:src/slabAllocator.cpp **** }
 1228              		.loc 1 92 1
 1229 07dc 67800000 		ret
 1230              		.cfi_endproc
 1231              	.LFE14:
 1233              		.align	2
 1234              		.globl	_ZN13SlabAllocator11createCacheEPKcmPFvPvES4_
 1236              	_ZN13SlabAllocator11createCacheEPKcmPFvPvES4_:
 1237              	.LFB18:
 132:src/slabAllocator.cpp **** Cache* SlabAllocator::createCache(const char *name, size_t size, void (*ctor)(void *), void (*dtor)
 1238              		.loc 1 132 110 is_stmt 1
 1239              		.cfi_startproc
 1240              	.LVL125:
 1241 07e0 130101FC 		addi	sp,sp,-64
 1242              		.cfi_def_cfa_offset 64
 1243 07e4 233C1102 		sd	ra,56(sp)
 1244 07e8 23388102 		sd	s0,48(sp)
 1245 07ec 23349102 		sd	s1,40(sp)
 1246 07f0 23302103 		sd	s2,32(sp)
 1247 07f4 233C3101 		sd	s3,24(sp)
 1248 07f8 23384101 		sd	s4,16(sp)
 1249 07fc 23345101 		sd	s5,8(sp)
 1250              		.cfi_offset 1, -8
 1251              		.cfi_offset 8, -16
GAS LISTING /tmp/cchWk8xb.s 			page 34


 1252              		.cfi_offset 9, -24
 1253              		.cfi_offset 18, -32
 1254              		.cfi_offset 19, -40
 1255              		.cfi_offset 20, -48
 1256              		.cfi_offset 21, -56
 1257 0800 13040104 		addi	s0,sp,64
 1258              		.cfi_def_cfa 8, 0
 1259 0804 13090500 		mv	s2,a0
 1260 0808 93890500 		mv	s3,a1
 1261 080c 930A0600 		mv	s5,a2
 1262 0810 138A0600 		mv	s4,a3
 133:src/slabAllocator.cpp ****     Cache* ret = (Cache*)SlabAllocator::allocateObject(SlabAllocator::cache);
 1263              		.loc 1 133 5
 133:src/slabAllocator.cpp ****     Cache* ret = (Cache*)SlabAllocator::allocateObject(SlabAllocator::cache);
 1264              		.loc 1 133 55 is_stmt 0
 1265 0814 17050000 		ld	a0,.LANCHOR0+104
 1265      03350500 
 1266              	.LVL126:
 1267 081c 97000000 		call	_ZN13SlabAllocator14allocateObjectEP5Cache
 1267      E7800000 
 1268              	.LVL127:
 1269 0824 93040500 		mv	s1,a0
 1270              	.LVL128:
 134:src/slabAllocator.cpp ****     if(ret == nullptr)
 1271              		.loc 1 134 5 is_stmt 1
 1272 0828 630A0502 		beqz	a0,.L72
 136:src/slabAllocator.cpp ****     ret->ctor = ctor;
 1273              		.loc 1 136 5
 136:src/slabAllocator.cpp ****     ret->ctor = ctor;
 1274              		.loc 1 136 15 is_stmt 0
 1275 082c 23385505 		sd	s5,80(a0)
 137:src/slabAllocator.cpp ****     ret->dtor = dtor;
 1276              		.loc 1 137 5 is_stmt 1
 137:src/slabAllocator.cpp ****     ret->dtor = dtor;
 1277              		.loc 1 137 15 is_stmt 0
 1278 0830 233C4505 		sd	s4,88(a0)
 138:src/slabAllocator.cpp ****     ret->emptyHead = ret->partialHead = ret->fullHead = nullptr;
 1279              		.loc 1 138 5 is_stmt 1
 138:src/slabAllocator.cpp ****     ret->emptyHead = ret->partialHead = ret->fullHead = nullptr;
 1280              		.loc 1 138 55 is_stmt 0
 1281 0834 23380506 		sd	zero,112(a0)
 138:src/slabAllocator.cpp ****     ret->emptyHead = ret->partialHead = ret->fullHead = nullptr;
 1282              		.loc 1 138 39
 1283 0838 23340506 		sd	zero,104(a0)
 138:src/slabAllocator.cpp ****     ret->emptyHead = ret->partialHead = ret->fullHead = nullptr;
 1284              		.loc 1 138 20
 1285 083c 23300506 		sd	zero,96(a0)
 139:src/slabAllocator.cpp ****     ret->objectSize = size;
 1286              		.loc 1 139 5 is_stmt 1
 139:src/slabAllocator.cpp ****     ret->objectSize = size;
 1287              		.loc 1 139 21 is_stmt 0
 1288 0840 23303505 		sd	s3,64(a0)
 140:src/slabAllocator.cpp ****     ret->slabSize = DEFAULT_SLAB_SIZE;
 1289              		.loc 1 140 5 is_stmt 1
 140:src/slabAllocator.cpp ****     ret->slabSize = DEFAULT_SLAB_SIZE;
 1290              		.loc 1 140 19 is_stmt 0
 1291 0844 93072000 		li	a5,2
GAS LISTING /tmp/cchWk8xb.s 			page 35


 1292 0848 2334F504 		sd	a5,72(a0)
 141:src/slabAllocator.cpp ****     strcpy(name, ret->name);
 1293              		.loc 1 141 5 is_stmt 1
 141:src/slabAllocator.cpp ****     strcpy(name, ret->name);
 1294              		.loc 1 141 11 is_stmt 0
 1295 084c 93050500 		mv	a1,a0
 1296 0850 13050900 		mv	a0,s2
 1297 0854 97000000 		call	_Z6strcpyPKcPc@plt
 1297      E7800000 
 1298              	.LVL129:
 142:src/slabAllocator.cpp ****     return ret;
 1299              		.loc 1 142 5 is_stmt 1
 1300              	.L72:
 143:src/slabAllocator.cpp **** }
 1301              		.loc 1 143 1 is_stmt 0
 1302 085c 13850400 		mv	a0,s1
 1303 0860 83308103 		ld	ra,56(sp)
 1304              		.cfi_restore 1
 1305 0864 03340103 		ld	s0,48(sp)
 1306              		.cfi_restore 8
 1307              		.cfi_def_cfa 2, 64
 1308 0868 83348102 		ld	s1,40(sp)
 1309              		.cfi_restore 9
 1310              	.LVL130:
 1311 086c 03390102 		ld	s2,32(sp)
 1312              		.cfi_restore 18
 1313              	.LVL131:
 1314 0870 83398101 		ld	s3,24(sp)
 1315              		.cfi_restore 19
 1316              	.LVL132:
 1317 0874 033A0101 		ld	s4,16(sp)
 1318              		.cfi_restore 20
 1319              	.LVL133:
 1320 0878 833A8100 		ld	s5,8(sp)
 1321              		.cfi_restore 21
 1322              	.LVL134:
 1323 087c 13010104 		addi	sp,sp,64
 1324              		.cfi_def_cfa_offset 0
 1325 0880 67800000 		jr	ra
 1326              		.cfi_endproc
 1327              	.LFE18:
 1329              		.section	.rodata.str1.8
 1330 0154 00000000 		.align	3
 1331              	.LC18:
 1332 0158 4D61696E 		.string	"Main Cache"
 1332      20436163 
 1332      686500
 1333              		.text
 1334              		.align	2
 1335              		.globl	_ZN13SlabAllocator10initializeEPvm
 1337              	_ZN13SlabAllocator10initializeEPvm:
 1338              	.LFB10:
  12:src/slabAllocator.cpp **** void SlabAllocator::initialize(void* space, uint64 blockNum) {
 1339              		.loc 1 12 62 is_stmt 1
 1340              		.cfi_startproc
 1341              	.LVL135:
 1342 0884 130101FE 		addi	sp,sp,-32
GAS LISTING /tmp/cchWk8xb.s 			page 36


 1343              		.cfi_def_cfa_offset 32
 1344 0888 233C1100 		sd	ra,24(sp)
 1345 088c 23388100 		sd	s0,16(sp)
 1346 0890 23349100 		sd	s1,8(sp)
 1347 0894 23302101 		sd	s2,0(sp)
 1348              		.cfi_offset 1, -8
 1349              		.cfi_offset 8, -16
 1350              		.cfi_offset 9, -24
 1351              		.cfi_offset 18, -32
 1352 0898 13040102 		addi	s0,sp,32
 1353              		.cfi_def_cfa 8, 0
 1354 089c 13090500 		mv	s2,a0
 1355 08a0 93840500 		mv	s1,a1
  13:src/slabAllocator.cpp ****     Buddy::initialize(space, blockNum);
 1356              		.loc 1 13 5
  13:src/slabAllocator.cpp ****     Buddy::initialize(space, blockNum);
 1357              		.loc 1 13 22 is_stmt 0
 1358 08a4 97000000 		call	_ZN5Buddy10initializeEPvm@plt
 1358      E7800000 
 1359              	.LVL136:
  14:src/slabAllocator.cpp ****     startAddr = space;
 1360              		.loc 1 14 5 is_stmt 1
  14:src/slabAllocator.cpp ****     startAddr = space;
 1361              		.loc 1 14 15 is_stmt 0
 1362 08ac 97070000 		lla	a5,.LANCHOR0
 1362      93870700 
 1363 08b4 23B82707 		sd	s2,112(a5)
  15:src/slabAllocator.cpp ****     blocksResponsibleFor = blockNum;
 1364              		.loc 1 15 5 is_stmt 1
  15:src/slabAllocator.cpp ****     blocksResponsibleFor = blockNum;
 1365              		.loc 1 15 26 is_stmt 0
 1366 08b8 23BC9706 		sd	s1,120(a5)
  16:src/slabAllocator.cpp ****     cache = (Cache*)SLAB_META_ADDR_CONST;
 1367              		.loc 1 16 5 is_stmt 1
  16:src/slabAllocator.cpp ****     cache = (Cache*)SLAB_META_ADDR_CONST;
 1368              		.loc 1 16 21 is_stmt 0
 1369 08bc 17070000 		la	a4,HEAP_START_ADDR
 1369      03370700 
 1370 08c4 83350700 		ld	a1,0(a4)
 1371 08c8 93D5C500 		srli	a1,a1,12
 1372 08cc 93851500 		addi	a1,a1,1
 1373 08d0 9395C500 		slli	a1,a1,12
  16:src/slabAllocator.cpp ****     cache = (Cache*)SLAB_META_ADDR_CONST;
 1374              		.loc 1 16 11
 1375 08d4 23B4B706 		sd	a1,104(a5)
  17:src/slabAllocator.cpp ****     cache->ctor = nullptr;
 1376              		.loc 1 17 5 is_stmt 1
  17:src/slabAllocator.cpp ****     cache->ctor = nullptr;
 1377              		.loc 1 17 17 is_stmt 0
 1378 08d8 23B80504 		sd	zero,80(a1)
  18:src/slabAllocator.cpp ****     cache->dtor = nullptr;
 1379              		.loc 1 18 5 is_stmt 1
  18:src/slabAllocator.cpp ****     cache->dtor = nullptr;
 1380              		.loc 1 18 17 is_stmt 0
 1381 08dc 23BC0504 		sd	zero,88(a1)
  19:src/slabAllocator.cpp ****     cache->emptyHead = nullptr;
 1382              		.loc 1 19 5 is_stmt 1
GAS LISTING /tmp/cchWk8xb.s 			page 37


  19:src/slabAllocator.cpp ****     cache->emptyHead = nullptr;
 1383              		.loc 1 19 22 is_stmt 0
 1384 08e0 23B00506 		sd	zero,96(a1)
  20:src/slabAllocator.cpp ****     cache->partialHead = nullptr;
 1385              		.loc 1 20 5 is_stmt 1
  20:src/slabAllocator.cpp ****     cache->partialHead = nullptr;
 1386              		.loc 1 20 24 is_stmt 0
 1387 08e4 23B40506 		sd	zero,104(a1)
  21:src/slabAllocator.cpp ****     cache->fullHead = nullptr;
 1388              		.loc 1 21 5 is_stmt 1
  21:src/slabAllocator.cpp ****     cache->fullHead = nullptr;
 1389              		.loc 1 21 21 is_stmt 0
 1390 08e8 23B80506 		sd	zero,112(a1)
  22:src/slabAllocator.cpp ****     cache->objectSize = sizeof(Cache);
 1391              		.loc 1 22 5 is_stmt 1
  22:src/slabAllocator.cpp ****     cache->objectSize = sizeof(Cache);
 1392              		.loc 1 22 23 is_stmt 0
 1393 08ec 93078007 		li	a5,120
 1394 08f0 23B0F504 		sd	a5,64(a1)
  23:src/slabAllocator.cpp ****     cache->slabSize = DEFAULT_SLAB_SIZE;
 1395              		.loc 1 23 5 is_stmt 1
  23:src/slabAllocator.cpp ****     cache->slabSize = DEFAULT_SLAB_SIZE;
 1396              		.loc 1 23 21 is_stmt 0
 1397 08f4 93072000 		li	a5,2
 1398 08f8 23B4F504 		sd	a5,72(a1)
  24:src/slabAllocator.cpp ****     strcpy("Main Cache", cache->name);
 1399              		.loc 1 24 5 is_stmt 1
  24:src/slabAllocator.cpp ****     strcpy("Main Cache", cache->name);
 1400              		.loc 1 24 11 is_stmt 0
 1401 08fc 17050000 		lla	a0,.LC18
 1401      13050500 
 1402 0904 97000000 		call	_Z6strcpyPKcPc@plt
 1402      E7800000 
 1403              	.LVL137:
  26:src/slabAllocator.cpp ****     for(int i=0;i<BUCKET_SIZE;i++){
 1404              		.loc 1 26 5 is_stmt 1
 1405              	.LBB61:
  26:src/slabAllocator.cpp ****     for(int i=0;i<BUCKET_SIZE;i++){
 1406              		.loc 1 26 13 is_stmt 0
 1407 090c 93040000 		li	s1,0
 1408              	.LVL138:
 1409 0910 6F004004 		j	.L77
 1410              	.LVL139:
 1411              	.L79:
  27:src/slabAllocator.cpp ****         sizeN[i] = SlabAllocator::createCache(names[i], 2<<i, nullptr, nullptr);
 1412              		.loc 1 27 9 is_stmt 1 discriminator 2
  27:src/slabAllocator.cpp ****         sizeN[i] = SlabAllocator::createCache(names[i], 2<<i, nullptr, nullptr);
 1413              		.loc 1 27 46 is_stmt 0 discriminator 2
 1414 0914 13993400 		slli	s2,s1,3
 1415 0918 97070000 		lla	a5,.LANCHOR1
 1415      93870700 
 1416 0920 B3872701 		add	a5,a5,s2
 1417 0924 93060000 		li	a3,0
 1418 0928 13060000 		li	a2,0
 1419 092c 93052000 		li	a1,2
 1420 0930 BB959500 		sllw	a1,a1,s1
 1421 0934 03B50700 		ld	a0,0(a5)
GAS LISTING /tmp/cchWk8xb.s 			page 38


 1422 0938 97000000 		call	_ZN13SlabAllocator11createCacheEPKcmPFvPvES4_
 1422      E7800000 
 1423              	.LVL140:
  27:src/slabAllocator.cpp ****         sizeN[i] = SlabAllocator::createCache(names[i], 2<<i, nullptr, nullptr);
 1424              		.loc 1 27 18 discriminator 2
 1425 0940 97070000 		lla	a5,.LANCHOR0
 1425      93870700 
 1426 0948 B3872701 		add	a5,a5,s2
 1427 094c 23B0A700 		sd	a0,0(a5)
  26:src/slabAllocator.cpp ****     for(int i=0;i<BUCKET_SIZE;i++){
 1428              		.loc 1 26 5 is_stmt 1 discriminator 2
 1429 0950 9B841400 		addiw	s1,s1,1
 1430              	.LVL141:
 1431              	.L77:
  26:src/slabAllocator.cpp ****     for(int i=0;i<BUCKET_SIZE;i++){
 1432              		.loc 1 26 18 discriminator 3
 1433 0954 9307C000 		li	a5,12
 1434 0958 E3DE97FA 		ble	s1,a5,.L79
 1435              	.LBE61:
  29:src/slabAllocator.cpp **** }
 1436              		.loc 1 29 1 is_stmt 0
 1437 095c 83308101 		ld	ra,24(sp)
 1438              		.cfi_restore 1
 1439 0960 03340101 		ld	s0,16(sp)
 1440              		.cfi_restore 8
 1441              		.cfi_def_cfa 2, 32
 1442 0964 83348100 		ld	s1,8(sp)
 1443              		.cfi_restore 9
 1444              	.LVL142:
 1445 0968 03390100 		ld	s2,0(sp)
 1446              		.cfi_restore 18
 1447 096c 13010102 		addi	sp,sp,32
 1448              		.cfi_def_cfa_offset 0
 1449 0970 67800000 		jr	ra
 1450              		.cfi_endproc
 1451              	.LFE10:
 1453              		.align	2
 1454              		.globl	_ZN13SlabAllocator8freeSlotEP4Slabm
 1456              	_ZN13SlabAllocator8freeSlotEP4Slabm:
 1457              	.LFB15:
  94:src/slabAllocator.cpp **** void SlabAllocator::freeSlot(Slab *slab, uint64 index) {
 1458              		.loc 1 94 56 is_stmt 1
 1459              		.cfi_startproc
 1460              	.LVL143:
  95:src/slabAllocator.cpp ****     if(slab->allocated[index/8] & (1<<(7 - index%8))) {
 1461              		.loc 1 95 5
 1462              	.LBB62:
  95:src/slabAllocator.cpp ****     if(slab->allocated[index/8] & (1<<(7 - index%8))) {
 1463              		.loc 1 95 14 is_stmt 0
 1464 0974 83370502 		ld	a5,32(a0)
  95:src/slabAllocator.cpp ****     if(slab->allocated[index/8] & (1<<(7 - index%8))) {
 1465              		.loc 1 95 29
 1466 0978 13D73500 		srli	a4,a1,3
  95:src/slabAllocator.cpp ****     if(slab->allocated[index/8] & (1<<(7 - index%8))) {
 1467              		.loc 1 95 31
 1468 097c B387E700 		add	a5,a5,a4
 1469 0980 83C60700 		lbu	a3,0(a5)
GAS LISTING /tmp/cchWk8xb.s 			page 39


  95:src/slabAllocator.cpp ****     if(slab->allocated[index/8] & (1<<(7 - index%8))) {
 1470              		.loc 1 95 42
 1471 0984 93C5F5FF 		not	a1,a1
 1472              	.LVL144:
 1473 0988 93F57500 		andi	a1,a1,7
 1474              	.LVL145:
  95:src/slabAllocator.cpp ****     if(slab->allocated[index/8] & (1<<(7 - index%8))) {
 1475              		.loc 1 95 53
 1476 098c 3BD7B640 		sraw	a4,a3,a1
 1477 0990 13771700 		andi	a4,a4,1
  95:src/slabAllocator.cpp ****     if(slab->allocated[index/8] & (1<<(7 - index%8))) {
 1478              		.loc 1 95 5
 1479 0994 6302070C 		beqz	a4,.L88
 1480              	.LBE62:
  94:src/slabAllocator.cpp **** void SlabAllocator::freeSlot(Slab *slab, uint64 index) {
 1481              		.loc 1 94 56
 1482 0998 130101FE 		addi	sp,sp,-32
 1483              		.cfi_def_cfa_offset 32
 1484 099c 233C1100 		sd	ra,24(sp)
 1485 09a0 23388100 		sd	s0,16(sp)
 1486 09a4 23349100 		sd	s1,8(sp)
 1487              		.cfi_offset 1, -8
 1488              		.cfi_offset 8, -16
 1489              		.cfi_offset 9, -24
 1490 09a8 13040102 		addi	s0,sp,32
 1491              		.cfi_def_cfa 8, 0
 1492 09ac 93040500 		mv	s1,a0
 1493              	.LBB70:
 1494              	.LBB63:
  96:src/slabAllocator.cpp ****         slab->allocated[index/8] &= ~(1<<(7 - index%8));
 1495              		.loc 1 96 9 is_stmt 1
  96:src/slabAllocator.cpp ****         slab->allocated[index/8] &= ~(1<<(7 - index%8));
 1496              		.loc 1 96 40 is_stmt 0
 1497 09b0 13071000 		li	a4,1
 1498 09b4 BB15B700 		sllw	a1,a4,a1
  96:src/slabAllocator.cpp ****         slab->allocated[index/8] &= ~(1<<(7 - index%8));
 1499              		.loc 1 96 34
 1500 09b8 93C5F5FF 		not	a1,a1
 1501 09bc B3F5D500 		and	a1,a1,a3
 1502 09c0 2380B700 		sb	a1,0(a5)
  97:src/slabAllocator.cpp ****         Slab *&headFrom = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 1503              		.loc 1 97 9 is_stmt 1
 1504              	.LVL146:
 1505              	.LBB64:
 1506              	.LBB65:
  13:src/../h/../h/../h/slab_t.hpp ****     inline bool isEmpty(){return numOfFreeSlots == totalNumOfSlots;}
 1507              		.loc 2 13 26
  13:src/../h/../h/../h/slab_t.hpp ****     inline bool isEmpty(){return numOfFreeSlots == totalNumOfSlots;}
 1508              		.loc 2 13 33 is_stmt 0
 1509 09c4 83370501 		ld	a5,16(a0)
 1510              	.LVL147:
 1511              	.LBE65:
 1512              	.LBE64:
  97:src/slabAllocator.cpp ****         Slab *&headFrom = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 1513              		.loc 1 97 83
 1514 09c8 639A0704 		bnez	a5,.L82
  97:src/slabAllocator.cpp ****         Slab *&headFrom = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
GAS LISTING /tmp/cchWk8xb.s 			page 40


 1515              		.loc 1 97 50 discriminator 1
 1516 09cc 03350503 		ld	a0,48(a0)
 1517              	.LVL148:
  97:src/slabAllocator.cpp ****         Slab *&headFrom = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 1518              		.loc 1 97 83 discriminator 1
 1519 09d0 13050507 		addi	a0,a0,112
 1520              	.L83:
 1521              	.LVL149:
  98:src/slabAllocator.cpp ****         slab->numOfFreeSlots++;
 1522              		.loc 1 98 9 is_stmt 1 discriminator 4
  98:src/slabAllocator.cpp ****         slab->numOfFreeSlots++;
 1523              		.loc 1 98 29 is_stmt 0 discriminator 4
 1524 09d4 93871700 		addi	a5,a5,1
 1525 09d8 23B8F400 		sd	a5,16(s1)
  99:src/slabAllocator.cpp ****         Slab *&headTo = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead;
 1526              		.loc 1 99 9 is_stmt 1 discriminator 4
 1527              	.LVL150:
 1528              	.LBB66:
 1529              	.LBB67:
 1530              		.loc 2 14 27 discriminator 4
 1531              		.loc 2 14 52 is_stmt 0 discriminator 4
 1532 09dc 03B78401 		ld	a4,24(s1)
 1533              	.LVL151:
 1534              	.LBE67:
 1535              	.LBE66:
  99:src/slabAllocator.cpp ****         Slab *&headTo = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead;
 1536              		.loc 1 99 83 discriminator 4
 1537 09e0 6384E704 		beq	a5,a4,.L91
  99:src/slabAllocator.cpp ****         Slab *&headTo = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead;
 1538              		.loc 1 99 75 discriminator 2
 1539 09e4 83B50403 		ld	a1,48(s1)
  99:src/slabAllocator.cpp ****         Slab *&headTo = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead;
 1540              		.loc 1 99 83 discriminator 2
 1541 09e8 93858506 		addi	a1,a1,104
 1542              	.L85:
 1543              	.LVL152:
 101:src/slabAllocator.cpp ****         if(slab->isEmpty()) {
 1544              		.loc 1 101 9 is_stmt 1 discriminator 4
 1545              	.LBE63:
 1546              	.LBE70:
 1547              		.loc 2 14 27 discriminator 4
 1548              	.LBB71:
 1549              	.LBB68:
 101:src/slabAllocator.cpp ****         if(slab->isEmpty()) {
 1550              		.loc 1 101 9 is_stmt 0 discriminator 4
 1551 09ec 6384E704 		beq	a5,a4,.L92
 106:src/slabAllocator.cpp ****             if (headTo != headFrom)
 1552              		.loc 1 106 13 is_stmt 1
 106:src/slabAllocator.cpp ****             if (headTo != headFrom)
 1553              		.loc 1 106 17 is_stmt 0
 1554 09f0 03B70500 		ld	a4,0(a1)
 106:src/slabAllocator.cpp ****             if (headTo != headFrom)
 1555              		.loc 1 106 27
 1556 09f4 83370500 		ld	a5,0(a0)
 106:src/slabAllocator.cpp ****             if (headTo != headFrom)
 1557              		.loc 1 106 13
 1558 09f8 6308F700 		beq	a4,a5,.L80
GAS LISTING /tmp/cchWk8xb.s 			page 41


 107:src/slabAllocator.cpp ****                 SlabAllocator::move(headFrom, headTo, slab);
 1559              		.loc 1 107 17 is_stmt 1
 107:src/slabAllocator.cpp ****                 SlabAllocator::move(headFrom, headTo, slab);
 1560              		.loc 1 107 36 is_stmt 0
 1561 09fc 13860400 		mv	a2,s1
 1562 0a00 97000000 		call	_ZN13SlabAllocator4moveERP4SlabS2_S1_
 1562      E7800000 
 1563              	.LVL153:
 1564              	.L80:
 1565              	.LBE68:
 1566              	.LBE71:
 109:src/slabAllocator.cpp **** }
 1567              		.loc 1 109 1
 1568 0a08 83308101 		ld	ra,24(sp)
 1569              		.cfi_remember_state
 1570              		.cfi_restore 1
 1571 0a0c 03340101 		ld	s0,16(sp)
 1572              		.cfi_restore 8
 1573              		.cfi_def_cfa 2, 32
 1574 0a10 83348100 		ld	s1,8(sp)
 1575              		.cfi_restore 9
 1576              	.LVL154:
 1577 0a14 13010102 		addi	sp,sp,32
 1578              		.cfi_def_cfa_offset 0
 1579 0a18 67800000 		jr	ra
 1580              	.LVL155:
 1581              	.L82:
 1582              		.cfi_restore_state
 1583              	.LBB72:
 1584              	.LBB69:
  97:src/slabAllocator.cpp ****         Slab *&headFrom = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 1585              		.loc 1 97 75 discriminator 2
 1586 0a1c 03350503 		ld	a0,48(a0)
  97:src/slabAllocator.cpp ****         Slab *&headFrom = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 1587              		.loc 1 97 83 discriminator 2
 1588 0a20 13058506 		addi	a0,a0,104
 1589 0a24 6FF01FFB 		j	.L83
 1590              	.LVL156:
 1591              	.L91:
  99:src/slabAllocator.cpp ****         Slab *&headTo = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead;
 1592              		.loc 1 99 49 discriminator 1
 1593 0a28 83B50403 		ld	a1,48(s1)
  99:src/slabAllocator.cpp ****         Slab *&headTo = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead;
 1594              		.loc 1 99 83 discriminator 1
 1595 0a2c 93850506 		addi	a1,a1,96
 1596 0a30 6FF0DFFB 		j	.L85
 1597              	.LVL157:
 1598              	.L92:
 102:src/slabAllocator.cpp ****             SlabAllocator::removeFromList(headFrom, slab);
 1599              		.loc 1 102 13 is_stmt 1
 102:src/slabAllocator.cpp ****             SlabAllocator::removeFromList(headFrom, slab);
 1600              		.loc 1 102 42 is_stmt 0
 1601 0a34 93850400 		mv	a1,s1
 1602              	.LVL158:
 1603 0a38 97000000 		call	_ZN13SlabAllocator14removeFromListERP4SlabS1_
 1603      E7800000 
 1604              	.LVL159:
GAS LISTING /tmp/cchWk8xb.s 			page 42


 103:src/slabAllocator.cpp ****             Buddy::free(slab, slab->parent->slabSize);
 1605              		.loc 1 103 13 is_stmt 1
 103:src/slabAllocator.cpp ****             Buddy::free(slab, slab->parent->slabSize);
 1606              		.loc 1 103 37 is_stmt 0
 1607 0a40 83B70403 		ld	a5,48(s1)
 103:src/slabAllocator.cpp ****             Buddy::free(slab, slab->parent->slabSize);
 1608              		.loc 1 103 24
 1609 0a44 83B58704 		ld	a1,72(a5)
 1610 0a48 13850400 		mv	a0,s1
 1611 0a4c 97000000 		call	_ZN5Buddy4freeEPvm@plt
 1611      E7800000 
 1612              	.LVL160:
 1613 0a54 6FF05FFB 		j	.L80
 1614              	.LVL161:
 1615              	.L88:
 1616              		.cfi_def_cfa_register 2
 1617              		.cfi_restore 1
 1618              		.cfi_restore 8
 1619              		.cfi_restore 9
 1620 0a58 67800000 		ret
 1621              	.LBE69:
 1622              	.LBE72:
 1623              		.cfi_endproc
 1624              	.LFE15:
 1626              		.align	2
 1627              		.globl	_ZN13SlabAllocator10freeObjectEP5CachePKv
 1629              	_ZN13SlabAllocator10freeObjectEP5CachePKv:
 1630              	.LFB16:
 111:src/slabAllocator.cpp **** bool SlabAllocator::freeObject(Cache* cache, const void *addr) {
 1631              		.loc 1 111 64 is_stmt 1
 1632              		.cfi_startproc
 1633              	.LVL162:
 1634 0a5c 130101FE 		addi	sp,sp,-32
 1635              		.cfi_def_cfa_offset 32
 1636 0a60 233C1100 		sd	ra,24(sp)
 1637 0a64 23388100 		sd	s0,16(sp)
 1638 0a68 23349100 		sd	s1,8(sp)
 1639 0a6c 23302101 		sd	s2,0(sp)
 1640              		.cfi_offset 1, -8
 1641              		.cfi_offset 8, -16
 1642              		.cfi_offset 9, -24
 1643              		.cfi_offset 18, -32
 1644 0a70 13040102 		addi	s0,sp,32
 1645              		.cfi_def_cfa 8, 0
 1646 0a74 13090500 		mv	s2,a0
 1647 0a78 93840500 		mv	s1,a1
 112:src/slabAllocator.cpp ****     if(cache->dtor)
 1648              		.loc 1 112 5
 112:src/slabAllocator.cpp ****     if(cache->dtor)
 1649              		.loc 1 112 15 is_stmt 0
 1650 0a7c 83378505 		ld	a5,88(a0)
 112:src/slabAllocator.cpp ****     if(cache->dtor)
 1651              		.loc 1 112 5
 1652 0a80 63860700 		beqz	a5,.L94
 113:src/slabAllocator.cpp ****         cache->dtor((void*)addr);
 1653              		.loc 1 113 9 is_stmt 1
 113:src/slabAllocator.cpp ****         cache->dtor((void*)addr);
GAS LISTING /tmp/cchWk8xb.s 			page 43


 1654              		.loc 1 113 20 is_stmt 0
 1655 0a84 13850500 		mv	a0,a1
 1656              	.LVL163:
 1657 0a88 E7800700 		jalr	a5
 1658              	.LVL164:
 1659              	.L94:
 114:src/slabAllocator.cpp ****     if(cache->ctor)
 1660              		.loc 1 114 5 is_stmt 1
 114:src/slabAllocator.cpp ****     if(cache->ctor)
 1661              		.loc 1 114 15 is_stmt 0
 1662 0a8c 83370905 		ld	a5,80(s2)
 114:src/slabAllocator.cpp ****     if(cache->ctor)
 1663              		.loc 1 114 5
 1664 0a90 63860700 		beqz	a5,.L95
 115:src/slabAllocator.cpp ****         cache->ctor((void*)addr);
 1665              		.loc 1 115 9 is_stmt 1
 115:src/slabAllocator.cpp ****         cache->ctor((void*)addr);
 1666              		.loc 1 115 20 is_stmt 0
 1667 0a94 13850400 		mv	a0,s1
 1668 0a98 E7800700 		jalr	a5
 1669              	.LVL165:
 1670              	.L95:
 117:src/slabAllocator.cpp ****     bool deleted = SlabAllocator::freeFromList(cache->fullHead, addr);
 1671              		.loc 1 117 5 is_stmt 1
 117:src/slabAllocator.cpp ****     bool deleted = SlabAllocator::freeFromList(cache->fullHead, addr);
 1672              		.loc 1 117 47 is_stmt 0
 1673 0a9c 03350907 		ld	a0,112(s2)
 1674              	.LVL166:
 1675 0aa0 6F008000 		j	.L98
 1676              	.LVL167:
 1677              	.L97:
 1678              	.LBB87:
 1679              	.LBB88:
 1680              	.LBB89:
  59:src/../h/slabAllocator.hpp ****         }
  60:src/../h/slabAllocator.hpp ****         return nullptr;
  61:src/../h/slabAllocator.hpp ****     }
  62:src/../h/slabAllocator.hpp **** 
  63:src/../h/slabAllocator.hpp ****     static inline bool freeFromList(Slab* head,const void* addr){
  64:src/../h/slabAllocator.hpp ****         while(head){
  65:src/../h/slabAllocator.hpp ****             uint64 upperBound = SlabAllocator::getUpperBound(head);
  66:src/../h/slabAllocator.hpp ****             uint64 lowerBound = SlabAllocator::getLowerBound(head);
  67:src/../h/slabAllocator.hpp ****             if((uint64)addr < upperBound && (uint64)addr >= lowerBound){
  68:src/../h/slabAllocator.hpp ****                 uint64 index = ((uint64)addr - lowerBound) / head->parent->objectSize;
  69:src/../h/slabAllocator.hpp ****                 freeSlot(head, index);
  70:src/../h/slabAllocator.hpp ****                 return true;
  71:src/../h/slabAllocator.hpp ****             }
  72:src/../h/slabAllocator.hpp ****             head = head->next;
 1681              		.loc 3 72 13 is_stmt 1
 1682              		.loc 3 72 18 is_stmt 0
 1683 0aa4 03358500 		ld	a0,8(a0)
 1684              	.LVL168:
 1685              	.L98:
 1686              	.LBE89:
  64:src/../h/slabAllocator.hpp ****             uint64 upperBound = SlabAllocator::getUpperBound(head);
 1687              		.loc 3 64 9 is_stmt 1
  64:src/../h/slabAllocator.hpp ****             uint64 upperBound = SlabAllocator::getUpperBound(head);
GAS LISTING /tmp/cchWk8xb.s 			page 44


 1688              		.loc 3 64 15
 1689 0aa8 630E0502 		beqz	a0,.L103
 1690              	.LBB94:
  65:src/../h/slabAllocator.hpp ****             uint64 lowerBound = SlabAllocator::getLowerBound(head);
 1691              		.loc 3 65 13
 1692              	.LVL169:
 1693              	.LBB90:
 1694              	.LBB91:
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1695              		.loc 3 51 52
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1696              		.loc 3 51 73 is_stmt 0
 1697 0aac 03378502 		ld	a4,40(a0)
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1698              		.loc 3 51 94
 1699 0ab0 83378501 		ld	a5,24(a0)
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1700              		.loc 3 51 116
 1701 0ab4 83360503 		ld	a3,48(a0)
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1702              		.loc 3 51 124
 1703 0ab8 83B50604 		ld	a1,64(a3)
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1704              		.loc 3 51 109
 1705 0abc B387B702 		mul	a5,a5,a1
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1706              		.loc 3 51 124
 1707 0ac0 B307F700 		add	a5,a4,a5
 1708              	.LVL170:
 1709              	.LBE91:
 1710              	.LBE90:
  66:src/../h/slabAllocator.hpp ****             if((uint64)addr < upperBound && (uint64)addr >= lowerBound){
 1711              		.loc 3 66 13 is_stmt 1
 1712              	.LBE94:
 1713              	.LBE88:
 1714              	.LBE87:
  52:src/../h/slabAllocator.hpp **** 
 1715              		.loc 3 52 52
 1716              	.LBB97:
 1717              	.LBB96:
 1718              	.LBB95:
  67:src/../h/slabAllocator.hpp ****                 uint64 index = ((uint64)addr - lowerBound) / head->parent->objectSize;
 1719              		.loc 3 67 13
 1720              	.LBB92:
 1721 0ac4 E3F0F4FE 		bleu	a5,s1,.L97
  67:src/../h/slabAllocator.hpp ****                 uint64 index = ((uint64)addr - lowerBound) / head->parent->objectSize;
 1722              		.loc 3 67 42 is_stmt 0
 1723 0ac8 E3EEE4FC 		bgtu	a4,s1,.L97
 1724              	.LBB93:
  68:src/../h/slabAllocator.hpp ****                 freeSlot(head, index);
 1725              		.loc 3 68 17 is_stmt 1
  68:src/../h/slabAllocator.hpp ****                 freeSlot(head, index);
 1726              		.loc 3 68 46 is_stmt 0
 1727 0acc 3387E440 		sub	a4,s1,a4
 1728              	.LVL171:
  69:src/../h/slabAllocator.hpp ****                 return true;
 1729              		.loc 3 69 17 is_stmt 1
GAS LISTING /tmp/cchWk8xb.s 			page 45


  69:src/../h/slabAllocator.hpp ****                 return true;
 1730              		.loc 3 69 25 is_stmt 0
 1731 0ad0 B355B702 		divu	a1,a4,a1
 1732              	.LVL172:
 1733 0ad4 97000000 		call	_ZN13SlabAllocator8freeSlotEP4Slabm
 1733      E7800000 
 1734              	.LVL173:
  70:src/../h/slabAllocator.hpp ****             }
 1735              		.loc 3 70 17 is_stmt 1
  70:src/../h/slabAllocator.hpp ****             }
 1736              		.loc 3 70 24 is_stmt 0
 1737 0adc 13051000 		li	a0,1
 1738 0ae0 6F008000 		j	.L96
 1739              	.LVL174:
 1740              	.L103:
 1741              	.LBE93:
 1742              	.LBE92:
 1743              	.LBE95:
  73:src/../h/slabAllocator.hpp ****         }
  74:src/../h/slabAllocator.hpp ****         return false;
 1744              		.loc 3 74 16
 1745 0ae4 13050000 		li	a0,0
 1746              	.LVL175:
 1747              	.L96:
 1748              	.LBE96:
 1749              	.LBE97:
 118:src/slabAllocator.cpp ****     if(deleted)
 1750              		.loc 1 118 5 is_stmt 1
 1751 0ae8 630E0500 		beqz	a0,.L105
 1752              	.LVL176:
 1753              	.L99:
 124:src/slabAllocator.cpp **** }
 1754              		.loc 1 124 1 is_stmt 0
 1755 0aec 83308101 		ld	ra,24(sp)
 1756              		.cfi_remember_state
 1757              		.cfi_restore 1
 1758 0af0 03340101 		ld	s0,16(sp)
 1759              		.cfi_restore 8
 1760              		.cfi_def_cfa 2, 32
 1761 0af4 83348100 		ld	s1,8(sp)
 1762              		.cfi_restore 9
 1763              	.LVL177:
 1764 0af8 03390100 		ld	s2,0(sp)
 1765              		.cfi_restore 18
 1766              	.LVL178:
 1767 0afc 13010102 		addi	sp,sp,32
 1768              		.cfi_def_cfa_offset 0
 1769 0b00 67800000 		jr	ra
 1770              	.LVL179:
 1771              	.L105:
 1772              		.cfi_restore_state
 121:src/slabAllocator.cpp ****     deleted = SlabAllocator::freeFromList(cache->partialHead, addr);
 1773              		.loc 1 121 5 is_stmt 1
 121:src/slabAllocator.cpp ****     deleted = SlabAllocator::freeFromList(cache->partialHead, addr);
 1774              		.loc 1 121 42 is_stmt 0
 1775 0b04 83378906 		ld	a5,104(s2)
 1776              	.LVL180:
GAS LISTING /tmp/cchWk8xb.s 			page 46


 1777 0b08 6F008000 		j	.L102
 1778              	.LVL181:
 1779              	.L101:
 1780              	.LBB98:
 1781              	.LBB99:
 1782              	.LBB100:
  72:src/../h/slabAllocator.hpp ****         }
 1783              		.loc 3 72 13 is_stmt 1
  72:src/../h/slabAllocator.hpp ****         }
 1784              		.loc 3 72 18 is_stmt 0
 1785 0b0c 83B78700 		ld	a5,8(a5)
 1786              	.LVL182:
 1787              	.L102:
 1788              	.LBE100:
  64:src/../h/slabAllocator.hpp ****             uint64 upperBound = SlabAllocator::getUpperBound(head);
 1789              		.loc 3 64 9 is_stmt 1
  64:src/../h/slabAllocator.hpp ****             uint64 upperBound = SlabAllocator::getUpperBound(head);
 1790              		.loc 3 64 15
 1791 0b10 E38E07FC 		beqz	a5,.L99
 1792              	.LBB105:
  65:src/../h/slabAllocator.hpp ****             uint64 lowerBound = SlabAllocator::getLowerBound(head);
 1793              		.loc 3 65 13
 1794              	.LVL183:
 1795              	.LBB101:
 1796              	.LBB102:
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1797              		.loc 3 51 52
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1798              		.loc 3 51 73 is_stmt 0
 1799 0b14 83B68702 		ld	a3,40(a5)
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1800              		.loc 3 51 94
 1801 0b18 03B78701 		ld	a4,24(a5)
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1802              		.loc 3 51 116
 1803 0b1c 03B60703 		ld	a2,48(a5)
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1804              		.loc 3 51 124
 1805 0b20 83350604 		ld	a1,64(a2)
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1806              		.loc 3 51 109
 1807 0b24 3307B702 		mul	a4,a4,a1
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1808              		.loc 3 51 124
 1809 0b28 3387E600 		add	a4,a3,a4
 1810              	.LVL184:
 1811              	.LBE102:
 1812              	.LBE101:
  66:src/../h/slabAllocator.hpp ****             if((uint64)addr < upperBound && (uint64)addr >= lowerBound){
 1813              		.loc 3 66 13 is_stmt 1
 1814              	.LBE105:
 1815              	.LBE99:
 1816              	.LBE98:
  52:src/../h/slabAllocator.hpp **** 
 1817              		.loc 3 52 52
 1818              	.LBB108:
 1819              	.LBB107:
GAS LISTING /tmp/cchWk8xb.s 			page 47


 1820              	.LBB106:
  67:src/../h/slabAllocator.hpp ****                 uint64 index = ((uint64)addr - lowerBound) / head->parent->objectSize;
 1821              		.loc 3 67 13
 1822              	.LBB103:
 1823 0b2c E3F0E4FE 		bleu	a4,s1,.L101
  67:src/../h/slabAllocator.hpp ****                 uint64 index = ((uint64)addr - lowerBound) / head->parent->objectSize;
 1824              		.loc 3 67 42 is_stmt 0
 1825 0b30 E3EED4FC 		bgtu	a3,s1,.L101
 1826              	.LBB104:
  68:src/../h/slabAllocator.hpp ****                 freeSlot(head, index);
 1827              		.loc 3 68 17 is_stmt 1
  68:src/../h/slabAllocator.hpp ****                 freeSlot(head, index);
 1828              		.loc 3 68 46 is_stmt 0
 1829 0b34 B386D440 		sub	a3,s1,a3
 1830              	.LVL185:
  69:src/../h/slabAllocator.hpp ****                 return true;
 1831              		.loc 3 69 17 is_stmt 1
  69:src/../h/slabAllocator.hpp ****                 return true;
 1832              		.loc 3 69 25 is_stmt 0
 1833 0b38 B3D5B602 		divu	a1,a3,a1
 1834              	.LVL186:
 1835 0b3c 13850700 		mv	a0,a5
 1836              	.LVL187:
 1837 0b40 97000000 		call	_ZN13SlabAllocator8freeSlotEP4Slabm
 1837      E7800000 
 1838              	.LVL188:
  70:src/../h/slabAllocator.hpp ****             }
 1839              		.loc 3 70 17 is_stmt 1
  70:src/../h/slabAllocator.hpp ****             }
 1840              		.loc 3 70 24 is_stmt 0
 1841 0b48 13051000 		li	a0,1
 1842 0b4c 6FF01FFA 		j	.L99
 1843              	.LBE104:
 1844              	.LBE103:
 1845              	.LBE106:
 1846              	.LBE107:
 1847              	.LBE108:
 1848              		.cfi_endproc
 1849              	.LFE16:
 1851              		.align	2
 1852              		.globl	_ZN13SlabAllocator10freeBufferEPKv
 1854              	_ZN13SlabAllocator10freeBufferEPKv:
 1855              	.LFB17:
 126:src/slabAllocator.cpp **** void SlabAllocator::freeBuffer(const void *addr) {
 1856              		.loc 1 126 50 is_stmt 1
 1857              		.cfi_startproc
 1858              	.LVL189:
 1859 0b50 130101FE 		addi	sp,sp,-32
 1860              		.cfi_def_cfa_offset 32
 1861 0b54 233C1100 		sd	ra,24(sp)
 1862 0b58 23388100 		sd	s0,16(sp)
 1863 0b5c 23349100 		sd	s1,8(sp)
 1864 0b60 23302101 		sd	s2,0(sp)
 1865              		.cfi_offset 1, -8
 1866              		.cfi_offset 8, -16
 1867              		.cfi_offset 9, -24
 1868              		.cfi_offset 18, -32
GAS LISTING /tmp/cchWk8xb.s 			page 48


 1869 0b64 13040102 		addi	s0,sp,32
 1870              		.cfi_def_cfa 8, 0
 1871 0b68 13090500 		mv	s2,a0
 127:src/slabAllocator.cpp ****     for(int i=0;i<BUCKET_SIZE;i++)
 1872              		.loc 1 127 5
 1873              	.LVL190:
 1874              	.LBB109:
 127:src/slabAllocator.cpp ****     for(int i=0;i<BUCKET_SIZE;i++)
 1875              		.loc 1 127 13 is_stmt 0
 1876 0b6c 93040000 		li	s1,0
 1877              	.LVL191:
 1878              	.L108:
 127:src/slabAllocator.cpp ****     for(int i=0;i<BUCKET_SIZE;i++)
 1879              		.loc 1 127 18 is_stmt 1 discriminator 1
 1880 0b70 9307C000 		li	a5,12
 1881 0b74 63C89702 		bgt	s1,a5,.L106
 128:src/slabAllocator.cpp ****         if(SlabAllocator::freeObject(sizeN[i], addr))
 1882              		.loc 1 128 9
 128:src/slabAllocator.cpp ****         if(SlabAllocator::freeObject(sizeN[i], addr))
 1883              		.loc 1 128 37 is_stmt 0
 1884 0b78 13973400 		slli	a4,s1,3
 1885 0b7c 97070000 		lla	a5,.LANCHOR0
 1885      93870700 
 1886 0b84 B387E700 		add	a5,a5,a4
 1887 0b88 93050900 		mv	a1,s2
 1888 0b8c 03B50700 		ld	a0,0(a5)
 1889 0b90 97000000 		call	_ZN13SlabAllocator10freeObjectEP5CachePKv
 1889      E7800000 
 1890              	.LVL192:
 128:src/slabAllocator.cpp ****         if(SlabAllocator::freeObject(sizeN[i], addr))
 1891              		.loc 1 128 9
 1892 0b98 63160500 		bnez	a0,.L106
 127:src/slabAllocator.cpp ****     for(int i=0;i<BUCKET_SIZE;i++)
 1893              		.loc 1 127 5 is_stmt 1 discriminator 2
 1894 0b9c 9B841400 		addiw	s1,s1,1
 1895              	.LVL193:
 1896 0ba0 6FF01FFD 		j	.L108
 1897              	.LVL194:
 1898              	.L106:
 1899              	.LBE109:
 130:src/slabAllocator.cpp **** }
 1900              		.loc 1 130 1 is_stmt 0
 1901 0ba4 83308101 		ld	ra,24(sp)
 1902              		.cfi_restore 1
 1903 0ba8 03340101 		ld	s0,16(sp)
 1904              		.cfi_restore 8
 1905              		.cfi_def_cfa 2, 32
 1906 0bac 83348100 		ld	s1,8(sp)
 1907              		.cfi_restore 9
 1908              	.LVL195:
 1909 0bb0 03390100 		ld	s2,0(sp)
 1910              		.cfi_restore 18
 1911              	.LVL196:
 1912 0bb4 13010102 		addi	sp,sp,32
 1913              		.cfi_def_cfa_offset 0
 1914 0bb8 67800000 		jr	ra
 1915              		.cfi_endproc
GAS LISTING /tmp/cchWk8xb.s 			page 49


 1916              	.LFE17:
 1918              		.align	2
 1919              		.globl	_ZN13SlabAllocator11deleteCacheERP5Cache
 1921              	_ZN13SlabAllocator11deleteCacheERP5Cache:
 1922              	.LFB19:
 145:src/slabAllocator.cpp **** void SlabAllocator::deleteCache(Cache* &cache) {
 1923              		.loc 1 145 48 is_stmt 1
 1924              		.cfi_startproc
 1925              	.LVL197:
 1926 0bbc 130101FE 		addi	sp,sp,-32
 1927              		.cfi_def_cfa_offset 32
 1928 0bc0 233C1100 		sd	ra,24(sp)
 1929 0bc4 23388100 		sd	s0,16(sp)
 1930 0bc8 23349100 		sd	s1,8(sp)
 1931 0bcc 23302101 		sd	s2,0(sp)
 1932              		.cfi_offset 1, -8
 1933              		.cfi_offset 8, -16
 1934              		.cfi_offset 9, -24
 1935              		.cfi_offset 18, -32
 1936 0bd0 13040102 		addi	s0,sp,32
 1937              		.cfi_def_cfa 8, 0
 1938 0bd4 93040500 		mv	s1,a0
 146:src/slabAllocator.cpp ****     deleteList(cache->fullHead);
 1939              		.loc 1 146 5
 146:src/slabAllocator.cpp ****     deleteList(cache->fullHead);
 1940              		.loc 1 146 16 is_stmt 0
 1941 0bd8 03390500 		ld	s2,0(a0)
 146:src/slabAllocator.cpp ****     deleteList(cache->fullHead);
 1942              		.loc 1 146 23
 1943 0bdc 13090907 		addi	s2,s2,112
 1944              	.LVL198:
 1945              	.L112:
 1946              	.LBB119:
 1947              	.LBB120:
  75:src/../h/slabAllocator.hpp ****     }
  76:src/../h/slabAllocator.hpp **** 
  77:src/../h/slabAllocator.hpp ****     static inline void deleteList(Slab* &head){
  78:src/../h/slabAllocator.hpp ****         while(head){
 1948              		.loc 3 78 9 is_stmt 1
 1949              		.loc 3 78 15
 1950 0be0 03350900 		ld	a0,0(s2)
 1951 0be4 63020502 		beqz	a0,.L111
 1952              	.LBB121:
  79:src/../h/slabAllocator.hpp ****             Slab* tmp = head;
 1953              		.loc 3 79 13
 1954              	.LVL199:
  80:src/../h/slabAllocator.hpp ****             Buddy::free(tmp, head->parent->slabSize);
 1955              		.loc 3 80 13
 1956              		.loc 3 80 36 is_stmt 0
 1957 0be8 83370503 		ld	a5,48(a0)
 1958              		.loc 3 80 24
 1959 0bec 83B58704 		ld	a1,72(a5)
 1960 0bf0 97000000 		call	_ZN5Buddy4freeEPvm@plt
 1960      E7800000 
 1961              	.LVL200:
  81:src/../h/slabAllocator.hpp ****             head = head->next;
 1962              		.loc 3 81 13 is_stmt 1
GAS LISTING /tmp/cchWk8xb.s 			page 50


 1963              		.loc 3 81 20 is_stmt 0
 1964 0bf8 83370900 		ld	a5,0(s2)
 1965              		.loc 3 81 26
 1966 0bfc 83B78700 		ld	a5,8(a5)
 1967              		.loc 3 81 18
 1968 0c00 2330F900 		sd	a5,0(s2)
 1969              	.LBE121:
  78:src/../h/slabAllocator.hpp ****             Slab* tmp = head;
 1970              		.loc 3 78 9
 1971 0c04 6FF0DFFD 		j	.L112
 1972              	.L111:
 1973              	.LVL201:
 1974              	.LBE120:
 1975              	.LBE119:
 147:src/slabAllocator.cpp ****     deleteList(cache->partialHead);
 1976              		.loc 1 147 5 is_stmt 1
 147:src/slabAllocator.cpp ****     deleteList(cache->partialHead);
 1977              		.loc 1 147 16 is_stmt 0
 1978 0c08 03B90400 		ld	s2,0(s1)
 147:src/slabAllocator.cpp ****     deleteList(cache->partialHead);
 1979              		.loc 1 147 23
 1980 0c0c 13098906 		addi	s2,s2,104
 1981              	.LVL202:
 1982              	.L114:
 1983              	.LBB122:
 1984              	.LBB123:
  78:src/../h/slabAllocator.hpp ****             Slab* tmp = head;
 1985              		.loc 3 78 9 is_stmt 1
  78:src/../h/slabAllocator.hpp ****             Slab* tmp = head;
 1986              		.loc 3 78 15
 1987 0c10 03350900 		ld	a0,0(s2)
 1988 0c14 63020502 		beqz	a0,.L113
 1989              	.LBB124:
  79:src/../h/slabAllocator.hpp ****             Buddy::free(tmp, head->parent->slabSize);
 1990              		.loc 3 79 13
 1991              	.LVL203:
  80:src/../h/slabAllocator.hpp ****             head = head->next;
 1992              		.loc 3 80 13
  80:src/../h/slabAllocator.hpp ****             head = head->next;
 1993              		.loc 3 80 36 is_stmt 0
 1994 0c18 83370503 		ld	a5,48(a0)
  80:src/../h/slabAllocator.hpp ****             head = head->next;
 1995              		.loc 3 80 24
 1996 0c1c 83B58704 		ld	a1,72(a5)
 1997 0c20 97000000 		call	_ZN5Buddy4freeEPvm@plt
 1997      E7800000 
 1998              	.LVL204:
 1999              		.loc 3 81 13 is_stmt 1
 2000              		.loc 3 81 20 is_stmt 0
 2001 0c28 83370900 		ld	a5,0(s2)
 2002              		.loc 3 81 26
 2003 0c2c 83B78700 		ld	a5,8(a5)
 2004              		.loc 3 81 18
 2005 0c30 2330F900 		sd	a5,0(s2)
 2006              	.LBE124:
  78:src/../h/slabAllocator.hpp ****             Slab* tmp = head;
 2007              		.loc 3 78 9
GAS LISTING /tmp/cchWk8xb.s 			page 51


 2008 0c34 6FF0DFFD 		j	.L114
 2009              	.L113:
 2010              	.LVL205:
 2011              	.LBE123:
 2012              	.LBE122:
 148:src/slabAllocator.cpp ****     deleteList(cache->emptyHead);
 2013              		.loc 1 148 5 is_stmt 1
 148:src/slabAllocator.cpp ****     deleteList(cache->emptyHead);
 2014              		.loc 1 148 16 is_stmt 0
 2015 0c38 03B90400 		ld	s2,0(s1)
 148:src/slabAllocator.cpp ****     deleteList(cache->emptyHead);
 2016              		.loc 1 148 23
 2017 0c3c 13090906 		addi	s2,s2,96
 2018              	.LVL206:
 2019              	.L116:
 2020              	.LBB125:
 2021              	.LBB126:
  78:src/../h/slabAllocator.hpp ****             Slab* tmp = head;
 2022              		.loc 3 78 9 is_stmt 1
  78:src/../h/slabAllocator.hpp ****             Slab* tmp = head;
 2023              		.loc 3 78 15
 2024 0c40 03350900 		ld	a0,0(s2)
 2025 0c44 63020502 		beqz	a0,.L115
 2026              	.LBB127:
  79:src/../h/slabAllocator.hpp ****             Buddy::free(tmp, head->parent->slabSize);
 2027              		.loc 3 79 13
 2028              	.LVL207:
  80:src/../h/slabAllocator.hpp ****             head = head->next;
 2029              		.loc 3 80 13
  80:src/../h/slabAllocator.hpp ****             head = head->next;
 2030              		.loc 3 80 36 is_stmt 0
 2031 0c48 83370503 		ld	a5,48(a0)
  80:src/../h/slabAllocator.hpp ****             head = head->next;
 2032              		.loc 3 80 24
 2033 0c4c 83B58704 		ld	a1,72(a5)
 2034 0c50 97000000 		call	_ZN5Buddy4freeEPvm@plt
 2034      E7800000 
 2035              	.LVL208:
 2036              		.loc 3 81 13 is_stmt 1
 2037              		.loc 3 81 20 is_stmt 0
 2038 0c58 83370900 		ld	a5,0(s2)
 2039              		.loc 3 81 26
 2040 0c5c 83B78700 		ld	a5,8(a5)
 2041              		.loc 3 81 18
 2042 0c60 2330F900 		sd	a5,0(s2)
 2043              	.LBE127:
  78:src/../h/slabAllocator.hpp ****             Slab* tmp = head;
 2044              		.loc 3 78 9
 2045 0c64 6FF0DFFD 		j	.L116
 2046              	.L115:
 2047              	.LVL209:
 2048              	.LBE126:
 2049              	.LBE125:
 149:src/slabAllocator.cpp ****     SlabAllocator::freeObject(SlabAllocator::cache, cache);
 2050              		.loc 1 149 5 is_stmt 1
 149:src/slabAllocator.cpp ****     SlabAllocator::freeObject(SlabAllocator::cache, cache);
 2051              		.loc 1 149 30 is_stmt 0
GAS LISTING /tmp/cchWk8xb.s 			page 52


 2052 0c68 83B50400 		ld	a1,0(s1)
 2053 0c6c 17050000 		ld	a0,.LANCHOR0+104
 2053      03350500 
 2054 0c74 97000000 		call	_ZN13SlabAllocator10freeObjectEP5CachePKv
 2054      E7800000 
 2055              	.LVL210:
 150:src/slabAllocator.cpp ****     cache = nullptr;
 2056              		.loc 1 150 5 is_stmt 1
 150:src/slabAllocator.cpp ****     cache = nullptr;
 2057              		.loc 1 150 11 is_stmt 0
 2058 0c7c 23B00400 		sd	zero,0(s1)
 151:src/slabAllocator.cpp **** }
 2059              		.loc 1 151 1
 2060 0c80 83308101 		ld	ra,24(sp)
 2061              		.cfi_restore 1
 2062 0c84 03340101 		ld	s0,16(sp)
 2063              		.cfi_restore 8
 2064              		.cfi_def_cfa 2, 32
 2065 0c88 83348100 		ld	s1,8(sp)
 2066              		.cfi_restore 9
 2067              	.LVL211:
 2068 0c8c 03390100 		ld	s2,0(sp)
 2069              		.cfi_restore 18
 2070 0c90 13010102 		addi	sp,sp,32
 2071              		.cfi_def_cfa_offset 0
 2072 0c94 67800000 		jr	ra
 2073              		.cfi_endproc
 2074              	.LFE19:
 2076              		.globl	_ZN13SlabAllocator20blocksResponsibleForE
 2077              		.globl	_ZN13SlabAllocator9startAddrE
 2078              		.globl	_ZN13SlabAllocator5namesE
 2079              		.section	.rodata.str1.8
 2080 0163 00000000 		.align	3
 2080      00
 2081              	.LC19:
 2082 0168 42756666 		.string	"Buffer Cache No. 0"
 2082      65722043 
 2082      61636865 
 2082      204E6F2E 
 2082      203000
 2083 017b 00000000 		.align	3
 2083      00
 2084              	.LC20:
 2085 0180 42756666 		.string	"Buffer Cache No. 1"
 2085      65722043 
 2085      61636865 
 2085      204E6F2E 
 2085      203100
 2086 0193 00000000 		.align	3
 2086      00
 2087              	.LC21:
 2088 0198 42756666 		.string	"Buffer Cache No. 2"
 2088      65722043 
 2088      61636865 
 2088      204E6F2E 
 2088      203200
 2089 01ab 00000000 		.align	3
GAS LISTING /tmp/cchWk8xb.s 			page 53


 2089      00
 2090              	.LC22:
 2091 01b0 42756666 		.string	"Buffer Cache No. 3"
 2091      65722043 
 2091      61636865 
 2091      204E6F2E 
 2091      203300
 2092 01c3 00000000 		.align	3
 2092      00
 2093              	.LC23:
 2094 01c8 42756666 		.string	"Buffer Cache No. 4"
 2094      65722043 
 2094      61636865 
 2094      204E6F2E 
 2094      203400
 2095 01db 00000000 		.align	3
 2095      00
 2096              	.LC24:
 2097 01e0 42756666 		.string	"Buffer Cache No. 5"
 2097      65722043 
 2097      61636865 
 2097      204E6F2E 
 2097      203500
 2098 01f3 00000000 		.align	3
 2098      00
 2099              	.LC25:
 2100 01f8 42756666 		.string	"Buffer Cache No. 6"
 2100      65722043 
 2100      61636865 
 2100      204E6F2E 
 2100      203600
 2101 020b 00000000 		.align	3
 2101      00
 2102              	.LC26:
 2103 0210 42756666 		.string	"Buffer Cache No. 7"
 2103      65722043 
 2103      61636865 
 2103      204E6F2E 
 2103      203700
 2104 0223 00000000 		.align	3
 2104      00
 2105              	.LC27:
 2106 0228 42756666 		.string	"Buffer Cache No. 8"
 2106      65722043 
 2106      61636865 
 2106      204E6F2E 
 2106      203800
 2107 023b 00000000 		.align	3
 2107      00
 2108              	.LC28:
 2109 0240 42756666 		.string	"Buffer Cache No. 9"
 2109      65722043 
 2109      61636865 
 2109      204E6F2E 
 2109      203900
 2110 0253 00000000 		.align	3
 2110      00
GAS LISTING /tmp/cchWk8xb.s 			page 54


 2111              	.LC29:
 2112 0258 42756666 		.string	"Buffer Cache No. 10"
 2112      65722043 
 2112      61636865 
 2112      204E6F2E 
 2112      20313000 
 2113 026c 00000000 		.align	3
 2114              	.LC30:
 2115 0270 42756666 		.string	"Buffer Cache No. 11"
 2115      65722043 
 2115      61636865 
 2115      204E6F2E 
 2115      20313100 
 2116 0284 00000000 		.align	3
 2117              	.LC31:
 2118 0288 42756666 		.string	"Buffer Cache No. 12"
 2118      65722043 
 2118      61636865 
 2118      204E6F2E 
 2118      20313200 
 2119              		.globl	_ZN13SlabAllocator5sizeNE
 2120              		.globl	_ZN13SlabAllocator5cacheE
 2121              		.bss
 2122              		.align	3
 2123              		.set	.LANCHOR0,. + 0
 2126              	_ZN13SlabAllocator5sizeNE:
 2127 0000 00000000 		.zero	104
 2127      00000000 
 2127      00000000 
 2127      00000000 
 2127      00000000 
 2130              	_ZN13SlabAllocator5cacheE:
 2131 0068 00000000 		.zero	8
 2131      00000000 
 2134              	_ZN13SlabAllocator9startAddrE:
 2135 0070 00000000 		.zero	8
 2135      00000000 
 2138              	_ZN13SlabAllocator20blocksResponsibleForE:
 2139 0078 00000000 		.zero	8
 2139      00000000 
 2140              		.section	.data.rel.local,"aw"
 2141              		.align	3
 2142              		.set	.LANCHOR1,. + 0
 2145              	_ZN13SlabAllocator5namesE:
 2146 0000 00000000 		.dword	.LC19
 2146      00000000 
 2147 0008 00000000 		.dword	.LC20
 2147      00000000 
 2148 0010 00000000 		.dword	.LC21
 2148      00000000 
 2149 0018 00000000 		.dword	.LC22
 2149      00000000 
 2150 0020 00000000 		.dword	.LC23
 2150      00000000 
 2151 0028 00000000 		.dword	.LC24
 2151      00000000 
 2152 0030 00000000 		.dword	.LC25
GAS LISTING /tmp/cchWk8xb.s 			page 55


 2152      00000000 
 2153 0038 00000000 		.dword	.LC26
 2153      00000000 
 2154 0040 00000000 		.dword	.LC27
 2154      00000000 
 2155 0048 00000000 		.dword	.LC28
 2155      00000000 
 2156 0050 00000000 		.dword	.LC29
 2156      00000000 
 2157 0058 00000000 		.dword	.LC30
 2157      00000000 
 2158 0060 00000000 		.dword	.LC31
 2158      00000000 
 2159              		.text
 2160              	.Letext0:
 2161              		.file 5 "src/../h/../h/../lib/hw.h"
 2162              		.file 6 "src/../h/../h/utility.hpp"
 2163              		.file 7 "src/../h/../h/consoleUtil.hpp"
 2164              		.file 8 "src/../h/../h/cache_t.hpp"
GAS LISTING /tmp/cchWk8xb.s 			page 56


DEFINED SYMBOLS
                            *ABS*:0000000000000000 slabAllocator.cpp
     /tmp/cchWk8xb.s:9      .text:0000000000000000 _ZN13SlabAllocator11shrinkCacheEP5Cache
     /tmp/cchWk8xb.s:13     .text:0000000000000000 .L0 
     /tmp/cchWk8xb.s:15     .text:0000000000000000 .L0 
     /tmp/cchWk8xb.s:16     .text:0000000000000004 .L0 
     /tmp/cchWk8xb.s:21     .text:0000000000000014 .L0 
     /tmp/cchWk8xb.s:22     .text:0000000000000014 .L0 
     /tmp/cchWk8xb.s:23     .text:0000000000000014 .L0 
     /tmp/cchWk8xb.s:24     .text:0000000000000014 .L0 
     /tmp/cchWk8xb.s:26     .text:0000000000000018 .L0 
     /tmp/cchWk8xb.s:30     .text:000000000000001c .L0 
     /tmp/cchWk8xb.s:31     .text:000000000000001c .L0 
     /tmp/cchWk8xb.s:35     .text:0000000000000020 .L0 
     /tmp/cchWk8xb.s:36     .text:0000000000000020 .L0 
     /tmp/cchWk8xb.s:39     .text:0000000000000028 .L0 
     /tmp/cchWk8xb.s:40     .text:0000000000000028 .L0 
     /tmp/cchWk8xb.s:44     .text:0000000000000034 .L0 
     /tmp/cchWk8xb.s:45     .text:0000000000000034 .L0 
     /tmp/cchWk8xb.s:47     .text:0000000000000038 .L0 
     /tmp/cchWk8xb.s:49     .text:000000000000003c .L0 
     /tmp/cchWk8xb.s:52     .text:0000000000000040 .L0 
     /tmp/cchWk8xb.s:53     .text:0000000000000040 .L0 
     /tmp/cchWk8xb.s:55     .text:0000000000000044 .L0 
     /tmp/cchWk8xb.s:57     .text:0000000000000048 .L0 
     /tmp/cchWk8xb.s:61     .text:000000000000004c .L0 
     /tmp/cchWk8xb.s:62     .text:000000000000004c .L0 
     /tmp/cchWk8xb.s:64     .text:0000000000000054 .L0 
     /tmp/cchWk8xb.s:66     .text:0000000000000058 .L0 
     /tmp/cchWk8xb.s:67     .text:0000000000000058 .L0 
     /tmp/cchWk8xb.s:69     .text:000000000000005c .L0 
     /tmp/cchWk8xb.s:72     .text:0000000000000060 .L0 
     /tmp/cchWk8xb.s:75     .text:0000000000000064 .L0 
     /tmp/cchWk8xb.s:77     .text:0000000000000068 .L0 
     /tmp/cchWk8xb.s:115    .text:0000000000000068 _ZN13SlabAllocator9printSlabEP4Slab
     /tmp/cchWk8xb.s:118    .text:0000000000000068 .L0 
     /tmp/cchWk8xb.s:120    .text:0000000000000068 .L0 
     /tmp/cchWk8xb.s:122    .text:0000000000000068 .L0 
     /tmp/cchWk8xb.s:125    .text:000000000000006c .L0 
     /tmp/cchWk8xb.s:126    .text:0000000000000070 .L0 
     /tmp/cchWk8xb.s:131    .text:0000000000000080 .L0 
     /tmp/cchWk8xb.s:132    .text:0000000000000080 .L0 
     /tmp/cchWk8xb.s:133    .text:0000000000000080 .L0 
     /tmp/cchWk8xb.s:134    .text:0000000000000080 .L0 
     /tmp/cchWk8xb.s:136    .text:0000000000000084 .L0 
     /tmp/cchWk8xb.s:141    .text:0000000000000088 .L0 
     /tmp/cchWk8xb.s:142    .text:0000000000000088 .L0 
     /tmp/cchWk8xb.s:150    .text:00000000000000a8 .L0 
     /tmp/cchWk8xb.s:151    .text:00000000000000a8 .L0 
     /tmp/cchWk8xb.s:158    .text:00000000000000c8 .L0 
     /tmp/cchWk8xb.s:159    .text:00000000000000c8 .L0 
     /tmp/cchWk8xb.s:166    .text:00000000000000e8 .L0 
     /tmp/cchWk8xb.s:167    .text:00000000000000e8 .L0 
     /tmp/cchWk8xb.s:174    .text:0000000000000108 .L0 
     /tmp/cchWk8xb.s:175    .text:0000000000000108 .L0 
     /tmp/cchWk8xb.s:182    .text:0000000000000128 .L0 
     /tmp/cchWk8xb.s:183    .text:0000000000000128 .L0 
GAS LISTING /tmp/cchWk8xb.s 			page 57


     /tmp/cchWk8xb.s:190    .text:0000000000000148 .L0 
     /tmp/cchWk8xb.s:191    .text:0000000000000148 .L0 
     /tmp/cchWk8xb.s:196    .text:0000000000000158 .L0 
     /tmp/cchWk8xb.s:197    .text:0000000000000158 .L0 
     /tmp/cchWk8xb.s:202    .text:0000000000000160 .L0 
     /tmp/cchWk8xb.s:203    .text:0000000000000160 .L0 
     /tmp/cchWk8xb.s:205    .text:0000000000000164 .L0 
     /tmp/cchWk8xb.s:207    .text:0000000000000168 .L0 
     /tmp/cchWk8xb.s:214    .text:0000000000000188 .L0 
     /tmp/cchWk8xb.s:218    .text:000000000000018c .L0 
     /tmp/cchWk8xb.s:219    .text:000000000000018c .L0 
     /tmp/cchWk8xb.s:221    .text:0000000000000190 .L0 
     /tmp/cchWk8xb.s:223    .text:0000000000000194 .L0 
     /tmp/cchWk8xb.s:225    .text:0000000000000198 .L0 
     /tmp/cchWk8xb.s:228    .text:000000000000019c .L0 
     /tmp/cchWk8xb.s:229    .text:000000000000019c .L0 
     /tmp/cchWk8xb.s:235    .text:00000000000001ac .L0 
     /tmp/cchWk8xb.s:236    .text:00000000000001b0 .L0 
     /tmp/cchWk8xb.s:238    .text:00000000000001b4 .L0 
     /tmp/cchWk8xb.s:239    .text:00000000000001b4 .L0 
     /tmp/cchWk8xb.s:241    .text:00000000000001b8 .L0 
     /tmp/cchWk8xb.s:244    .text:00000000000001bc .L0 
     /tmp/cchWk8xb.s:247    .text:00000000000001c0 .L0 
     /tmp/cchWk8xb.s:252    .text:00000000000001c8 .L0 
     /tmp/cchWk8xb.s:284    .text:00000000000001c8 _ZN13SlabAllocator10printCacheEP5Cache
     /tmp/cchWk8xb.s:287    .text:00000000000001c8 .L0 
     /tmp/cchWk8xb.s:289    .text:00000000000001c8 .L0 
     /tmp/cchWk8xb.s:290    .text:00000000000001cc .L0 
     /tmp/cchWk8xb.s:295    .text:00000000000001dc .L0 
     /tmp/cchWk8xb.s:296    .text:00000000000001dc .L0 
     /tmp/cchWk8xb.s:297    .text:00000000000001dc .L0 
     /tmp/cchWk8xb.s:298    .text:00000000000001dc .L0 
     /tmp/cchWk8xb.s:300    .text:00000000000001e0 .L0 
     /tmp/cchWk8xb.s:303    .text:00000000000001e4 .L0 
     /tmp/cchWk8xb.s:304    .text:00000000000001e4 .L0 
     /tmp/cchWk8xb.s:309    .text:00000000000001f4 .L0 
     /tmp/cchWk8xb.s:310    .text:00000000000001f4 .L0 
     /tmp/cchWk8xb.s:314    .text:0000000000000200 .L0 
     /tmp/cchWk8xb.s:315    .text:0000000000000200 .L0 
     /tmp/cchWk8xb.s:319    .text:0000000000000210 .L0 
     /tmp/cchWk8xb.s:320    .text:0000000000000210 .L0 
     /tmp/cchWk8xb.s:328    .text:0000000000000238 .L0 
     /tmp/cchWk8xb.s:329    .text:0000000000000238 .L0 
     /tmp/cchWk8xb.s:336    .text:0000000000000258 .L0 
     /tmp/cchWk8xb.s:337    .text:0000000000000258 .L0 
     /tmp/cchWk8xb.s:344    .text:0000000000000278 .L0 
     /tmp/cchWk8xb.s:345    .text:0000000000000278 .L0 
     /tmp/cchWk8xb.s:352    .text:0000000000000298 .L0 
     /tmp/cchWk8xb.s:353    .text:0000000000000298 .L0 
     /tmp/cchWk8xb.s:360    .text:00000000000002b8 .L0 
     /tmp/cchWk8xb.s:361    .text:00000000000002b8 .L0 
     /tmp/cchWk8xb.s:365    .text:00000000000002bc .L0 
     /tmp/cchWk8xb.s:366    .text:00000000000002bc .L0 
     /tmp/cchWk8xb.s:368    .text:00000000000002c0 .L0 
     /tmp/cchWk8xb.s:369    .text:00000000000002c0 .L0 
     /tmp/cchWk8xb.s:376    .text:00000000000002e0 .L0 
     /tmp/cchWk8xb.s:377    .text:00000000000002e0 .L0 
GAS LISTING /tmp/cchWk8xb.s 			page 58


     /tmp/cchWk8xb.s:380    .text:00000000000002e4 .L0 
     /tmp/cchWk8xb.s:383    .text:00000000000002e8 .L0 
     /tmp/cchWk8xb.s:384    .text:00000000000002e8 .L0 
     /tmp/cchWk8xb.s:388    .text:00000000000002f8 .L0 
     /tmp/cchWk8xb.s:389    .text:00000000000002f8 .L0 
     /tmp/cchWk8xb.s:396    .text:0000000000000318 .L0 
     /tmp/cchWk8xb.s:397    .text:0000000000000318 .L0 
     /tmp/cchWk8xb.s:401    .text:000000000000031c .L0 
     /tmp/cchWk8xb.s:402    .text:000000000000031c .L0 
     /tmp/cchWk8xb.s:404    .text:0000000000000320 .L0 
     /tmp/cchWk8xb.s:405    .text:0000000000000320 .L0 
     /tmp/cchWk8xb.s:412    .text:0000000000000340 .L0 
     /tmp/cchWk8xb.s:413    .text:0000000000000340 .L0 
     /tmp/cchWk8xb.s:416    .text:0000000000000344 .L0 
     /tmp/cchWk8xb.s:419    .text:0000000000000348 .L0 
     /tmp/cchWk8xb.s:420    .text:0000000000000348 .L0 
     /tmp/cchWk8xb.s:424    .text:0000000000000358 .L0 
     /tmp/cchWk8xb.s:425    .text:0000000000000358 .L0 
     /tmp/cchWk8xb.s:432    .text:0000000000000378 .L0 
     /tmp/cchWk8xb.s:433    .text:0000000000000378 .L0 
     /tmp/cchWk8xb.s:437    .text:000000000000037c .L0 
     /tmp/cchWk8xb.s:438    .text:000000000000037c .L0 
     /tmp/cchWk8xb.s:440    .text:0000000000000380 .L0 
     /tmp/cchWk8xb.s:441    .text:0000000000000380 .L0 
     /tmp/cchWk8xb.s:448    .text:00000000000003a0 .L0 
     /tmp/cchWk8xb.s:449    .text:00000000000003a0 .L0 
     /tmp/cchWk8xb.s:452    .text:00000000000003a4 .L0 
     /tmp/cchWk8xb.s:455    .text:00000000000003a8 .L0 
     /tmp/cchWk8xb.s:456    .text:00000000000003a8 .L0 
     /tmp/cchWk8xb.s:460    .text:00000000000003b8 .L0 
     /tmp/cchWk8xb.s:461    .text:00000000000003bc .L0 
     /tmp/cchWk8xb.s:463    .text:00000000000003c0 .L0 
     /tmp/cchWk8xb.s:464    .text:00000000000003c0 .L0 
     /tmp/cchWk8xb.s:466    .text:00000000000003c4 .L0 
     /tmp/cchWk8xb.s:469    .text:00000000000003c8 .L0 
     /tmp/cchWk8xb.s:472    .text:00000000000003cc .L0 
     /tmp/cchWk8xb.s:474    .text:00000000000003d0 .L0 
     /tmp/cchWk8xb.s:480    .text:00000000000003d0 _ZN13SlabAllocator14insertIntoListERP4SlabS1_
     /tmp/cchWk8xb.s:483    .text:00000000000003d0 .L0 
     /tmp/cchWk8xb.s:485    .text:00000000000003d0 .L0 
     /tmp/cchWk8xb.s:486    .text:00000000000003d4 .L0 
     /tmp/cchWk8xb.s:488    .text:00000000000003d8 .L0 
     /tmp/cchWk8xb.s:490    .text:00000000000003dc .L0 
     /tmp/cchWk8xb.s:492    .text:00000000000003dc .L0 
     /tmp/cchWk8xb.s:493    .text:00000000000003dc .L0 
     /tmp/cchWk8xb.s:495    .text:00000000000003e0 .L0 
     /tmp/cchWk8xb.s:497    .text:00000000000003e4 .L0 
     /tmp/cchWk8xb.s:499    .text:00000000000003e8 .L0 
     /tmp/cchWk8xb.s:500    .text:00000000000003e8 .L0 
     /tmp/cchWk8xb.s:503    .text:00000000000003ec .L0 
     /tmp/cchWk8xb.s:504    .text:00000000000003ec .L0 
     /tmp/cchWk8xb.s:506    .text:00000000000003f0 .L0 
     /tmp/cchWk8xb.s:507    .text:00000000000003f0 .L0 
     /tmp/cchWk8xb.s:509    .text:00000000000003f4 .L0 
     /tmp/cchWk8xb.s:510    .text:00000000000003f8 .L0 
     /tmp/cchWk8xb.s:511    .text:00000000000003f8 .L0 
     /tmp/cchWk8xb.s:513    .text:00000000000003fc .L0 
GAS LISTING /tmp/cchWk8xb.s 			page 59


     /tmp/cchWk8xb.s:515    .text:0000000000000400 .L0 
     /tmp/cchWk8xb.s:521    .text:0000000000000400 _ZN13SlabAllocator12allocateSlabEP5Cache
     /tmp/cchWk8xb.s:524    .text:0000000000000400 .L0 
     /tmp/cchWk8xb.s:526    .text:0000000000000400 .L0 
     /tmp/cchWk8xb.s:527    .text:0000000000000404 .L0 
     /tmp/cchWk8xb.s:533    .text:0000000000000418 .L0 
     /tmp/cchWk8xb.s:534    .text:0000000000000418 .L0 
     /tmp/cchWk8xb.s:535    .text:0000000000000418 .L0 
     /tmp/cchWk8xb.s:536    .text:0000000000000418 .L0 
     /tmp/cchWk8xb.s:537    .text:0000000000000418 .L0 
     /tmp/cchWk8xb.s:539    .text:000000000000041c .L0 
     /tmp/cchWk8xb.s:542    .text:0000000000000420 .L0 
     /tmp/cchWk8xb.s:543    .text:0000000000000420 .L0 
     /tmp/cchWk8xb.s:548    .text:000000000000042c .L0 
     /tmp/cchWk8xb.s:551    .text:0000000000000434 .L0 
     /tmp/cchWk8xb.s:552    .text:0000000000000434 .L0 
     /tmp/cchWk8xb.s:558    .text:0000000000000444 .L0 
     /tmp/cchWk8xb.s:559    .text:0000000000000444 .L0 
     /tmp/cchWk8xb.s:561    .text:0000000000000448 .L0 
     /tmp/cchWk8xb.s:563    .text:000000000000044c .L0 
     /tmp/cchWk8xb.s:565    .text:0000000000000450 .L0 
     /tmp/cchWk8xb.s:567    .text:0000000000000454 .L0 
     /tmp/cchWk8xb.s:569    .text:0000000000000458 .L0 
     /tmp/cchWk8xb.s:571    .text:000000000000045c .L0 
     /tmp/cchWk8xb.s:573    .text:0000000000000460 .L0 
     /tmp/cchWk8xb.s:574    .text:0000000000000460 .L0 
     /tmp/cchWk8xb.s:576    .text:0000000000000464 .L0 
     /tmp/cchWk8xb.s:578    .text:0000000000000468 .L0 
     /tmp/cchWk8xb.s:580    .text:000000000000046c .L0 
     /tmp/cchWk8xb.s:582    .text:0000000000000470 .L0 
     /tmp/cchWk8xb.s:583    .text:0000000000000470 .L0 
     /tmp/cchWk8xb.s:585    .text:0000000000000474 .L0 
     /tmp/cchWk8xb.s:587    .text:0000000000000478 .L0 
     /tmp/cchWk8xb.s:588    .text:0000000000000478 .L0 
     /tmp/cchWk8xb.s:592    .text:000000000000047c .L0 
     /tmp/cchWk8xb.s:593    .text:000000000000047c .L0 
     /tmp/cchWk8xb.s:597    .text:0000000000000480 .L0 
     /tmp/cchWk8xb.s:598    .text:0000000000000480 .L0 
     /tmp/cchWk8xb.s:600    .text:0000000000000484 .L0 
     /tmp/cchWk8xb.s:602    .text:0000000000000488 .L0 
     /tmp/cchWk8xb.s:604    .text:000000000000048c .L0 
     /tmp/cchWk8xb.s:606    .text:0000000000000490 .L0 
     /tmp/cchWk8xb.s:607    .text:0000000000000490 .L0 
     /tmp/cchWk8xb.s:609    .text:0000000000000494 .L0 
     /tmp/cchWk8xb.s:611    .text:0000000000000498 .L0 
     /tmp/cchWk8xb.s:613    .text:000000000000049c .L0 
     /tmp/cchWk8xb.s:620    .text:00000000000004a4 .L0 
     /tmp/cchWk8xb.s:621    .text:00000000000004a4 .L0 
     /tmp/cchWk8xb.s:623    .text:00000000000004a8 .L0 
     /tmp/cchWk8xb.s:626    .text:00000000000004ac .L0 
     /tmp/cchWk8xb.s:630    .text:00000000000004b0 .L0 
     /tmp/cchWk8xb.s:631    .text:00000000000004b0 .L0 
     /tmp/cchWk8xb.s:633    .text:00000000000004b4 .L0 
     /tmp/cchWk8xb.s:635    .text:00000000000004b8 .L0 
     /tmp/cchWk8xb.s:636    .text:00000000000004b8 .L0 
     /tmp/cchWk8xb.s:638    .text:00000000000004bc .L0 
     /tmp/cchWk8xb.s:640    .text:00000000000004c0 .L0 
GAS LISTING /tmp/cchWk8xb.s 			page 60


     /tmp/cchWk8xb.s:642    .text:00000000000004c4 .L0 
     /tmp/cchWk8xb.s:644    .text:00000000000004c8 .L0 
     /tmp/cchWk8xb.s:646    .text:00000000000004cc .L0 
     /tmp/cchWk8xb.s:650    .text:00000000000004d4 .L0 
     /tmp/cchWk8xb.s:658    .text:00000000000004dc .L0 
     /tmp/cchWk8xb.s:664    .text:00000000000004e4 .L0 
     /tmp/cchWk8xb.s:672    .text:00000000000004f0 .L0 
     /tmp/cchWk8xb.s:673    .text:00000000000004f4 .L0 
     /tmp/cchWk8xb.s:675    .text:00000000000004f8 .L0 
     /tmp/cchWk8xb.s:676    .text:00000000000004f8 .L0 
     /tmp/cchWk8xb.s:678    .text:00000000000004fc .L0 
     /tmp/cchWk8xb.s:680    .text:0000000000000500 .L0 
     /tmp/cchWk8xb.s:682    .text:0000000000000504 .L0 
     /tmp/cchWk8xb.s:685    .text:0000000000000508 .L0 
     /tmp/cchWk8xb.s:687    .text:000000000000050c .L0 
     /tmp/cchWk8xb.s:693    .text:000000000000050c _ZN13SlabAllocator14removeFromListERP4SlabS1_
     /tmp/cchWk8xb.s:696    .text:000000000000050c .L0 
     /tmp/cchWk8xb.s:698    .text:000000000000050c .L0 
     /tmp/cchWk8xb.s:699    .text:0000000000000510 .L0 
     /tmp/cchWk8xb.s:701    .text:0000000000000514 .L0 
     /tmp/cchWk8xb.s:703    .text:0000000000000518 .L0 
     /tmp/cchWk8xb.s:705    .text:0000000000000518 .L0 
     /tmp/cchWk8xb.s:706    .text:0000000000000518 .L0 
     /tmp/cchWk8xb.s:708    .text:000000000000051c .L0 
     /tmp/cchWk8xb.s:711    .text:0000000000000520 .L0 
     /tmp/cchWk8xb.s:712    .text:0000000000000520 .L0 
     /tmp/cchWk8xb.s:714    .text:0000000000000524 .L0 
     /tmp/cchWk8xb.s:716    .text:0000000000000528 .L0 
     /tmp/cchWk8xb.s:717    .text:0000000000000528 .L0 
     /tmp/cchWk8xb.s:719    .text:000000000000052c .L0 
     /tmp/cchWk8xb.s:722    .text:0000000000000530 .L0 
     /tmp/cchWk8xb.s:723    .text:0000000000000530 .L0 
     /tmp/cchWk8xb.s:725    .text:0000000000000534 .L0 
     /tmp/cchWk8xb.s:727    .text:0000000000000538 .L0 
     /tmp/cchWk8xb.s:728    .text:0000000000000538 .L0 
     /tmp/cchWk8xb.s:730    .text:000000000000053c .L0 
     /tmp/cchWk8xb.s:733    .text:0000000000000540 .L0 
     /tmp/cchWk8xb.s:734    .text:0000000000000540 .L0 
     /tmp/cchWk8xb.s:736    .text:0000000000000544 .L0 
     /tmp/cchWk8xb.s:737    .text:0000000000000544 .L0 
     /tmp/cchWk8xb.s:739    .text:0000000000000548 .L0 
     /tmp/cchWk8xb.s:740    .text:000000000000054c .L0 
     /tmp/cchWk8xb.s:741    .text:000000000000054c .L0 
     /tmp/cchWk8xb.s:742    .text:000000000000054c .L0 
     /tmp/cchWk8xb.s:744    .text:0000000000000550 .L0 
     /tmp/cchWk8xb.s:747    .text:0000000000000554 .L0 
     /tmp/cchWk8xb.s:749    .text:0000000000000554 .L0 
     /tmp/cchWk8xb.s:750    .text:0000000000000554 .L0 
     /tmp/cchWk8xb.s:752    .text:0000000000000558 .L0 
     /tmp/cchWk8xb.s:754    .text:0000000000000560 .L0 
     /tmp/cchWk8xb.s:760    .text:0000000000000560 _ZN13SlabAllocator4moveERP4SlabS2_S1_
     /tmp/cchWk8xb.s:763    .text:0000000000000560 .L0 
     /tmp/cchWk8xb.s:765    .text:0000000000000560 .L0 
     /tmp/cchWk8xb.s:766    .text:0000000000000564 .L0 
     /tmp/cchWk8xb.s:771    .text:0000000000000574 .L0 
     /tmp/cchWk8xb.s:772    .text:0000000000000574 .L0 
     /tmp/cchWk8xb.s:773    .text:0000000000000574 .L0 
GAS LISTING /tmp/cchWk8xb.s 			page 61


     /tmp/cchWk8xb.s:774    .text:0000000000000574 .L0 
     /tmp/cchWk8xb.s:776    .text:0000000000000578 .L0 
     /tmp/cchWk8xb.s:780    .text:0000000000000580 .L0 
     /tmp/cchWk8xb.s:781    .text:0000000000000580 .L0 
     /tmp/cchWk8xb.s:786    .text:000000000000058c .L0 
     /tmp/cchWk8xb.s:787    .text:000000000000058c .L0 
     /tmp/cchWk8xb.s:792    .text:000000000000059c .L0 
     /tmp/cchWk8xb.s:793    .text:00000000000005a0 .L0 
     /tmp/cchWk8xb.s:795    .text:00000000000005a4 .L0 
     /tmp/cchWk8xb.s:796    .text:00000000000005a4 .L0 
     /tmp/cchWk8xb.s:798    .text:00000000000005a8 .L0 
     /tmp/cchWk8xb.s:801    .text:00000000000005ac .L0 
     /tmp/cchWk8xb.s:804    .text:00000000000005b0 .L0 
     /tmp/cchWk8xb.s:806    .text:00000000000005b4 .L0 
     /tmp/cchWk8xb.s:812    .text:00000000000005b4 _ZN13SlabAllocator12allocateSlotEP4Slab
     /tmp/cchWk8xb.s:815    .text:00000000000005b4 .L0 
     /tmp/cchWk8xb.s:817    .text:00000000000005b4 .L0 
     /tmp/cchWk8xb.s:818    .text:00000000000005b8 .L0 
     /tmp/cchWk8xb.s:823    .text:00000000000005c8 .L0 
     /tmp/cchWk8xb.s:824    .text:00000000000005c8 .L0 
     /tmp/cchWk8xb.s:825    .text:00000000000005c8 .L0 
     /tmp/cchWk8xb.s:826    .text:00000000000005c8 .L0 
     /tmp/cchWk8xb.s:828    .text:00000000000005cc .L0 
     /tmp/cchWk8xb.s:833    .text:00000000000005d0 .L0 
     /tmp/cchWk8xb.s:834    .text:00000000000005d0 .L0 
     /tmp/cchWk8xb.s:838    .text:00000000000005d4 .L0 
     /tmp/cchWk8xb.s:839    .text:00000000000005d4 .L0 
     /tmp/cchWk8xb.s:841    .text:00000000000005d8 .L0 
     /tmp/cchWk8xb.s:846    .text:00000000000005dc .L0 
     /tmp/cchWk8xb.s:847    .text:00000000000005dc .L0 
     /tmp/cchWk8xb.s:849    .text:00000000000005e0 .L0 
     /tmp/cchWk8xb.s:851    .text:00000000000005e4 .L0 
     /tmp/cchWk8xb.s:854    .text:00000000000005ec .L0 
     /tmp/cchWk8xb.s:857    .text:00000000000005f4 .L0 
     /tmp/cchWk8xb.s:860    .text:00000000000005fc .L0 
     /tmp/cchWk8xb.s:863    .text:0000000000000600 .L0 
     /tmp/cchWk8xb.s:870    .text:0000000000000608 .L0 
     /tmp/cchWk8xb.s:871    .text:0000000000000608 .L0 
     /tmp/cchWk8xb.s:874    .text:0000000000000610 .L0 
     /tmp/cchWk8xb.s:881    .text:0000000000000618 .L0 
     /tmp/cchWk8xb.s:882    .text:0000000000000618 .L0 
     /tmp/cchWk8xb.s:883    .text:0000000000000618 .L0 
     /tmp/cchWk8xb.s:885    .text:000000000000061c .L0 
     /tmp/cchWk8xb.s:890    .text:0000000000000620 .L0 
     /tmp/cchWk8xb.s:892    .text:0000000000000624 .L0 
     /tmp/cchWk8xb.s:895    .text:0000000000000628 .L0 
     /tmp/cchWk8xb.s:899    .text:000000000000062c .L0 
     /tmp/cchWk8xb.s:900    .text:000000000000062c .L0 
     /tmp/cchWk8xb.s:907    .text:0000000000000634 .L0 
     /tmp/cchWk8xb.s:911    .text:0000000000000634 .L0 
     /tmp/cchWk8xb.s:912    .text:0000000000000634 .L0 
     /tmp/cchWk8xb.s:914    .text:0000000000000638 .L0 
     /tmp/cchWk8xb.s:916    .text:000000000000063c .L0 
     /tmp/cchWk8xb.s:920    .text:0000000000000640 .L0 
     /tmp/cchWk8xb.s:921    .text:0000000000000640 .L0 
     /tmp/cchWk8xb.s:923    .text:0000000000000644 .L0 
     /tmp/cchWk8xb.s:925    .text:0000000000000648 .L0 
GAS LISTING /tmp/cchWk8xb.s 			page 62


     /tmp/cchWk8xb.s:927    .text:000000000000064c .L0 
     /tmp/cchWk8xb.s:928    .text:000000000000064c .L0 
     /tmp/cchWk8xb.s:933    .text:0000000000000658 .L0 
     /tmp/cchWk8xb.s:934    .text:0000000000000658 .L0 
     /tmp/cchWk8xb.s:936    .text:000000000000065c .L0 
     /tmp/cchWk8xb.s:938    .text:0000000000000660 .L0 
     /tmp/cchWk8xb.s:940    .text:0000000000000664 .L0 
     /tmp/cchWk8xb.s:943    .text:0000000000000668 .L0 
     /tmp/cchWk8xb.s:945    .text:000000000000066c .L0 
     /tmp/cchWk8xb.s:949    .text:0000000000000670 .L0 
     /tmp/cchWk8xb.s:952    .text:0000000000000674 .L0 
     /tmp/cchWk8xb.s:957    .text:000000000000067c .L0 
     /tmp/cchWk8xb.s:959    .text:0000000000000680 .L0 
     /tmp/cchWk8xb.s:967    .text:0000000000000688 .L0 
     /tmp/cchWk8xb.s:971    .text:000000000000068c .L0 
     /tmp/cchWk8xb.s:972    .text:0000000000000690 .L0 
     /tmp/cchWk8xb.s:974    .text:0000000000000694 .L0 
     /tmp/cchWk8xb.s:975    .text:0000000000000694 .L0 
     /tmp/cchWk8xb.s:977    .text:0000000000000698 .L0 
     /tmp/cchWk8xb.s:979    .text:000000000000069c .L0 
     /tmp/cchWk8xb.s:982    .text:00000000000006a0 .L0 
     /tmp/cchWk8xb.s:984    .text:00000000000006a4 .L0 
     /tmp/cchWk8xb.s:990    .text:00000000000006a4 _ZN13SlabAllocator14allocateObjectEP5Cache
     /tmp/cchWk8xb.s:993    .text:00000000000006a4 .L0 
     /tmp/cchWk8xb.s:995    .text:00000000000006a4 .L0 
     /tmp/cchWk8xb.s:996    .text:00000000000006a8 .L0 
     /tmp/cchWk8xb.s:1001   .text:00000000000006b8 .L0 
     /tmp/cchWk8xb.s:1002   .text:00000000000006b8 .L0 
     /tmp/cchWk8xb.s:1003   .text:00000000000006b8 .L0 
     /tmp/cchWk8xb.s:1004   .text:00000000000006b8 .L0 
     /tmp/cchWk8xb.s:1006   .text:00000000000006bc .L0 
     /tmp/cchWk8xb.s:1009   .text:00000000000006c0 .L0 
     /tmp/cchWk8xb.s:1010   .text:00000000000006c0 .L0 
     /tmp/cchWk8xb.s:1017   .text:00000000000006c4 .L0 
     /tmp/cchWk8xb.s:1018   .text:00000000000006c4 .L0 
     /tmp/cchWk8xb.s:1021   .text:00000000000006c8 .L0 
     /tmp/cchWk8xb.s:1022   .text:00000000000006c8 .L0 
     /tmp/cchWk8xb.s:1026   .text:00000000000006d4 .L0 
     /tmp/cchWk8xb.s:1028   .text:00000000000006d8 .L0 
     /tmp/cchWk8xb.s:1035   .text:00000000000006dc .L0 
     /tmp/cchWk8xb.s:1038   .text:00000000000006e0 .L0 
     /tmp/cchWk8xb.s:1040   .text:00000000000006e8 .L0 
     /tmp/cchWk8xb.s:1041   .text:00000000000006e8 .L0 
     /tmp/cchWk8xb.s:1043   .text:00000000000006ec .L0 
     /tmp/cchWk8xb.s:1044   .text:00000000000006ec .L0 
     /tmp/cchWk8xb.s:1046   .text:00000000000006f0 .L0 
     /tmp/cchWk8xb.s:1049   .text:00000000000006f4 .L0 
     /tmp/cchWk8xb.s:1052   .text:00000000000006f8 .L0 
     /tmp/cchWk8xb.s:1056   .text:00000000000006fc .L0 
     /tmp/cchWk8xb.s:1058   .text:00000000000006fc .L0 
     /tmp/cchWk8xb.s:1059   .text:00000000000006fc .L0 
     /tmp/cchWk8xb.s:1065   .text:0000000000000700 .L0 
     /tmp/cchWk8xb.s:1066   .text:0000000000000700 .L0 
     /tmp/cchWk8xb.s:1069   .text:0000000000000704 .L0 
     /tmp/cchWk8xb.s:1070   .text:0000000000000704 .L0 
     /tmp/cchWk8xb.s:1074   .text:0000000000000710 .L0 
     /tmp/cchWk8xb.s:1076   .text:0000000000000714 .L0 
GAS LISTING /tmp/cchWk8xb.s 			page 63


     /tmp/cchWk8xb.s:1083   .text:0000000000000718 .L0 
     /tmp/cchWk8xb.s:1085   .text:000000000000071c .L0 
     /tmp/cchWk8xb.s:1086   .text:000000000000071c .L0 
     /tmp/cchWk8xb.s:1090   .text:0000000000000728 .L0 
     /tmp/cchWk8xb.s:1092   .text:000000000000072c .L0 
     /tmp/cchWk8xb.s:1093   .text:000000000000072c .L0 
     /tmp/cchWk8xb.s:1099   .text:000000000000073c .L0 
     /tmp/cchWk8xb.s:1100   .text:000000000000073c .L0 
     /tmp/cchWk8xb.s:1101   .text:0000000000000740 .L0 
     /tmp/cchWk8xb.s:1107   .text:0000000000000740 _ZN13SlabAllocator14allocateBufferEm
     /tmp/cchWk8xb.s:1110   .text:0000000000000740 .L0 
     /tmp/cchWk8xb.s:1112   .text:0000000000000740 .L0 
     /tmp/cchWk8xb.s:1116   .text:0000000000000740 .L0 
     /tmp/cchWk8xb.s:1117   .text:0000000000000740 .L0 
     /tmp/cchWk8xb.s:1118   .text:0000000000000740 .L0 
     /tmp/cchWk8xb.s:1121   .text:0000000000000744 .L0 
     /tmp/cchWk8xb.s:1122   .text:0000000000000744 .L0 
     /tmp/cchWk8xb.s:1125   .text:0000000000000748 .L0 
     /tmp/cchWk8xb.s:1128   .text:000000000000074c .L0 
     /tmp/cchWk8xb.s:1129   .text:000000000000074c .L0 
     /tmp/cchWk8xb.s:1131   .text:0000000000000750 .L0 
     /tmp/cchWk8xb.s:1134   .text:0000000000000754 .L0 
     /tmp/cchWk8xb.s:1135   .text:0000000000000754 .L0 
     /tmp/cchWk8xb.s:1137   .text:0000000000000758 .L0 
     /tmp/cchWk8xb.s:1140   .text:000000000000075c .L0 
     /tmp/cchWk8xb.s:1141   .text:000000000000075c .L0 
     /tmp/cchWk8xb.s:1143   .text:0000000000000760 .L0 
     /tmp/cchWk8xb.s:1146   .text:0000000000000764 .L0 
     /tmp/cchWk8xb.s:1147   .text:0000000000000764 .L0 
     /tmp/cchWk8xb.s:1149   .text:0000000000000768 .L0 
     /tmp/cchWk8xb.s:1152   .text:000000000000076c .L0 
     /tmp/cchWk8xb.s:1153   .text:000000000000076c .L0 
     /tmp/cchWk8xb.s:1155   .text:0000000000000770 .L0 
     /tmp/cchWk8xb.s:1158   .text:0000000000000774 .L0 
     /tmp/cchWk8xb.s:1159   .text:0000000000000774 .L0 
     /tmp/cchWk8xb.s:1166   .text:0000000000000778 .L0 
     /tmp/cchWk8xb.s:1170   .text:000000000000077c .L0 
     /tmp/cchWk8xb.s:1171   .text:000000000000077c .L0 
     /tmp/cchWk8xb.s:1174   .text:0000000000000784 .L0 
     /tmp/cchWk8xb.s:1175   .text:0000000000000784 .L0 
     /tmp/cchWk8xb.s:1178   .text:0000000000000788 .L0 
     /tmp/cchWk8xb.s:1179   .text:0000000000000788 .L0 
     /tmp/cchWk8xb.s:1182   .text:000000000000078c .L0 
     /tmp/cchWk8xb.s:1188   .text:0000000000000790 .L0 
     /tmp/cchWk8xb.s:1189   .text:0000000000000790 .L0 
     /tmp/cchWk8xb.s:1190   .text:0000000000000790 .L0 
     /tmp/cchWk8xb.s:1193   .text:0000000000000794 .L0 
     /tmp/cchWk8xb.s:1196   .text:000000000000079c .L0 
     /tmp/cchWk8xb.s:1197   .text:00000000000007a0 .L0 
     /tmp/cchWk8xb.s:1200   .text:00000000000007a8 .L0 
     /tmp/cchWk8xb.s:1201   .text:00000000000007a8 .L0 
     /tmp/cchWk8xb.s:1203   .text:00000000000007ac .L0 
     /tmp/cchWk8xb.s:1206   .text:00000000000007ac .L0 
     /tmp/cchWk8xb.s:1207   .text:00000000000007ac .L0 
     /tmp/cchWk8xb.s:1208   .text:00000000000007ac .L0 
     /tmp/cchWk8xb.s:1216   .text:00000000000007c8 .L0 
     /tmp/cchWk8xb.s:1217   .text:00000000000007cc .L0 
GAS LISTING /tmp/cchWk8xb.s 			page 64


     /tmp/cchWk8xb.s:1219   .text:00000000000007d0 .L0 
     /tmp/cchWk8xb.s:1220   .text:00000000000007d0 .L0 
     /tmp/cchWk8xb.s:1222   .text:00000000000007d4 .L0 
     /tmp/cchWk8xb.s:1227   .text:00000000000007d8 .L0 
     /tmp/cchWk8xb.s:1229   .text:00000000000007dc .L0 
     /tmp/cchWk8xb.s:1230   .text:00000000000007e0 .L0 
     /tmp/cchWk8xb.s:1236   .text:00000000000007e0 _ZN13SlabAllocator11createCacheEPKcmPFvPvES4_
     /tmp/cchWk8xb.s:1239   .text:00000000000007e0 .L0 
     /tmp/cchWk8xb.s:1241   .text:00000000000007e0 .L0 
     /tmp/cchWk8xb.s:1242   .text:00000000000007e4 .L0 
     /tmp/cchWk8xb.s:1250   .text:0000000000000800 .L0 
     /tmp/cchWk8xb.s:1251   .text:0000000000000800 .L0 
     /tmp/cchWk8xb.s:1252   .text:0000000000000800 .L0 
     /tmp/cchWk8xb.s:1253   .text:0000000000000800 .L0 
     /tmp/cchWk8xb.s:1254   .text:0000000000000800 .L0 
     /tmp/cchWk8xb.s:1255   .text:0000000000000800 .L0 
     /tmp/cchWk8xb.s:1256   .text:0000000000000800 .L0 
     /tmp/cchWk8xb.s:1258   .text:0000000000000804 .L0 
     /tmp/cchWk8xb.s:1264   .text:0000000000000814 .L0 
     /tmp/cchWk8xb.s:1265   .text:0000000000000814 .L0 
     /tmp/cchWk8xb.s:1272   .text:0000000000000828 .L0 
     /tmp/cchWk8xb.s:1274   .text:000000000000082c .L0 
     /tmp/cchWk8xb.s:1275   .text:000000000000082c .L0 
     /tmp/cchWk8xb.s:1277   .text:0000000000000830 .L0 
     /tmp/cchWk8xb.s:1278   .text:0000000000000830 .L0 
     /tmp/cchWk8xb.s:1280   .text:0000000000000834 .L0 
     /tmp/cchWk8xb.s:1281   .text:0000000000000834 .L0 
     /tmp/cchWk8xb.s:1283   .text:0000000000000838 .L0 
     /tmp/cchWk8xb.s:1285   .text:000000000000083c .L0 
     /tmp/cchWk8xb.s:1287   .text:0000000000000840 .L0 
     /tmp/cchWk8xb.s:1288   .text:0000000000000840 .L0 
     /tmp/cchWk8xb.s:1290   .text:0000000000000844 .L0 
     /tmp/cchWk8xb.s:1291   .text:0000000000000844 .L0 
     /tmp/cchWk8xb.s:1294   .text:000000000000084c .L0 
     /tmp/cchWk8xb.s:1295   .text:000000000000084c .L0 
     /tmp/cchWk8xb.s:1301   .text:000000000000085c .L0 
     /tmp/cchWk8xb.s:1302   .text:000000000000085c .L0 
     /tmp/cchWk8xb.s:1304   .text:0000000000000864 .L0 
     /tmp/cchWk8xb.s:1306   .text:0000000000000868 .L0 
     /tmp/cchWk8xb.s:1307   .text:0000000000000868 .L0 
     /tmp/cchWk8xb.s:1309   .text:000000000000086c .L0 
     /tmp/cchWk8xb.s:1312   .text:0000000000000870 .L0 
     /tmp/cchWk8xb.s:1315   .text:0000000000000874 .L0 
     /tmp/cchWk8xb.s:1318   .text:0000000000000878 .L0 
     /tmp/cchWk8xb.s:1321   .text:000000000000087c .L0 
     /tmp/cchWk8xb.s:1324   .text:0000000000000880 .L0 
     /tmp/cchWk8xb.s:1326   .text:0000000000000884 .L0 
     /tmp/cchWk8xb.s:1337   .text:0000000000000884 _ZN13SlabAllocator10initializeEPvm
     /tmp/cchWk8xb.s:1340   .text:0000000000000884 .L0 
     /tmp/cchWk8xb.s:1342   .text:0000000000000884 .L0 
     /tmp/cchWk8xb.s:1343   .text:0000000000000888 .L0 
     /tmp/cchWk8xb.s:1348   .text:0000000000000898 .L0 
     /tmp/cchWk8xb.s:1349   .text:0000000000000898 .L0 
     /tmp/cchWk8xb.s:1350   .text:0000000000000898 .L0 
     /tmp/cchWk8xb.s:1351   .text:0000000000000898 .L0 
     /tmp/cchWk8xb.s:1353   .text:000000000000089c .L0 
     /tmp/cchWk8xb.s:1357   .text:00000000000008a4 .L0 
GAS LISTING /tmp/cchWk8xb.s 			page 65


     /tmp/cchWk8xb.s:1358   .text:00000000000008a4 .L0 
     /tmp/cchWk8xb.s:1361   .text:00000000000008ac .L0 
     /tmp/cchWk8xb.s:1362   .text:00000000000008ac .L0 
     /tmp/cchWk8xb.s:1365   .text:00000000000008b8 .L0 
     /tmp/cchWk8xb.s:1366   .text:00000000000008b8 .L0 
     /tmp/cchWk8xb.s:1368   .text:00000000000008bc .L0 
     /tmp/cchWk8xb.s:1369   .text:00000000000008bc .L0 
     /tmp/cchWk8xb.s:1375   .text:00000000000008d4 .L0 
     /tmp/cchWk8xb.s:1377   .text:00000000000008d8 .L0 
     /tmp/cchWk8xb.s:1378   .text:00000000000008d8 .L0 
     /tmp/cchWk8xb.s:1380   .text:00000000000008dc .L0 
     /tmp/cchWk8xb.s:1381   .text:00000000000008dc .L0 
     /tmp/cchWk8xb.s:1383   .text:00000000000008e0 .L0 
     /tmp/cchWk8xb.s:1384   .text:00000000000008e0 .L0 
     /tmp/cchWk8xb.s:1386   .text:00000000000008e4 .L0 
     /tmp/cchWk8xb.s:1387   .text:00000000000008e4 .L0 
     /tmp/cchWk8xb.s:1389   .text:00000000000008e8 .L0 
     /tmp/cchWk8xb.s:1390   .text:00000000000008e8 .L0 
     /tmp/cchWk8xb.s:1392   .text:00000000000008ec .L0 
     /tmp/cchWk8xb.s:1393   .text:00000000000008ec .L0 
     /tmp/cchWk8xb.s:1396   .text:00000000000008f4 .L0 
     /tmp/cchWk8xb.s:1397   .text:00000000000008f4 .L0 
     /tmp/cchWk8xb.s:1400   .text:00000000000008fc .L0 
     /tmp/cchWk8xb.s:1401   .text:00000000000008fc .L0 
     /tmp/cchWk8xb.s:1406   .text:000000000000090c .L0 
     /tmp/cchWk8xb.s:1407   .text:000000000000090c .L0 
     /tmp/cchWk8xb.s:1413   .text:0000000000000914 .L0 
     /tmp/cchWk8xb.s:1414   .text:0000000000000914 .L0 
     /tmp/cchWk8xb.s:1425   .text:0000000000000940 .L0 
     /tmp/cchWk8xb.s:1429   .text:0000000000000950 .L0 
     /tmp/cchWk8xb.s:1433   .text:0000000000000954 .L0 
     /tmp/cchWk8xb.s:1437   .text:000000000000095c .L0 
     /tmp/cchWk8xb.s:1438   .text:0000000000000960 .L0 
     /tmp/cchWk8xb.s:1440   .text:0000000000000964 .L0 
     /tmp/cchWk8xb.s:1441   .text:0000000000000964 .L0 
     /tmp/cchWk8xb.s:1443   .text:0000000000000968 .L0 
     /tmp/cchWk8xb.s:1446   .text:000000000000096c .L0 
     /tmp/cchWk8xb.s:1448   .text:0000000000000970 .L0 
     /tmp/cchWk8xb.s:1450   .text:0000000000000974 .L0 
     /tmp/cchWk8xb.s:1456   .text:0000000000000974 _ZN13SlabAllocator8freeSlotEP4Slabm
     /tmp/cchWk8xb.s:1459   .text:0000000000000974 .L0 
     /tmp/cchWk8xb.s:1461   .text:0000000000000974 .L0 
     /tmp/cchWk8xb.s:1463   .text:0000000000000974 .L0 
     /tmp/cchWk8xb.s:1464   .text:0000000000000974 .L0 
     /tmp/cchWk8xb.s:1466   .text:0000000000000978 .L0 
     /tmp/cchWk8xb.s:1468   .text:000000000000097c .L0 
     /tmp/cchWk8xb.s:1471   .text:0000000000000984 .L0 
     /tmp/cchWk8xb.s:1476   .text:000000000000098c .L0 
     /tmp/cchWk8xb.s:1479   .text:0000000000000994 .L0 
     /tmp/cchWk8xb.s:1482   .text:0000000000000998 .L0 
     /tmp/cchWk8xb.s:1483   .text:000000000000099c .L0 
     /tmp/cchWk8xb.s:1487   .text:00000000000009a8 .L0 
     /tmp/cchWk8xb.s:1488   .text:00000000000009a8 .L0 
     /tmp/cchWk8xb.s:1489   .text:00000000000009a8 .L0 
     /tmp/cchWk8xb.s:1491   .text:00000000000009ac .L0 
     /tmp/cchWk8xb.s:1496   .text:00000000000009b0 .L0 
     /tmp/cchWk8xb.s:1497   .text:00000000000009b0 .L0 
GAS LISTING /tmp/cchWk8xb.s 			page 66


     /tmp/cchWk8xb.s:1500   .text:00000000000009b8 .L0 
     /tmp/cchWk8xb.s:1507   .text:00000000000009c4 .L0 
     /tmp/cchWk8xb.s:1508   .text:00000000000009c4 .L0 
     /tmp/cchWk8xb.s:1509   .text:00000000000009c4 .L0 
     /tmp/cchWk8xb.s:1514   .text:00000000000009c8 .L0 
     /tmp/cchWk8xb.s:1516   .text:00000000000009cc .L0 
     /tmp/cchWk8xb.s:1519   .text:00000000000009d0 .L0 
     /tmp/cchWk8xb.s:1523   .text:00000000000009d4 .L0 
     /tmp/cchWk8xb.s:1524   .text:00000000000009d4 .L0 
     /tmp/cchWk8xb.s:1530   .text:00000000000009dc .L0 
     /tmp/cchWk8xb.s:1531   .text:00000000000009dc .L0 
     /tmp/cchWk8xb.s:1532   .text:00000000000009dc .L0 
     /tmp/cchWk8xb.s:1537   .text:00000000000009e0 .L0 
     /tmp/cchWk8xb.s:1539   .text:00000000000009e4 .L0 
     /tmp/cchWk8xb.s:1541   .text:00000000000009e8 .L0 
     /tmp/cchWk8xb.s:1547   .text:00000000000009ec .L0 
     /tmp/cchWk8xb.s:1550   .text:00000000000009ec .L0 
     /tmp/cchWk8xb.s:1551   .text:00000000000009ec .L0 
     /tmp/cchWk8xb.s:1553   .text:00000000000009f0 .L0 
     /tmp/cchWk8xb.s:1554   .text:00000000000009f0 .L0 
     /tmp/cchWk8xb.s:1556   .text:00000000000009f4 .L0 
     /tmp/cchWk8xb.s:1558   .text:00000000000009f8 .L0 
     /tmp/cchWk8xb.s:1560   .text:00000000000009fc .L0 
     /tmp/cchWk8xb.s:1561   .text:00000000000009fc .L0 
     /tmp/cchWk8xb.s:1568   .text:0000000000000a08 .L0 
     /tmp/cchWk8xb.s:1569   .text:0000000000000a0c .L0 
     /tmp/cchWk8xb.s:1570   .text:0000000000000a0c .L0 
     /tmp/cchWk8xb.s:1572   .text:0000000000000a10 .L0 
     /tmp/cchWk8xb.s:1573   .text:0000000000000a10 .L0 
     /tmp/cchWk8xb.s:1575   .text:0000000000000a14 .L0 
     /tmp/cchWk8xb.s:1578   .text:0000000000000a18 .L0 
     /tmp/cchWk8xb.s:1582   .text:0000000000000a1c .L0 
     /tmp/cchWk8xb.s:1586   .text:0000000000000a1c .L0 
     /tmp/cchWk8xb.s:1588   .text:0000000000000a20 .L0 
     /tmp/cchWk8xb.s:1593   .text:0000000000000a28 .L0 
     /tmp/cchWk8xb.s:1595   .text:0000000000000a2c .L0 
     /tmp/cchWk8xb.s:1600   .text:0000000000000a34 .L0 
     /tmp/cchWk8xb.s:1601   .text:0000000000000a34 .L0 
     /tmp/cchWk8xb.s:1606   .text:0000000000000a40 .L0 
     /tmp/cchWk8xb.s:1607   .text:0000000000000a40 .L0 
     /tmp/cchWk8xb.s:1609   .text:0000000000000a44 .L0 
     /tmp/cchWk8xb.s:1616   .text:0000000000000a58 .L0 
     /tmp/cchWk8xb.s:1617   .text:0000000000000a58 .L0 
     /tmp/cchWk8xb.s:1618   .text:0000000000000a58 .L0 
     /tmp/cchWk8xb.s:1619   .text:0000000000000a58 .L0 
     /tmp/cchWk8xb.s:1623   .text:0000000000000a5c .L0 
     /tmp/cchWk8xb.s:1629   .text:0000000000000a5c _ZN13SlabAllocator10freeObjectEP5CachePKv
     /tmp/cchWk8xb.s:1632   .text:0000000000000a5c .L0 
     /tmp/cchWk8xb.s:1634   .text:0000000000000a5c .L0 
     /tmp/cchWk8xb.s:1635   .text:0000000000000a60 .L0 
     /tmp/cchWk8xb.s:1640   .text:0000000000000a70 .L0 
     /tmp/cchWk8xb.s:1641   .text:0000000000000a70 .L0 
     /tmp/cchWk8xb.s:1642   .text:0000000000000a70 .L0 
     /tmp/cchWk8xb.s:1643   .text:0000000000000a70 .L0 
     /tmp/cchWk8xb.s:1645   .text:0000000000000a74 .L0 
     /tmp/cchWk8xb.s:1649   .text:0000000000000a7c .L0 
     /tmp/cchWk8xb.s:1650   .text:0000000000000a7c .L0 
GAS LISTING /tmp/cchWk8xb.s 			page 67


     /tmp/cchWk8xb.s:1652   .text:0000000000000a80 .L0 
     /tmp/cchWk8xb.s:1654   .text:0000000000000a84 .L0 
     /tmp/cchWk8xb.s:1655   .text:0000000000000a84 .L0 
     /tmp/cchWk8xb.s:1661   .text:0000000000000a8c .L0 
     /tmp/cchWk8xb.s:1662   .text:0000000000000a8c .L0 
     /tmp/cchWk8xb.s:1664   .text:0000000000000a90 .L0 
     /tmp/cchWk8xb.s:1666   .text:0000000000000a94 .L0 
     /tmp/cchWk8xb.s:1667   .text:0000000000000a94 .L0 
     /tmp/cchWk8xb.s:1672   .text:0000000000000a9c .L0 
     /tmp/cchWk8xb.s:1673   .text:0000000000000a9c .L0 
     /tmp/cchWk8xb.s:1682   .text:0000000000000aa4 .L0 
     /tmp/cchWk8xb.s:1683   .text:0000000000000aa4 .L0 
     /tmp/cchWk8xb.s:1688   .text:0000000000000aa8 .L0 
     /tmp/cchWk8xb.s:1689   .text:0000000000000aa8 .L0 
     /tmp/cchWk8xb.s:1695   .text:0000000000000aac .L0 
     /tmp/cchWk8xb.s:1696   .text:0000000000000aac .L0 
     /tmp/cchWk8xb.s:1697   .text:0000000000000aac .L0 
     /tmp/cchWk8xb.s:1699   .text:0000000000000ab0 .L0 
     /tmp/cchWk8xb.s:1701   .text:0000000000000ab4 .L0 
     /tmp/cchWk8xb.s:1703   .text:0000000000000ab8 .L0 
     /tmp/cchWk8xb.s:1705   .text:0000000000000abc .L0 
     /tmp/cchWk8xb.s:1707   .text:0000000000000ac0 .L0 
     /tmp/cchWk8xb.s:1715   .text:0000000000000ac4 .L0 
     /tmp/cchWk8xb.s:1719   .text:0000000000000ac4 .L0 
     /tmp/cchWk8xb.s:1721   .text:0000000000000ac4 .L0 
     /tmp/cchWk8xb.s:1723   .text:0000000000000ac8 .L0 
     /tmp/cchWk8xb.s:1726   .text:0000000000000acc .L0 
     /tmp/cchWk8xb.s:1727   .text:0000000000000acc .L0 
     /tmp/cchWk8xb.s:1730   .text:0000000000000ad0 .L0 
     /tmp/cchWk8xb.s:1731   .text:0000000000000ad0 .L0 
     /tmp/cchWk8xb.s:1736   .text:0000000000000adc .L0 
     /tmp/cchWk8xb.s:1737   .text:0000000000000adc .L0 
     /tmp/cchWk8xb.s:1745   .text:0000000000000ae4 .L0 
     /tmp/cchWk8xb.s:1751   .text:0000000000000ae8 .L0 
     /tmp/cchWk8xb.s:1755   .text:0000000000000aec .L0 
     /tmp/cchWk8xb.s:1756   .text:0000000000000af0 .L0 
     /tmp/cchWk8xb.s:1757   .text:0000000000000af0 .L0 
     /tmp/cchWk8xb.s:1759   .text:0000000000000af4 .L0 
     /tmp/cchWk8xb.s:1760   .text:0000000000000af4 .L0 
     /tmp/cchWk8xb.s:1762   .text:0000000000000af8 .L0 
     /tmp/cchWk8xb.s:1765   .text:0000000000000afc .L0 
     /tmp/cchWk8xb.s:1768   .text:0000000000000b00 .L0 
     /tmp/cchWk8xb.s:1772   .text:0000000000000b04 .L0 
     /tmp/cchWk8xb.s:1774   .text:0000000000000b04 .L0 
     /tmp/cchWk8xb.s:1775   .text:0000000000000b04 .L0 
     /tmp/cchWk8xb.s:1784   .text:0000000000000b0c .L0 
     /tmp/cchWk8xb.s:1785   .text:0000000000000b0c .L0 
     /tmp/cchWk8xb.s:1790   .text:0000000000000b10 .L0 
     /tmp/cchWk8xb.s:1791   .text:0000000000000b10 .L0 
     /tmp/cchWk8xb.s:1797   .text:0000000000000b14 .L0 
     /tmp/cchWk8xb.s:1798   .text:0000000000000b14 .L0 
     /tmp/cchWk8xb.s:1799   .text:0000000000000b14 .L0 
     /tmp/cchWk8xb.s:1801   .text:0000000000000b18 .L0 
     /tmp/cchWk8xb.s:1803   .text:0000000000000b1c .L0 
     /tmp/cchWk8xb.s:1805   .text:0000000000000b20 .L0 
     /tmp/cchWk8xb.s:1807   .text:0000000000000b24 .L0 
     /tmp/cchWk8xb.s:1809   .text:0000000000000b28 .L0 
GAS LISTING /tmp/cchWk8xb.s 			page 68


     /tmp/cchWk8xb.s:1817   .text:0000000000000b2c .L0 
     /tmp/cchWk8xb.s:1821   .text:0000000000000b2c .L0 
     /tmp/cchWk8xb.s:1823   .text:0000000000000b2c .L0 
     /tmp/cchWk8xb.s:1825   .text:0000000000000b30 .L0 
     /tmp/cchWk8xb.s:1828   .text:0000000000000b34 .L0 
     /tmp/cchWk8xb.s:1829   .text:0000000000000b34 .L0 
     /tmp/cchWk8xb.s:1832   .text:0000000000000b38 .L0 
     /tmp/cchWk8xb.s:1833   .text:0000000000000b38 .L0 
     /tmp/cchWk8xb.s:1840   .text:0000000000000b48 .L0 
     /tmp/cchWk8xb.s:1841   .text:0000000000000b48 .L0 
     /tmp/cchWk8xb.s:1848   .text:0000000000000b50 .L0 
     /tmp/cchWk8xb.s:1854   .text:0000000000000b50 _ZN13SlabAllocator10freeBufferEPKv
     /tmp/cchWk8xb.s:1857   .text:0000000000000b50 .L0 
     /tmp/cchWk8xb.s:1859   .text:0000000000000b50 .L0 
     /tmp/cchWk8xb.s:1860   .text:0000000000000b54 .L0 
     /tmp/cchWk8xb.s:1865   .text:0000000000000b64 .L0 
     /tmp/cchWk8xb.s:1866   .text:0000000000000b64 .L0 
     /tmp/cchWk8xb.s:1867   .text:0000000000000b64 .L0 
     /tmp/cchWk8xb.s:1868   .text:0000000000000b64 .L0 
     /tmp/cchWk8xb.s:1870   .text:0000000000000b68 .L0 
     /tmp/cchWk8xb.s:1875   .text:0000000000000b6c .L0 
     /tmp/cchWk8xb.s:1876   .text:0000000000000b6c .L0 
     /tmp/cchWk8xb.s:1880   .text:0000000000000b70 .L0 
     /tmp/cchWk8xb.s:1883   .text:0000000000000b78 .L0 
     /tmp/cchWk8xb.s:1884   .text:0000000000000b78 .L0 
     /tmp/cchWk8xb.s:1892   .text:0000000000000b98 .L0 
     /tmp/cchWk8xb.s:1894   .text:0000000000000b9c .L0 
     /tmp/cchWk8xb.s:1901   .text:0000000000000ba4 .L0 
     /tmp/cchWk8xb.s:1902   .text:0000000000000ba8 .L0 
     /tmp/cchWk8xb.s:1904   .text:0000000000000bac .L0 
     /tmp/cchWk8xb.s:1905   .text:0000000000000bac .L0 
     /tmp/cchWk8xb.s:1907   .text:0000000000000bb0 .L0 
     /tmp/cchWk8xb.s:1910   .text:0000000000000bb4 .L0 
     /tmp/cchWk8xb.s:1913   .text:0000000000000bb8 .L0 
     /tmp/cchWk8xb.s:1915   .text:0000000000000bbc .L0 
     /tmp/cchWk8xb.s:1921   .text:0000000000000bbc _ZN13SlabAllocator11deleteCacheERP5Cache
     /tmp/cchWk8xb.s:1924   .text:0000000000000bbc .L0 
     /tmp/cchWk8xb.s:1926   .text:0000000000000bbc .L0 
     /tmp/cchWk8xb.s:1927   .text:0000000000000bc0 .L0 
     /tmp/cchWk8xb.s:1932   .text:0000000000000bd0 .L0 
     /tmp/cchWk8xb.s:1933   .text:0000000000000bd0 .L0 
     /tmp/cchWk8xb.s:1934   .text:0000000000000bd0 .L0 
     /tmp/cchWk8xb.s:1935   .text:0000000000000bd0 .L0 
     /tmp/cchWk8xb.s:1937   .text:0000000000000bd4 .L0 
     /tmp/cchWk8xb.s:1940   .text:0000000000000bd8 .L0 
     /tmp/cchWk8xb.s:1941   .text:0000000000000bd8 .L0 
     /tmp/cchWk8xb.s:1943   .text:0000000000000bdc .L0 
     /tmp/cchWk8xb.s:1949   .text:0000000000000be0 .L0 
     /tmp/cchWk8xb.s:1950   .text:0000000000000be0 .L0 
     /tmp/cchWk8xb.s:1955   .text:0000000000000be8 .L0 
     /tmp/cchWk8xb.s:1956   .text:0000000000000be8 .L0 
     /tmp/cchWk8xb.s:1957   .text:0000000000000be8 .L0 
     /tmp/cchWk8xb.s:1959   .text:0000000000000bec .L0 
     /tmp/cchWk8xb.s:1963   .text:0000000000000bf8 .L0 
     /tmp/cchWk8xb.s:1964   .text:0000000000000bf8 .L0 
     /tmp/cchWk8xb.s:1966   .text:0000000000000bfc .L0 
     /tmp/cchWk8xb.s:1968   .text:0000000000000c00 .L0 
GAS LISTING /tmp/cchWk8xb.s 			page 69


     /tmp/cchWk8xb.s:1971   .text:0000000000000c04 .L0 
     /tmp/cchWk8xb.s:1977   .text:0000000000000c08 .L0 
     /tmp/cchWk8xb.s:1978   .text:0000000000000c08 .L0 
     /tmp/cchWk8xb.s:1980   .text:0000000000000c0c .L0 
     /tmp/cchWk8xb.s:1986   .text:0000000000000c10 .L0 
     /tmp/cchWk8xb.s:1987   .text:0000000000000c10 .L0 
     /tmp/cchWk8xb.s:1992   .text:0000000000000c18 .L0 
     /tmp/cchWk8xb.s:1993   .text:0000000000000c18 .L0 
     /tmp/cchWk8xb.s:1994   .text:0000000000000c18 .L0 
     /tmp/cchWk8xb.s:1996   .text:0000000000000c1c .L0 
     /tmp/cchWk8xb.s:2000   .text:0000000000000c28 .L0 
     /tmp/cchWk8xb.s:2001   .text:0000000000000c28 .L0 
     /tmp/cchWk8xb.s:2003   .text:0000000000000c2c .L0 
     /tmp/cchWk8xb.s:2005   .text:0000000000000c30 .L0 
     /tmp/cchWk8xb.s:2008   .text:0000000000000c34 .L0 
     /tmp/cchWk8xb.s:2014   .text:0000000000000c38 .L0 
     /tmp/cchWk8xb.s:2015   .text:0000000000000c38 .L0 
     /tmp/cchWk8xb.s:2017   .text:0000000000000c3c .L0 
     /tmp/cchWk8xb.s:2023   .text:0000000000000c40 .L0 
     /tmp/cchWk8xb.s:2024   .text:0000000000000c40 .L0 
     /tmp/cchWk8xb.s:2029   .text:0000000000000c48 .L0 
     /tmp/cchWk8xb.s:2030   .text:0000000000000c48 .L0 
     /tmp/cchWk8xb.s:2031   .text:0000000000000c48 .L0 
     /tmp/cchWk8xb.s:2033   .text:0000000000000c4c .L0 
     /tmp/cchWk8xb.s:2037   .text:0000000000000c58 .L0 
     /tmp/cchWk8xb.s:2038   .text:0000000000000c58 .L0 
     /tmp/cchWk8xb.s:2040   .text:0000000000000c5c .L0 
     /tmp/cchWk8xb.s:2042   .text:0000000000000c60 .L0 
     /tmp/cchWk8xb.s:2045   .text:0000000000000c64 .L0 
     /tmp/cchWk8xb.s:2051   .text:0000000000000c68 .L0 
     /tmp/cchWk8xb.s:2052   .text:0000000000000c68 .L0 
     /tmp/cchWk8xb.s:2057   .text:0000000000000c7c .L0 
     /tmp/cchWk8xb.s:2058   .text:0000000000000c7c .L0 
     /tmp/cchWk8xb.s:2060   .text:0000000000000c80 .L0 
     /tmp/cchWk8xb.s:2061   .text:0000000000000c84 .L0 
     /tmp/cchWk8xb.s:2063   .text:0000000000000c88 .L0 
     /tmp/cchWk8xb.s:2064   .text:0000000000000c88 .L0 
     /tmp/cchWk8xb.s:2066   .text:0000000000000c8c .L0 
     /tmp/cchWk8xb.s:2069   .text:0000000000000c90 .L0 
     /tmp/cchWk8xb.s:2071   .text:0000000000000c94 .L0 
     /tmp/cchWk8xb.s:2073   .text:0000000000000c98 .L0 
     /tmp/cchWk8xb.s:2138   .bss:0000000000000078 _ZN13SlabAllocator20blocksResponsibleForE
     /tmp/cchWk8xb.s:2134   .bss:0000000000000070 _ZN13SlabAllocator9startAddrE
     /tmp/cchWk8xb.s:2145   .data.rel.local:0000000000000000 _ZN13SlabAllocator5namesE
     /tmp/cchWk8xb.s:2126   .bss:0000000000000000 _ZN13SlabAllocator5sizeNE
     /tmp/cchWk8xb.s:2130   .bss:0000000000000068 _ZN13SlabAllocator5cacheE
     /tmp/cchWk8xb.s:2123   .bss:0000000000000000 .LANCHOR0
     /tmp/cchWk8xb.s:2142   .data.rel.local:0000000000000000 .LANCHOR1
     /tmp/cchWk8xb.s:2165   .text:0000000000000c98 .L0 
     /tmp/cchWk8xb.s:82     .rodata.str1.8:0000000000000000 .LC0
     /tmp/cchWk8xb.s:143    .text:000000000000008c .L0 
     /tmp/cchWk8xb.s:85     .rodata.str1.8:0000000000000008 .LC1
     /tmp/cchWk8xb.s:145    .text:0000000000000098 .L0 
     /tmp/cchWk8xb.s:152    .text:00000000000000ac .L0 
     /tmp/cchWk8xb.s:88     .rodata.str1.8:0000000000000018 .LC2
     /tmp/cchWk8xb.s:154    .text:00000000000000b8 .L0 
     /tmp/cchWk8xb.s:160    .text:00000000000000cc .L0 
GAS LISTING /tmp/cchWk8xb.s 			page 70


     /tmp/cchWk8xb.s:91     .rodata.str1.8:0000000000000030 .LC3
     /tmp/cchWk8xb.s:162    .text:00000000000000d8 .L0 
     /tmp/cchWk8xb.s:168    .text:00000000000000ec .L0 
     /tmp/cchWk8xb.s:94     .rodata.str1.8:0000000000000048 .LC4
     /tmp/cchWk8xb.s:170    .text:00000000000000f8 .L0 
     /tmp/cchWk8xb.s:176    .text:000000000000010c .L0 
     /tmp/cchWk8xb.s:97     .rodata.str1.8:0000000000000060 .LC5
     /tmp/cchWk8xb.s:178    .text:0000000000000118 .L0 
     /tmp/cchWk8xb.s:184    .text:000000000000012c .L0 
     /tmp/cchWk8xb.s:100    .rodata.str1.8:0000000000000070 .LC6
     /tmp/cchWk8xb.s:186    .text:0000000000000138 .L0 
     /tmp/cchWk8xb.s:103    .rodata.str1.8:0000000000000090 .LC7
     /tmp/cchWk8xb.s:191    .text:0000000000000148 .L0 
     /tmp/cchWk8xb.s:106    .rodata.str1.8:00000000000000b0 .LC8
     /tmp/cchWk8xb.s:208    .text:000000000000016c .L0 
     /tmp/cchWk8xb.s:109    .rodata.str1.8:00000000000000b8 .LC9
     /tmp/cchWk8xb.s:210    .text:0000000000000178 .L0 
     /tmp/cchWk8xb.s:229    .text:000000000000019c .L0 
     /tmp/cchWk8xb.s:257    .rodata.str1.8:00000000000000c0 .LC10
     /tmp/cchWk8xb.s:304    .text:00000000000001e4 .L0 
     /tmp/cchWk8xb.s:315    .text:0000000000000200 .L0 
     /tmp/cchWk8xb.s:321    .text:0000000000000214 .L0 
     /tmp/cchWk8xb.s:322    .text:000000000000021c .L0 
     /tmp/cchWk8xb.s:260    .rodata.str1.8:00000000000000d0 .LC11
     /tmp/cchWk8xb.s:324    .text:0000000000000228 .L0 
     /tmp/cchWk8xb.s:330    .text:000000000000023c .L0 
     /tmp/cchWk8xb.s:263    .rodata.str1.8:00000000000000e8 .LC12
     /tmp/cchWk8xb.s:332    .text:0000000000000248 .L0 
     /tmp/cchWk8xb.s:338    .text:000000000000025c .L0 
     /tmp/cchWk8xb.s:266    .rodata.str1.8:00000000000000f8 .LC13
     /tmp/cchWk8xb.s:340    .text:0000000000000268 .L0 
     /tmp/cchWk8xb.s:346    .text:000000000000027c .L0 
     /tmp/cchWk8xb.s:269    .rodata.str1.8:0000000000000110 .LC14
     /tmp/cchWk8xb.s:348    .text:0000000000000288 .L0 
     /tmp/cchWk8xb.s:354    .text:000000000000029c .L0 
     /tmp/cchWk8xb.s:272    .rodata.str1.8:0000000000000128 .LC15
     /tmp/cchWk8xb.s:356    .text:00000000000002a8 .L0 
     /tmp/cchWk8xb.s:370    .text:00000000000002c4 .L0 
     /tmp/cchWk8xb.s:372    .text:00000000000002d0 .L0 
     /tmp/cchWk8xb.s:384    .text:00000000000002e8 .L0 
     /tmp/cchWk8xb.s:390    .text:00000000000002fc .L0 
     /tmp/cchWk8xb.s:275    .rodata.str1.8:0000000000000138 .LC16
     /tmp/cchWk8xb.s:392    .text:0000000000000308 .L0 
     /tmp/cchWk8xb.s:406    .text:0000000000000324 .L0 
     /tmp/cchWk8xb.s:408    .text:0000000000000330 .L0 
     /tmp/cchWk8xb.s:420    .text:0000000000000348 .L0 
     /tmp/cchWk8xb.s:426    .text:000000000000035c .L0 
     /tmp/cchWk8xb.s:278    .rodata.str1.8:0000000000000148 .LC17
     /tmp/cchWk8xb.s:428    .text:0000000000000368 .L0 
     /tmp/cchWk8xb.s:442    .text:0000000000000384 .L0 
     /tmp/cchWk8xb.s:444    .text:0000000000000390 .L0 
     /tmp/cchWk8xb.s:456    .text:00000000000003a8 .L0 
     /tmp/cchWk8xb.s:1210   .text:00000000000007b0 .L0 
     /tmp/cchWk8xb.s:1265   .text:0000000000000814 .L0 
     /tmp/cchWk8xb.s:1362   .text:00000000000008ac .L0 
     /tmp/cchWk8xb.s:1369   .text:00000000000008bc .L0 
     /tmp/cchWk8xb.s:1331   .rodata.str1.8:0000000000000158 .LC18
GAS LISTING /tmp/cchWk8xb.s 			page 71


     /tmp/cchWk8xb.s:1401   .text:00000000000008fc .L0 
     /tmp/cchWk8xb.s:1415   .text:0000000000000918 .L0 
     /tmp/cchWk8xb.s:1425   .text:0000000000000940 .L0 
     /tmp/cchWk8xb.s:1885   .text:0000000000000b7c .L0 
     /tmp/cchWk8xb.s:2053   .text:0000000000000c6c .L0 
     /tmp/cchWk8xb.s:59     .text:000000000000004c .L2
     /tmp/cchWk8xb.s:33     .text:0000000000000020 .L3
     /tmp/cchWk8xb.s:250    .text:00000000000001c4 .L10
     /tmp/cchWk8xb.s:216    .text:000000000000018c .L8
     /tmp/cchWk8xb.s:200    .text:0000000000000160 .L13
     /tmp/cchWk8xb.s:381    .text:00000000000002e8 .L15
     /tmp/cchWk8xb.s:363    .text:00000000000002bc .L16
     /tmp/cchWk8xb.s:417    .text:0000000000000348 .L17
     /tmp/cchWk8xb.s:399    .text:000000000000031c .L18
     /tmp/cchWk8xb.s:453    .text:00000000000003a8 .L19
     /tmp/cchWk8xb.s:435    .text:000000000000037c .L20
     /tmp/cchWk8xb.s:501    .text:00000000000003ec .L23
     /tmp/cchWk8xb.s:654    .text:00000000000004dc .L30
     /tmp/cchWk8xb.s:616    .text:00000000000004a4 .L27
     /tmp/cchWk8xb.s:595    .text:0000000000000480 .L28
     /tmp/cchWk8xb.s:662    .text:00000000000004e4 .L31
     /tmp/cchWk8xb.s:667    .text:00000000000004ec .L32
     /tmp/cchWk8xb.s:628    .text:00000000000004b0 .L29
     /tmp/cchWk8xb.s:670    .text:00000000000004f0 .L26
     /tmp/cchWk8xb.s:746    .text:0000000000000554 .L39
     /tmp/cchWk8xb.s:720    .text:0000000000000530 .L36
     /tmp/cchWk8xb.s:731    .text:0000000000000540 .L37
     /tmp/cchWk8xb.s:709    .text:0000000000000520 .L35
     /tmp/cchWk8xb.s:962    .text:0000000000000688 .L51
     /tmp/cchWk8xb.s:866    .text:0000000000000608 .L53
     /tmp/cchWk8xb.s:836    .text:00000000000005d4 .L50
     /tmp/cchWk8xb.s:947    .text:0000000000000670 .L54
     /tmp/cchWk8xb.s:955    .text:000000000000067c .L47
     /tmp/cchWk8xb.s:931    .text:0000000000000658 .L49
     /tmp/cchWk8xb.s:969    .text:000000000000068c .L42
     /tmp/cchWk8xb.s:896    .text:000000000000062c .L46
     /tmp/cchWk8xb.s:917    .text:0000000000000640 .L48
     /tmp/cchWk8xb.s:1030   .text:00000000000006dc .L56
     /tmp/cchWk8xb.s:1012   .text:00000000000006c4 .L57
     /tmp/cchWk8xb.s:1055   .text:00000000000006fc .L62
     /tmp/cchWk8xb.s:1078   .text:0000000000000718 .L59
     /tmp/cchWk8xb.s:1061   .text:0000000000000700 .L60
     /tmp/cchWk8xb.s:1036   .text:00000000000006e0 .L55
     /tmp/cchWk8xb.s:1183   .text:0000000000000790 .L64
     /tmp/cchWk8xb.s:1167   .text:000000000000077c .L65
     /tmp/cchWk8xb.s:1225   .text:00000000000007d8 .L67
     /tmp/cchWk8xb.s:1300   .text:000000000000085c .L72
     /tmp/cchWk8xb.s:1431   .text:0000000000000954 .L77
     /tmp/cchWk8xb.s:1411   .text:0000000000000914 .L79
     /tmp/cchWk8xb.s:1615   .text:0000000000000a58 .L88
     /tmp/cchWk8xb.s:1581   .text:0000000000000a1c .L82
     /tmp/cchWk8xb.s:1591   .text:0000000000000a28 .L91
     /tmp/cchWk8xb.s:1598   .text:0000000000000a34 .L92
     /tmp/cchWk8xb.s:1564   .text:0000000000000a08 .L80
     /tmp/cchWk8xb.s:1520   .text:00000000000009d4 .L83
     /tmp/cchWk8xb.s:1542   .text:00000000000009ec .L85
     /tmp/cchWk8xb.s:1659   .text:0000000000000a8c .L94
GAS LISTING /tmp/cchWk8xb.s 			page 72


     /tmp/cchWk8xb.s:1670   .text:0000000000000a9c .L95
     /tmp/cchWk8xb.s:1685   .text:0000000000000aa8 .L98
     /tmp/cchWk8xb.s:1740   .text:0000000000000ae4 .L103
     /tmp/cchWk8xb.s:1677   .text:0000000000000aa4 .L97
     /tmp/cchWk8xb.s:1747   .text:0000000000000ae8 .L96
     /tmp/cchWk8xb.s:1771   .text:0000000000000b04 .L105
     /tmp/cchWk8xb.s:1787   .text:0000000000000b10 .L102
     /tmp/cchWk8xb.s:1753   .text:0000000000000aec .L99
     /tmp/cchWk8xb.s:1779   .text:0000000000000b0c .L101
     /tmp/cchWk8xb.s:1898   .text:0000000000000ba4 .L106
     /tmp/cchWk8xb.s:1878   .text:0000000000000b70 .L108
     /tmp/cchWk8xb.s:1972   .text:0000000000000c08 .L111
     /tmp/cchWk8xb.s:1945   .text:0000000000000be0 .L112
     /tmp/cchWk8xb.s:2009   .text:0000000000000c38 .L113
     /tmp/cchWk8xb.s:1982   .text:0000000000000c10 .L114
     /tmp/cchWk8xb.s:2046   .text:0000000000000c68 .L115
     /tmp/cchWk8xb.s:2019   .text:0000000000000c40 .L116
     /tmp/cchWk8xb.s:2081   .rodata.str1.8:0000000000000168 .LC19
     /tmp/cchWk8xb.s:2084   .rodata.str1.8:0000000000000180 .LC20
     /tmp/cchWk8xb.s:2087   .rodata.str1.8:0000000000000198 .LC21
     /tmp/cchWk8xb.s:2090   .rodata.str1.8:00000000000001b0 .LC22
     /tmp/cchWk8xb.s:2093   .rodata.str1.8:00000000000001c8 .LC23
     /tmp/cchWk8xb.s:2096   .rodata.str1.8:00000000000001e0 .LC24
     /tmp/cchWk8xb.s:2099   .rodata.str1.8:00000000000001f8 .LC25
     /tmp/cchWk8xb.s:2102   .rodata.str1.8:0000000000000210 .LC26
     /tmp/cchWk8xb.s:2105   .rodata.str1.8:0000000000000228 .LC27
     /tmp/cchWk8xb.s:2108   .rodata.str1.8:0000000000000240 .LC28
     /tmp/cchWk8xb.s:2111   .rodata.str1.8:0000000000000258 .LC29
     /tmp/cchWk8xb.s:2114   .rodata.str1.8:0000000000000270 .LC30
     /tmp/cchWk8xb.s:2117   .rodata.str1.8:0000000000000288 .LC31
     /tmp/cchWk8xb.s:4898   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/cchWk8xb.s:6965   .debug_str:00000000000002e6 .LASF159
     /tmp/cchWk8xb.s:7069   .debug_str:00000000000006e4 .LASF160
     /tmp/cchWk8xb.s:7221   .debug_str:0000000000000bab .LASF161
     /tmp/cchWk8xb.s:5      .text:0000000000000000 .Ltext0
     /tmp/cchWk8xb.s:2160   .text:0000000000000c98 .Letext0
     /tmp/cchWk8xb.s:6885   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/cchWk8xb.s:7137   .debug_str:00000000000008e0 .LASF0
     /tmp/cchWk8xb.s:7063   .debug_str:0000000000000682 .LASF1
     /tmp/cchWk8xb.s:7089   .debug_str:0000000000000774 .LASF2
     /tmp/cchWk8xb.s:7047   .debug_str:00000000000005d1 .LASF3
     /tmp/cchWk8xb.s:7009   .debug_str:00000000000004d3 .LASF4
     /tmp/cchWk8xb.s:6923   .debug_str:000000000000016d .LASF5
     /tmp/cchWk8xb.s:7093   .debug_str:00000000000007a3 .LASF6
     /tmp/cchWk8xb.s:7061   .debug_str:000000000000066f .LASF7
     /tmp/cchWk8xb.s:7181   .debug_str:0000000000000a75 .LASF8
     /tmp/cchWk8xb.s:6991   .debug_str:000000000000045d .LASF9
     /tmp/cchWk8xb.s:7111   .debug_str:0000000000000809 .LASF10
     /tmp/cchWk8xb.s:7167   .debug_str:00000000000009fc .LASF11
     /tmp/cchWk8xb.s:6927   .debug_str:000000000000017b .LASF12
     /tmp/cchWk8xb.s:6893   .debug_str:000000000000002c .LASF13
     /tmp/cchWk8xb.s:6935   .debug_str:00000000000001aa .LASF14
     /tmp/cchWk8xb.s:7129   .debug_str:000000000000088e .LASF15
     /tmp/cchWk8xb.s:6953   .debug_str:00000000000002a2 .LASF16
     /tmp/cchWk8xb.s:7097   .debug_str:00000000000007bb .LASF17
     /tmp/cchWk8xb.s:6959   .debug_str:00000000000002cd .LASF18
     /tmp/cchWk8xb.s:6957   .debug_str:00000000000002c7 .LASF41
GAS LISTING /tmp/cchWk8xb.s 			page 73


     /tmp/cchWk8xb.s:6949   .debug_str:0000000000000271 .LASF162
     /tmp/cchWk8xb.s:7219   .debug_str:0000000000000ba6 .LASF87
     /tmp/cchWk8xb.s:7045   .debug_str:00000000000005c6 .LASF19
     /tmp/cchWk8xb.s:7171   .debug_str:0000000000000a34 .LASF21
     /tmp/cchWk8xb.s:7073   .debug_str:000000000000070b .LASF23
     /tmp/cchWk8xb.s:7109   .debug_str:00000000000007f7 .LASF25
     /tmp/cchWk8xb.s:6977   .debug_str:000000000000042e .LASF20
     /tmp/cchWk8xb.s:6899   .debug_str:0000000000000073 .LASF22
     /tmp/cchWk8xb.s:7023   .debug_str:0000000000000538 .LASF56
     /tmp/cchWk8xb.s:7037   .debug_str:0000000000000590 .LASF58
     /tmp/cchWk8xb.s:7191   .debug_str:0000000000000ace .LASF24
     /tmp/cchWk8xb.s:7197   .debug_str:0000000000000b01 .LASF26
     /tmp/cchWk8xb.s:7123   .debug_str:000000000000085d .LASF27
     /tmp/cchWk8xb.s:7127   .debug_str:000000000000087d .LASF28
     /tmp/cchWk8xb.s:7083   .debug_str:000000000000074d .LASF29
     /tmp/cchWk8xb.s:7077   .debug_str:0000000000000720 .LASF163
     /tmp/cchWk8xb.s:6961   .debug_str:00000000000002d5 .LASF30
     /tmp/cchWk8xb.s:7041   .debug_str:00000000000005b5 .LASF31
     /tmp/cchWk8xb.s:6921   .debug_str:0000000000000168 .LASF32
     /tmp/cchWk8xb.s:6967   .debug_str:00000000000003b6 .LASF33
     /tmp/cchWk8xb.s:7079   .debug_str:0000000000000727 .LASF34
     /tmp/cchWk8xb.s:7149   .debug_str:0000000000000965 .LASF35
     /tmp/cchWk8xb.s:7185   .debug_str:0000000000000aa9 .LASF36
     /tmp/cchWk8xb.s:7195   .debug_str:0000000000000ae3 .LASF38
     /tmp/cchWk8xb.s:7117   .debug_str:0000000000000841 .LASF37
     /tmp/cchWk8xb.s:7133   .debug_str:00000000000008c1 .LASF39
     /tmp/cchWk8xb.s:7209   .debug_str:0000000000000b7f .LASF164
     /tmp/cchWk8xb.s:6903   .debug_str:00000000000000a0 .LASF165
     /tmp/cchWk8xb.s:6979   .debug_str:0000000000000433 .LASF40
     /tmp/cchWk8xb.s:6997   .debug_str:000000000000047e .LASF42
     /tmp/cchWk8xb.s:6931   .debug_str:0000000000000198 .LASF43
     /tmp/cchWk8xb.s:7087   .debug_str:0000000000000768 .LASF44
     /tmp/cchWk8xb.s:7177   .debug_str:0000000000000a66 .LASF45
     /tmp/cchWk8xb.s:6993   .debug_str:000000000000046b .LASF46
     /tmp/cchWk8xb.s:7159   .debug_str:00000000000009be .LASF47
     /tmp/cchWk8xb.s:7043   .debug_str:00000000000005ba .LASF48
     /tmp/cchWk8xb.s:7107   .debug_str:00000000000007ea .LASF49
     /tmp/cchWk8xb.s:7085   .debug_str:000000000000075e .LASF50
     /tmp/cchWk8xb.s:6995   .debug_str:0000000000000474 .LASF51
     /tmp/cchWk8xb.s:7153   .debug_str:0000000000000986 .LASF52
     /tmp/cchWk8xb.s:7057   .debug_str:000000000000065e .LASF53
     /tmp/cchWk8xb.s:7119   .debug_str:0000000000000848 .LASF54
     /tmp/cchWk8xb.s:7091   .debug_str:0000000000000787 .LASF55
     /tmp/cchWk8xb.s:7025   .debug_str:0000000000000542 .LASF57
     /tmp/cchWk8xb.s:6889   .debug_str:0000000000000006 .LASF59
     /tmp/cchWk8xb.s:6909   .debug_str:00000000000000e4 .LASF60
     /tmp/cchWk8xb.s:7131   .debug_str:00000000000008a4 .LASF61
     /tmp/cchWk8xb.s:7135   .debug_str:00000000000008d6 .LASF62
     /tmp/cchWk8xb.s:6971   .debug_str:00000000000003ed .LASF63
     /tmp/cchWk8xb.s:7081   .debug_str:000000000000072e .LASF166
     /tmp/cchWk8xb.s:7005   .debug_str:00000000000004b9 .LASF64
     /tmp/cchWk8xb.s:7115   .debug_str:000000000000081d .LASF65
     /tmp/cchWk8xb.s:6985   .debug_str:0000000000000444 .LASF66
     /tmp/cchWk8xb.s:7161   .debug_str:00000000000009c9 .LASF67
     /tmp/cchWk8xb.s:7017   .debug_str:00000000000004f6 .LASF68
     /tmp/cchWk8xb.s:6907   .debug_str:00000000000000c2 .LASF69
     /tmp/cchWk8xb.s:7059   .debug_str:0000000000000669 .LASF70
GAS LISTING /tmp/cchWk8xb.s 			page 74


     /tmp/cchWk8xb.s:7055   .debug_str:000000000000063e .LASF71
     /tmp/cchWk8xb.s:7011   .debug_str:00000000000004da .LASF72
     /tmp/cchWk8xb.s:7029   .debug_str:0000000000000556 .LASF73
     /tmp/cchWk8xb.s:7013   .debug_str:00000000000004e0 .LASF74
     /tmp/cchWk8xb.s:6989   .debug_str:0000000000000454 .LASF75
     /tmp/cchWk8xb.s:7095   .debug_str:00000000000007b6 .LASF76
     /tmp/cchWk8xb.s:7207   .debug_str:0000000000000b7a .LASF77
     /tmp/cchWk8xb.s:7007   .debug_str:00000000000004c9 .LASF78
     /tmp/cchWk8xb.s:7121   .debug_str:0000000000000851 .LASF79
     /tmp/cchWk8xb.s:7173   .debug_str:0000000000000a4e .LASF80
     /tmp/cchWk8xb.s:7213   .debug_str:0000000000000b90 .LASF81
     /tmp/cchWk8xb.s:6983   .debug_str:000000000000043d .LASF82
     /tmp/cchWk8xb.s:7187   .debug_str:0000000000000aaf .LASF84
     /tmp/cchWk8xb.s:6947   .debug_str:0000000000000269 .LASF83
     /tmp/cchWk8xb.s:7021   .debug_str:0000000000000525 .LASF85
     /tmp/cchWk8xb.s:7201   .debug_str:0000000000000b3e .LASF86
     /tmp/cchWk8xb.s:7163   .debug_str:00000000000009e7 .LASF88
     /tmp/cchWk8xb.s:7003   .debug_str:00000000000004a9 .LASF89
     /tmp/cchWk8xb.s:6999   .debug_str:000000000000048a .LASF90
     /tmp/cchWk8xb.s:6905   .debug_str:00000000000000b5 .LASF91
     /tmp/cchWk8xb.s:6987   .debug_str:000000000000044d .LASF92
     /tmp/cchWk8xb.s:7151   .debug_str:0000000000000978 .LASF93
     /tmp/cchWk8xb.s:7019   .debug_str:0000000000000502 .LASF94
     /tmp/cchWk8xb.s:7217   .debug_str:0000000000000b9a .LASF95
     /tmp/cchWk8xb.s:6895   .debug_str:000000000000003c .LASF96
     /tmp/cchWk8xb.s:6963   .debug_str:00000000000002da .LASF97
     /tmp/cchWk8xb.s:7067   .debug_str:00000000000006bb .LASF98
     /tmp/cchWk8xb.s:6929   .debug_str:000000000000018b .LASF99
     /tmp/cchWk8xb.s:7169   .debug_str:0000000000000a0b .LASF100
     /tmp/cchWk8xb.s:7143   .debug_str:0000000000000945 .LASF101
     /tmp/cchWk8xb.s:6919   .debug_str:0000000000000140 .LASF102
     /tmp/cchWk8xb.s:7049   .debug_str:00000000000005df .LASF103
     /tmp/cchWk8xb.s:7157   .debug_str:0000000000000996 .LASF104
     /tmp/cchWk8xb.s:7105   .debug_str:00000000000007db .LASF105
     /tmp/cchWk8xb.s:6951   .debug_str:0000000000000277 .LASF106
     /tmp/cchWk8xb.s:7175   .debug_str:0000000000000a57 .LASF107
     /tmp/cchWk8xb.s:7141   .debug_str:0000000000000920 .LASF108
     /tmp/cchWk8xb.s:7193   .debug_str:0000000000000ada .LASF109
     /tmp/cchWk8xb.s:7183   .debug_str:0000000000000a85 .LASF110
     /tmp/cchWk8xb.s:6915   .debug_str:0000000000000112 .LASF111
     /tmp/cchWk8xb.s:7031   .debug_str:000000000000055b .LASF112
     /tmp/cchWk8xb.s:7027   .debug_str:000000000000054b .LASF113
     /tmp/cchWk8xb.s:6917   .debug_str:000000000000011d .LASF114
     /tmp/cchWk8xb.s:6891   .debug_str:0000000000000022 .LASF115
     /tmp/cchWk8xb.s:7199   .debug_str:0000000000000b1a .LASF116
     /tmp/cchWk8xb.s:6943   .debug_str:0000000000000234 .LASF117
     /tmp/cchWk8xb.s:6939   .debug_str:00000000000001e4 .LASF118
     /tmp/cchWk8xb.s:7035   .debug_str:000000000000058a .LASF119
     /tmp/cchWk8xb.s:6973   .debug_str:000000000000040a .LASF120
     /tmp/cchWk8xb.s:6911   .debug_str:00000000000000ee .LASF121
     /tmp/cchWk8xb.s:7001   .debug_str:0000000000000494 .LASF122
     /tmp/cchWk8xb.s:7075   .debug_str:0000000000000711 .LASF123
     /tmp/cchWk8xb.s:6937   .debug_str:00000000000001b6 .LASF124
     /tmp/cchWk8xb.s:6955   .debug_str:00000000000002b8 .LASF125
     /tmp/cchWk8xb.s:7139   .debug_str:00000000000008f2 .LASF126
     /tmp/cchWk8xb.s:7215   .debug_str:0000000000000b95 .LASF127
     /tmp/cchWk8xb.s:6969   .debug_str:00000000000003c7 .LASF128
GAS LISTING /tmp/cchWk8xb.s 			page 75


     /tmp/cchWk8xb.s:7145   .debug_str:0000000000000951 .LASF129
     /tmp/cchWk8xb.s:6941   .debug_str:000000000000020b .LASF130
     /tmp/cchWk8xb.s:7205   .debug_str:0000000000000b6c .LASF131
     /tmp/cchWk8xb.s:7203   .debug_str:0000000000000b43 .LASF132
     /tmp/cchWk8xb.s:7071   .debug_str:00000000000006fa .LASF133
     /tmp/cchWk8xb.s:7065   .debug_str:000000000000068f .LASF134
     /tmp/cchWk8xb.s:7189   .debug_str:0000000000000ac1 .LASF135
     /tmp/cchWk8xb.s:7053   .debug_str:0000000000000613 .LASF136
     /tmp/cchWk8xb.s:7125   .debug_str:0000000000000872 .LASF137
     /tmp/cchWk8xb.s:7051   .debug_str:00000000000005ec .LASF138
     /tmp/cchWk8xb.s:6933   .debug_str:00000000000001a4 .LASF139
     /tmp/cchWk8xb.s:7223   .debug_str:0000000000000bdc .LASF140
     /tmp/cchWk8xb.s:6901   .debug_str:0000000000000086 .LASF141
     /tmp/cchWk8xb.s:6913   .debug_str:00000000000000f8 .LASF142
     /tmp/cchWk8xb.s:6975   .debug_str:0000000000000410 .LASF143
     /tmp/cchWk8xb.s:6945   .debug_str:000000000000023f .LASF144
     /tmp/cchWk8xb.s:761    .text:0000000000000560 .LFB25
     /tmp/cchWk8xb.s:807    .text:00000000000005b4 .LFE25
     /tmp/cchWk8xb.s:7101   .debug_str:00000000000007c7 .LASF145
     /tmp/cchWk8xb.s:5901   .debug_loc:0000000000000000 .LLST10
     /tmp/cchWk8xb.s:7099   .debug_str:00000000000007c0 .LASF146
     /tmp/cchWk8xb.s:5915   .debug_loc:0000000000000039 .LLST11
     /tmp/cchWk8xb.s:6981   .debug_str:0000000000000438 .LASF147
     /tmp/cchWk8xb.s:5933   .debug_loc:0000000000000085 .LLST12
     /tmp/cchWk8xb.s:784    .text:000000000000058c .LVL71
     /tmp/cchWk8xb.s:790    .text:000000000000059c .LVL72
     /tmp/cchWk8xb.s:694    .text:000000000000050c .LFB24
     /tmp/cchWk8xb.s:755    .text:0000000000000560 .LFE24
     /tmp/cchWk8xb.s:481    .text:00000000000003d0 .LFB23
     /tmp/cchWk8xb.s:516    .text:0000000000000400 .LFE23
     /tmp/cchWk8xb.s:285    .text:00000000000001c8 .LFB22
     /tmp/cchWk8xb.s:475    .text:00000000000003d0 .LFE22
     /tmp/cchWk8xb.s:5951   .debug_loc:00000000000000d1 .LLST4
     /tmp/cchWk8xb.s:7179   .debug_str:0000000000000a70 .LASF148
     /tmp/cchWk8xb.s:5969   .debug_loc:000000000000011d .LLST5
     /tmp/cchWk8xb.s:307    .text:00000000000001f4 .LVL26
     /tmp/cchWk8xb.s:312    .text:0000000000000200 .LVL27
     /tmp/cchWk8xb.s:317    .text:0000000000000210 .LVL28
     /tmp/cchWk8xb.s:326    .text:0000000000000238 .LVL29
     /tmp/cchWk8xb.s:334    .text:0000000000000258 .LVL30
     /tmp/cchWk8xb.s:342    .text:0000000000000278 .LVL31
     /tmp/cchWk8xb.s:350    .text:0000000000000298 .LVL32
     /tmp/cchWk8xb.s:358    .text:00000000000002b8 .LVL33
     /tmp/cchWk8xb.s:374    .text:00000000000002e0 .LVL35
     /tmp/cchWk8xb.s:386    .text:00000000000002f8 .LVL37
     /tmp/cchWk8xb.s:394    .text:0000000000000318 .LVL38
     /tmp/cchWk8xb.s:410    .text:0000000000000340 .LVL40
     /tmp/cchWk8xb.s:422    .text:0000000000000358 .LVL42
     /tmp/cchWk8xb.s:430    .text:0000000000000378 .LVL43
     /tmp/cchWk8xb.s:446    .text:00000000000003a0 .LVL45
     /tmp/cchWk8xb.s:458    .text:00000000000003b8 .LVL47
     /tmp/cchWk8xb.s:116    .text:0000000000000068 .LFB21
     /tmp/cchWk8xb.s:253    .text:00000000000001c8 .LFE21
     /tmp/cchWk8xb.s:5976   .debug_loc:0000000000000140 .LLST2
     /tmp/cchWk8xb.s:195    .text:0000000000000158 .LBB36
     /tmp/cchWk8xb.s:226    .text:000000000000019c .LBE36
     /tmp/cchWk8xb.s:5998   .debug_loc:000000000000019f .LLST3
GAS LISTING /tmp/cchWk8xb.s 			page 76


     /tmp/cchWk8xb.s:212    .text:0000000000000188 .LVL18
     /tmp/cchWk8xb.s:148    .text:00000000000000a8 .LVL10
     /tmp/cchWk8xb.s:156    .text:00000000000000c8 .LVL11
     /tmp/cchWk8xb.s:164    .text:00000000000000e8 .LVL12
     /tmp/cchWk8xb.s:172    .text:0000000000000108 .LVL13
     /tmp/cchWk8xb.s:180    .text:0000000000000128 .LVL14
     /tmp/cchWk8xb.s:188    .text:0000000000000148 .LVL15
     /tmp/cchWk8xb.s:193    .text:0000000000000158 .LVL16
     /tmp/cchWk8xb.s:231    .text:00000000000001ac .LVL20
     /tmp/cchWk8xb.s:10     .text:0000000000000000 .LFB20
     /tmp/cchWk8xb.s:78     .text:0000000000000068 .LFE20
     /tmp/cchWk8xb.s:6010   .debug_loc:00000000000001d6 .LLST0
     /tmp/cchWk8xb.s:6028   .debug_loc:0000000000000222 .LLST1
     /tmp/cchWk8xb.s:42     .text:0000000000000034 .LVL3
     /tmp/cchWk8xb.s:1922   .text:0000000000000bbc .LFB19
     /tmp/cchWk8xb.s:2074   .text:0000000000000c98 .LFE19
     /tmp/cchWk8xb.s:6044   .debug_loc:000000000000026c .LLST59
     /tmp/cchWk8xb.s:1946   .text:0000000000000be0 .LBB119
     /tmp/cchWk8xb.s:1975   .text:0000000000000c08 .LBE119
     /tmp/cchWk8xb.s:6062   .debug_loc:00000000000002b8 .LLST60
     /tmp/cchWk8xb.s:1952   .text:0000000000000be8 .LBB121
     /tmp/cchWk8xb.s:1969   .text:0000000000000c04 .LBE121
     /tmp/cchWk8xb.s:6069   .debug_loc:00000000000002db .LLST61
     /tmp/cchWk8xb.s:1961   .text:0000000000000bf8 .LVL200
     /tmp/cchWk8xb.s:1983   .text:0000000000000c10 .LBB122
     /tmp/cchWk8xb.s:2012   .text:0000000000000c38 .LBE122
     /tmp/cchWk8xb.s:6076   .debug_loc:00000000000002fe .LLST62
     /tmp/cchWk8xb.s:1989   .text:0000000000000c18 .LBB124
     /tmp/cchWk8xb.s:2006   .text:0000000000000c34 .LBE124
     /tmp/cchWk8xb.s:6083   .debug_loc:0000000000000321 .LLST63
     /tmp/cchWk8xb.s:1998   .text:0000000000000c28 .LVL204
     /tmp/cchWk8xb.s:2020   .text:0000000000000c40 .LBB125
     /tmp/cchWk8xb.s:2049   .text:0000000000000c68 .LBE125
     /tmp/cchWk8xb.s:6090   .debug_loc:0000000000000344 .LLST64
     /tmp/cchWk8xb.s:2026   .text:0000000000000c48 .LBB127
     /tmp/cchWk8xb.s:2043   .text:0000000000000c64 .LBE127
     /tmp/cchWk8xb.s:6097   .debug_loc:0000000000000367 .LLST65
     /tmp/cchWk8xb.s:2035   .text:0000000000000c58 .LVL208
     /tmp/cchWk8xb.s:2055   .text:0000000000000c7c .LVL210
     /tmp/cchWk8xb.s:1237   .text:00000000000007e0 .LFB18
     /tmp/cchWk8xb.s:1327   .text:0000000000000884 .LFE18
     /tmp/cchWk8xb.s:6104   .debug_loc:000000000000038a .LLST29
     /tmp/cchWk8xb.s:7155   .debug_str:0000000000000991 .LASF149
     /tmp/cchWk8xb.s:6122   .debug_loc:00000000000003d6 .LLST30
     /tmp/cchWk8xb.s:6140   .debug_loc:0000000000000422 .LLST31
     /tmp/cchWk8xb.s:6158   .debug_loc:000000000000046e .LLST32
     /tmp/cchWk8xb.s:6176   .debug_loc:00000000000004ba .LLST33
     /tmp/cchWk8xb.s:1268   .text:0000000000000824 .LVL127
     /tmp/cchWk8xb.s:1298   .text:000000000000085c .LVL129
     /tmp/cchWk8xb.s:1855   .text:0000000000000b50 .LFB17
     /tmp/cchWk8xb.s:1916   .text:0000000000000bbc .LFE17
     /tmp/cchWk8xb.s:7113   .debug_str:0000000000000818 .LASF150
     /tmp/cchWk8xb.s:6187   .debug_loc:00000000000004f0 .LLST57
     /tmp/cchWk8xb.s:1874   .text:0000000000000b6c .LBB109
     /tmp/cchWk8xb.s:1899   .text:0000000000000ba4 .LBE109
     /tmp/cchWk8xb.s:6205   .debug_loc:000000000000053c .LLST58
     /tmp/cchWk8xb.s:1890   .text:0000000000000b98 .LVL192
GAS LISTING /tmp/cchWk8xb.s 			page 77


     /tmp/cchWk8xb.s:1630   .text:0000000000000a5c .LFB16
     /tmp/cchWk8xb.s:1849   .text:0000000000000b50 .LFE16
     /tmp/cchWk8xb.s:6221   .debug_loc:0000000000000586 .LLST43
     /tmp/cchWk8xb.s:6243   .debug_loc:00000000000005e5 .LLST44
     /tmp/cchWk8xb.s:7211   .debug_str:0000000000000b88 .LASF151
     /tmp/cchWk8xb.s:6265   .debug_loc:0000000000000644 .LLST45
     /tmp/cchWk8xb.s:1678   .text:0000000000000aa4 .LBB87
     /tmp/cchWk8xb.s:6833   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/cchWk8xb.s:6276   .debug_loc:000000000000067a .LLST46
     /tmp/cchWk8xb.s:6283   .debug_loc:000000000000069d .LLST47
     /tmp/cchWk8xb.s:6294   .debug_loc:00000000000006d3 .LLST48
     /tmp/cchWk8xb.s:6305   .debug_loc:0000000000000709 .LLST49
     /tmp/cchWk8xb.s:1693   .text:0000000000000aac .LBB90
     /tmp/cchWk8xb.s:1710   .text:0000000000000ac4 .LBE90
     /tmp/cchWk8xb.s:6321   .debug_loc:0000000000000753 .LLST50
     /tmp/cchWk8xb.s:1724   .text:0000000000000acc .LBB93
     /tmp/cchWk8xb.s:1741   .text:0000000000000ae4 .LBE93
     /tmp/cchWk8xb.s:6328   .debug_loc:0000000000000776 .LLST51
     /tmp/cchWk8xb.s:1734   .text:0000000000000adc .LVL173
     /tmp/cchWk8xb.s:1780   .text:0000000000000b0c .LBB98
     /tmp/cchWk8xb.s:6350   .debug_loc:00000000000007b7 .LLST52
     /tmp/cchWk8xb.s:6357   .debug_loc:00000000000007da .LLST53
     /tmp/cchWk8xb.s:6368   .debug_loc:0000000000000810 .LLST54
     /tmp/cchWk8xb.s:1795   .text:0000000000000b14 .LBB101
     /tmp/cchWk8xb.s:1812   .text:0000000000000b2c .LBE101
     /tmp/cchWk8xb.s:6384   .debug_loc:000000000000085a .LLST55
     /tmp/cchWk8xb.s:1826   .text:0000000000000b34 .LBB104
     /tmp/cchWk8xb.s:1843   .text:0000000000000b50 .LBE104
     /tmp/cchWk8xb.s:6391   .debug_loc:000000000000087d .LLST56
     /tmp/cchWk8xb.s:1838   .text:0000000000000b48 .LVL188
     /tmp/cchWk8xb.s:1658   .text:0000000000000a8c .LVL164
     /tmp/cchWk8xb.s:1669   .text:0000000000000a9c .LVL165
     /tmp/cchWk8xb.s:1457   .text:0000000000000974 .LFB15
     /tmp/cchWk8xb.s:1624   .text:0000000000000a5c .LFE15
     /tmp/cchWk8xb.s:6413   .debug_loc:00000000000008be .LLST37
     /tmp/cchWk8xb.s:7147   .debug_str:000000000000095f .LASF152
     /tmp/cchWk8xb.s:6439   .debug_loc:0000000000000930 .LLST38
     /tmp/cchWk8xb.s:6460   .debug_loc:000000000000097f .LLST39
     /tmp/cchWk8xb.s:6471   .debug_loc:00000000000009b5 .LLST40
     /tmp/cchWk8xb.s:1505   .text:00000000000009c4 .LBB64
     /tmp/cchWk8xb.s:1512   .text:00000000000009c8 .LBE64
     /tmp/cchWk8xb.s:6482   .debug_loc:00000000000009eb .LLST41
     /tmp/cchWk8xb.s:1528   .text:00000000000009dc .LBB66
     /tmp/cchWk8xb.s:1535   .text:00000000000009e0 .LBE66
     /tmp/cchWk8xb.s:6489   .debug_loc:0000000000000a0e .LLST42
     /tmp/cchWk8xb.s:1563   .text:0000000000000a08 .LVL153
     /tmp/cchWk8xb.s:1604   .text:0000000000000a40 .LVL159
     /tmp/cchWk8xb.s:1612   .text:0000000000000a54 .LVL160
     /tmp/cchWk8xb.s:1108   .text:0000000000000740 .LFB14
     /tmp/cchWk8xb.s:1231   .text:00000000000007e0 .LFE14
     /tmp/cchWk8xb.s:6496   .debug_loc:0000000000000a31 .LLST24
     /tmp/cchWk8xb.s:7165   .debug_str:00000000000009f6 .LASF153
     /tmp/cchWk8xb.s:6516   .debug_loc:0000000000000a7f .LLST25
     /tmp/cchWk8xb.s:1113   .text:0000000000000740 .LBB57
     /tmp/cchWk8xb.s:1162   .text:0000000000000778 .LBE57
     /tmp/cchWk8xb.s:6539   .debug_loc:0000000000000adf .LLST26
     /tmp/cchWk8xb.s:1163   .text:0000000000000778 .LBB59
GAS LISTING /tmp/cchWk8xb.s 			page 78


     /tmp/cchWk8xb.s:1187   .text:0000000000000790 .LBE59
     /tmp/cchWk8xb.s:6550   .debug_loc:0000000000000b15 .LLST27
     /tmp/cchWk8xb.s:6557   .debug_loc:0000000000000b38 .LLST28
     /tmp/cchWk8xb.s:1214   .text:00000000000007c8 .LVL123
     /tmp/cchWk8xb.s:991    .text:00000000000006a4 .LFB13
     /tmp/cchWk8xb.s:1102   .text:0000000000000740 .LFE13
     /tmp/cchWk8xb.s:6564   .debug_loc:0000000000000b5b .LLST18
     /tmp/cchWk8xb.s:6586   .debug_loc:0000000000000bba .LLST19
     /tmp/cchWk8xb.s:1013   .text:00000000000006c4 .LBB51
     /tmp/cchWk8xb.s:1033   .text:00000000000006dc .LBE51
     /tmp/cchWk8xb.s:6605   .debug_loc:0000000000000c16 .LLST20
     /tmp/cchWk8xb.s:1019   .text:00000000000006c8 .LBB53
     /tmp/cchWk8xb.s:1031   .text:00000000000006dc .LBE53
     /tmp/cchWk8xb.s:6612   .debug_loc:0000000000000c39 .LLST21
     /tmp/cchWk8xb.s:1024   .text:00000000000006d4 .LVL95
     /tmp/cchWk8xb.s:1062   .text:0000000000000700 .LBB54
     /tmp/cchWk8xb.s:1081   .text:0000000000000718 .LBE54
     /tmp/cchWk8xb.s:6619   .debug_loc:0000000000000c5c .LLST22
     /tmp/cchWk8xb.s:1067   .text:0000000000000704 .LBB56
     /tmp/cchWk8xb.s:1079   .text:0000000000000718 .LBE56
     /tmp/cchWk8xb.s:6626   .debug_loc:0000000000000c7f .LLST23
     /tmp/cchWk8xb.s:1072   .text:0000000000000710 .LVL101
     /tmp/cchWk8xb.s:1088   .text:0000000000000728 .LVL103
     /tmp/cchWk8xb.s:1095   .text:0000000000000738 .LVL104
     /tmp/cchWk8xb.s:813    .text:00000000000005b4 .LFB12
     /tmp/cchWk8xb.s:985    .text:00000000000006a4 .LFE12
     /tmp/cchWk8xb.s:6633   .debug_loc:0000000000000ca2 .LLST13
     /tmp/cchWk8xb.s:6667   .debug_loc:0000000000000d3a .LLST14
     /tmp/cchWk8xb.s:6683   .debug_loc:0000000000000d84 .LLST15
     /tmp/cchWk8xb.s:6694   .debug_loc:0000000000000dba .LLST16
     /tmp/cchWk8xb.s:878    .text:0000000000000618 .LBB44
     /tmp/cchWk8xb.s:888    .text:0000000000000620 .LBE44
     /tmp/cchWk8xb.s:6701   .debug_loc:0000000000000ddd .LLST17
     /tmp/cchWk8xb.s:930    .text:0000000000000658 .LVL85
     /tmp/cchWk8xb.s:522    .text:0000000000000400 .LFB11
     /tmp/cchWk8xb.s:688    .text:000000000000050c .LFE11
     /tmp/cchWk8xb.s:6708   .debug_loc:0000000000000e00 .LLST6
     /tmp/cchWk8xb.s:6726   .debug_loc:0000000000000e4c .LLST7
     /tmp/cchWk8xb.s:591    .text:000000000000047c .LBB38
     /tmp/cchWk8xb.s:617    .text:00000000000004a4 .LBE38
     /tmp/cchWk8xb.s:6745   .debug_loc:0000000000000ea8 .LLST8
     /tmp/cchWk8xb.s:624    .text:00000000000004ac .LBB40
     /tmp/cchWk8xb.s:655    .text:00000000000004dc .LBE40
     /tmp/cchWk8xb.s:6761   .debug_loc:0000000000000ef2 .LLST9
     /tmp/cchWk8xb.s:546    .text:000000000000042c .LVL53
     /tmp/cchWk8xb.s:556    .text:0000000000000444 .LVL55
     /tmp/cchWk8xb.s:1338   .text:0000000000000884 .LFB10
     /tmp/cchWk8xb.s:1451   .text:0000000000000974 .LFE10
     /tmp/cchWk8xb.s:6887   .debug_str:0000000000000000 .LASF154
     /tmp/cchWk8xb.s:6772   .debug_loc:0000000000000f28 .LLST34
     /tmp/cchWk8xb.s:6897   .debug_str:000000000000006a .LASF155
     /tmp/cchWk8xb.s:6790   .debug_loc:0000000000000f74 .LLST35
     /tmp/cchWk8xb.s:1405   .text:000000000000090c .LBB61
     /tmp/cchWk8xb.s:1435   .text:000000000000095c .LBE61
     /tmp/cchWk8xb.s:6808   .debug_loc:0000000000000fc0 .LLST36
     /tmp/cchWk8xb.s:1423   .text:0000000000000940 .LVL140
     /tmp/cchWk8xb.s:1359   .text:00000000000008ac .LVL136
GAS LISTING /tmp/cchWk8xb.s 			page 79


     /tmp/cchWk8xb.s:1403   .text:000000000000090c .LVL137
     /tmp/cchWk8xb.s:7015   .debug_str:00000000000004eb .LASF156
     /tmp/cchWk8xb.s:7103   .debug_str:00000000000007d0 .LASF157
     /tmp/cchWk8xb.s:7033   .debug_str:0000000000000585 .LASF158
     /tmp/cchWk8xb.s:7039   .debug_str:00000000000005a6 .LASF167
     /tmp/cchWk8xb.s:6925   .debug_str:0000000000000174 .LASF168
     /tmp/cchWk8xb.s:764    .text:0000000000000560 .LVL69
     /tmp/cchWk8xb.s:782    .text:0000000000000584 .LVL70
     /tmp/cchWk8xb.s:802    .text:00000000000005ac .LVL74
     /tmp/cchWk8xb.s:799    .text:00000000000005a8 .LVL73
     /tmp/cchWk8xb.s:288    .text:00000000000001c8 .LVL24
     /tmp/cchWk8xb.s:305    .text:00000000000001ec .LVL25
     /tmp/cchWk8xb.s:470    .text:00000000000003c8 .LVL49
     /tmp/cchWk8xb.s:362    .text:00000000000002bc .LVL34
     /tmp/cchWk8xb.s:467    .text:00000000000003c4 .LVL48
     /tmp/cchWk8xb.s:119    .text:0000000000000068 .LVL8
     /tmp/cchWk8xb.s:146    .text:00000000000000a0 .LVL9
     /tmp/cchWk8xb.s:245    .text:00000000000001bc .LVL22
     /tmp/cchWk8xb.s:249    .text:00000000000001c4 .LVL23
     /tmp/cchWk8xb.s:199    .text:0000000000000160 .LVL17
     /tmp/cchWk8xb.s:242    .text:00000000000001b8 .LVL21
     /tmp/cchWk8xb.s:14     .text:0000000000000000 .LVL0
     /tmp/cchWk8xb.s:32     .text:0000000000000020 .LVL2
     /tmp/cchWk8xb.s:70     .text:000000000000005c .LVL6
     /tmp/cchWk8xb.s:29     .text:000000000000001c .LVL1
     /tmp/cchWk8xb.s:50     .text:0000000000000040 .LVL4
     /tmp/cchWk8xb.s:58     .text:000000000000004c .LVL5
     /tmp/cchWk8xb.s:73     .text:0000000000000060 .LVL7
     /tmp/cchWk8xb.s:1925   .text:0000000000000bbc .LVL197
     /tmp/cchWk8xb.s:1944   .text:0000000000000be0 .LVL198
     /tmp/cchWk8xb.s:2067   .text:0000000000000c8c .LVL211
     /tmp/cchWk8xb.s:1973   .text:0000000000000c08 .LVL201
     /tmp/cchWk8xb.s:1954   .text:0000000000000be8 .LVL199
     /tmp/cchWk8xb.s:1981   .text:0000000000000c10 .LVL202
     /tmp/cchWk8xb.s:2010   .text:0000000000000c38 .LVL205
     /tmp/cchWk8xb.s:1991   .text:0000000000000c18 .LVL203
     /tmp/cchWk8xb.s:2018   .text:0000000000000c40 .LVL206
     /tmp/cchWk8xb.s:2047   .text:0000000000000c68 .LVL209
     /tmp/cchWk8xb.s:2028   .text:0000000000000c48 .LVL207
     /tmp/cchWk8xb.s:1240   .text:00000000000007e0 .LVL125
     /tmp/cchWk8xb.s:1266   .text:000000000000081c .LVL126
     /tmp/cchWk8xb.s:1313   .text:0000000000000870 .LVL131
     /tmp/cchWk8xb.s:1316   .text:0000000000000874 .LVL132
     /tmp/cchWk8xb.s:1322   .text:000000000000087c .LVL134
     /tmp/cchWk8xb.s:1319   .text:0000000000000878 .LVL133
     /tmp/cchWk8xb.s:1270   .text:0000000000000828 .LVL128
     /tmp/cchWk8xb.s:1310   .text:000000000000086c .LVL130
     /tmp/cchWk8xb.s:1858   .text:0000000000000b50 .LVL189
     /tmp/cchWk8xb.s:1877   .text:0000000000000b70 .LVL191
     /tmp/cchWk8xb.s:1911   .text:0000000000000bb4 .LVL196
     /tmp/cchWk8xb.s:1873   .text:0000000000000b6c .LVL190
     /tmp/cchWk8xb.s:1895   .text:0000000000000ba0 .LVL193
     /tmp/cchWk8xb.s:1897   .text:0000000000000ba4 .LVL194
     /tmp/cchWk8xb.s:1908   .text:0000000000000bb0 .LVL195
     /tmp/cchWk8xb.s:1633   .text:0000000000000a5c .LVL162
     /tmp/cchWk8xb.s:1656   .text:0000000000000a88 .LVL163
     /tmp/cchWk8xb.s:1766   .text:0000000000000afc .LVL178
GAS LISTING /tmp/cchWk8xb.s 			page 80


     /tmp/cchWk8xb.s:1770   .text:0000000000000b04 .LVL179
     /tmp/cchWk8xb.s:1763   .text:0000000000000af8 .LVL177
     /tmp/cchWk8xb.s:1746   .text:0000000000000ae8 .LVL175
     /tmp/cchWk8xb.s:1752   .text:0000000000000aec .LVL176
     /tmp/cchWk8xb.s:1836   .text:0000000000000b40 .LVL187
     /tmp/cchWk8xb.s:1674   .text:0000000000000aa0 .LVL166
     /tmp/cchWk8xb.s:1739   .text:0000000000000ae4 .LVL174
     /tmp/cchWk8xb.s:1676   .text:0000000000000aa4 .LVL167
     /tmp/cchWk8xb.s:1684   .text:0000000000000aa8 .LVL168
     /tmp/cchWk8xb.s:1708   .text:0000000000000ac4 .LVL170
     /tmp/cchWk8xb.s:1728   .text:0000000000000ad0 .LVL171
     /tmp/cchWk8xb.s:1692   .text:0000000000000aac .LVL169
     /tmp/cchWk8xb.s:1732   .text:0000000000000ad4 .LVL172
     /tmp/cchWk8xb.s:1776   .text:0000000000000b08 .LVL180
     /tmp/cchWk8xb.s:1778   .text:0000000000000b0c .LVL181
     /tmp/cchWk8xb.s:1786   .text:0000000000000b10 .LVL182
     /tmp/cchWk8xb.s:1810   .text:0000000000000b2c .LVL184
     /tmp/cchWk8xb.s:1830   .text:0000000000000b38 .LVL185
     /tmp/cchWk8xb.s:1794   .text:0000000000000b14 .LVL183
     /tmp/cchWk8xb.s:1834   .text:0000000000000b3c .LVL186
     /tmp/cchWk8xb.s:1460   .text:0000000000000974 .LVL143
     /tmp/cchWk8xb.s:1517   .text:00000000000009d0 .LVL148
     /tmp/cchWk8xb.s:1576   .text:0000000000000a14 .LVL154
     /tmp/cchWk8xb.s:1580   .text:0000000000000a1c .LVL155
     /tmp/cchWk8xb.s:1614   .text:0000000000000a58 .LVL161
     /tmp/cchWk8xb.s:1472   .text:0000000000000988 .LVL144
     /tmp/cchWk8xb.s:1474   .text:000000000000098c .LVL145
     /tmp/cchWk8xb.s:1521   .text:00000000000009d4 .LVL149
     /tmp/cchWk8xb.s:1590   .text:0000000000000a28 .LVL156
     /tmp/cchWk8xb.s:1543   .text:00000000000009ec .LVL152
     /tmp/cchWk8xb.s:1597   .text:0000000000000a34 .LVL157
     /tmp/cchWk8xb.s:1602   .text:0000000000000a38 .LVL158
     /tmp/cchWk8xb.s:1504   .text:00000000000009c4 .LVL146
     /tmp/cchWk8xb.s:1510   .text:00000000000009c8 .LVL147
     /tmp/cchWk8xb.s:1527   .text:00000000000009dc .LVL150
     /tmp/cchWk8xb.s:1533   .text:00000000000009e0 .LVL151
     /tmp/cchWk8xb.s:1111   .text:0000000000000740 .LVL106
     /tmp/cchWk8xb.s:1123   .text:0000000000000748 .LVL108
     /tmp/cchWk8xb.s:1126   .text:000000000000074c .LVL109
     /tmp/cchWk8xb.s:1185   .text:0000000000000790 .LVL119
     /tmp/cchWk8xb.s:1191   .text:0000000000000794 .LVL120
     /tmp/cchWk8xb.s:1205   .text:00000000000007ac .LVL121
     /tmp/cchWk8xb.s:1209   .text:00000000000007b0 .LVL122
     /tmp/cchWk8xb.s:1224   .text:00000000000007d8 .LVL124
     /tmp/cchWk8xb.s:1119   .text:0000000000000744 .LVL107
     /tmp/cchWk8xb.s:1160   .text:0000000000000778 .LVL115
     /tmp/cchWk8xb.s:1168   .text:000000000000077c .LVL116
     /tmp/cchWk8xb.s:994    .text:00000000000006a4 .LVL93
     /tmp/cchWk8xb.s:1011   .text:00000000000006c4 .LVL94
     /tmp/cchWk8xb.s:1050   .text:00000000000006f4 .LVL98
     /tmp/cchWk8xb.s:1054   .text:00000000000006fc .LVL99
     /tmp/cchWk8xb.s:1029   .text:00000000000006dc .LVL96
     /tmp/cchWk8xb.s:1047   .text:00000000000006f0 .LVL97
     /tmp/cchWk8xb.s:1060   .text:0000000000000700 .LVL100
     /tmp/cchWk8xb.s:1077   .text:0000000000000718 .LVL102
     /tmp/cchWk8xb.s:816    .text:00000000000005b4 .LVL75
     /tmp/cchWk8xb.s:893    .text:0000000000000628 .LVL81
GAS LISTING /tmp/cchWk8xb.s 			page 81


     /tmp/cchWk8xb.s:946    .text:0000000000000670 .LVL87
     /tmp/cchWk8xb.s:950    .text:0000000000000674 .LVL88
     /tmp/cchWk8xb.s:961    .text:0000000000000688 .LVL90
     /tmp/cchWk8xb.s:968    .text:000000000000068c .LVL91
     /tmp/cchWk8xb.s:980    .text:000000000000069c .LVL92
     /tmp/cchWk8xb.s:831    .text:00000000000005d0 .LVL76
     /tmp/cchWk8xb.s:835    .text:00000000000005d4 .LVL77
     /tmp/cchWk8xb.s:941    .text:0000000000000668 .LVL86
     /tmp/cchWk8xb.s:897    .text:000000000000062c .LVL82
     /tmp/cchWk8xb.s:954    .text:000000000000067c .LVL89
     /tmp/cchWk8xb.s:918    .text:0000000000000640 .LVL84
     /tmp/cchWk8xb.s:877    .text:0000000000000618 .LVL79
     /tmp/cchWk8xb.s:886    .text:0000000000000620 .LVL80
     /tmp/cchWk8xb.s:525    .text:0000000000000400 .LVL51
     /tmp/cchWk8xb.s:544    .text:0000000000000424 .LVL52
     /tmp/cchWk8xb.s:683    .text:0000000000000504 .LVL67
     /tmp/cchWk8xb.s:554    .text:000000000000043c .LVL54
     /tmp/cchWk8xb.s:653    .text:00000000000004dc .LVL62
     /tmp/cchWk8xb.s:659    .text:00000000000004e0 .LVL63
     /tmp/cchWk8xb.s:661    .text:00000000000004e4 .LVL64
     /tmp/cchWk8xb.s:669    .text:00000000000004f0 .LVL66
     /tmp/cchWk8xb.s:590    .text:000000000000047c .LVL56
     /tmp/cchWk8xb.s:594    .text:0000000000000480 .LVL57
     /tmp/cchWk8xb.s:627    .text:00000000000004b0 .LVL59
     /tmp/cchWk8xb.s:666    .text:00000000000004ec .LVL65
     /tmp/cchWk8xb.s:1341   .text:0000000000000884 .LVL135
     /tmp/cchWk8xb.s:1410   .text:0000000000000914 .LVL139
     /tmp/cchWk8xb.s:1408   .text:0000000000000910 .LVL138
     /tmp/cchWk8xb.s:1444   .text:0000000000000968 .LVL142
     /tmp/cchWk8xb.s:2166   .debug_info:0000000000000000 .Ldebug_info0
     /tmp/cchWk8xb.s:832    .text:00000000000005d0 .LBB41
     /tmp/cchWk8xb.s:842    .text:00000000000005dc .LBE41
     /tmp/cchWk8xb.s:844    .text:00000000000005dc .LBB49
     /tmp/cchWk8xb.s:906    .text:0000000000000634 .LBE49
     /tmp/cchWk8xb.s:908    .text:0000000000000634 .LBB50
     /tmp/cchWk8xb.s:965    .text:0000000000000688 .LBE50
     /tmp/cchWk8xb.s:868    .text:0000000000000608 .LBB43
     /tmp/cchWk8xb.s:904    .text:0000000000000634 .LBE43
     /tmp/cchWk8xb.s:910    .text:0000000000000634 .LBB46
     /tmp/cchWk8xb.s:963    .text:0000000000000688 .LBE46
     /tmp/cchWk8xb.s:1494   .text:00000000000009b0 .LBB63
     /tmp/cchWk8xb.s:1545   .text:00000000000009ec .LBE63
     /tmp/cchWk8xb.s:1549   .text:00000000000009ec .LBB68
     /tmp/cchWk8xb.s:1565   .text:0000000000000a08 .LBE68
     /tmp/cchWk8xb.s:1584   .text:0000000000000a1c .LBB69
     /tmp/cchWk8xb.s:1621   .text:0000000000000a5c .LBE69
     /tmp/cchWk8xb.s:1714   .text:0000000000000ac4 .LBE87
     /tmp/cchWk8xb.s:1716   .text:0000000000000ac4 .LBB97
     /tmp/cchWk8xb.s:1749   .text:0000000000000ae8 .LBE97
     /tmp/cchWk8xb.s:1680   .text:0000000000000aa4 .LBB89
     /tmp/cchWk8xb.s:1686   .text:0000000000000aa8 .LBE89
     /tmp/cchWk8xb.s:1690   .text:0000000000000aac .LBB94
     /tmp/cchWk8xb.s:1712   .text:0000000000000ac4 .LBE94
     /tmp/cchWk8xb.s:1718   .text:0000000000000ac4 .LBB95
     /tmp/cchWk8xb.s:1743   .text:0000000000000ae4 .LBE95
     /tmp/cchWk8xb.s:1816   .text:0000000000000b2c .LBE98
     /tmp/cchWk8xb.s:1818   .text:0000000000000b2c .LBB108
GAS LISTING /tmp/cchWk8xb.s 			page 82


     /tmp/cchWk8xb.s:1847   .text:0000000000000b50 .LBE108
     /tmp/cchWk8xb.s:1782   .text:0000000000000b0c .LBB100
     /tmp/cchWk8xb.s:1788   .text:0000000000000b10 .LBE100
     /tmp/cchWk8xb.s:1792   .text:0000000000000b14 .LBB105
     /tmp/cchWk8xb.s:1814   .text:0000000000000b2c .LBE105
     /tmp/cchWk8xb.s:1820   .text:0000000000000b2c .LBB106
     /tmp/cchWk8xb.s:1845   .text:0000000000000b50 .LBE106

UNDEFINED SYMBOLS
_ZN5Buddy4freeEPvm
_ZN11ConsoleUtil5printEPKciS1_i
_ZN11ConsoleUtil11printStringEPKc
HEAP_START_ADDR
_ZN5Buddy5allocEm
_Z6strcpyPKcPc
_ZN5Buddy10initializeEPvm
