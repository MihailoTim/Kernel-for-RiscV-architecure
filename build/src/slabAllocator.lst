GAS LISTING /tmp/ccQD0RUj.s 			page 1


   1              		.file	"slabAllocator.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN13SlabAllocator11shrinkCacheEP5Cache
   9              	_ZN13SlabAllocator11shrinkCacheEP5Cache:
  10              	.LFB20:
  11              		.file 1 "src/slabAllocator.cpp"
   1:src/slabAllocator.cpp **** //
   2:src/slabAllocator.cpp **** // Created by os on 12/25/22.
   3:src/slabAllocator.cpp **** //
   4:src/slabAllocator.cpp **** #include "../h/slabAllocator.hpp"
   5:src/slabAllocator.cpp **** 
   6:src/slabAllocator.cpp **** Cache* SlabAllocator::cache = nullptr;
   7:src/slabAllocator.cpp **** Cache* SlabAllocator::sizeN[BUCKET_SIZE] = {nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, n
   8:src/slabAllocator.cpp **** const char* SlabAllocator::names[13] = {"Buffer Cache No. 0", "Buffer Cache No. 1", "Buffer Cache N
   9:src/slabAllocator.cpp **** void* SlabAllocator::startAddr = nullptr;
  10:src/slabAllocator.cpp **** uint64 SlabAllocator::blocksResponsibleFor = 0;
  11:src/slabAllocator.cpp **** 
  12:src/slabAllocator.cpp **** void SlabAllocator::initialize(void* space, uint64 blockNum) {
  13:src/slabAllocator.cpp ****     Buddy::initialize(space, blockNum);
  14:src/slabAllocator.cpp ****     startAddr = space;
  15:src/slabAllocator.cpp ****     blocksResponsibleFor = blockNum;
  16:src/slabAllocator.cpp ****     cache = (Cache*)SLAB_META_ADDR_CONST;
  17:src/slabAllocator.cpp ****     cache->ctor = nullptr;
  18:src/slabAllocator.cpp ****     cache->dtor = nullptr;
  19:src/slabAllocator.cpp ****     cache->emptyHead = nullptr;
  20:src/slabAllocator.cpp ****     cache->partialHead = nullptr;
  21:src/slabAllocator.cpp ****     cache->fullHead = nullptr;
  22:src/slabAllocator.cpp ****     cache->objectSize = sizeof(Cache);
  23:src/slabAllocator.cpp ****     cache->slabSize = DEFAULT_SLAB_SIZE;
  24:src/slabAllocator.cpp ****     strcpy("Main Cache", cache->name);
  25:src/slabAllocator.cpp **** 
  26:src/slabAllocator.cpp ****     for(int i=0;i<BUCKET_SIZE;i++){
  27:src/slabAllocator.cpp ****         sizeN[i] = SlabAllocator::createCache(names[i], 2<<i, nullptr, nullptr);
  28:src/slabAllocator.cpp ****     }
  29:src/slabAllocator.cpp **** }
  30:src/slabAllocator.cpp **** 
  31:src/slabAllocator.cpp **** bool SlabAllocator::allocateSlab(Cache *cache) {
  32:src/slabAllocator.cpp ****     Slab* slab = (Slab*)Buddy::alloc(cache->slabSize);
  33:src/slabAllocator.cpp ****     if(!slab)
  34:src/slabAllocator.cpp ****         return false;
  35:src/slabAllocator.cpp ****     SlabAllocator::insertIntoList(cache->emptyHead, slab);
  36:src/slabAllocator.cpp ****     slab->totalNumOfSlots = slab->numOfFreeSlots = ((cache->slabSize << BLOCK_SIZE_BITS) - sizeof(S
  37:src/slabAllocator.cpp ****     slab->objectOffset = (void*)((uint64)slab + sizeof(Slab) + slab->totalNumOfSlots/8 + 1);
  38:src/slabAllocator.cpp ****     slab->allocated = (char*)((uint64)slab + sizeof(Slab));
  39:src/slabAllocator.cpp ****     slab->parent = cache;
  40:src/slabAllocator.cpp ****     for(uint64 i=0;i<slab->totalNumOfSlots/8 + 1;i++)
  41:src/slabAllocator.cpp ****         slab->allocated[i] = 0;
  42:src/slabAllocator.cpp **** 
  43:src/slabAllocator.cpp ****     if(cache->ctor) {
  44:src/slabAllocator.cpp ****         for (uint64 i = 0; i < slab->totalNumOfSlots; i++) {
  45:src/slabAllocator.cpp ****             cache->ctor((void *) ((uint64) slab->objectOffset + i * slab->parent->objectSize));
  46:src/slabAllocator.cpp ****         }
  47:src/slabAllocator.cpp ****     }
GAS LISTING /tmp/ccQD0RUj.s 			page 2


  48:src/slabAllocator.cpp ****     return true;
  49:src/slabAllocator.cpp **** }
  50:src/slabAllocator.cpp **** 
  51:src/slabAllocator.cpp **** void* SlabAllocator::allocateSlot(Slab *slab) {
  52:src/slabAllocator.cpp ****     for(uint64 i=0; i<slab->totalNumOfSlots; i++){
  53:src/slabAllocator.cpp ****         if(!(slab->allocated[i/8] & (1<<(7 - i%8)))){
  54:src/slabAllocator.cpp ****             slab->allocated[i/8] |= (1<<(7 - i%8));
  55:src/slabAllocator.cpp ****             Slab* &headFrom = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead
  56:src/slabAllocator.cpp ****             slab->numOfFreeSlots--;
  57:src/slabAllocator.cpp ****             Slab* &headTo = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
  58:src/slabAllocator.cpp **** 
  59:src/slabAllocator.cpp ****             if(headTo != headFrom)
  60:src/slabAllocator.cpp ****                 SlabAllocator::move(headFrom, headTo, slab);
  61:src/slabAllocator.cpp **** 
  62:src/slabAllocator.cpp ****             return (void*)((uint64)slab->objectOffset + i*slab->parent->objectSize);
  63:src/slabAllocator.cpp ****         }
  64:src/slabAllocator.cpp ****     }
  65:src/slabAllocator.cpp ****     return nullptr;
  66:src/slabAllocator.cpp **** }
  67:src/slabAllocator.cpp **** 
  68:src/slabAllocator.cpp **** void* SlabAllocator::allocateObject(Cache *cache) {
  69:src/slabAllocator.cpp ****     void* ret = SlabAllocator::allocateFromList(cache->partialHead);
  70:src/slabAllocator.cpp ****     if(ret){
  71:src/slabAllocator.cpp ****         return ret;
  72:src/slabAllocator.cpp ****     }
  73:src/slabAllocator.cpp ****     ret = SlabAllocator::allocateFromList(cache->emptyHead);
  74:src/slabAllocator.cpp ****     if(ret){
  75:src/slabAllocator.cpp ****         return ret;
  76:src/slabAllocator.cpp ****     }
  77:src/slabAllocator.cpp ****     if(!SlabAllocator::allocateSlab(cache))
  78:src/slabAllocator.cpp ****         return nullptr;
  79:src/slabAllocator.cpp **** 
  80:src/slabAllocator.cpp ****     ret = SlabAllocator::allocateSlot(cache->emptyHead);
  81:src/slabAllocator.cpp **** 
  82:src/slabAllocator.cpp ****     return ret;
  83:src/slabAllocator.cpp **** }
  84:src/slabAllocator.cpp **** 
  85:src/slabAllocator.cpp **** void* SlabAllocator::allocateBuffer(size_t size) {
  86:src/slabAllocator.cpp ****     uint64 level = Buddy::getDeg(Buddy::ceil(size));
  87:src/slabAllocator.cpp ****     if(level < CACHE_LOWER_BOUND || level > CACHE_UPPER_BOUND)
  88:src/slabAllocator.cpp ****         return nullptr;
  89:src/slabAllocator.cpp ****     else
  90:src/slabAllocator.cpp ****         level -= CACHE_LOWER_BOUND;
  91:src/slabAllocator.cpp ****     return SlabAllocator::allocateObject(sizeN[level]);
  92:src/slabAllocator.cpp **** }
  93:src/slabAllocator.cpp **** 
  94:src/slabAllocator.cpp **** void SlabAllocator::freeSlot(Slab *slab, uint64 index) {
  95:src/slabAllocator.cpp ****     if(slab->allocated[index/8] & (1<<(7 - index%8))) {
  96:src/slabAllocator.cpp ****         slab->allocated[index/8] &= ~(1<<(7 - index%8));
  97:src/slabAllocator.cpp ****         Slab *&headFrom = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
  98:src/slabAllocator.cpp ****         slab->numOfFreeSlots++;
  99:src/slabAllocator.cpp ****         Slab *&headTo = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead;
 100:src/slabAllocator.cpp **** 
 101:src/slabAllocator.cpp ****         if(slab->isEmpty()) {
 102:src/slabAllocator.cpp ****             SlabAllocator::removeFromList(headFrom, slab);
 103:src/slabAllocator.cpp ****             Buddy::free(slab, slab->parent->slabSize);
 104:src/slabAllocator.cpp ****         }
GAS LISTING /tmp/ccQD0RUj.s 			page 3


 105:src/slabAllocator.cpp ****         else
 106:src/slabAllocator.cpp ****             if (headTo != headFrom)
 107:src/slabAllocator.cpp ****                 SlabAllocator::move(headFrom, headTo, slab);
 108:src/slabAllocator.cpp ****     }
 109:src/slabAllocator.cpp **** }
 110:src/slabAllocator.cpp **** 
 111:src/slabAllocator.cpp **** bool SlabAllocator::freeObject(Cache* cache, const void *addr) {
 112:src/slabAllocator.cpp ****     if(cache->dtor)
 113:src/slabAllocator.cpp ****         cache->dtor((void*)addr);
 114:src/slabAllocator.cpp ****     if(cache->ctor)
 115:src/slabAllocator.cpp ****         cache->ctor((void*)addr);
 116:src/slabAllocator.cpp **** 
 117:src/slabAllocator.cpp ****     bool deleted = SlabAllocator::freeFromList(cache->fullHead, addr);
 118:src/slabAllocator.cpp ****     if(deleted)
 119:src/slabAllocator.cpp ****         return deleted;
 120:src/slabAllocator.cpp **** 
 121:src/slabAllocator.cpp ****     deleted = SlabAllocator::freeFromList(cache->partialHead, addr);
 122:src/slabAllocator.cpp **** 
 123:src/slabAllocator.cpp ****     return deleted;
 124:src/slabAllocator.cpp **** }
 125:src/slabAllocator.cpp **** 
 126:src/slabAllocator.cpp **** void SlabAllocator::freeBuffer(const void *addr) {
 127:src/slabAllocator.cpp ****     for(int i=0;i<BUCKET_SIZE;i++)
 128:src/slabAllocator.cpp ****         if(SlabAllocator::freeObject(sizeN[i], addr))
 129:src/slabAllocator.cpp ****             return;
 130:src/slabAllocator.cpp **** }
 131:src/slabAllocator.cpp **** 
 132:src/slabAllocator.cpp **** Cache* SlabAllocator::createCache(const char *name, size_t size, void (*ctor)(void *), void (*dtor)
 133:src/slabAllocator.cpp ****     Cache* ret = (Cache*)SlabAllocator::allocateObject(SlabAllocator::cache);
 134:src/slabAllocator.cpp ****     if(ret == nullptr)
 135:src/slabAllocator.cpp ****         return nullptr;
 136:src/slabAllocator.cpp ****     ret->ctor = ctor;
 137:src/slabAllocator.cpp ****     ret->dtor = dtor;
 138:src/slabAllocator.cpp ****     ret->emptyHead = ret->partialHead = ret->fullHead = nullptr;
 139:src/slabAllocator.cpp ****     ret->objectSize = size;
 140:src/slabAllocator.cpp ****     ret->slabSize = DEFAULT_SLAB_SIZE;
 141:src/slabAllocator.cpp ****     strcpy(name, ret->name);
 142:src/slabAllocator.cpp ****     return ret;
 143:src/slabAllocator.cpp **** }
 144:src/slabAllocator.cpp **** 
 145:src/slabAllocator.cpp **** void SlabAllocator::deleteCache(Cache* &cache) {
 146:src/slabAllocator.cpp ****     deleteList(cache->fullHead);
 147:src/slabAllocator.cpp ****     deleteList(cache->partialHead);
 148:src/slabAllocator.cpp ****     deleteList(cache->emptyHead);
 149:src/slabAllocator.cpp ****     SlabAllocator::freeObject(SlabAllocator::cache, cache);
 150:src/slabAllocator.cpp ****     cache = nullptr;
 151:src/slabAllocator.cpp **** }
 152:src/slabAllocator.cpp **** 
 153:src/slabAllocator.cpp **** int SlabAllocator::shrinkCache(Cache *cache) {
  12              		.loc 1 153 46
  13              		.cfi_startproc
  14              	.LVL0:
  15 0000 130101FE 		addi	sp,sp,-32
  16              		.cfi_def_cfa_offset 32
  17 0004 233C1100 		sd	ra,24(sp)
  18 0008 23388100 		sd	s0,16(sp)
  19 000c 23349100 		sd	s1,8(sp)
GAS LISTING /tmp/ccQD0RUj.s 			page 4


  20 0010 23302101 		sd	s2,0(sp)
  21              		.cfi_offset 1, -8
  22              		.cfi_offset 8, -16
  23              		.cfi_offset 9, -24
  24              		.cfi_offset 18, -32
  25 0014 13040102 		addi	s0,sp,32
  26              		.cfi_def_cfa 8, 0
  27 0018 93040500 		mv	s1,a0
 154:src/slabAllocator.cpp ****     int ret = 0;
  28              		.loc 1 154 5
  29              	.LVL1:
  30              		.loc 1 154 9 is_stmt 0
  31 001c 13090000 		li	s2,0
  32              	.LVL2:
  33              	.L3:
 155:src/slabAllocator.cpp ****     while(cache->emptyHead){
  34              		.loc 1 155 5 is_stmt 1
  35              		.loc 1 155 18
  36 0020 03B50406 		ld	a0,96(s1)
  37 0024 63040502 		beqz	a0,.L2
 156:src/slabAllocator.cpp ****         Buddy::free(cache->emptyHead, cache->slabSize);
  38              		.loc 1 156 9
  39              		.loc 1 156 20 is_stmt 0
  40 0028 83B58404 		ld	a1,72(s1)
  41 002c 97000000 		call	_ZN5Buddy4freeEPvm@plt
  41      E7800000 
  42              	.LVL3:
 157:src/slabAllocator.cpp ****         ret += cache->emptyHead->totalNumOfSlots;
  43              		.loc 1 157 9 is_stmt 1
  44              		.loc 1 157 23 is_stmt 0
  45 0034 83B70406 		ld	a5,96(s1)
  46              		.loc 1 157 34
  47 0038 03B78701 		ld	a4,24(a5)
  48              		.loc 1 157 13
  49 003c 3B092701 		addw	s2,a4,s2
  50              	.LVL4:
 158:src/slabAllocator.cpp ****         cache->emptyHead = cache->emptyHead->next;
  51              		.loc 1 158 9 is_stmt 1
  52              		.loc 1 158 46 is_stmt 0
  53 0040 83B78700 		ld	a5,8(a5)
  54              		.loc 1 158 26
  55 0044 23B0F406 		sd	a5,96(s1)
 155:src/slabAllocator.cpp ****         Buddy::free(cache->emptyHead, cache->slabSize);
  56              		.loc 1 155 5
  57 0048 6FF09FFD 		j	.L3
  58              	.LVL5:
  59              	.L2:
 159:src/slabAllocator.cpp ****     }
 160:src/slabAllocator.cpp ****     return ret;
  60              		.loc 1 160 5 is_stmt 1
 161:src/slabAllocator.cpp **** }
  61              		.loc 1 161 1 is_stmt 0
  62 004c 13050900 		mv	a0,s2
  63 0050 83308101 		ld	ra,24(sp)
  64              		.cfi_restore 1
  65 0054 03340101 		ld	s0,16(sp)
  66              		.cfi_restore 8
GAS LISTING /tmp/ccQD0RUj.s 			page 5


  67              		.cfi_def_cfa 2, 32
  68 0058 83348100 		ld	s1,8(sp)
  69              		.cfi_restore 9
  70              	.LVL6:
  71 005c 03390100 		ld	s2,0(sp)
  72              		.cfi_restore 18
  73              	.LVL7:
  74 0060 13010102 		addi	sp,sp,32
  75              		.cfi_def_cfa_offset 0
  76 0064 67800000 		jr	ra
  77              		.cfi_endproc
  78              	.LFE20:
  80              		.section	.rodata.str1.8,"aMS",@progbits,1
  81              		.align	3
  82              	.LC0:
  83 0000 0A00     		.string	"\n"
  84 0002 00000000 		.align	3
  84      0000
  85              	.LC1:
  86 0008 536C6162 		.string	"Slab address:"
  86      20616464 
  86      72657373 
  86      3A00
  87 0016 0000     		.align	3
  88              	.LC2:
  89 0018 4E756D62 		.string	"Number of slots:"
  89      6572206F 
  89      6620736C 
  89      6F74733A 
  89      00
  90 0029 00000000 		.align	3
  90      000000
  91              	.LC3:
  92 0030 4E756D62 		.string	"Number of free slots:"
  92      6572206F 
  92      66206672 
  92      65652073 
  92      6C6F7473 
  93 0046 0000     		.align	3
  94              	.LC4:
  95 0048 536C6162 		.string	"Slab object size:"
  95      206F626A 
  95      65637420 
  95      73697A65 
  95      3A00
  96 005a 00000000 		.align	3
  96      0000
  97              	.LC5:
  98 0060 4F626A65 		.string	"Object offset:"
  98      6374206F 
  98      66667365 
  98      743A00
  99 006f 00       		.align	3
 100              	.LC6:
 101 0070 536C6162 		.string	"Slab allocated array address:"
 101      20616C6C 
 101      6F636174 
GAS LISTING /tmp/ccQD0RUj.s 			page 6


 101      65642061 
 101      72726179 
 102 008e 0000     		.align	3
 103              	.LC7:
 104 0090 416C6C6F 		.string	"Allocated status array:\n"
 104      63617465 
 104      64207374 
 104      61747573 
 104      20617272 
 105 00a9 00000000 		.align	3
 105      000000
 106              	.LC8:
 107 00b0 2000     		.string	" "
 108 00b2 00000000 		.align	3
 108      0000
 109              	.LC9:
 110 00b8 00       		.string	""
 111              		.text
 112              		.align	2
 113              		.globl	_ZN13SlabAllocator9printSlabEP4Slab
 115              	_ZN13SlabAllocator9printSlabEP4Slab:
 116              	.LFB21:
 162:src/slabAllocator.cpp **** 
 163:src/slabAllocator.cpp **** void SlabAllocator::printSlab(Slab *slab) {
 117              		.loc 1 163 43 is_stmt 1
 118              		.cfi_startproc
 119              	.LVL8:
 164:src/slabAllocator.cpp ****     if(slab) {
 120              		.loc 1 164 5
 121              	.LBB34:
 122 0068 63000514 		beqz	a0,.L10
 123              	.LBE34:
 163:src/slabAllocator.cpp ****     if(slab) {
 124              		.loc 1 163 43 is_stmt 0
 125 006c 130101FE 		addi	sp,sp,-32
 126              		.cfi_def_cfa_offset 32
 127 0070 233C1100 		sd	ra,24(sp)
 128 0074 23388100 		sd	s0,16(sp)
 129 0078 23349100 		sd	s1,8(sp)
 130 007c 23302101 		sd	s2,0(sp)
 131              		.cfi_offset 1, -8
 132              		.cfi_offset 8, -16
 133              		.cfi_offset 9, -24
 134              		.cfi_offset 18, -32
 135 0080 13040102 		addi	s0,sp,32
 136              		.cfi_def_cfa 8, 0
 137 0084 13090500 		mv	s2,a0
 138              	.LBB37:
 139              	.LBB35:
 165:src/slabAllocator.cpp ****         ConsoleUtil::print("Slab address:", (uint64) slab, "\n");
 140              		.loc 1 165 9 is_stmt 1
 141              		.loc 1 165 27 is_stmt 0
 142 0088 17060000 		lla	a2,.LC0
 142      13060600 
 143 0090 9B050500 		sext.w	a1,a0
 144 0094 17050000 		lla	a0,.LC1
 144      13050500 
GAS LISTING /tmp/ccQD0RUj.s 			page 7


 145              	.LVL9:
 146 009c 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_@plt
 146      E7800000 
 147              	.LVL10:
 166:src/slabAllocator.cpp ****         ConsoleUtil::print("Number of slots:", (uint64) slab->totalNumOfSlots, "\n");
 148              		.loc 1 166 9 is_stmt 1
 149              		.loc 1 166 27 is_stmt 0
 150 00a4 17060000 		lla	a2,.LC0
 150      13060600 
 151 00ac 83258901 		lw	a1,24(s2)
 152 00b0 17050000 		lla	a0,.LC2
 152      13050500 
 153 00b8 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_@plt
 153      E7800000 
 154              	.LVL11:
 167:src/slabAllocator.cpp ****         ConsoleUtil::print("Number of free slots:", (uint64) slab->numOfFreeSlots, "\n");
 155              		.loc 1 167 9 is_stmt 1
 156              		.loc 1 167 27 is_stmt 0
 157 00c0 17060000 		lla	a2,.LC0
 157      13060600 
 158 00c8 83250901 		lw	a1,16(s2)
 159 00cc 17050000 		lla	a0,.LC3
 159      13050500 
 160 00d4 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_@plt
 160      E7800000 
 161              	.LVL12:
 168:src/slabAllocator.cpp ****         ConsoleUtil::print("Slab object size:", (uint64) sizeof(Slab), "\n");
 162              		.loc 1 168 9 is_stmt 1
 163              		.loc 1 168 27 is_stmt 0
 164 00dc 17060000 		lla	a2,.LC0
 164      13060600 
 165 00e4 93058003 		li	a1,56
 166 00e8 17050000 		lla	a0,.LC4
 166      13050500 
 167 00f0 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_@plt
 167      E7800000 
 168              	.LVL13:
 169:src/slabAllocator.cpp ****         ConsoleUtil::print("Object offset:", (uint64) slab->objectOffset, "\n");
 169              		.loc 1 169 9 is_stmt 1
 170              		.loc 1 169 27 is_stmt 0
 171 00f8 17060000 		lla	a2,.LC0
 171      13060600 
 172 0100 83258902 		lw	a1,40(s2)
 173 0104 17050000 		lla	a0,.LC5
 173      13050500 
 174 010c 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_@plt
 174      E7800000 
 175              	.LVL14:
 170:src/slabAllocator.cpp ****         ConsoleUtil::print("Slab allocated array address:", (uint64) slab->allocated, "\n");
 176              		.loc 1 170 9 is_stmt 1
 177              		.loc 1 170 27 is_stmt 0
 178 0114 17060000 		lla	a2,.LC0
 178      13060600 
 179 011c 83250902 		lw	a1,32(s2)
 180 0120 17050000 		lla	a0,.LC6
 180      13050500 
 181 0128 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_@plt
GAS LISTING /tmp/ccQD0RUj.s 			page 8


 181      E7800000 
 182              	.LVL15:
 171:src/slabAllocator.cpp ****         ConsoleUtil::printString("Allocated status array:\n");
 183              		.loc 1 171 9 is_stmt 1
 184              		.loc 1 171 33 is_stmt 0
 185 0130 17050000 		lla	a0,.LC7
 185      13050500 
 186 0138 97000000 		call	_ZN11ConsoleUtil11printStringEPKc@plt
 186      E7800000 
 187              	.LVL16:
 172:src/slabAllocator.cpp ****         for (uint64 i = 0; i < slab->totalNumOfSlots/8 + 1; i++) {
 188              		.loc 1 172 9 is_stmt 1
 189              	.LBB36:
 190              		.loc 1 172 21 is_stmt 0
 191 0140 93040000 		li	s1,0
 192 0144 6F00C002 		j	.L8
 193              	.LVL17:
 194              	.L13:
 173:src/slabAllocator.cpp ****             ConsoleUtil::print("", slab->allocated[i], " ");
 195              		.loc 1 173 13 is_stmt 1 discriminator 2
 196              		.loc 1 173 42 is_stmt 0 discriminator 2
 197 0148 83370902 		ld	a5,32(s2)
 198              		.loc 1 173 53 discriminator 2
 199 014c B3879700 		add	a5,a5,s1
 200              		.loc 1 173 31 discriminator 2
 201 0150 17060000 		lla	a2,.LC8
 201      13060600 
 202 0158 83C50700 		lbu	a1,0(a5)
 203 015c 17050000 		lla	a0,.LC9
 203      13050500 
 204 0164 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_@plt
 204      E7800000 
 205              	.LVL18:
 172:src/slabAllocator.cpp ****         for (uint64 i = 0; i < slab->totalNumOfSlots/8 + 1; i++) {
 206              		.loc 1 172 9 is_stmt 1 discriminator 2
 207 016c 93841400 		addi	s1,s1,1
 208              	.LVL19:
 209              	.L8:
 172:src/slabAllocator.cpp ****         for (uint64 i = 0; i < slab->totalNumOfSlots/8 + 1; i++) {
 210              		.loc 1 172 30 discriminator 3
 172:src/slabAllocator.cpp ****         for (uint64 i = 0; i < slab->totalNumOfSlots/8 + 1; i++) {
 211              		.loc 1 172 38 is_stmt 0 discriminator 3
 212 0170 83378901 		ld	a5,24(s2)
 172:src/slabAllocator.cpp ****         for (uint64 i = 0; i < slab->totalNumOfSlots/8 + 1; i++) {
 213              		.loc 1 172 53 discriminator 3
 214 0174 93D73700 		srli	a5,a5,3
 172:src/slabAllocator.cpp ****         for (uint64 i = 0; i < slab->totalNumOfSlots/8 + 1; i++) {
 215              		.loc 1 172 56 discriminator 3
 216 0178 93871700 		addi	a5,a5,1
 172:src/slabAllocator.cpp ****         for (uint64 i = 0; i < slab->totalNumOfSlots/8 + 1; i++) {
 217              		.loc 1 172 30 discriminator 3
 218 017c E3E6F4FC 		bgtu	a5,s1,.L13
 219              	.LBE36:
 174:src/slabAllocator.cpp ****         }
 175:src/slabAllocator.cpp ****         ConsoleUtil::printString("\n");
 220              		.loc 1 175 9 is_stmt 1
 221              		.loc 1 175 33 is_stmt 0
GAS LISTING /tmp/ccQD0RUj.s 			page 9


 222 0180 17050000 		lla	a0,.LC0
 222      13050500 
 223 0188 97000000 		call	_ZN11ConsoleUtil11printStringEPKc@plt
 223      E7800000 
 224              	.LVL20:
 225              	.LBE35:
 226              	.LBE37:
 176:src/slabAllocator.cpp ****     }
 177:src/slabAllocator.cpp **** }
 227              		.loc 1 177 1
 228 0190 83308101 		ld	ra,24(sp)
 229              		.cfi_restore 1
 230 0194 03340101 		ld	s0,16(sp)
 231              		.cfi_restore 8
 232              		.cfi_def_cfa 2, 32
 233 0198 83348100 		ld	s1,8(sp)
 234              		.cfi_restore 9
 235              	.LVL21:
 236 019c 03390100 		ld	s2,0(sp)
 237              		.cfi_restore 18
 238              	.LVL22:
 239 01a0 13010102 		addi	sp,sp,32
 240              		.cfi_def_cfa_offset 0
 241 01a4 67800000 		jr	ra
 242              	.LVL23:
 243              	.L10:
 244 01a8 67800000 		ret
 245              		.cfi_endproc
 246              	.LFE21:
 248              		.section	.rodata.str1.8
 249 00b9 00000000 		.align	3
 249      000000
 250              	.LC10:
 251 00c0 43616368 		.string	"Cache name: "
 251      65206E61 
 251      6D653A20 
 251      00
 252 00cd 000000   		.align	3
 253              	.LC11:
 254 00d0 48454150 		.string	"HEAP_START_ADDR: "
 254      5F535441 
 254      52545F41 
 254      4444523A 
 254      2000
 255 00e2 00000000 		.align	3
 255      0000
 256              	.LC12:
 257 00e8 43616368 		.string	"Cache address: "
 257      65206164 
 257      64726573 
 257      733A2000 
 258              		.align	3
 259              	.LC13:
 260 00f8 43616368 		.string	"Cache slab size: "
 260      6520736C 
 260      61622073 
 260      697A653A 
GAS LISTING /tmp/ccQD0RUj.s 			page 10


 260      2000
 261 010a 00000000 		.align	3
 261      0000
 262              	.LC14:
 263 0110 43616368 		.string	"Cache object size: "
 263      65206F62 
 263      6A656374 
 263      2073697A 
 263      653A2000 
 264 0124 00000000 		.align	3
 265              	.LC15:
 266 0128 456D7074 		.string	"Empty head: "
 266      79206865 
 266      61643A20 
 266      00
 267 0135 000000   		.align	3
 268              	.LC16:
 269 0138 50617274 		.string	"Partial head: "
 269      69616C20 
 269      68656164 
 269      3A2000
 270 0147 00       		.align	3
 271              	.LC17:
 272 0148 46756C6C 		.string	"Full head: "
 272      20686561 
 272      643A2000 
 273              		.text
 274              		.align	2
 275              		.globl	_ZN13SlabAllocator10printCacheEP5Cache
 277              	_ZN13SlabAllocator10printCacheEP5Cache:
 278              	.LFB22:
 178:src/slabAllocator.cpp **** 
 179:src/slabAllocator.cpp **** void SlabAllocator::printCache(Cache *cache) {
 279              		.loc 1 179 46 is_stmt 1
 280              		.cfi_startproc
 281              	.LVL24:
 282 01ac 130101FE 		addi	sp,sp,-32
 283              		.cfi_def_cfa_offset 32
 284 01b0 233C1100 		sd	ra,24(sp)
 285 01b4 23388100 		sd	s0,16(sp)
 286 01b8 23349100 		sd	s1,8(sp)
 287 01bc 23302101 		sd	s2,0(sp)
 288              		.cfi_offset 1, -8
 289              		.cfi_offset 8, -16
 290              		.cfi_offset 9, -24
 291              		.cfi_offset 18, -32
 292 01c0 13040102 		addi	s0,sp,32
 293              		.cfi_def_cfa 8, 0
 294 01c4 13090500 		mv	s2,a0
 180:src/slabAllocator.cpp ****     ConsoleUtil::printString("Cache name: ");
 295              		.loc 1 180 5
 296              		.loc 1 180 29 is_stmt 0
 297 01c8 17050000 		lla	a0,.LC10
 297      13050500 
 298              	.LVL25:
 299 01d0 97000000 		call	_ZN11ConsoleUtil11printStringEPKc@plt
 299      E7800000 
GAS LISTING /tmp/ccQD0RUj.s 			page 11


 300              	.LVL26:
 181:src/slabAllocator.cpp ****     ConsoleUtil::printString(cache->name);
 301              		.loc 1 181 5 is_stmt 1
 302              		.loc 1 181 29 is_stmt 0
 303 01d8 13050900 		mv	a0,s2
 304 01dc 97000000 		call	_ZN11ConsoleUtil11printStringEPKc@plt
 304      E7800000 
 305              	.LVL27:
 182:src/slabAllocator.cpp ****     ConsoleUtil::printString("\n");
 306              		.loc 1 182 5 is_stmt 1
 307              		.loc 1 182 29 is_stmt 0
 308 01e4 17050000 		lla	a0,.LC0
 308      13050500 
 309 01ec 97000000 		call	_ZN11ConsoleUtil11printStringEPKc@plt
 309      E7800000 
 310              	.LVL28:
 183:src/slabAllocator.cpp ****     ConsoleUtil::print("HEAP_START_ADDR: ", (uint64)HEAP_START_ADDR, "\n");
 311              		.loc 1 183 5 is_stmt 1
 312              		.loc 1 183 23 is_stmt 0
 313 01f4 17060000 		lla	a2,.LC0
 313      13060600 
 314 01fc 97070000 		la	a5,HEAP_START_ADDR
 314      83B70700 
 315 0204 83A50700 		lw	a1,0(a5)
 316 0208 17050000 		lla	a0,.LC11
 316      13050500 
 317 0210 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_@plt
 317      E7800000 
 318              	.LVL29:
 184:src/slabAllocator.cpp ****     ConsoleUtil::print("Cache address: ", (uint64)cache, "\n");
 319              		.loc 1 184 5 is_stmt 1
 320              		.loc 1 184 23 is_stmt 0
 321 0218 17060000 		lla	a2,.LC0
 321      13060600 
 322 0220 9B050900 		sext.w	a1,s2
 323 0224 17050000 		lla	a0,.LC12
 323      13050500 
 324 022c 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_@plt
 324      E7800000 
 325              	.LVL30:
 185:src/slabAllocator.cpp ****     ConsoleUtil::print("Cache slab size: ", (uint64)cache->slabSize, "\n");
 326              		.loc 1 185 5 is_stmt 1
 327              		.loc 1 185 23 is_stmt 0
 328 0234 17060000 		lla	a2,.LC0
 328      13060600 
 329 023c 83258904 		lw	a1,72(s2)
 330 0240 17050000 		lla	a0,.LC13
 330      13050500 
 331 0248 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_@plt
 331      E7800000 
 332              	.LVL31:
 186:src/slabAllocator.cpp ****     ConsoleUtil::print("Cache object size: ", (uint64)cache->objectSize, "\n");
 333              		.loc 1 186 5 is_stmt 1
 334              		.loc 1 186 23 is_stmt 0
 335 0250 17060000 		lla	a2,.LC0
 335      13060600 
 336 0258 83250904 		lw	a1,64(s2)
GAS LISTING /tmp/ccQD0RUj.s 			page 12


 337 025c 17050000 		lla	a0,.LC14
 337      13050500 
 338 0264 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_@plt
 338      E7800000 
 339              	.LVL32:
 187:src/slabAllocator.cpp ****     ConsoleUtil::print("Empty head: ", (uint64)cache->emptyHead, "\n");
 340              		.loc 1 187 5 is_stmt 1
 341              		.loc 1 187 23 is_stmt 0
 342 026c 17060000 		lla	a2,.LC0
 342      13060600 
 343 0274 83250906 		lw	a1,96(s2)
 344 0278 17050000 		lla	a0,.LC15
 344      13050500 
 345 0280 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_@plt
 345      E7800000 
 346              	.LVL33:
 188:src/slabAllocator.cpp **** 
 189:src/slabAllocator.cpp ****     Slab* iter = cache->emptyHead;
 347              		.loc 1 189 5 is_stmt 1
 348              		.loc 1 189 11 is_stmt 0
 349 0288 83340906 		ld	s1,96(s2)
 350              	.LVL34:
 351              	.L16:
 190:src/slabAllocator.cpp ****     while(iter){
 352              		.loc 1 190 5 is_stmt 1
 353              		.loc 1 190 11
 354 028c 63840402 		beqz	s1,.L15
 191:src/slabAllocator.cpp ****         ConsoleUtil::print("", (uint64)iter, " ");
 355              		.loc 1 191 9
 356              		.loc 1 191 27 is_stmt 0
 357 0290 17060000 		lla	a2,.LC8
 357      13060600 
 358 0298 9B850400 		sext.w	a1,s1
 359 029c 17050000 		lla	a0,.LC9
 359      13050500 
 360 02a4 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_@plt
 360      E7800000 
 361              	.LVL35:
 192:src/slabAllocator.cpp ****         iter = iter->next;
 362              		.loc 1 192 9 is_stmt 1
 363              		.loc 1 192 14 is_stmt 0
 364 02ac 83B48400 		ld	s1,8(s1)
 365              	.LVL36:
 190:src/slabAllocator.cpp ****     while(iter){
 366              		.loc 1 190 5
 367 02b0 6FF0DFFD 		j	.L16
 368              	.L15:
 193:src/slabAllocator.cpp ****     }
 194:src/slabAllocator.cpp ****     ConsoleUtil::printString("\n");
 369              		.loc 1 194 5 is_stmt 1
 370              		.loc 1 194 29 is_stmt 0
 371 02b4 17050000 		lla	a0,.LC0
 371      13050500 
 372 02bc 97000000 		call	_ZN11ConsoleUtil11printStringEPKc@plt
 372      E7800000 
 373              	.LVL37:
 195:src/slabAllocator.cpp **** 
GAS LISTING /tmp/ccQD0RUj.s 			page 13


 196:src/slabAllocator.cpp ****     ConsoleUtil::print("Partial head: ", (uint64)cache->partialHead, "\n");
 374              		.loc 1 196 5 is_stmt 1
 375              		.loc 1 196 23 is_stmt 0
 376 02c4 17060000 		lla	a2,.LC0
 376      13060600 
 377 02cc 83258906 		lw	a1,104(s2)
 378 02d0 17050000 		lla	a0,.LC16
 378      13050500 
 379 02d8 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_@plt
 379      E7800000 
 380              	.LVL38:
 197:src/slabAllocator.cpp **** 
 198:src/slabAllocator.cpp ****     iter = cache->partialHead;
 381              		.loc 1 198 5 is_stmt 1
 382              		.loc 1 198 10 is_stmt 0
 383 02e0 83348906 		ld	s1,104(s2)
 384              	.LVL39:
 385              	.L18:
 199:src/slabAllocator.cpp ****     while(iter){
 386              		.loc 1 199 5 is_stmt 1
 387              		.loc 1 199 11
 388 02e4 63840402 		beqz	s1,.L17
 200:src/slabAllocator.cpp ****         ConsoleUtil::print("", (uint64)iter, " ");
 389              		.loc 1 200 9
 390              		.loc 1 200 27 is_stmt 0
 391 02e8 17060000 		lla	a2,.LC8
 391      13060600 
 392 02f0 9B850400 		sext.w	a1,s1
 393 02f4 17050000 		lla	a0,.LC9
 393      13050500 
 394 02fc 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_@plt
 394      E7800000 
 395              	.LVL40:
 201:src/slabAllocator.cpp ****         iter = iter->next;
 396              		.loc 1 201 9 is_stmt 1
 397              		.loc 1 201 14 is_stmt 0
 398 0304 83B48400 		ld	s1,8(s1)
 399              	.LVL41:
 199:src/slabAllocator.cpp ****     while(iter){
 400              		.loc 1 199 5
 401 0308 6FF0DFFD 		j	.L18
 402              	.L17:
 202:src/slabAllocator.cpp ****     }
 203:src/slabAllocator.cpp ****     ConsoleUtil::printString("\n");
 403              		.loc 1 203 5 is_stmt 1
 404              		.loc 1 203 29 is_stmt 0
 405 030c 17050000 		lla	a0,.LC0
 405      13050500 
 406 0314 97000000 		call	_ZN11ConsoleUtil11printStringEPKc@plt
 406      E7800000 
 407              	.LVL42:
 204:src/slabAllocator.cpp **** 
 205:src/slabAllocator.cpp ****     ConsoleUtil::print("Full head: ", (uint64)cache->fullHead, "\n");
 408              		.loc 1 205 5 is_stmt 1
 409              		.loc 1 205 23 is_stmt 0
 410 031c 17060000 		lla	a2,.LC0
 410      13060600 
GAS LISTING /tmp/ccQD0RUj.s 			page 14


 411 0324 83250907 		lw	a1,112(s2)
 412 0328 17050000 		lla	a0,.LC17
 412      13050500 
 413 0330 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_@plt
 413      E7800000 
 414              	.LVL43:
 206:src/slabAllocator.cpp **** 
 207:src/slabAllocator.cpp ****     iter = cache->fullHead;
 415              		.loc 1 207 5 is_stmt 1
 416              		.loc 1 207 10 is_stmt 0
 417 0338 83340907 		ld	s1,112(s2)
 418              	.LVL44:
 419              	.L20:
 208:src/slabAllocator.cpp ****     while(iter){
 420              		.loc 1 208 5 is_stmt 1
 421              		.loc 1 208 11
 422 033c 63840402 		beqz	s1,.L19
 209:src/slabAllocator.cpp ****         ConsoleUtil::print("", (uint64)iter, " ");
 423              		.loc 1 209 9
 424              		.loc 1 209 27 is_stmt 0
 425 0340 17060000 		lla	a2,.LC8
 425      13060600 
 426 0348 9B850400 		sext.w	a1,s1
 427 034c 17050000 		lla	a0,.LC9
 427      13050500 
 428 0354 97000000 		call	_ZN11ConsoleUtil5printEPKciS1_@plt
 428      E7800000 
 429              	.LVL45:
 210:src/slabAllocator.cpp ****         iter = iter->next;
 430              		.loc 1 210 9 is_stmt 1
 431              		.loc 1 210 14 is_stmt 0
 432 035c 83B48400 		ld	s1,8(s1)
 433              	.LVL46:
 208:src/slabAllocator.cpp ****     while(iter){
 434              		.loc 1 208 5
 435 0360 6FF0DFFD 		j	.L20
 436              	.L19:
 211:src/slabAllocator.cpp ****     }
 212:src/slabAllocator.cpp ****     ConsoleUtil::printString("\n");
 437              		.loc 1 212 5 is_stmt 1
 438              		.loc 1 212 29 is_stmt 0
 439 0364 17050000 		lla	a0,.LC0
 439      13050500 
 440 036c 97000000 		call	_ZN11ConsoleUtil11printStringEPKc@plt
 440      E7800000 
 441              	.LVL47:
 213:src/slabAllocator.cpp **** }
 442              		.loc 1 213 1
 443 0374 83308101 		ld	ra,24(sp)
 444              		.cfi_restore 1
 445 0378 03340101 		ld	s0,16(sp)
 446              		.cfi_restore 8
 447              		.cfi_def_cfa 2, 32
 448 037c 83348100 		ld	s1,8(sp)
 449              		.cfi_restore 9
 450              	.LVL48:
 451 0380 03390100 		ld	s2,0(sp)
GAS LISTING /tmp/ccQD0RUj.s 			page 15


 452              		.cfi_restore 18
 453              	.LVL49:
 454 0384 13010102 		addi	sp,sp,32
 455              		.cfi_def_cfa_offset 0
 456 0388 67800000 		jr	ra
 457              		.cfi_endproc
 458              	.LFE22:
 460              		.align	2
 461              		.globl	_ZN13SlabAllocator14insertIntoListERP4SlabS1_
 463              	_ZN13SlabAllocator14insertIntoListERP4SlabS1_:
 464              	.LFB23:
 214:src/slabAllocator.cpp **** 
 215:src/slabAllocator.cpp **** void SlabAllocator::insertIntoList(Slab *&head, Slab *slab) {
 465              		.loc 1 215 61 is_stmt 1
 466              		.cfi_startproc
 467              	.LVL50:
 468 038c 130101FF 		addi	sp,sp,-16
 469              		.cfi_def_cfa_offset 16
 470 0390 23348100 		sd	s0,8(sp)
 471              		.cfi_offset 8, -8
 472 0394 13040101 		addi	s0,sp,16
 473              		.cfi_def_cfa 8, 0
 216:src/slabAllocator.cpp ****     slab->next = head;
 474              		.loc 1 216 5
 475              		.loc 1 216 18 is_stmt 0
 476 0398 83370500 		ld	a5,0(a0)
 477              		.loc 1 216 16
 478 039c 23B4F500 		sd	a5,8(a1)
 217:src/slabAllocator.cpp ****     if(head)
 479              		.loc 1 217 5 is_stmt 1
 480 03a0 63840700 		beqz	a5,.L23
 218:src/slabAllocator.cpp ****         head->prev = slab;
 481              		.loc 1 218 9
 482              		.loc 1 218 20 is_stmt 0
 483 03a4 23B0B700 		sd	a1,0(a5)
 484              	.L23:
 219:src/slabAllocator.cpp ****     slab->prev = nullptr;
 485              		.loc 1 219 5 is_stmt 1
 486              		.loc 1 219 16 is_stmt 0
 487 03a8 23B00500 		sd	zero,0(a1)
 220:src/slabAllocator.cpp ****     head = slab;
 488              		.loc 1 220 5 is_stmt 1
 489              		.loc 1 220 10 is_stmt 0
 490 03ac 2330B500 		sd	a1,0(a0)
 221:src/slabAllocator.cpp **** }
 491              		.loc 1 221 1
 492 03b0 03348100 		ld	s0,8(sp)
 493              		.cfi_restore 8
 494              		.cfi_def_cfa 2, 16
 495 03b4 13010101 		addi	sp,sp,16
 496              		.cfi_def_cfa_offset 0
 497 03b8 67800000 		jr	ra
 498              		.cfi_endproc
 499              	.LFE23:
 501              		.align	2
 502              		.globl	_ZN13SlabAllocator12allocateSlabEP5Cache
 504              	_ZN13SlabAllocator12allocateSlabEP5Cache:
GAS LISTING /tmp/ccQD0RUj.s 			page 16


 505              	.LFB11:
  31:src/slabAllocator.cpp ****     Slab* slab = (Slab*)Buddy::alloc(cache->slabSize);
 506              		.loc 1 31 48 is_stmt 1
 507              		.cfi_startproc
 508              	.LVL51:
 509 03bc 130101FD 		addi	sp,sp,-48
 510              		.cfi_def_cfa_offset 48
 511 03c0 23341102 		sd	ra,40(sp)
 512 03c4 23308102 		sd	s0,32(sp)
 513 03c8 233C9100 		sd	s1,24(sp)
 514 03cc 23382101 		sd	s2,16(sp)
 515 03d0 23343101 		sd	s3,8(sp)
 516              		.cfi_offset 1, -8
 517              		.cfi_offset 8, -16
 518              		.cfi_offset 9, -24
 519              		.cfi_offset 18, -32
 520              		.cfi_offset 19, -40
 521 03d4 13040103 		addi	s0,sp,48
 522              		.cfi_def_cfa 8, 0
 523 03d8 93090500 		mv	s3,a0
  32:src/slabAllocator.cpp ****     if(!slab)
 524              		.loc 1 32 5
  32:src/slabAllocator.cpp ****     if(!slab)
 525              		.loc 1 32 37 is_stmt 0
 526 03dc 03358504 		ld	a0,72(a0)
 527              	.LVL52:
 528 03e0 97000000 		call	_ZN5Buddy5allocEm@plt
 528      E7800000 
 529              	.LVL53:
  33:src/slabAllocator.cpp ****         return false;
 530              		.loc 1 33 5 is_stmt 1
 531 03e8 6308050A 		beqz	a0,.L30
 532 03ec 93040500 		mv	s1,a0
  35:src/slabAllocator.cpp ****     slab->totalNumOfSlots = slab->numOfFreeSlots = ((cache->slabSize << BLOCK_SIZE_BITS) - sizeof(S
 533              		.loc 1 35 5
  35:src/slabAllocator.cpp ****     slab->totalNumOfSlots = slab->numOfFreeSlots = ((cache->slabSize << BLOCK_SIZE_BITS) - sizeof(S
 534              		.loc 1 35 34 is_stmt 0
 535 03f0 93050500 		mv	a1,a0
 536 03f4 13850906 		addi	a0,s3,96
 537              	.LVL54:
 538 03f8 97000000 		call	_ZN13SlabAllocator14insertIntoListERP4SlabS1_
 538      E7800000 
 539              	.LVL55:
  36:src/slabAllocator.cpp ****     slab->objectOffset = (void*)((uint64)slab + sizeof(Slab) + slab->totalNumOfSlots/8 + 1);
 540              		.loc 1 36 5 is_stmt 1
  36:src/slabAllocator.cpp ****     slab->objectOffset = (void*)((uint64)slab + sizeof(Slab) + slab->totalNumOfSlots/8 + 1);
 541              		.loc 1 36 61 is_stmt 0
 542 0400 83B78904 		ld	a5,72(s3)
  36:src/slabAllocator.cpp ****     slab->objectOffset = (void*)((uint64)slab + sizeof(Slab) + slab->totalNumOfSlots/8 + 1);
 543              		.loc 1 36 70
 544 0404 9397C700 		slli	a5,a5,12
  36:src/slabAllocator.cpp ****     slab->objectOffset = (void*)((uint64)slab + sizeof(Slab) + slab->totalNumOfSlots/8 + 1);
 545              		.loc 1 36 90
 546 0408 938787FC 		addi	a5,a5,-56
  36:src/slabAllocator.cpp ****     slab->objectOffset = (void*)((uint64)slab + sizeof(Slab) + slab->totalNumOfSlots/8 + 1);
 547              		.loc 1 36 115
 548 040c 03B70904 		ld	a4,64(s3)
GAS LISTING /tmp/ccQD0RUj.s 			page 17


  36:src/slabAllocator.cpp ****     slab->objectOffset = (void*)((uint64)slab + sizeof(Slab) + slab->totalNumOfSlots/8 + 1);
 549              		.loc 1 36 106
 550 0410 B3D7E702 		divu	a5,a5,a4
  36:src/slabAllocator.cpp ****     slab->objectOffset = (void*)((uint64)slab + sizeof(Slab) + slab->totalNumOfSlots/8 + 1);
 551              		.loc 1 36 50
 552 0414 23B8F400 		sd	a5,16(s1)
  36:src/slabAllocator.cpp ****     slab->objectOffset = (void*)((uint64)slab + sizeof(Slab) + slab->totalNumOfSlots/8 + 1);
 553              		.loc 1 36 27
 554 0418 23BCF400 		sd	a5,24(s1)
  37:src/slabAllocator.cpp ****     slab->allocated = (char*)((uint64)slab + sizeof(Slab));
 555              		.loc 1 37 5 is_stmt 1
  37:src/slabAllocator.cpp ****     slab->allocated = (char*)((uint64)slab + sizeof(Slab));
 556              		.loc 1 37 85 is_stmt 0
 557 041c 93D73700 		srli	a5,a5,3
  37:src/slabAllocator.cpp ****     slab->allocated = (char*)((uint64)slab + sizeof(Slab));
 558              		.loc 1 37 62
 559 0420 B3879700 		add	a5,a5,s1
  37:src/slabAllocator.cpp ****     slab->allocated = (char*)((uint64)slab + sizeof(Slab));
 560              		.loc 1 37 88
 561 0424 93879703 		addi	a5,a5,57
  37:src/slabAllocator.cpp ****     slab->allocated = (char*)((uint64)slab + sizeof(Slab));
 562              		.loc 1 37 24
 563 0428 23B4F402 		sd	a5,40(s1)
  38:src/slabAllocator.cpp ****     slab->parent = cache;
 564              		.loc 1 38 5 is_stmt 1
  38:src/slabAllocator.cpp ****     slab->parent = cache;
 565              		.loc 1 38 44 is_stmt 0
 566 042c 93878403 		addi	a5,s1,56
  38:src/slabAllocator.cpp ****     slab->parent = cache;
 567              		.loc 1 38 21
 568 0430 23B0F402 		sd	a5,32(s1)
  39:src/slabAllocator.cpp ****     for(uint64 i=0;i<slab->totalNumOfSlots/8 + 1;i++)
 569              		.loc 1 39 5 is_stmt 1
  39:src/slabAllocator.cpp ****     for(uint64 i=0;i<slab->totalNumOfSlots/8 + 1;i++)
 570              		.loc 1 39 18 is_stmt 0
 571 0434 23B83403 		sd	s3,48(s1)
  40:src/slabAllocator.cpp ****         slab->allocated[i] = 0;
 572              		.loc 1 40 5 is_stmt 1
 573              	.LVL56:
 574              	.LBB38:
  40:src/slabAllocator.cpp ****         slab->allocated[i] = 0;
 575              		.loc 1 40 16 is_stmt 0
 576 0438 13070000 		li	a4,0
 577              	.LVL57:
 578              	.L28:
  40:src/slabAllocator.cpp ****         slab->allocated[i] = 0;
 579              		.loc 1 40 21 is_stmt 1 discriminator 3
  40:src/slabAllocator.cpp ****         slab->allocated[i] = 0;
 580              		.loc 1 40 28 is_stmt 0 discriminator 3
 581 043c 83B78401 		ld	a5,24(s1)
  40:src/slabAllocator.cpp ****         slab->allocated[i] = 0;
 582              		.loc 1 40 43 discriminator 3
 583 0440 93D73700 		srli	a5,a5,3
  40:src/slabAllocator.cpp ****         slab->allocated[i] = 0;
 584              		.loc 1 40 46 discriminator 3
 585 0444 93871700 		addi	a5,a5,1
  40:src/slabAllocator.cpp ****         slab->allocated[i] = 0;
GAS LISTING /tmp/ccQD0RUj.s 			page 18


 586              		.loc 1 40 21 discriminator 3
 587 0448 637CF700 		bleu	a5,a4,.L27
  41:src/slabAllocator.cpp **** 
 588              		.loc 1 41 9 is_stmt 1 discriminator 2
  41:src/slabAllocator.cpp **** 
 589              		.loc 1 41 15 is_stmt 0 discriminator 2
 590 044c 83B70402 		ld	a5,32(s1)
  41:src/slabAllocator.cpp **** 
 591              		.loc 1 41 26 discriminator 2
 592 0450 B387E700 		add	a5,a5,a4
  41:src/slabAllocator.cpp **** 
 593              		.loc 1 41 28 discriminator 2
 594 0454 23800700 		sb	zero,0(a5)
  40:src/slabAllocator.cpp ****         slab->allocated[i] = 0;
 595              		.loc 1 40 5 is_stmt 1 discriminator 2
 596 0458 13071700 		addi	a4,a4,1
 597              	.LVL58:
 598 045c 6FF01FFE 		j	.L28
 599              	.L27:
 600              	.LBE38:
  43:src/slabAllocator.cpp ****         for (uint64 i = 0; i < slab->totalNumOfSlots; i++) {
 601              		.loc 1 43 5
 602              	.LBB39:
  43:src/slabAllocator.cpp ****         for (uint64 i = 0; i < slab->totalNumOfSlots; i++) {
 603              		.loc 1 43 15 is_stmt 0
 604 0460 83B70905 		ld	a5,80(s3)
  43:src/slabAllocator.cpp ****         for (uint64 i = 0; i < slab->totalNumOfSlots; i++) {
 605              		.loc 1 43 5
 606 0464 638E0702 		beqz	a5,.L31
 607              	.LBB40:
  44:src/slabAllocator.cpp ****             cache->ctor((void *) ((uint64) slab->objectOffset + i * slab->parent->objectSize));
 608              		.loc 1 44 21
 609 0468 13090000 		li	s2,0
 610              	.LVL59:
 611              	.L29:
  44:src/slabAllocator.cpp ****             cache->ctor((void *) ((uint64) slab->objectOffset + i * slab->parent->objectSize));
 612              		.loc 1 44 30 is_stmt 1 discriminator 3
  44:src/slabAllocator.cpp ****             cache->ctor((void *) ((uint64) slab->objectOffset + i * slab->parent->objectSize));
 613              		.loc 1 44 38 is_stmt 0 discriminator 3
 614 046c 83B78401 		ld	a5,24(s1)
  44:src/slabAllocator.cpp ****             cache->ctor((void *) ((uint64) slab->objectOffset + i * slab->parent->objectSize));
 615              		.loc 1 44 30 discriminator 3
 616 0470 637CF902 		bleu	a5,s2,.L32
  45:src/slabAllocator.cpp ****         }
 617              		.loc 1 45 13 is_stmt 1 discriminator 2
  45:src/slabAllocator.cpp ****         }
 618              		.loc 1 45 20 is_stmt 0 discriminator 2
 619 0474 03B70905 		ld	a4,80(s3)
  45:src/slabAllocator.cpp ****         }
 620              		.loc 1 45 50 discriminator 2
 621 0478 03B58402 		ld	a0,40(s1)
  45:src/slabAllocator.cpp ****         }
 622              		.loc 1 45 75 discriminator 2
 623 047c 83B70403 		ld	a5,48(s1)
  45:src/slabAllocator.cpp ****         }
 624              		.loc 1 45 83 discriminator 2
 625 0480 83B70704 		ld	a5,64(a5)
GAS LISTING /tmp/ccQD0RUj.s 			page 19


  45:src/slabAllocator.cpp ****         }
 626              		.loc 1 45 67 discriminator 2
 627 0484 B3872703 		mul	a5,a5,s2
  45:src/slabAllocator.cpp ****         }
 628              		.loc 1 45 24 discriminator 2
 629 0488 3305F500 		add	a0,a0,a5
 630 048c E7000700 		jalr	a4
 631              	.LVL60:
  44:src/slabAllocator.cpp ****             cache->ctor((void *) ((uint64) slab->objectOffset + i * slab->parent->objectSize));
 632              		.loc 1 44 9 is_stmt 1 discriminator 2
 633 0490 13091900 		addi	s2,s2,1
 634              	.LVL61:
 635 0494 6FF09FFD 		j	.L29
 636              	.LVL62:
 637              	.L30:
 638              	.LBE40:
 639              	.LBE39:
  34:src/slabAllocator.cpp ****     SlabAllocator::insertIntoList(cache->emptyHead, slab);
 640              		.loc 1 34 16 is_stmt 0
 641 0498 13050000 		li	a0,0
 642              	.LVL63:
 643 049c 6F000001 		j	.L26
 644              	.LVL64:
 645              	.L31:
  48:src/slabAllocator.cpp **** }
 646              		.loc 1 48 12
 647 04a0 13051000 		li	a0,1
 648 04a4 6F008000 		j	.L26
 649              	.LVL65:
 650              	.L32:
 651 04a8 13051000 		li	a0,1
 652              	.LVL66:
 653              	.L26:
  49:src/slabAllocator.cpp **** 
 654              		.loc 1 49 1
 655 04ac 83308102 		ld	ra,40(sp)
 656              		.cfi_restore 1
 657 04b0 03340102 		ld	s0,32(sp)
 658              		.cfi_restore 8
 659              		.cfi_def_cfa 2, 48
 660 04b4 83348101 		ld	s1,24(sp)
 661              		.cfi_restore 9
 662 04b8 03390101 		ld	s2,16(sp)
 663              		.cfi_restore 18
 664 04bc 83398100 		ld	s3,8(sp)
 665              		.cfi_restore 19
 666              	.LVL67:
 667 04c0 13010103 		addi	sp,sp,48
 668              		.cfi_def_cfa_offset 0
 669 04c4 67800000 		jr	ra
 670              		.cfi_endproc
 671              	.LFE11:
 673              		.align	2
 674              		.globl	_ZN13SlabAllocator14removeFromListERP4SlabS1_
 676              	_ZN13SlabAllocator14removeFromListERP4SlabS1_:
 677              	.LFB24:
 222:src/slabAllocator.cpp **** 
GAS LISTING /tmp/ccQD0RUj.s 			page 20


 223:src/slabAllocator.cpp **** void SlabAllocator::removeFromList(Slab* &head, Slab* slab) {
 678              		.loc 1 223 61 is_stmt 1
 679              		.cfi_startproc
 680              	.LVL68:
 681 04c8 130101FF 		addi	sp,sp,-16
 682              		.cfi_def_cfa_offset 16
 683 04cc 23348100 		sd	s0,8(sp)
 684              		.cfi_offset 8, -8
 685 04d0 13040101 		addi	s0,sp,16
 686              		.cfi_def_cfa 8, 0
 224:src/slabAllocator.cpp ****     if(slab == head)
 687              		.loc 1 224 5
 688              		.loc 1 224 16 is_stmt 0
 689 04d4 83370500 		ld	a5,0(a0)
 690              		.loc 1 224 5
 691 04d8 638CB702 		beq	a5,a1,.L39
 692              	.L35:
 225:src/slabAllocator.cpp ****         head = slab->next;
 226:src/slabAllocator.cpp ****     if(slab->next)
 693              		.loc 1 226 5 is_stmt 1
 694              		.loc 1 226 14 is_stmt 0
 695 04dc 83B78500 		ld	a5,8(a1)
 696              		.loc 1 226 5
 697 04e0 63860700 		beqz	a5,.L36
 227:src/slabAllocator.cpp ****         slab->next->prev = slab->prev;
 698              		.loc 1 227 9 is_stmt 1
 699              		.loc 1 227 34 is_stmt 0
 700 04e4 03B70500 		ld	a4,0(a1)
 701              		.loc 1 227 26
 702 04e8 23B0E700 		sd	a4,0(a5)
 703              	.L36:
 228:src/slabAllocator.cpp ****     if(slab->prev)
 704              		.loc 1 228 5 is_stmt 1
 705              		.loc 1 228 14 is_stmt 0
 706 04ec 83B70500 		ld	a5,0(a1)
 707              		.loc 1 228 5
 708 04f0 63860700 		beqz	a5,.L37
 229:src/slabAllocator.cpp ****         slab->prev->next = slab->next;
 709              		.loc 1 229 9 is_stmt 1
 710              		.loc 1 229 34 is_stmt 0
 711 04f4 03B78500 		ld	a4,8(a1)
 712              		.loc 1 229 26
 713 04f8 23B4E700 		sd	a4,8(a5)
 714              	.L37:
 230:src/slabAllocator.cpp ****     slab->prev = nullptr;
 715              		.loc 1 230 5 is_stmt 1
 716              		.loc 1 230 16 is_stmt 0
 717 04fc 23B00500 		sd	zero,0(a1)
 231:src/slabAllocator.cpp ****     slab->next = nullptr;
 718              		.loc 1 231 5 is_stmt 1
 719              		.loc 1 231 16 is_stmt 0
 720 0500 23B40500 		sd	zero,8(a1)
 232:src/slabAllocator.cpp **** }
 721              		.loc 1 232 1
 722 0504 03348100 		ld	s0,8(sp)
 723              		.cfi_remember_state
 724              		.cfi_restore 8
GAS LISTING /tmp/ccQD0RUj.s 			page 21


 725              		.cfi_def_cfa 2, 16
 726 0508 13010101 		addi	sp,sp,16
 727              		.cfi_def_cfa_offset 0
 728 050c 67800000 		jr	ra
 729              	.L39:
 730              		.cfi_restore_state
 225:src/slabAllocator.cpp ****     if(slab->next)
 731              		.loc 1 225 9 is_stmt 1
 225:src/slabAllocator.cpp ****     if(slab->next)
 732              		.loc 1 225 22 is_stmt 0
 733 0510 83B78500 		ld	a5,8(a1)
 225:src/slabAllocator.cpp ****     if(slab->next)
 734              		.loc 1 225 14
 735 0514 2330F500 		sd	a5,0(a0)
 736 0518 6FF05FFC 		j	.L35
 737              		.cfi_endproc
 738              	.LFE24:
 740              		.align	2
 741              		.globl	_ZN13SlabAllocator4moveERP4SlabS2_S1_
 743              	_ZN13SlabAllocator4moveERP4SlabS2_S1_:
 744              	.LFB25:
 233:src/slabAllocator.cpp **** 
 234:src/slabAllocator.cpp **** void SlabAllocator::move(Slab* &headFrom, Slab* &headTo, Slab* slab) {
 745              		.loc 1 234 70 is_stmt 1
 746              		.cfi_startproc
 747              	.LVL69:
 748 051c 130101FE 		addi	sp,sp,-32
 749              		.cfi_def_cfa_offset 32
 750 0520 233C1100 		sd	ra,24(sp)
 751 0524 23388100 		sd	s0,16(sp)
 752 0528 23349100 		sd	s1,8(sp)
 753 052c 23302101 		sd	s2,0(sp)
 754              		.cfi_offset 1, -8
 755              		.cfi_offset 8, -16
 756              		.cfi_offset 9, -24
 757              		.cfi_offset 18, -32
 758 0530 13040102 		addi	s0,sp,32
 759              		.cfi_def_cfa 8, 0
 760 0534 13890500 		mv	s2,a1
 761 0538 93040600 		mv	s1,a2
 235:src/slabAllocator.cpp ****     SlabAllocator::removeFromList(headFrom, slab);
 762              		.loc 1 235 5
 763              		.loc 1 235 34 is_stmt 0
 764 053c 93050600 		mv	a1,a2
 765              	.LVL70:
 766 0540 97000000 		call	_ZN13SlabAllocator14removeFromListERP4SlabS1_
 766      E7800000 
 767              	.LVL71:
 236:src/slabAllocator.cpp ****     SlabAllocator::insertIntoList(headTo, slab);
 768              		.loc 1 236 5 is_stmt 1
 769              		.loc 1 236 34 is_stmt 0
 770 0548 93850400 		mv	a1,s1
 771 054c 13050900 		mv	a0,s2
 772 0550 97000000 		call	_ZN13SlabAllocator14insertIntoListERP4SlabS1_
 772      E7800000 
 773              	.LVL72:
 237:src/slabAllocator.cpp **** }...
GAS LISTING /tmp/ccQD0RUj.s 			page 22


 774              		.loc 1 237 1
 775 0558 83308101 		ld	ra,24(sp)
 776              		.cfi_restore 1
 777 055c 03340101 		ld	s0,16(sp)
 778              		.cfi_restore 8
 779              		.cfi_def_cfa 2, 32
 780 0560 83348100 		ld	s1,8(sp)
 781              		.cfi_restore 9
 782              	.LVL73:
 783 0564 03390100 		ld	s2,0(sp)
 784              		.cfi_restore 18
 785              	.LVL74:
 786 0568 13010102 		addi	sp,sp,32
 787              		.cfi_def_cfa_offset 0
 788 056c 67800000 		jr	ra
 789              		.cfi_endproc
 790              	.LFE25:
 792              		.align	2
 793              		.globl	_ZN13SlabAllocator12allocateSlotEP4Slab
 795              	_ZN13SlabAllocator12allocateSlotEP4Slab:
 796              	.LFB12:
  51:src/slabAllocator.cpp **** void* SlabAllocator::allocateSlot(Slab *slab) {
 797              		.loc 1 51 47 is_stmt 1
 798              		.cfi_startproc
 799              	.LVL75:
 800 0570 130101FE 		addi	sp,sp,-32
 801              		.cfi_def_cfa_offset 32
 802 0574 233C1100 		sd	ra,24(sp)
 803 0578 23388100 		sd	s0,16(sp)
 804 057c 23349100 		sd	s1,8(sp)
 805 0580 23302101 		sd	s2,0(sp)
 806              		.cfi_offset 1, -8
 807              		.cfi_offset 8, -16
 808              		.cfi_offset 9, -24
 809              		.cfi_offset 18, -32
 810 0584 13040102 		addi	s0,sp,32
 811              		.cfi_def_cfa 8, 0
 812 0588 13090500 		mv	s2,a0
  52:src/slabAllocator.cpp ****     for(uint64 i=0; i<slab->totalNumOfSlots; i++){
 813              		.loc 1 52 5
 814              	.LVL76:
 815              	.LBB41:
  52:src/slabAllocator.cpp ****     for(uint64 i=0; i<slab->totalNumOfSlots; i++){
 816              		.loc 1 52 16 is_stmt 0
 817 058c 93040000 		li	s1,0
 818              	.LVL77:
 819              	.L50:
  52:src/slabAllocator.cpp ****     for(uint64 i=0; i<slab->totalNumOfSlots; i++){
 820              		.loc 1 52 22 is_stmt 1 discriminator 1
  52:src/slabAllocator.cpp ****     for(uint64 i=0; i<slab->totalNumOfSlots; i++){
 821              		.loc 1 52 29 is_stmt 0 discriminator 1
 822 0590 83378901 		ld	a5,24(s2)
  52:src/slabAllocator.cpp ****     for(uint64 i=0; i<slab->totalNumOfSlots; i++){
 823              		.loc 1 52 22 discriminator 1
 824 0594 63F8F40A 		bleu	a5,s1,.L51
 825              	.LBE41:
  53:src/slabAllocator.cpp ****         if(!(slab->allocated[i/8] & (1<<(7 - i%8)))){
GAS LISTING /tmp/ccQD0RUj.s 			page 23


 826              		.loc 1 53 9 is_stmt 1
 827              	.LBB49:
 828              	.LBB42:
  53:src/slabAllocator.cpp ****         if(!(slab->allocated[i/8] & (1<<(7 - i%8)))){
 829              		.loc 1 53 20 is_stmt 0
 830 0598 83370902 		ld	a5,32(s2)
  53:src/slabAllocator.cpp ****         if(!(slab->allocated[i/8] & (1<<(7 - i%8)))){
 831              		.loc 1 53 31
 832 059c 13D73400 		srli	a4,s1,3
  53:src/slabAllocator.cpp ****         if(!(slab->allocated[i/8] & (1<<(7 - i%8)))){
 833              		.loc 1 53 33
 834 05a0 B387E700 		add	a5,a5,a4
 835 05a4 03C60700 		lbu	a2,0(a5)
  53:src/slabAllocator.cpp ****         if(!(slab->allocated[i/8] & (1<<(7 - i%8)))){
 836              		.loc 1 53 44
 837 05a8 13C7F4FF 		not	a4,s1
 838 05ac 13777700 		andi	a4,a4,7
  53:src/slabAllocator.cpp ****         if(!(slab->allocated[i/8] & (1<<(7 - i%8)))){
 839              		.loc 1 53 12
 840 05b0 BB56E640 		sraw	a3,a2,a4
 841 05b4 93F61600 		andi	a3,a3,1
  53:src/slabAllocator.cpp ****         if(!(slab->allocated[i/8] & (1<<(7 - i%8)))){
 842              		.loc 1 53 9
 843 05b8 63860600 		beqz	a3,.L53
 844              	.LBE42:
  52:src/slabAllocator.cpp ****     for(uint64 i=0; i<slab->totalNumOfSlots; i++){
 845              		.loc 1 52 5 is_stmt 1 discriminator 2
 846 05bc 93841400 		addi	s1,s1,1
 847              	.LVL78:
 848 05c0 6FF01FFD 		j	.L50
 849              	.L53:
 850              	.LBB47:
 851              	.LBB43:
  54:src/slabAllocator.cpp ****             slab->allocated[i/8] |= (1<<(7 - i%8));
 852              		.loc 1 54 13
  54:src/slabAllocator.cpp ****             slab->allocated[i/8] |= (1<<(7 - i%8));
 853              		.loc 1 54 39 is_stmt 0
 854 05c4 93061000 		li	a3,1
 855 05c8 3B97E600 		sllw	a4,a3,a4
  54:src/slabAllocator.cpp ****             slab->allocated[i/8] |= (1<<(7 - i%8));
 856              		.loc 1 54 34
 857 05cc 3366E600 		or	a2,a2,a4
 858 05d0 2380C700 		sb	a2,0(a5)
  55:src/slabAllocator.cpp ****             Slab* &headFrom = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead
 859              		.loc 1 55 13 is_stmt 1
 860              	.LVL79:
 861              	.LBB44:
 862              	.LBB45:
 863              		.file 2 "src/../h/../h/../h/slab_t.hpp"
   1:src/../h/../h/../h/slab_t.hpp **** //
   2:src/../h/../h/../h/slab_t.hpp **** // Created by os on 1/2/23.
   3:src/../h/../h/../h/slab_t.hpp **** //
   4:src/../h/../h/../h/slab_t.hpp **** 
   5:src/../h/../h/../h/slab_t.hpp **** #ifndef KERNEL_FOR_RISCV_ARCHITECURE_SLAB_T_HPP
   6:src/../h/../h/../h/slab_t.hpp **** #define KERNEL_FOR_RISCV_ARCHITECURE_SLAB_T_HPP
   7:src/../h/../h/../h/slab_t.hpp **** #include "../lib/hw.h"
   8:src/../h/../h/../h/slab_t.hpp **** 
GAS LISTING /tmp/ccQD0RUj.s 			page 24


   9:src/../h/../h/../h/slab_t.hpp **** typedef class Cache kmem_cache_t;
  10:src/../h/../h/../h/slab_t.hpp **** 
  11:src/../h/../h/../h/slab_t.hpp **** typedef class Slab{
  12:src/../h/../h/../h/slab_t.hpp **** public:
  13:src/../h/../h/../h/slab_t.hpp ****     inline bool isFull(){return numOfFreeSlots == 0;}
  14:src/../h/../h/../h/slab_t.hpp ****     inline bool isEmpty(){return numOfFreeSlots == totalNumOfSlots;}
 864              		.loc 2 14 27
 865              		.loc 2 14 34 is_stmt 0
 866 05d4 83370901 		ld	a5,16(s2)
 867              		.loc 2 14 52
 868 05d8 03378901 		ld	a4,24(s2)
 869              	.LVL80:
 870              	.LBE45:
 871              	.LBE44:
  55:src/slabAllocator.cpp ****             Slab* &headFrom = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead
 872              		.loc 1 55 89
 873 05dc 6308F704 		beq	a4,a5,.L54
  55:src/slabAllocator.cpp ****             Slab* &headFrom = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead
 874              		.loc 1 55 81 discriminator 2
 875 05e0 03350903 		ld	a0,48(s2)
 876              	.LVL81:
  55:src/slabAllocator.cpp ****             Slab* &headFrom = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead
 877              		.loc 1 55 89 discriminator 2
 878 05e4 13058506 		addi	a0,a0,104
 879              	.L46:
 880              	.LVL82:
  56:src/slabAllocator.cpp ****             slab->numOfFreeSlots--;
 881              		.loc 1 56 13 is_stmt 1 discriminator 4
  56:src/slabAllocator.cpp ****             slab->numOfFreeSlots--;
 882              		.loc 1 56 33 is_stmt 0 discriminator 4
 883 05e8 9387F7FF 		addi	a5,a5,-1
 884 05ec 2338F900 		sd	a5,16(s2)
  57:src/slabAllocator.cpp ****             Slab* &headTo = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 885              		.loc 1 57 13 is_stmt 1 discriminator 4
 886              	.LVL83:
 887              	.LBE43:
 888              	.LBE47:
 889              	.LBE49:
  13:src/../h/../h/../h/slab_t.hpp ****     inline bool isEmpty(){return numOfFreeSlots == totalNumOfSlots;}
 890              		.loc 2 13 26 discriminator 4
 891              	.LBB50:
 892              	.LBB48:
 893              	.LBB46:
  57:src/slabAllocator.cpp ****             Slab* &headTo = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 894              		.loc 1 57 85 is_stmt 0 discriminator 4
 895 05f0 63940704 		bnez	a5,.L47
  57:src/slabAllocator.cpp ****             Slab* &headTo = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 896              		.loc 1 57 52 discriminator 1
 897 05f4 83350903 		ld	a1,48(s2)
  57:src/slabAllocator.cpp ****             Slab* &headTo = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 898              		.loc 1 57 85 discriminator 1
 899 05f8 93850507 		addi	a1,a1,112
 900              	.L48:
 901              	.LVL84:
  59:src/slabAllocator.cpp ****             if(headTo != headFrom)
 902              		.loc 1 59 13 is_stmt 1 discriminator 4
  59:src/slabAllocator.cpp ****             if(headTo != headFrom)
GAS LISTING /tmp/ccQD0RUj.s 			page 25


 903              		.loc 1 59 16 is_stmt 0 discriminator 4
 904 05fc 03B70500 		ld	a4,0(a1)
  59:src/slabAllocator.cpp ****             if(headTo != headFrom)
 905              		.loc 1 59 26 discriminator 4
 906 0600 83370500 		ld	a5,0(a0)
  59:src/slabAllocator.cpp ****             if(headTo != headFrom)
 907              		.loc 1 59 13 discriminator 4
 908 0604 6308F700 		beq	a4,a5,.L49
  60:src/slabAllocator.cpp ****                 SlabAllocator::move(headFrom, headTo, slab);
 909              		.loc 1 60 17 is_stmt 1
  60:src/slabAllocator.cpp ****                 SlabAllocator::move(headFrom, headTo, slab);
 910              		.loc 1 60 36 is_stmt 0
 911 0608 13060900 		mv	a2,s2
 912 060c 97000000 		call	_ZN13SlabAllocator4moveERP4SlabS2_S1_
 912      E7800000 
 913              	.LVL85:
 914              	.L49:
  62:src/slabAllocator.cpp ****             return (void*)((uint64)slab->objectOffset + i*slab->parent->objectSize);
 915              		.loc 1 62 13 is_stmt 1
  62:src/slabAllocator.cpp ****             return (void*)((uint64)slab->objectOffset + i*slab->parent->objectSize);
 916              		.loc 1 62 42 is_stmt 0
 917 0614 03358902 		ld	a0,40(s2)
  62:src/slabAllocator.cpp ****             return (void*)((uint64)slab->objectOffset + i*slab->parent->objectSize);
 918              		.loc 1 62 65
 919 0618 83370903 		ld	a5,48(s2)
  62:src/slabAllocator.cpp ****             return (void*)((uint64)slab->objectOffset + i*slab->parent->objectSize);
 920              		.loc 1 62 73
 921 061c 83B70704 		ld	a5,64(a5)
  62:src/slabAllocator.cpp ****             return (void*)((uint64)slab->objectOffset + i*slab->parent->objectSize);
 922              		.loc 1 62 58
 923 0620 B3849702 		mul	s1,a5,s1
 924              	.LVL86:
  62:src/slabAllocator.cpp ****             return (void*)((uint64)slab->objectOffset + i*slab->parent->objectSize);
 925              		.loc 1 62 55
 926 0624 33059500 		add	a0,a0,s1
  62:src/slabAllocator.cpp ****             return (void*)((uint64)slab->objectOffset + i*slab->parent->objectSize);
 927              		.loc 1 62 83
 928 0628 6F000002 		j	.L42
 929              	.LVL87:
 930              	.L54:
  55:src/slabAllocator.cpp ****             Slab* &headFrom = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead
 931              		.loc 1 55 55 discriminator 1
 932 062c 03350903 		ld	a0,48(s2)
 933              	.LVL88:
  55:src/slabAllocator.cpp ****             Slab* &headFrom = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead
 934              		.loc 1 55 89 discriminator 1
 935 0630 13050506 		addi	a0,a0,96
 936 0634 6FF05FFB 		j	.L46
 937              	.LVL89:
 938              	.L47:
  57:src/slabAllocator.cpp ****             Slab* &headTo = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 939              		.loc 1 57 77 discriminator 2
 940 0638 83350903 		ld	a1,48(s2)
  57:src/slabAllocator.cpp ****             Slab* &headTo = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 941              		.loc 1 57 85 discriminator 2
 942 063c 93858506 		addi	a1,a1,104
 943 0640 6FF0DFFB 		j	.L48
GAS LISTING /tmp/ccQD0RUj.s 			page 26


 944              	.LVL90:
 945              	.L51:
 946              	.LBE46:
 947              	.LBE48:
 948              	.LBE50:
  65:src/slabAllocator.cpp ****     return nullptr;
 949              		.loc 1 65 12
 950 0644 13050000 		li	a0,0
 951              	.LVL91:
 952              	.L42:
  66:src/slabAllocator.cpp **** }
 953              		.loc 1 66 1
 954 0648 83308101 		ld	ra,24(sp)
 955              		.cfi_restore 1
 956 064c 03340101 		ld	s0,16(sp)
 957              		.cfi_restore 8
 958              		.cfi_def_cfa 2, 32
 959 0650 83348100 		ld	s1,8(sp)
 960              		.cfi_restore 9
 961 0654 03390100 		ld	s2,0(sp)
 962              		.cfi_restore 18
 963              	.LVL92:
 964 0658 13010102 		addi	sp,sp,32
 965              		.cfi_def_cfa_offset 0
 966 065c 67800000 		jr	ra
 967              		.cfi_endproc
 968              	.LFE12:
 970              		.align	2
 971              		.globl	_ZN13SlabAllocator14allocateObjectEP5Cache
 973              	_ZN13SlabAllocator14allocateObjectEP5Cache:
 974              	.LFB13:
  68:src/slabAllocator.cpp **** void* SlabAllocator::allocateObject(Cache *cache) {
 975              		.loc 1 68 51 is_stmt 1
 976              		.cfi_startproc
 977              	.LVL93:
 978 0660 130101FE 		addi	sp,sp,-32
 979              		.cfi_def_cfa_offset 32
 980 0664 233C1100 		sd	ra,24(sp)
 981 0668 23388100 		sd	s0,16(sp)
 982 066c 23349100 		sd	s1,8(sp)
 983 0670 23302101 		sd	s2,0(sp)
 984              		.cfi_offset 1, -8
 985              		.cfi_offset 8, -16
 986              		.cfi_offset 9, -24
 987              		.cfi_offset 18, -32
 988 0674 13040102 		addi	s0,sp,32
 989              		.cfi_def_cfa 8, 0
 990 0678 13090500 		mv	s2,a0
  69:src/slabAllocator.cpp ****     void* ret = SlabAllocator::allocateFromList(cache->partialHead);
 991              		.loc 1 69 5
  69:src/slabAllocator.cpp ****     void* ret = SlabAllocator::allocateFromList(cache->partialHead);
 992              		.loc 1 69 48 is_stmt 0
 993 067c 83348506 		ld	s1,104(a0)
 994              	.LVL94:
 995              	.L57:
 996              	.LBB51:
 997              	.LBB52:
GAS LISTING /tmp/ccQD0RUj.s 			page 27


 998              		.file 3 "src/../h/slabAllocator.hpp"
   1:src/../h/slabAllocator.hpp **** //
   2:src/../h/slabAllocator.hpp **** // Created by os on 12/25/22.
   3:src/../h/slabAllocator.hpp **** //
   4:src/../h/slabAllocator.hpp **** 
   5:src/../h/slabAllocator.hpp **** #ifndef KERNEL_FOR_RISCV_ARCHITECURE_SLAN_HPP
   6:src/../h/slabAllocator.hpp **** #define KERNEL_FOR_RISCV_ARCHITECURE_SLAN_HPP
   7:src/../h/slabAllocator.hpp **** 
   8:src/../h/slabAllocator.hpp **** #include "../h/utility.hpp"
   9:src/../h/slabAllocator.hpp **** #include "../h/buddyAllocator.hpp"
  10:src/../h/slabAllocator.hpp **** #include "../h/consoleUtil.hpp"
  11:src/../h/slabAllocator.hpp **** #include "../h/cache_t.hpp"
  12:src/../h/slabAllocator.hpp **** 
  13:src/../h/slabAllocator.hpp **** class SlabAllocator{
  14:src/../h/slabAllocator.hpp **** public:
  15:src/../h/slabAllocator.hpp **** 
  16:src/../h/slabAllocator.hpp ****     static void initialize(void* space, uint64 blockNum);
  17:src/../h/slabAllocator.hpp **** 
  18:src/../h/slabAllocator.hpp ****     static Cache* createCache(const char* name, size_t size, void (*ctor)(void*), void (*dtor)(void
  19:src/../h/slabAllocator.hpp **** 
  20:src/../h/slabAllocator.hpp ****     static void deleteCache(Cache* &cache);
  21:src/../h/slabAllocator.hpp **** 
  22:src/../h/slabAllocator.hpp ****     static bool allocateSlab(Cache *cache);
  23:src/../h/slabAllocator.hpp **** 
  24:src/../h/slabAllocator.hpp ****     static int shrinkCache(Cache* cache);
  25:src/../h/slabAllocator.hpp **** 
  26:src/../h/slabAllocator.hpp ****     static void* allocateSlot(Slab* slab);
  27:src/../h/slabAllocator.hpp **** 
  28:src/../h/slabAllocator.hpp ****     static void* allocateObject(Cache *cache);
  29:src/../h/slabAllocator.hpp **** 
  30:src/../h/slabAllocator.hpp ****     static void* allocateBuffer(size_t size);
  31:src/../h/slabAllocator.hpp **** 
  32:src/../h/slabAllocator.hpp ****     static void freeSlot(Slab* slab, uint64 index);
  33:src/../h/slabAllocator.hpp **** 
  34:src/../h/slabAllocator.hpp ****     static bool freeObject(Cache* cache,const void* addr);
  35:src/../h/slabAllocator.hpp **** 
  36:src/../h/slabAllocator.hpp ****     static void freeBuffer(const void* addr);
  37:src/../h/slabAllocator.hpp **** 
  38:src/../h/slabAllocator.hpp ****     static void printSlab(Slab *slab);
  39:src/../h/slabAllocator.hpp **** 
  40:src/../h/slabAllocator.hpp ****     static void printCache(Cache *cache);
  41:src/../h/slabAllocator.hpp **** 
  42:src/../h/slabAllocator.hpp ****     static Cache *sizeN[13];
  43:src/../h/slabAllocator.hpp ****     static Cache *cache;
  44:src/../h/slabAllocator.hpp ****     static void* startAddr;
  45:src/../h/slabAllocator.hpp ****     static uint64 blocksResponsibleFor;
  46:src/../h/slabAllocator.hpp **** 
  47:src/../h/slabAllocator.hpp **** private:
  48:src/../h/slabAllocator.hpp ****     static void insertIntoList(Slab* &head, Slab* slab);
  49:src/../h/slabAllocator.hpp ****     static void removeFromList(Slab* &head, Slab* slab);
  50:src/../h/slabAllocator.hpp ****     static void move(Slab* &headFrom, Slab* &headTo, Slab* slab);
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getUpperBound(Slab* slab){return (uint64)slab->objectOffset + slab->totalN
  52:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
  53:src/../h/slabAllocator.hpp **** 
  54:src/../h/slabAllocator.hpp ****     static inline void* allocateFromList(Slab* head){
  55:src/../h/slabAllocator.hpp ****         while(head != nullptr){
 999              		.loc 3 55 9 is_stmt 1
GAS LISTING /tmp/ccQD0RUj.s 			page 28


 1000              		.loc 3 55 20
 1001 0680 638C0400 		beqz	s1,.L56
 1002              	.LBB53:
  56:src/../h/slabAllocator.hpp ****             void* ret = allocateSlot(head);
 1003              		.loc 3 56 13
 1004              		.loc 3 56 37 is_stmt 0
 1005 0684 13850400 		mv	a0,s1
 1006 0688 97000000 		call	_ZN13SlabAllocator12allocateSlotEP4Slab
 1006      E7800000 
 1007              	.LVL95:
  57:src/../h/slabAllocator.hpp ****             if(ret != nullptr)
 1008              		.loc 3 57 13 is_stmt 1
 1009 0690 E30805FE 		beqz	a0,.L57
  58:src/../h/slabAllocator.hpp ****                 return ret;
 1010              		.loc 3 58 24 is_stmt 0
 1011 0694 93040500 		mv	s1,a0
 1012              	.LVL96:
 1013              	.L56:
 1014              	.LBE53:
 1015              	.LBE52:
 1016              	.LBE51:
  70:src/slabAllocator.cpp ****     if(ret){
 1017              		.loc 1 70 5 is_stmt 1
 1018 0698 63800402 		beqz	s1,.L62
 1019              	.L55:
  83:src/slabAllocator.cpp **** }
 1020              		.loc 1 83 1 is_stmt 0
 1021 069c 13850400 		mv	a0,s1
 1022 06a0 83308101 		ld	ra,24(sp)
 1023              		.cfi_remember_state
 1024              		.cfi_restore 1
 1025 06a4 03340101 		ld	s0,16(sp)
 1026              		.cfi_restore 8
 1027              		.cfi_def_cfa 2, 32
 1028 06a8 83348100 		ld	s1,8(sp)
 1029              		.cfi_restore 9
 1030              	.LVL97:
 1031 06ac 03390100 		ld	s2,0(sp)
 1032              		.cfi_restore 18
 1033              	.LVL98:
 1034 06b0 13010102 		addi	sp,sp,32
 1035              		.cfi_def_cfa_offset 0
 1036 06b4 67800000 		jr	ra
 1037              	.LVL99:
 1038              	.L62:
 1039              		.cfi_restore_state
  73:src/slabAllocator.cpp ****     ret = SlabAllocator::allocateFromList(cache->emptyHead);
 1040              		.loc 1 73 5 is_stmt 1
  73:src/slabAllocator.cpp ****     ret = SlabAllocator::allocateFromList(cache->emptyHead);
 1041              		.loc 1 73 42 is_stmt 0
 1042 06b8 83340906 		ld	s1,96(s2)
 1043              	.LVL100:
 1044              	.L60:
 1045              	.LBB54:
 1046              	.LBB55:
  55:src/../h/slabAllocator.hpp ****             void* ret = allocateSlot(head);
 1047              		.loc 3 55 9 is_stmt 1
GAS LISTING /tmp/ccQD0RUj.s 			page 29


  55:src/../h/slabAllocator.hpp ****             void* ret = allocateSlot(head);
 1048              		.loc 3 55 20
 1049 06bc 638C0400 		beqz	s1,.L59
 1050              	.LBB56:
  56:src/../h/slabAllocator.hpp ****             if(ret != nullptr)
 1051              		.loc 3 56 13
  56:src/../h/slabAllocator.hpp ****             if(ret != nullptr)
 1052              		.loc 3 56 37 is_stmt 0
 1053 06c0 13850400 		mv	a0,s1
 1054 06c4 97000000 		call	_ZN13SlabAllocator12allocateSlotEP4Slab
 1054      E7800000 
 1055              	.LVL101:
  57:src/../h/slabAllocator.hpp ****                 return ret;
 1056              		.loc 3 57 13 is_stmt 1
 1057 06cc E30805FE 		beqz	a0,.L60
 1058              		.loc 3 58 24 is_stmt 0
 1059 06d0 93040500 		mv	s1,a0
 1060              	.LVL102:
 1061              	.L59:
 1062              	.LBE56:
 1063              	.LBE55:
 1064              	.LBE54:
  74:src/slabAllocator.cpp ****     if(ret){
 1065              		.loc 1 74 5 is_stmt 1
 1066 06d4 E39404FC 		bnez	s1,.L55
  77:src/slabAllocator.cpp ****     if(!SlabAllocator::allocateSlab(cache))
 1067              		.loc 1 77 5
  77:src/slabAllocator.cpp ****     if(!SlabAllocator::allocateSlab(cache))
 1068              		.loc 1 77 36 is_stmt 0
 1069 06d8 13050900 		mv	a0,s2
 1070 06dc 97000000 		call	_ZN13SlabAllocator12allocateSlabEP5Cache
 1070      E7800000 
 1071              	.LVL103:
  77:src/slabAllocator.cpp ****     if(!SlabAllocator::allocateSlab(cache))
 1072              		.loc 1 77 5
 1073 06e4 E30C05FA 		beqz	a0,.L55
  80:src/slabAllocator.cpp ****     ret = SlabAllocator::allocateSlot(cache->emptyHead);
 1074              		.loc 1 80 5 is_stmt 1
  80:src/slabAllocator.cpp ****     ret = SlabAllocator::allocateSlot(cache->emptyHead);
 1075              		.loc 1 80 38 is_stmt 0
 1076 06e8 03350906 		ld	a0,96(s2)
 1077 06ec 97000000 		call	_ZN13SlabAllocator12allocateSlotEP4Slab
 1077      E7800000 
 1078              	.LVL104:
 1079 06f4 93040500 		mv	s1,a0
 1080              	.LVL105:
  82:src/slabAllocator.cpp ****     return ret;
 1081              		.loc 1 82 5 is_stmt 1
  82:src/slabAllocator.cpp ****     return ret;
 1082              		.loc 1 82 12 is_stmt 0
 1083 06f8 6FF05FFA 		j	.L55
 1084              		.cfi_endproc
 1085              	.LFE13:
 1087              		.align	2
 1088              		.globl	_ZN13SlabAllocator14allocateBufferEm
 1090              	_ZN13SlabAllocator14allocateBufferEm:
 1091              	.LFB14:
GAS LISTING /tmp/ccQD0RUj.s 			page 30


  85:src/slabAllocator.cpp **** void* SlabAllocator::allocateBuffer(size_t size) {
 1092              		.loc 1 85 50 is_stmt 1
 1093              		.cfi_startproc
 1094              	.LVL106:
  86:src/slabAllocator.cpp ****     uint64 level = Buddy::getDeg(Buddy::ceil(size));
 1095              		.loc 1 86 5
 1096              	.LBB57:
 1097              	.LBB58:
 1098              		.file 4 "src/../h/../h/buddyAllocator.hpp"
   1:src/../h/../h/buddyAllocator.hpp **** //
   2:src/../h/../h/buddyAllocator.hpp **** // Created by os on 12/24/22.
   3:src/../h/../h/buddyAllocator.hpp **** //
   4:src/../h/../h/buddyAllocator.hpp **** 
   5:src/../h/../h/buddyAllocator.hpp **** #ifndef KERNEL_FOR_RISCV_ARCHITECURE_BUDDYALLOCATOR_HPP
   6:src/../h/../h/buddyAllocator.hpp **** #define KERNEL_FOR_RISCV_ARCHITECURE_BUDDYALLOCATOR_HPP
   7:src/../h/../h/buddyAllocator.hpp **** 
   8:src/../h/../h/buddyAllocator.hpp **** #include "../lib/hw.h"
   9:src/../h/../h/buddyAllocator.hpp **** #include "../h/utility.hpp"
  10:src/../h/../h/buddyAllocator.hpp **** 
  11:src/../h/../h/buddyAllocator.hpp **** class SlabAllocator;
  12:src/../h/../h/buddyAllocator.hpp **** 
  13:src/../h/../h/buddyAllocator.hpp **** class Buddy{
  14:src/../h/../h/buddyAllocator.hpp **** public:
  15:src/../h/../h/buddyAllocator.hpp ****     static void initialize(void* addr, uint64 block_num);
  16:src/../h/../h/buddyAllocator.hpp **** 
  17:src/../h/../h/buddyAllocator.hpp ****     static void* alloc(uint64 num);
  18:src/../h/../h/buddyAllocator.hpp **** 
  19:src/../h/../h/buddyAllocator.hpp ****     static void free(void *addr, uint64 size);
  20:src/../h/../h/buddyAllocator.hpp **** 
  21:src/../h/../h/buddyAllocator.hpp ****     typedef struct Block{
  22:src/../h/../h/buddyAllocator.hpp ****         Block *next;
  23:src/../h/../h/buddyAllocator.hpp ****     }Bucket;
  24:src/../h/../h/buddyAllocator.hpp **** 
  25:src/../h/../h/buddyAllocator.hpp ****     static void printList();
  26:src/../h/../h/buddyAllocator.hpp **** 
  27:src/../h/../h/buddyAllocator.hpp ****     static inline bool canAllocate(uint64 size){
  28:src/../h/../h/buddyAllocator.hpp ****         return head[size] != nullptr;
  29:src/../h/../h/buddyAllocator.hpp ****     };
  30:src/../h/../h/buddyAllocator.hpp **** 
  31:src/../h/../h/buddyAllocator.hpp **** private:
  32:src/../h/../h/buddyAllocator.hpp ****     static void* BUDDY_META_DATA_ADDR;
  33:src/../h/../h/buddyAllocator.hpp ****     static void* BUDDY_START_ADDR;
  34:src/../h/../h/buddyAllocator.hpp ****     static uint64 BLOCKS_AVAILABLE;
  35:src/../h/../h/buddyAllocator.hpp ****     static Bucket *head[BUCKET_SIZE], *tail[BUCKET_SIZE];
  36:src/../h/../h/buddyAllocator.hpp **** 
  37:src/../h/../h/buddyAllocator.hpp ****     static inline uint64 ceil(uint64 num){
  38:src/../h/../h/buddyAllocator.hpp ****         num--;
 1099              		.loc 4 38 9
 1100              		.loc 4 38 12 is_stmt 0
 1101 06fc 9307F5FF 		addi	a5,a0,-1
 1102              	.LVL107:
  39:src/../h/../h/buddyAllocator.hpp ****         num |= num>>1;
 1103              		.loc 4 39 9 is_stmt 1
 1104              		.loc 4 39 19 is_stmt 0
 1105 0700 13D51700 		srli	a0,a5,1
 1106              	.LVL108:
 1107              		.loc 4 39 13
GAS LISTING /tmp/ccQD0RUj.s 			page 31


 1108 0704 B3E7A700 		or	a5,a5,a0
 1109              	.LVL109:
  40:src/../h/../h/buddyAllocator.hpp ****         num |= num>>2;
 1110              		.loc 4 40 9 is_stmt 1
 1111              		.loc 4 40 19 is_stmt 0
 1112 0708 13D72700 		srli	a4,a5,2
 1113              		.loc 4 40 13
 1114 070c B3E7E700 		or	a5,a5,a4
 1115              	.LVL110:
  41:src/../h/../h/buddyAllocator.hpp ****         num |= num>>4;
 1116              		.loc 4 41 9 is_stmt 1
 1117              		.loc 4 41 19 is_stmt 0
 1118 0710 13D74700 		srli	a4,a5,4
 1119              		.loc 4 41 13
 1120 0714 B3E7E700 		or	a5,a5,a4
 1121              	.LVL111:
  42:src/../h/../h/buddyAllocator.hpp ****         num |= num>>8;
 1122              		.loc 4 42 9 is_stmt 1
 1123              		.loc 4 42 19 is_stmt 0
 1124 0718 13D78700 		srli	a4,a5,8
 1125              		.loc 4 42 13
 1126 071c B3E7E700 		or	a5,a5,a4
 1127              	.LVL112:
  43:src/../h/../h/buddyAllocator.hpp ****         num |= num>>16;
 1128              		.loc 4 43 9 is_stmt 1
 1129              		.loc 4 43 19 is_stmt 0
 1130 0720 13D70701 		srli	a4,a5,16
 1131              		.loc 4 43 13
 1132 0724 B3E7E700 		or	a5,a5,a4
 1133              	.LVL113:
  44:src/../h/../h/buddyAllocator.hpp ****         num |= num>>32;
 1134              		.loc 4 44 9 is_stmt 1
 1135              		.loc 4 44 19 is_stmt 0
 1136 0728 13D70702 		srli	a4,a5,32
 1137              		.loc 4 44 13
 1138 072c B3E7E700 		or	a5,a5,a4
 1139              	.LVL114:
  45:src/../h/../h/buddyAllocator.hpp ****         return ++num;
 1140              		.loc 4 45 9 is_stmt 1
 1141              		.loc 4 45 18 is_stmt 0
 1142 0730 93871700 		addi	a5,a5,1
 1143              	.LVL115:
 1144              	.LBE58:
 1145              	.LBE57:
 1146              	.LBB59:
 1147              	.LBB60:
  46:src/../h/../h/buddyAllocator.hpp ****     }
  47:src/../h/../h/buddyAllocator.hpp **** 
  48:src/../h/../h/buddyAllocator.hpp ****     static inline uint64 getDeg(uint64 num){
  49:src/../h/../h/buddyAllocator.hpp ****         uint64 deg = 0;
 1148              		.loc 4 49 16
 1149 0734 13070000 		li	a4,0
 1150              	.L65:
 1151              	.LVL116:
  50:src/../h/../h/buddyAllocator.hpp ****         while(num>1){
 1152              		.loc 4 50 9 is_stmt 1
 1153              		.loc 4 50 18
GAS LISTING /tmp/ccQD0RUj.s 			page 32


 1154 0738 93061000 		li	a3,1
 1155 073c 63F8F600 		bleu	a5,a3,.L64
  51:src/../h/../h/buddyAllocator.hpp ****             num/=2;
 1156              		.loc 4 51 13
 1157              		.loc 4 51 16 is_stmt 0
 1158 0740 93D71700 		srli	a5,a5,1
 1159              	.LVL117:
  52:src/../h/../h/buddyAllocator.hpp ****             deg++;
 1160              		.loc 4 52 13 is_stmt 1
 1161              		.loc 4 52 16 is_stmt 0
 1162 0744 13071700 		addi	a4,a4,1
 1163              	.LVL118:
  50:src/../h/../h/buddyAllocator.hpp ****         while(num>1){
 1164              		.loc 4 50 9
 1165 0748 6FF01FFF 		j	.L65
 1166              	.L64:
  53:src/../h/../h/buddyAllocator.hpp ****         }
  54:src/../h/../h/buddyAllocator.hpp ****         return deg;
 1167              		.loc 4 54 9 is_stmt 1
 1168              	.LVL119:
 1169              	.LBE60:
 1170              	.LBE59:
  87:src/slabAllocator.cpp ****     if(level < CACHE_LOWER_BOUND || level > CACHE_UPPER_BOUND)
 1171              		.loc 1 87 5
  87:src/slabAllocator.cpp ****     if(level < CACHE_LOWER_BOUND || level > CACHE_UPPER_BOUND)
 1172              		.loc 1 87 34 is_stmt 0
 1173 074c 1307B7FF 		addi	a4,a4,-5
 1174              	.LVL120:
  87:src/slabAllocator.cpp ****     if(level < CACHE_LOWER_BOUND || level > CACHE_UPPER_BOUND)
 1175              		.loc 1 87 5
 1176 0750 9307C000 		li	a5,12
 1177 0754 63E0E704 		bgtu	a4,a5,.L67
  85:src/slabAllocator.cpp **** void* SlabAllocator::allocateBuffer(size_t size) {
 1178              		.loc 1 85 50
 1179 0758 130101FF 		addi	sp,sp,-16
 1180              		.cfi_def_cfa_offset 16
 1181 075c 23341100 		sd	ra,8(sp)
 1182 0760 23308100 		sd	s0,0(sp)
 1183              		.cfi_offset 1, -8
 1184              		.cfi_offset 8, -16
 1185 0764 13040101 		addi	s0,sp,16
 1186              		.cfi_def_cfa 8, 0
  90:src/slabAllocator.cpp ****         level -= CACHE_LOWER_BOUND;
 1187              		.loc 1 90 9 is_stmt 1
 1188              	.LVL121:
  91:src/slabAllocator.cpp ****     return SlabAllocator::allocateObject(sizeN[level]);
 1189              		.loc 1 91 5
  91:src/slabAllocator.cpp ****     return SlabAllocator::allocateObject(sizeN[level]);
 1190              		.loc 1 91 41 is_stmt 0
 1191 0768 13173700 		slli	a4,a4,3
 1192              	.LVL122:
 1193 076c 97070000 		lla	a5,.LANCHOR0
 1193      93870700 
 1194 0774 3387E700 		add	a4,a5,a4
 1195 0778 03350700 		ld	a0,0(a4)
 1196 077c 97000000 		call	_ZN13SlabAllocator14allocateObjectEP5Cache
 1196      E7800000 
GAS LISTING /tmp/ccQD0RUj.s 			page 33


 1197              	.LVL123:
  92:src/slabAllocator.cpp **** }
 1198              		.loc 1 92 1
 1199 0784 83308100 		ld	ra,8(sp)
 1200              		.cfi_restore 1
 1201 0788 03340100 		ld	s0,0(sp)
 1202              		.cfi_restore 8
 1203              		.cfi_def_cfa 2, 16
 1204 078c 13010101 		addi	sp,sp,16
 1205              		.cfi_def_cfa_offset 0
 1206 0790 67800000 		jr	ra
 1207              	.LVL124:
 1208              	.L67:
  88:src/slabAllocator.cpp ****         return nullptr;
 1209              		.loc 1 88 16
 1210 0794 13050000 		li	a0,0
  92:src/slabAllocator.cpp **** }
 1211              		.loc 1 92 1
 1212 0798 67800000 		ret
 1213              		.cfi_endproc
 1214              	.LFE14:
 1216              		.align	2
 1217              		.globl	_ZN13SlabAllocator11createCacheEPKcmPFvPvES4_
 1219              	_ZN13SlabAllocator11createCacheEPKcmPFvPvES4_:
 1220              	.LFB18:
 132:src/slabAllocator.cpp **** Cache* SlabAllocator::createCache(const char *name, size_t size, void (*ctor)(void *), void (*dtor)
 1221              		.loc 1 132 110 is_stmt 1
 1222              		.cfi_startproc
 1223              	.LVL125:
 1224 079c 130101FC 		addi	sp,sp,-64
 1225              		.cfi_def_cfa_offset 64
 1226 07a0 233C1102 		sd	ra,56(sp)
 1227 07a4 23388102 		sd	s0,48(sp)
 1228 07a8 23349102 		sd	s1,40(sp)
 1229 07ac 23302103 		sd	s2,32(sp)
 1230 07b0 233C3101 		sd	s3,24(sp)
 1231 07b4 23384101 		sd	s4,16(sp)
 1232 07b8 23345101 		sd	s5,8(sp)
 1233              		.cfi_offset 1, -8
 1234              		.cfi_offset 8, -16
 1235              		.cfi_offset 9, -24
 1236              		.cfi_offset 18, -32
 1237              		.cfi_offset 19, -40
 1238              		.cfi_offset 20, -48
 1239              		.cfi_offset 21, -56
 1240 07bc 13040104 		addi	s0,sp,64
 1241              		.cfi_def_cfa 8, 0
 1242 07c0 13090500 		mv	s2,a0
 1243 07c4 93890500 		mv	s3,a1
 1244 07c8 930A0600 		mv	s5,a2
 1245 07cc 138A0600 		mv	s4,a3
 133:src/slabAllocator.cpp ****     Cache* ret = (Cache*)SlabAllocator::allocateObject(SlabAllocator::cache);
 1246              		.loc 1 133 5
 133:src/slabAllocator.cpp ****     Cache* ret = (Cache*)SlabAllocator::allocateObject(SlabAllocator::cache);
 1247              		.loc 1 133 55 is_stmt 0
 1248 07d0 17050000 		ld	a0,.LANCHOR0+104
 1248      03350500 
GAS LISTING /tmp/ccQD0RUj.s 			page 34


 1249              	.LVL126:
 1250 07d8 97000000 		call	_ZN13SlabAllocator14allocateObjectEP5Cache
 1250      E7800000 
 1251              	.LVL127:
 1252 07e0 93040500 		mv	s1,a0
 1253              	.LVL128:
 134:src/slabAllocator.cpp ****     if(ret == nullptr)
 1254              		.loc 1 134 5 is_stmt 1
 1255 07e4 630A0502 		beqz	a0,.L72
 136:src/slabAllocator.cpp ****     ret->ctor = ctor;
 1256              		.loc 1 136 5
 136:src/slabAllocator.cpp ****     ret->ctor = ctor;
 1257              		.loc 1 136 15 is_stmt 0
 1258 07e8 23385505 		sd	s5,80(a0)
 137:src/slabAllocator.cpp ****     ret->dtor = dtor;
 1259              		.loc 1 137 5 is_stmt 1
 137:src/slabAllocator.cpp ****     ret->dtor = dtor;
 1260              		.loc 1 137 15 is_stmt 0
 1261 07ec 233C4505 		sd	s4,88(a0)
 138:src/slabAllocator.cpp ****     ret->emptyHead = ret->partialHead = ret->fullHead = nullptr;
 1262              		.loc 1 138 5 is_stmt 1
 138:src/slabAllocator.cpp ****     ret->emptyHead = ret->partialHead = ret->fullHead = nullptr;
 1263              		.loc 1 138 55 is_stmt 0
 1264 07f0 23380506 		sd	zero,112(a0)
 138:src/slabAllocator.cpp ****     ret->emptyHead = ret->partialHead = ret->fullHead = nullptr;
 1265              		.loc 1 138 39
 1266 07f4 23340506 		sd	zero,104(a0)
 138:src/slabAllocator.cpp ****     ret->emptyHead = ret->partialHead = ret->fullHead = nullptr;
 1267              		.loc 1 138 20
 1268 07f8 23300506 		sd	zero,96(a0)
 139:src/slabAllocator.cpp ****     ret->objectSize = size;
 1269              		.loc 1 139 5 is_stmt 1
 139:src/slabAllocator.cpp ****     ret->objectSize = size;
 1270              		.loc 1 139 21 is_stmt 0
 1271 07fc 23303505 		sd	s3,64(a0)
 140:src/slabAllocator.cpp ****     ret->slabSize = DEFAULT_SLAB_SIZE;
 1272              		.loc 1 140 5 is_stmt 1
 140:src/slabAllocator.cpp ****     ret->slabSize = DEFAULT_SLAB_SIZE;
 1273              		.loc 1 140 19 is_stmt 0
 1274 0800 93072000 		li	a5,2
 1275 0804 2334F504 		sd	a5,72(a0)
 141:src/slabAllocator.cpp ****     strcpy(name, ret->name);
 1276              		.loc 1 141 5 is_stmt 1
 141:src/slabAllocator.cpp ****     strcpy(name, ret->name);
 1277              		.loc 1 141 11 is_stmt 0
 1278 0808 93050500 		mv	a1,a0
 1279 080c 13050900 		mv	a0,s2
 1280 0810 97000000 		call	_Z6strcpyPKcPc@plt
 1280      E7800000 
 1281              	.LVL129:
 142:src/slabAllocator.cpp ****     return ret;
 1282              		.loc 1 142 5 is_stmt 1
 1283              	.L72:
 143:src/slabAllocator.cpp **** }
 1284              		.loc 1 143 1 is_stmt 0
 1285 0818 13850400 		mv	a0,s1
 1286 081c 83308103 		ld	ra,56(sp)
GAS LISTING /tmp/ccQD0RUj.s 			page 35


 1287              		.cfi_restore 1
 1288 0820 03340103 		ld	s0,48(sp)
 1289              		.cfi_restore 8
 1290              		.cfi_def_cfa 2, 64
 1291 0824 83348102 		ld	s1,40(sp)
 1292              		.cfi_restore 9
 1293              	.LVL130:
 1294 0828 03390102 		ld	s2,32(sp)
 1295              		.cfi_restore 18
 1296              	.LVL131:
 1297 082c 83398101 		ld	s3,24(sp)
 1298              		.cfi_restore 19
 1299              	.LVL132:
 1300 0830 033A0101 		ld	s4,16(sp)
 1301              		.cfi_restore 20
 1302              	.LVL133:
 1303 0834 833A8100 		ld	s5,8(sp)
 1304              		.cfi_restore 21
 1305              	.LVL134:
 1306 0838 13010104 		addi	sp,sp,64
 1307              		.cfi_def_cfa_offset 0
 1308 083c 67800000 		jr	ra
 1309              		.cfi_endproc
 1310              	.LFE18:
 1312              		.section	.rodata.str1.8
 1313 0154 00000000 		.align	3
 1314              	.LC18:
 1315 0158 4D61696E 		.string	"Main Cache"
 1315      20436163 
 1315      686500
 1316              		.text
 1317              		.align	2
 1318              		.globl	_ZN13SlabAllocator10initializeEPvm
 1320              	_ZN13SlabAllocator10initializeEPvm:
 1321              	.LFB10:
  12:src/slabAllocator.cpp **** void SlabAllocator::initialize(void* space, uint64 blockNum) {
 1322              		.loc 1 12 62 is_stmt 1
 1323              		.cfi_startproc
 1324              	.LVL135:
 1325 0840 130101FE 		addi	sp,sp,-32
 1326              		.cfi_def_cfa_offset 32
 1327 0844 233C1100 		sd	ra,24(sp)
 1328 0848 23388100 		sd	s0,16(sp)
 1329 084c 23349100 		sd	s1,8(sp)
 1330 0850 23302101 		sd	s2,0(sp)
 1331              		.cfi_offset 1, -8
 1332              		.cfi_offset 8, -16
 1333              		.cfi_offset 9, -24
 1334              		.cfi_offset 18, -32
 1335 0854 13040102 		addi	s0,sp,32
 1336              		.cfi_def_cfa 8, 0
 1337 0858 13090500 		mv	s2,a0
 1338 085c 93840500 		mv	s1,a1
  13:src/slabAllocator.cpp ****     Buddy::initialize(space, blockNum);
 1339              		.loc 1 13 5
  13:src/slabAllocator.cpp ****     Buddy::initialize(space, blockNum);
 1340              		.loc 1 13 22 is_stmt 0
GAS LISTING /tmp/ccQD0RUj.s 			page 36


 1341 0860 97000000 		call	_ZN5Buddy10initializeEPvm@plt
 1341      E7800000 
 1342              	.LVL136:
  14:src/slabAllocator.cpp ****     startAddr = space;
 1343              		.loc 1 14 5 is_stmt 1
  14:src/slabAllocator.cpp ****     startAddr = space;
 1344              		.loc 1 14 15 is_stmt 0
 1345 0868 97070000 		lla	a5,.LANCHOR0
 1345      93870700 
 1346 0870 23B82707 		sd	s2,112(a5)
  15:src/slabAllocator.cpp ****     blocksResponsibleFor = blockNum;
 1347              		.loc 1 15 5 is_stmt 1
  15:src/slabAllocator.cpp ****     blocksResponsibleFor = blockNum;
 1348              		.loc 1 15 26 is_stmt 0
 1349 0874 23BC9706 		sd	s1,120(a5)
  16:src/slabAllocator.cpp ****     cache = (Cache*)SLAB_META_ADDR_CONST;
 1350              		.loc 1 16 5 is_stmt 1
  16:src/slabAllocator.cpp ****     cache = (Cache*)SLAB_META_ADDR_CONST;
 1351              		.loc 1 16 21 is_stmt 0
 1352 0878 17070000 		la	a4,HEAP_START_ADDR
 1352      03370700 
 1353 0880 83350700 		ld	a1,0(a4)
 1354 0884 93D5C500 		srli	a1,a1,12
 1355 0888 93851500 		addi	a1,a1,1
 1356 088c 9395C500 		slli	a1,a1,12
  16:src/slabAllocator.cpp ****     cache = (Cache*)SLAB_META_ADDR_CONST;
 1357              		.loc 1 16 11
 1358 0890 23B4B706 		sd	a1,104(a5)
  17:src/slabAllocator.cpp ****     cache->ctor = nullptr;
 1359              		.loc 1 17 5 is_stmt 1
  17:src/slabAllocator.cpp ****     cache->ctor = nullptr;
 1360              		.loc 1 17 17 is_stmt 0
 1361 0894 23B80504 		sd	zero,80(a1)
  18:src/slabAllocator.cpp ****     cache->dtor = nullptr;
 1362              		.loc 1 18 5 is_stmt 1
  18:src/slabAllocator.cpp ****     cache->dtor = nullptr;
 1363              		.loc 1 18 17 is_stmt 0
 1364 0898 23BC0504 		sd	zero,88(a1)
  19:src/slabAllocator.cpp ****     cache->emptyHead = nullptr;
 1365              		.loc 1 19 5 is_stmt 1
  19:src/slabAllocator.cpp ****     cache->emptyHead = nullptr;
 1366              		.loc 1 19 22 is_stmt 0
 1367 089c 23B00506 		sd	zero,96(a1)
  20:src/slabAllocator.cpp ****     cache->partialHead = nullptr;
 1368              		.loc 1 20 5 is_stmt 1
  20:src/slabAllocator.cpp ****     cache->partialHead = nullptr;
 1369              		.loc 1 20 24 is_stmt 0
 1370 08a0 23B40506 		sd	zero,104(a1)
  21:src/slabAllocator.cpp ****     cache->fullHead = nullptr;
 1371              		.loc 1 21 5 is_stmt 1
  21:src/slabAllocator.cpp ****     cache->fullHead = nullptr;
 1372              		.loc 1 21 21 is_stmt 0
 1373 08a4 23B80506 		sd	zero,112(a1)
  22:src/slabAllocator.cpp ****     cache->objectSize = sizeof(Cache);
 1374              		.loc 1 22 5 is_stmt 1
  22:src/slabAllocator.cpp ****     cache->objectSize = sizeof(Cache);
 1375              		.loc 1 22 23 is_stmt 0
GAS LISTING /tmp/ccQD0RUj.s 			page 37


 1376 08a8 93078007 		li	a5,120
 1377 08ac 23B0F504 		sd	a5,64(a1)
  23:src/slabAllocator.cpp ****     cache->slabSize = DEFAULT_SLAB_SIZE;
 1378              		.loc 1 23 5 is_stmt 1
  23:src/slabAllocator.cpp ****     cache->slabSize = DEFAULT_SLAB_SIZE;
 1379              		.loc 1 23 21 is_stmt 0
 1380 08b0 93072000 		li	a5,2
 1381 08b4 23B4F504 		sd	a5,72(a1)
  24:src/slabAllocator.cpp ****     strcpy("Main Cache", cache->name);
 1382              		.loc 1 24 5 is_stmt 1
  24:src/slabAllocator.cpp ****     strcpy("Main Cache", cache->name);
 1383              		.loc 1 24 11 is_stmt 0
 1384 08b8 17050000 		lla	a0,.LC18
 1384      13050500 
 1385 08c0 97000000 		call	_Z6strcpyPKcPc@plt
 1385      E7800000 
 1386              	.LVL137:
  26:src/slabAllocator.cpp ****     for(int i=0;i<BUCKET_SIZE;i++){
 1387              		.loc 1 26 5 is_stmt 1
 1388              	.LBB61:
  26:src/slabAllocator.cpp ****     for(int i=0;i<BUCKET_SIZE;i++){
 1389              		.loc 1 26 13 is_stmt 0
 1390 08c8 93040000 		li	s1,0
 1391              	.LVL138:
 1392 08cc 6F004004 		j	.L77
 1393              	.LVL139:
 1394              	.L79:
  27:src/slabAllocator.cpp ****         sizeN[i] = SlabAllocator::createCache(names[i], 2<<i, nullptr, nullptr);
 1395              		.loc 1 27 9 is_stmt 1 discriminator 2
  27:src/slabAllocator.cpp ****         sizeN[i] = SlabAllocator::createCache(names[i], 2<<i, nullptr, nullptr);
 1396              		.loc 1 27 46 is_stmt 0 discriminator 2
 1397 08d0 13993400 		slli	s2,s1,3
 1398 08d4 97070000 		lla	a5,.LANCHOR1
 1398      93870700 
 1399 08dc B3872701 		add	a5,a5,s2
 1400 08e0 93060000 		li	a3,0
 1401 08e4 13060000 		li	a2,0
 1402 08e8 93052000 		li	a1,2
 1403 08ec BB959500 		sllw	a1,a1,s1
 1404 08f0 03B50700 		ld	a0,0(a5)
 1405 08f4 97000000 		call	_ZN13SlabAllocator11createCacheEPKcmPFvPvES4_
 1405      E7800000 
 1406              	.LVL140:
  27:src/slabAllocator.cpp ****         sizeN[i] = SlabAllocator::createCache(names[i], 2<<i, nullptr, nullptr);
 1407              		.loc 1 27 18 discriminator 2
 1408 08fc 97070000 		lla	a5,.LANCHOR0
 1408      93870700 
 1409 0904 B3872701 		add	a5,a5,s2
 1410 0908 23B0A700 		sd	a0,0(a5)
  26:src/slabAllocator.cpp ****     for(int i=0;i<BUCKET_SIZE;i++){
 1411              		.loc 1 26 5 is_stmt 1 discriminator 2
 1412 090c 9B841400 		addiw	s1,s1,1
 1413              	.LVL141:
 1414              	.L77:
  26:src/slabAllocator.cpp ****     for(int i=0;i<BUCKET_SIZE;i++){
 1415              		.loc 1 26 18 discriminator 3
 1416 0910 9307C000 		li	a5,12
GAS LISTING /tmp/ccQD0RUj.s 			page 38


 1417 0914 E3DE97FA 		ble	s1,a5,.L79
 1418              	.LBE61:
  29:src/slabAllocator.cpp **** }
 1419              		.loc 1 29 1 is_stmt 0
 1420 0918 83308101 		ld	ra,24(sp)
 1421              		.cfi_restore 1
 1422 091c 03340101 		ld	s0,16(sp)
 1423              		.cfi_restore 8
 1424              		.cfi_def_cfa 2, 32
 1425 0920 83348100 		ld	s1,8(sp)
 1426              		.cfi_restore 9
 1427              	.LVL142:
 1428 0924 03390100 		ld	s2,0(sp)
 1429              		.cfi_restore 18
 1430 0928 13010102 		addi	sp,sp,32
 1431              		.cfi_def_cfa_offset 0
 1432 092c 67800000 		jr	ra
 1433              		.cfi_endproc
 1434              	.LFE10:
 1436              		.align	2
 1437              		.globl	_ZN13SlabAllocator8freeSlotEP4Slabm
 1439              	_ZN13SlabAllocator8freeSlotEP4Slabm:
 1440              	.LFB15:
  94:src/slabAllocator.cpp **** void SlabAllocator::freeSlot(Slab *slab, uint64 index) {
 1441              		.loc 1 94 56 is_stmt 1
 1442              		.cfi_startproc
 1443              	.LVL143:
  95:src/slabAllocator.cpp ****     if(slab->allocated[index/8] & (1<<(7 - index%8))) {
 1444              		.loc 1 95 5
 1445              	.LBB62:
  95:src/slabAllocator.cpp ****     if(slab->allocated[index/8] & (1<<(7 - index%8))) {
 1446              		.loc 1 95 14 is_stmt 0
 1447 0930 83370502 		ld	a5,32(a0)
  95:src/slabAllocator.cpp ****     if(slab->allocated[index/8] & (1<<(7 - index%8))) {
 1448              		.loc 1 95 29
 1449 0934 13D73500 		srli	a4,a1,3
  95:src/slabAllocator.cpp ****     if(slab->allocated[index/8] & (1<<(7 - index%8))) {
 1450              		.loc 1 95 31
 1451 0938 B387E700 		add	a5,a5,a4
 1452 093c 83C60700 		lbu	a3,0(a5)
  95:src/slabAllocator.cpp ****     if(slab->allocated[index/8] & (1<<(7 - index%8))) {
 1453              		.loc 1 95 42
 1454 0940 93C5F5FF 		not	a1,a1
 1455              	.LVL144:
 1456 0944 93F57500 		andi	a1,a1,7
 1457              	.LVL145:
  95:src/slabAllocator.cpp ****     if(slab->allocated[index/8] & (1<<(7 - index%8))) {
 1458              		.loc 1 95 53
 1459 0948 3BD7B640 		sraw	a4,a3,a1
 1460 094c 13771700 		andi	a4,a4,1
  95:src/slabAllocator.cpp ****     if(slab->allocated[index/8] & (1<<(7 - index%8))) {
 1461              		.loc 1 95 5
 1462 0950 6302070C 		beqz	a4,.L88
 1463              	.LBE62:
  94:src/slabAllocator.cpp **** void SlabAllocator::freeSlot(Slab *slab, uint64 index) {
 1464              		.loc 1 94 56
 1465 0954 130101FE 		addi	sp,sp,-32
GAS LISTING /tmp/ccQD0RUj.s 			page 39


 1466              		.cfi_def_cfa_offset 32
 1467 0958 233C1100 		sd	ra,24(sp)
 1468 095c 23388100 		sd	s0,16(sp)
 1469 0960 23349100 		sd	s1,8(sp)
 1470              		.cfi_offset 1, -8
 1471              		.cfi_offset 8, -16
 1472              		.cfi_offset 9, -24
 1473 0964 13040102 		addi	s0,sp,32
 1474              		.cfi_def_cfa 8, 0
 1475 0968 93040500 		mv	s1,a0
 1476              	.LBB70:
 1477              	.LBB63:
  96:src/slabAllocator.cpp ****         slab->allocated[index/8] &= ~(1<<(7 - index%8));
 1478              		.loc 1 96 9 is_stmt 1
  96:src/slabAllocator.cpp ****         slab->allocated[index/8] &= ~(1<<(7 - index%8));
 1479              		.loc 1 96 40 is_stmt 0
 1480 096c 13071000 		li	a4,1
 1481 0970 BB15B700 		sllw	a1,a4,a1
  96:src/slabAllocator.cpp ****         slab->allocated[index/8] &= ~(1<<(7 - index%8));
 1482              		.loc 1 96 34
 1483 0974 93C5F5FF 		not	a1,a1
 1484 0978 B3F5D500 		and	a1,a1,a3
 1485 097c 2380B700 		sb	a1,0(a5)
  97:src/slabAllocator.cpp ****         Slab *&headFrom = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 1486              		.loc 1 97 9 is_stmt 1
 1487              	.LVL146:
 1488              	.LBB64:
 1489              	.LBB65:
  13:src/../h/../h/../h/slab_t.hpp ****     inline bool isEmpty(){return numOfFreeSlots == totalNumOfSlots;}
 1490              		.loc 2 13 26
  13:src/../h/../h/../h/slab_t.hpp ****     inline bool isEmpty(){return numOfFreeSlots == totalNumOfSlots;}
 1491              		.loc 2 13 33 is_stmt 0
 1492 0980 83370501 		ld	a5,16(a0)
 1493              	.LVL147:
 1494              	.LBE65:
 1495              	.LBE64:
  97:src/slabAllocator.cpp ****         Slab *&headFrom = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 1496              		.loc 1 97 83
 1497 0984 639A0704 		bnez	a5,.L82
  97:src/slabAllocator.cpp ****         Slab *&headFrom = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 1498              		.loc 1 97 50 discriminator 1
 1499 0988 03350503 		ld	a0,48(a0)
 1500              	.LVL148:
  97:src/slabAllocator.cpp ****         Slab *&headFrom = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 1501              		.loc 1 97 83 discriminator 1
 1502 098c 13050507 		addi	a0,a0,112
 1503              	.L83:
 1504              	.LVL149:
  98:src/slabAllocator.cpp ****         slab->numOfFreeSlots++;
 1505              		.loc 1 98 9 is_stmt 1 discriminator 4
  98:src/slabAllocator.cpp ****         slab->numOfFreeSlots++;
 1506              		.loc 1 98 29 is_stmt 0 discriminator 4
 1507 0990 93871700 		addi	a5,a5,1
 1508 0994 23B8F400 		sd	a5,16(s1)
  99:src/slabAllocator.cpp ****         Slab *&headTo = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead;
 1509              		.loc 1 99 9 is_stmt 1 discriminator 4
 1510              	.LVL150:
GAS LISTING /tmp/ccQD0RUj.s 			page 40


 1511              	.LBB66:
 1512              	.LBB67:
 1513              		.loc 2 14 27 discriminator 4
 1514              		.loc 2 14 52 is_stmt 0 discriminator 4
 1515 0998 03B78401 		ld	a4,24(s1)
 1516              	.LVL151:
 1517              	.LBE67:
 1518              	.LBE66:
  99:src/slabAllocator.cpp ****         Slab *&headTo = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead;
 1519              		.loc 1 99 83 discriminator 4
 1520 099c 6384E704 		beq	a5,a4,.L91
  99:src/slabAllocator.cpp ****         Slab *&headTo = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead;
 1521              		.loc 1 99 75 discriminator 2
 1522 09a0 83B50403 		ld	a1,48(s1)
  99:src/slabAllocator.cpp ****         Slab *&headTo = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead;
 1523              		.loc 1 99 83 discriminator 2
 1524 09a4 93858506 		addi	a1,a1,104
 1525              	.L85:
 1526              	.LVL152:
 101:src/slabAllocator.cpp ****         if(slab->isEmpty()) {
 1527              		.loc 1 101 9 is_stmt 1 discriminator 4
 1528              	.LBE63:
 1529              	.LBE70:
 1530              		.loc 2 14 27 discriminator 4
 1531              	.LBB71:
 1532              	.LBB68:
 101:src/slabAllocator.cpp ****         if(slab->isEmpty()) {
 1533              		.loc 1 101 9 is_stmt 0 discriminator 4
 1534 09a8 6384E704 		beq	a5,a4,.L92
 106:src/slabAllocator.cpp ****             if (headTo != headFrom)
 1535              		.loc 1 106 13 is_stmt 1
 106:src/slabAllocator.cpp ****             if (headTo != headFrom)
 1536              		.loc 1 106 17 is_stmt 0
 1537 09ac 03B70500 		ld	a4,0(a1)
 106:src/slabAllocator.cpp ****             if (headTo != headFrom)
 1538              		.loc 1 106 27
 1539 09b0 83370500 		ld	a5,0(a0)
 106:src/slabAllocator.cpp ****             if (headTo != headFrom)
 1540              		.loc 1 106 13
 1541 09b4 6308F700 		beq	a4,a5,.L80
 107:src/slabAllocator.cpp ****                 SlabAllocator::move(headFrom, headTo, slab);
 1542              		.loc 1 107 17 is_stmt 1
 107:src/slabAllocator.cpp ****                 SlabAllocator::move(headFrom, headTo, slab);
 1543              		.loc 1 107 36 is_stmt 0
 1544 09b8 13860400 		mv	a2,s1
 1545 09bc 97000000 		call	_ZN13SlabAllocator4moveERP4SlabS2_S1_
 1545      E7800000 
 1546              	.LVL153:
 1547              	.L80:
 1548              	.LBE68:
 1549              	.LBE71:
 109:src/slabAllocator.cpp **** }
 1550              		.loc 1 109 1
 1551 09c4 83308101 		ld	ra,24(sp)
 1552              		.cfi_remember_state
 1553              		.cfi_restore 1
 1554 09c8 03340101 		ld	s0,16(sp)
GAS LISTING /tmp/ccQD0RUj.s 			page 41


 1555              		.cfi_restore 8
 1556              		.cfi_def_cfa 2, 32
 1557 09cc 83348100 		ld	s1,8(sp)
 1558              		.cfi_restore 9
 1559              	.LVL154:
 1560 09d0 13010102 		addi	sp,sp,32
 1561              		.cfi_def_cfa_offset 0
 1562 09d4 67800000 		jr	ra
 1563              	.LVL155:
 1564              	.L82:
 1565              		.cfi_restore_state
 1566              	.LBB72:
 1567              	.LBB69:
  97:src/slabAllocator.cpp ****         Slab *&headFrom = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 1568              		.loc 1 97 75 discriminator 2
 1569 09d8 03350503 		ld	a0,48(a0)
  97:src/slabAllocator.cpp ****         Slab *&headFrom = slab->isFull() ? slab->parent->fullHead : slab->parent->partialHead;
 1570              		.loc 1 97 83 discriminator 2
 1571 09dc 13058506 		addi	a0,a0,104
 1572 09e0 6FF01FFB 		j	.L83
 1573              	.LVL156:
 1574              	.L91:
  99:src/slabAllocator.cpp ****         Slab *&headTo = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead;
 1575              		.loc 1 99 49 discriminator 1
 1576 09e4 83B50403 		ld	a1,48(s1)
  99:src/slabAllocator.cpp ****         Slab *&headTo = slab->isEmpty() ? slab->parent->emptyHead : slab->parent->partialHead;
 1577              		.loc 1 99 83 discriminator 1
 1578 09e8 93850506 		addi	a1,a1,96
 1579 09ec 6FF0DFFB 		j	.L85
 1580              	.LVL157:
 1581              	.L92:
 102:src/slabAllocator.cpp ****             SlabAllocator::removeFromList(headFrom, slab);
 1582              		.loc 1 102 13 is_stmt 1
 102:src/slabAllocator.cpp ****             SlabAllocator::removeFromList(headFrom, slab);
 1583              		.loc 1 102 42 is_stmt 0
 1584 09f0 93850400 		mv	a1,s1
 1585              	.LVL158:
 1586 09f4 97000000 		call	_ZN13SlabAllocator14removeFromListERP4SlabS1_
 1586      E7800000 
 1587              	.LVL159:
 103:src/slabAllocator.cpp ****             Buddy::free(slab, slab->parent->slabSize);
 1588              		.loc 1 103 13 is_stmt 1
 103:src/slabAllocator.cpp ****             Buddy::free(slab, slab->parent->slabSize);
 1589              		.loc 1 103 37 is_stmt 0
 1590 09fc 83B70403 		ld	a5,48(s1)
 103:src/slabAllocator.cpp ****             Buddy::free(slab, slab->parent->slabSize);
 1591              		.loc 1 103 24
 1592 0a00 83B58704 		ld	a1,72(a5)
 1593 0a04 13850400 		mv	a0,s1
 1594 0a08 97000000 		call	_ZN5Buddy4freeEPvm@plt
 1594      E7800000 
 1595              	.LVL160:
 1596 0a10 6FF05FFB 		j	.L80
 1597              	.LVL161:
 1598              	.L88:
 1599              		.cfi_def_cfa_register 2
 1600              		.cfi_restore 1
GAS LISTING /tmp/ccQD0RUj.s 			page 42


 1601              		.cfi_restore 8
 1602              		.cfi_restore 9
 1603 0a14 67800000 		ret
 1604              	.LBE69:
 1605              	.LBE72:
 1606              		.cfi_endproc
 1607              	.LFE15:
 1609              		.align	2
 1610              		.globl	_ZN13SlabAllocator10freeObjectEP5CachePKv
 1612              	_ZN13SlabAllocator10freeObjectEP5CachePKv:
 1613              	.LFB16:
 111:src/slabAllocator.cpp **** bool SlabAllocator::freeObject(Cache* cache, const void *addr) {
 1614              		.loc 1 111 64 is_stmt 1
 1615              		.cfi_startproc
 1616              	.LVL162:
 1617 0a18 130101FE 		addi	sp,sp,-32
 1618              		.cfi_def_cfa_offset 32
 1619 0a1c 233C1100 		sd	ra,24(sp)
 1620 0a20 23388100 		sd	s0,16(sp)
 1621 0a24 23349100 		sd	s1,8(sp)
 1622 0a28 23302101 		sd	s2,0(sp)
 1623              		.cfi_offset 1, -8
 1624              		.cfi_offset 8, -16
 1625              		.cfi_offset 9, -24
 1626              		.cfi_offset 18, -32
 1627 0a2c 13040102 		addi	s0,sp,32
 1628              		.cfi_def_cfa 8, 0
 1629 0a30 13090500 		mv	s2,a0
 1630 0a34 93840500 		mv	s1,a1
 112:src/slabAllocator.cpp ****     if(cache->dtor)
 1631              		.loc 1 112 5
 112:src/slabAllocator.cpp ****     if(cache->dtor)
 1632              		.loc 1 112 15 is_stmt 0
 1633 0a38 83378505 		ld	a5,88(a0)
 112:src/slabAllocator.cpp ****     if(cache->dtor)
 1634              		.loc 1 112 5
 1635 0a3c 63860700 		beqz	a5,.L94
 113:src/slabAllocator.cpp ****         cache->dtor((void*)addr);
 1636              		.loc 1 113 9 is_stmt 1
 113:src/slabAllocator.cpp ****         cache->dtor((void*)addr);
 1637              		.loc 1 113 20 is_stmt 0
 1638 0a40 13850500 		mv	a0,a1
 1639              	.LVL163:
 1640 0a44 E7800700 		jalr	a5
 1641              	.LVL164:
 1642              	.L94:
 114:src/slabAllocator.cpp ****     if(cache->ctor)
 1643              		.loc 1 114 5 is_stmt 1
 114:src/slabAllocator.cpp ****     if(cache->ctor)
 1644              		.loc 1 114 15 is_stmt 0
 1645 0a48 83370905 		ld	a5,80(s2)
 114:src/slabAllocator.cpp ****     if(cache->ctor)
 1646              		.loc 1 114 5
 1647 0a4c 63860700 		beqz	a5,.L95
 115:src/slabAllocator.cpp ****         cache->ctor((void*)addr);
 1648              		.loc 1 115 9 is_stmt 1
 115:src/slabAllocator.cpp ****         cache->ctor((void*)addr);
GAS LISTING /tmp/ccQD0RUj.s 			page 43


 1649              		.loc 1 115 20 is_stmt 0
 1650 0a50 13850400 		mv	a0,s1
 1651 0a54 E7800700 		jalr	a5
 1652              	.LVL165:
 1653              	.L95:
 117:src/slabAllocator.cpp ****     bool deleted = SlabAllocator::freeFromList(cache->fullHead, addr);
 1654              		.loc 1 117 5 is_stmt 1
 117:src/slabAllocator.cpp ****     bool deleted = SlabAllocator::freeFromList(cache->fullHead, addr);
 1655              		.loc 1 117 47 is_stmt 0
 1656 0a58 03350907 		ld	a0,112(s2)
 1657              	.LVL166:
 1658 0a5c 6F008000 		j	.L98
 1659              	.LVL167:
 1660              	.L97:
 1661              	.LBB87:
 1662              	.LBB88:
 1663              	.LBB89:
  59:src/../h/slabAllocator.hpp ****         }
  60:src/../h/slabAllocator.hpp ****         return nullptr;
  61:src/../h/slabAllocator.hpp ****     }
  62:src/../h/slabAllocator.hpp **** 
  63:src/../h/slabAllocator.hpp ****     static inline bool freeFromList(Slab* head,const void* addr){
  64:src/../h/slabAllocator.hpp ****         while(head){
  65:src/../h/slabAllocator.hpp ****             uint64 upperBound = SlabAllocator::getUpperBound(head);
  66:src/../h/slabAllocator.hpp ****             uint64 lowerBound = SlabAllocator::getLowerBound(head);
  67:src/../h/slabAllocator.hpp ****             if((uint64)addr < upperBound && (uint64)addr >= lowerBound){
  68:src/../h/slabAllocator.hpp ****                 uint64 index = ((uint64)addr - lowerBound) / head->parent->objectSize;
  69:src/../h/slabAllocator.hpp ****                 freeSlot(head, index);
  70:src/../h/slabAllocator.hpp ****                 return true;
  71:src/../h/slabAllocator.hpp ****             }
  72:src/../h/slabAllocator.hpp ****             head = head->next;
 1664              		.loc 3 72 13 is_stmt 1
 1665              		.loc 3 72 18 is_stmt 0
 1666 0a60 03358500 		ld	a0,8(a0)
 1667              	.LVL168:
 1668              	.L98:
 1669              	.LBE89:
  64:src/../h/slabAllocator.hpp ****             uint64 upperBound = SlabAllocator::getUpperBound(head);
 1670              		.loc 3 64 9 is_stmt 1
  64:src/../h/slabAllocator.hpp ****             uint64 upperBound = SlabAllocator::getUpperBound(head);
 1671              		.loc 3 64 15
 1672 0a64 630E0502 		beqz	a0,.L103
 1673              	.LBB94:
  65:src/../h/slabAllocator.hpp ****             uint64 lowerBound = SlabAllocator::getLowerBound(head);
 1674              		.loc 3 65 13
 1675              	.LVL169:
 1676              	.LBB90:
 1677              	.LBB91:
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1678              		.loc 3 51 52
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1679              		.loc 3 51 73 is_stmt 0
 1680 0a68 03378502 		ld	a4,40(a0)
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1681              		.loc 3 51 94
 1682 0a6c 83378501 		ld	a5,24(a0)
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
GAS LISTING /tmp/ccQD0RUj.s 			page 44


 1683              		.loc 3 51 116
 1684 0a70 83360503 		ld	a3,48(a0)
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1685              		.loc 3 51 124
 1686 0a74 83B50604 		ld	a1,64(a3)
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1687              		.loc 3 51 109
 1688 0a78 B387B702 		mul	a5,a5,a1
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1689              		.loc 3 51 124
 1690 0a7c B307F700 		add	a5,a4,a5
 1691              	.LVL170:
 1692              	.LBE91:
 1693              	.LBE90:
  66:src/../h/slabAllocator.hpp ****             if((uint64)addr < upperBound && (uint64)addr >= lowerBound){
 1694              		.loc 3 66 13 is_stmt 1
 1695              	.LBE94:
 1696              	.LBE88:
 1697              	.LBE87:
  52:src/../h/slabAllocator.hpp **** 
 1698              		.loc 3 52 52
 1699              	.LBB97:
 1700              	.LBB96:
 1701              	.LBB95:
  67:src/../h/slabAllocator.hpp ****                 uint64 index = ((uint64)addr - lowerBound) / head->parent->objectSize;
 1702              		.loc 3 67 13
 1703              	.LBB92:
 1704 0a80 E3F0F4FE 		bleu	a5,s1,.L97
  67:src/../h/slabAllocator.hpp ****                 uint64 index = ((uint64)addr - lowerBound) / head->parent->objectSize;
 1705              		.loc 3 67 42 is_stmt 0
 1706 0a84 E3EEE4FC 		bgtu	a4,s1,.L97
 1707              	.LBB93:
  68:src/../h/slabAllocator.hpp ****                 freeSlot(head, index);
 1708              		.loc 3 68 17 is_stmt 1
  68:src/../h/slabAllocator.hpp ****                 freeSlot(head, index);
 1709              		.loc 3 68 46 is_stmt 0
 1710 0a88 3387E440 		sub	a4,s1,a4
 1711              	.LVL171:
  69:src/../h/slabAllocator.hpp ****                 return true;
 1712              		.loc 3 69 17 is_stmt 1
  69:src/../h/slabAllocator.hpp ****                 return true;
 1713              		.loc 3 69 25 is_stmt 0
 1714 0a8c B355B702 		divu	a1,a4,a1
 1715              	.LVL172:
 1716 0a90 97000000 		call	_ZN13SlabAllocator8freeSlotEP4Slabm
 1716      E7800000 
 1717              	.LVL173:
  70:src/../h/slabAllocator.hpp ****             }
 1718              		.loc 3 70 17 is_stmt 1
  70:src/../h/slabAllocator.hpp ****             }
 1719              		.loc 3 70 24 is_stmt 0
 1720 0a98 13051000 		li	a0,1
 1721 0a9c 6F008000 		j	.L96
 1722              	.LVL174:
 1723              	.L103:
 1724              	.LBE93:
 1725              	.LBE92:
GAS LISTING /tmp/ccQD0RUj.s 			page 45


 1726              	.LBE95:
  73:src/../h/slabAllocator.hpp ****         }
  74:src/../h/slabAllocator.hpp ****         return false;
 1727              		.loc 3 74 16
 1728 0aa0 13050000 		li	a0,0
 1729              	.LVL175:
 1730              	.L96:
 1731              	.LBE96:
 1732              	.LBE97:
 118:src/slabAllocator.cpp ****     if(deleted)
 1733              		.loc 1 118 5 is_stmt 1
 1734 0aa4 630E0500 		beqz	a0,.L105
 1735              	.LVL176:
 1736              	.L99:
 124:src/slabAllocator.cpp **** }
 1737              		.loc 1 124 1 is_stmt 0
 1738 0aa8 83308101 		ld	ra,24(sp)
 1739              		.cfi_remember_state
 1740              		.cfi_restore 1
 1741 0aac 03340101 		ld	s0,16(sp)
 1742              		.cfi_restore 8
 1743              		.cfi_def_cfa 2, 32
 1744 0ab0 83348100 		ld	s1,8(sp)
 1745              		.cfi_restore 9
 1746              	.LVL177:
 1747 0ab4 03390100 		ld	s2,0(sp)
 1748              		.cfi_restore 18
 1749              	.LVL178:
 1750 0ab8 13010102 		addi	sp,sp,32
 1751              		.cfi_def_cfa_offset 0
 1752 0abc 67800000 		jr	ra
 1753              	.LVL179:
 1754              	.L105:
 1755              		.cfi_restore_state
 121:src/slabAllocator.cpp ****     deleted = SlabAllocator::freeFromList(cache->partialHead, addr);
 1756              		.loc 1 121 5 is_stmt 1
 121:src/slabAllocator.cpp ****     deleted = SlabAllocator::freeFromList(cache->partialHead, addr);
 1757              		.loc 1 121 42 is_stmt 0
 1758 0ac0 83378906 		ld	a5,104(s2)
 1759              	.LVL180:
 1760 0ac4 6F008000 		j	.L102
 1761              	.LVL181:
 1762              	.L101:
 1763              	.LBB98:
 1764              	.LBB99:
 1765              	.LBB100:
  72:src/../h/slabAllocator.hpp ****         }
 1766              		.loc 3 72 13 is_stmt 1
  72:src/../h/slabAllocator.hpp ****         }
 1767              		.loc 3 72 18 is_stmt 0
 1768 0ac8 83B78700 		ld	a5,8(a5)
 1769              	.LVL182:
 1770              	.L102:
 1771              	.LBE100:
  64:src/../h/slabAllocator.hpp ****             uint64 upperBound = SlabAllocator::getUpperBound(head);
 1772              		.loc 3 64 9 is_stmt 1
  64:src/../h/slabAllocator.hpp ****             uint64 upperBound = SlabAllocator::getUpperBound(head);
GAS LISTING /tmp/ccQD0RUj.s 			page 46


 1773              		.loc 3 64 15
 1774 0acc E38E07FC 		beqz	a5,.L99
 1775              	.LBB105:
  65:src/../h/slabAllocator.hpp ****             uint64 lowerBound = SlabAllocator::getLowerBound(head);
 1776              		.loc 3 65 13
 1777              	.LVL183:
 1778              	.LBB101:
 1779              	.LBB102:
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1780              		.loc 3 51 52
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1781              		.loc 3 51 73 is_stmt 0
 1782 0ad0 83B68702 		ld	a3,40(a5)
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1783              		.loc 3 51 94
 1784 0ad4 03B78701 		ld	a4,24(a5)
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1785              		.loc 3 51 116
 1786 0ad8 03B60703 		ld	a2,48(a5)
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1787              		.loc 3 51 124
 1788 0adc 83350604 		ld	a1,64(a2)
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1789              		.loc 3 51 109
 1790 0ae0 3307B702 		mul	a4,a4,a1
  51:src/../h/slabAllocator.hpp ****     static inline uint64 getLowerBound(Slab* slab){return (uint64)slab->objectOffset;}
 1791              		.loc 3 51 124
 1792 0ae4 3387E600 		add	a4,a3,a4
 1793              	.LVL184:
 1794              	.LBE102:
 1795              	.LBE101:
  66:src/../h/slabAllocator.hpp ****             if((uint64)addr < upperBound && (uint64)addr >= lowerBound){
 1796              		.loc 3 66 13 is_stmt 1
 1797              	.LBE105:
 1798              	.LBE99:
 1799              	.LBE98:
  52:src/../h/slabAllocator.hpp **** 
 1800              		.loc 3 52 52
 1801              	.LBB108:
 1802              	.LBB107:
 1803              	.LBB106:
  67:src/../h/slabAllocator.hpp ****                 uint64 index = ((uint64)addr - lowerBound) / head->parent->objectSize;
 1804              		.loc 3 67 13
 1805              	.LBB103:
 1806 0ae8 E3F0E4FE 		bleu	a4,s1,.L101
  67:src/../h/slabAllocator.hpp ****                 uint64 index = ((uint64)addr - lowerBound) / head->parent->objectSize;
 1807              		.loc 3 67 42 is_stmt 0
 1808 0aec E3EED4FC 		bgtu	a3,s1,.L101
 1809              	.LBB104:
  68:src/../h/slabAllocator.hpp ****                 freeSlot(head, index);
 1810              		.loc 3 68 17 is_stmt 1
  68:src/../h/slabAllocator.hpp ****                 freeSlot(head, index);
 1811              		.loc 3 68 46 is_stmt 0
 1812 0af0 B386D440 		sub	a3,s1,a3
 1813              	.LVL185:
  69:src/../h/slabAllocator.hpp ****                 return true;
 1814              		.loc 3 69 17 is_stmt 1
GAS LISTING /tmp/ccQD0RUj.s 			page 47


  69:src/../h/slabAllocator.hpp ****                 return true;
 1815              		.loc 3 69 25 is_stmt 0
 1816 0af4 B3D5B602 		divu	a1,a3,a1
 1817              	.LVL186:
 1818 0af8 13850700 		mv	a0,a5
 1819              	.LVL187:
 1820 0afc 97000000 		call	_ZN13SlabAllocator8freeSlotEP4Slabm
 1820      E7800000 
 1821              	.LVL188:
  70:src/../h/slabAllocator.hpp ****             }
 1822              		.loc 3 70 17 is_stmt 1
  70:src/../h/slabAllocator.hpp ****             }
 1823              		.loc 3 70 24 is_stmt 0
 1824 0b04 13051000 		li	a0,1
 1825 0b08 6FF01FFA 		j	.L99
 1826              	.LBE104:
 1827              	.LBE103:
 1828              	.LBE106:
 1829              	.LBE107:
 1830              	.LBE108:
 1831              		.cfi_endproc
 1832              	.LFE16:
 1834              		.align	2
 1835              		.globl	_ZN13SlabAllocator10freeBufferEPKv
 1837              	_ZN13SlabAllocator10freeBufferEPKv:
 1838              	.LFB17:
 126:src/slabAllocator.cpp **** void SlabAllocator::freeBuffer(const void *addr) {
 1839              		.loc 1 126 50 is_stmt 1
 1840              		.cfi_startproc
 1841              	.LVL189:
 1842 0b0c 130101FE 		addi	sp,sp,-32
 1843              		.cfi_def_cfa_offset 32
 1844 0b10 233C1100 		sd	ra,24(sp)
 1845 0b14 23388100 		sd	s0,16(sp)
 1846 0b18 23349100 		sd	s1,8(sp)
 1847 0b1c 23302101 		sd	s2,0(sp)
 1848              		.cfi_offset 1, -8
 1849              		.cfi_offset 8, -16
 1850              		.cfi_offset 9, -24
 1851              		.cfi_offset 18, -32
 1852 0b20 13040102 		addi	s0,sp,32
 1853              		.cfi_def_cfa 8, 0
 1854 0b24 13090500 		mv	s2,a0
 127:src/slabAllocator.cpp ****     for(int i=0;i<BUCKET_SIZE;i++)
 1855              		.loc 1 127 5
 1856              	.LVL190:
 1857              	.LBB109:
 127:src/slabAllocator.cpp ****     for(int i=0;i<BUCKET_SIZE;i++)
 1858              		.loc 1 127 13 is_stmt 0
 1859 0b28 93040000 		li	s1,0
 1860              	.LVL191:
 1861              	.L108:
 127:src/slabAllocator.cpp ****     for(int i=0;i<BUCKET_SIZE;i++)
 1862              		.loc 1 127 18 is_stmt 1 discriminator 1
 1863 0b2c 9307C000 		li	a5,12
 1864 0b30 63C89702 		bgt	s1,a5,.L106
 128:src/slabAllocator.cpp ****         if(SlabAllocator::freeObject(sizeN[i], addr))
GAS LISTING /tmp/ccQD0RUj.s 			page 48


 1865              		.loc 1 128 9
 128:src/slabAllocator.cpp ****         if(SlabAllocator::freeObject(sizeN[i], addr))
 1866              		.loc 1 128 37 is_stmt 0
 1867 0b34 13973400 		slli	a4,s1,3
 1868 0b38 97070000 		lla	a5,.LANCHOR0
 1868      93870700 
 1869 0b40 B387E700 		add	a5,a5,a4
 1870 0b44 93050900 		mv	a1,s2
 1871 0b48 03B50700 		ld	a0,0(a5)
 1872 0b4c 97000000 		call	_ZN13SlabAllocator10freeObjectEP5CachePKv
 1872      E7800000 
 1873              	.LVL192:
 128:src/slabAllocator.cpp ****         if(SlabAllocator::freeObject(sizeN[i], addr))
 1874              		.loc 1 128 9
 1875 0b54 63160500 		bnez	a0,.L106
 127:src/slabAllocator.cpp ****     for(int i=0;i<BUCKET_SIZE;i++)
 1876              		.loc 1 127 5 is_stmt 1 discriminator 2
 1877 0b58 9B841400 		addiw	s1,s1,1
 1878              	.LVL193:
 1879 0b5c 6FF01FFD 		j	.L108
 1880              	.LVL194:
 1881              	.L106:
 1882              	.LBE109:
 130:src/slabAllocator.cpp **** }
 1883              		.loc 1 130 1 is_stmt 0
 1884 0b60 83308101 		ld	ra,24(sp)
 1885              		.cfi_restore 1
 1886 0b64 03340101 		ld	s0,16(sp)
 1887              		.cfi_restore 8
 1888              		.cfi_def_cfa 2, 32
 1889 0b68 83348100 		ld	s1,8(sp)
 1890              		.cfi_restore 9
 1891              	.LVL195:
 1892 0b6c 03390100 		ld	s2,0(sp)
 1893              		.cfi_restore 18
 1894              	.LVL196:
 1895 0b70 13010102 		addi	sp,sp,32
 1896              		.cfi_def_cfa_offset 0
 1897 0b74 67800000 		jr	ra
 1898              		.cfi_endproc
 1899              	.LFE17:
 1901              		.align	2
 1902              		.globl	_ZN13SlabAllocator11deleteCacheERP5Cache
 1904              	_ZN13SlabAllocator11deleteCacheERP5Cache:
 1905              	.LFB19:
 145:src/slabAllocator.cpp **** void SlabAllocator::deleteCache(Cache* &cache) {
 1906              		.loc 1 145 48 is_stmt 1
 1907              		.cfi_startproc
 1908              	.LVL197:
 1909 0b78 130101FE 		addi	sp,sp,-32
 1910              		.cfi_def_cfa_offset 32
 1911 0b7c 233C1100 		sd	ra,24(sp)
 1912 0b80 23388100 		sd	s0,16(sp)
 1913 0b84 23349100 		sd	s1,8(sp)
 1914 0b88 23302101 		sd	s2,0(sp)
 1915              		.cfi_offset 1, -8
 1916              		.cfi_offset 8, -16
GAS LISTING /tmp/ccQD0RUj.s 			page 49


 1917              		.cfi_offset 9, -24
 1918              		.cfi_offset 18, -32
 1919 0b8c 13040102 		addi	s0,sp,32
 1920              		.cfi_def_cfa 8, 0
 1921 0b90 93040500 		mv	s1,a0
 146:src/slabAllocator.cpp ****     deleteList(cache->fullHead);
 1922              		.loc 1 146 5
 146:src/slabAllocator.cpp ****     deleteList(cache->fullHead);
 1923              		.loc 1 146 16 is_stmt 0
 1924 0b94 03390500 		ld	s2,0(a0)
 146:src/slabAllocator.cpp ****     deleteList(cache->fullHead);
 1925              		.loc 1 146 23
 1926 0b98 13090907 		addi	s2,s2,112
 1927              	.LVL198:
 1928              	.L112:
 1929              	.LBB119:
 1930              	.LBB120:
  75:src/../h/slabAllocator.hpp ****     }
  76:src/../h/slabAllocator.hpp **** 
  77:src/../h/slabAllocator.hpp ****     static inline void deleteList(Slab* &head){
  78:src/../h/slabAllocator.hpp ****         while(head){
 1931              		.loc 3 78 9 is_stmt 1
 1932              		.loc 3 78 15
 1933 0b9c 03350900 		ld	a0,0(s2)
 1934 0ba0 63020502 		beqz	a0,.L111
 1935              	.LBB121:
  79:src/../h/slabAllocator.hpp ****             Slab* tmp = head;
 1936              		.loc 3 79 13
 1937              	.LVL199:
  80:src/../h/slabAllocator.hpp ****             Buddy::free(tmp, head->parent->slabSize);
 1938              		.loc 3 80 13
 1939              		.loc 3 80 36 is_stmt 0
 1940 0ba4 83370503 		ld	a5,48(a0)
 1941              		.loc 3 80 24
 1942 0ba8 83B58704 		ld	a1,72(a5)
 1943 0bac 97000000 		call	_ZN5Buddy4freeEPvm@plt
 1943      E7800000 
 1944              	.LVL200:
  81:src/../h/slabAllocator.hpp ****             head = head->next;
 1945              		.loc 3 81 13 is_stmt 1
 1946              		.loc 3 81 20 is_stmt 0
 1947 0bb4 83370900 		ld	a5,0(s2)
 1948              		.loc 3 81 26
 1949 0bb8 83B78700 		ld	a5,8(a5)
 1950              		.loc 3 81 18
 1951 0bbc 2330F900 		sd	a5,0(s2)
 1952              	.LBE121:
  78:src/../h/slabAllocator.hpp ****             Slab* tmp = head;
 1953              		.loc 3 78 9
 1954 0bc0 6FF0DFFD 		j	.L112
 1955              	.L111:
 1956              	.LVL201:
 1957              	.LBE120:
 1958              	.LBE119:
 147:src/slabAllocator.cpp ****     deleteList(cache->partialHead);
 1959              		.loc 1 147 5 is_stmt 1
 147:src/slabAllocator.cpp ****     deleteList(cache->partialHead);
GAS LISTING /tmp/ccQD0RUj.s 			page 50


 1960              		.loc 1 147 16 is_stmt 0
 1961 0bc4 03B90400 		ld	s2,0(s1)
 147:src/slabAllocator.cpp ****     deleteList(cache->partialHead);
 1962              		.loc 1 147 23
 1963 0bc8 13098906 		addi	s2,s2,104
 1964              	.LVL202:
 1965              	.L114:
 1966              	.LBB122:
 1967              	.LBB123:
  78:src/../h/slabAllocator.hpp ****             Slab* tmp = head;
 1968              		.loc 3 78 9 is_stmt 1
  78:src/../h/slabAllocator.hpp ****             Slab* tmp = head;
 1969              		.loc 3 78 15
 1970 0bcc 03350900 		ld	a0,0(s2)
 1971 0bd0 63020502 		beqz	a0,.L113
 1972              	.LBB124:
  79:src/../h/slabAllocator.hpp ****             Buddy::free(tmp, head->parent->slabSize);
 1973              		.loc 3 79 13
 1974              	.LVL203:
  80:src/../h/slabAllocator.hpp ****             head = head->next;
 1975              		.loc 3 80 13
  80:src/../h/slabAllocator.hpp ****             head = head->next;
 1976              		.loc 3 80 36 is_stmt 0
 1977 0bd4 83370503 		ld	a5,48(a0)
  80:src/../h/slabAllocator.hpp ****             head = head->next;
 1978              		.loc 3 80 24
 1979 0bd8 83B58704 		ld	a1,72(a5)
 1980 0bdc 97000000 		call	_ZN5Buddy4freeEPvm@plt
 1980      E7800000 
 1981              	.LVL204:
 1982              		.loc 3 81 13 is_stmt 1
 1983              		.loc 3 81 20 is_stmt 0
 1984 0be4 83370900 		ld	a5,0(s2)
 1985              		.loc 3 81 26
 1986 0be8 83B78700 		ld	a5,8(a5)
 1987              		.loc 3 81 18
 1988 0bec 2330F900 		sd	a5,0(s2)
 1989              	.LBE124:
  78:src/../h/slabAllocator.hpp ****             Slab* tmp = head;
 1990              		.loc 3 78 9
 1991 0bf0 6FF0DFFD 		j	.L114
 1992              	.L113:
 1993              	.LVL205:
 1994              	.LBE123:
 1995              	.LBE122:
 148:src/slabAllocator.cpp ****     deleteList(cache->emptyHead);
 1996              		.loc 1 148 5 is_stmt 1
 148:src/slabAllocator.cpp ****     deleteList(cache->emptyHead);
 1997              		.loc 1 148 16 is_stmt 0
 1998 0bf4 03B90400 		ld	s2,0(s1)
 148:src/slabAllocator.cpp ****     deleteList(cache->emptyHead);
 1999              		.loc 1 148 23
 2000 0bf8 13090906 		addi	s2,s2,96
 2001              	.LVL206:
 2002              	.L116:
 2003              	.LBB125:
 2004              	.LBB126:
GAS LISTING /tmp/ccQD0RUj.s 			page 51


  78:src/../h/slabAllocator.hpp ****             Slab* tmp = head;
 2005              		.loc 3 78 9 is_stmt 1
  78:src/../h/slabAllocator.hpp ****             Slab* tmp = head;
 2006              		.loc 3 78 15
 2007 0bfc 03350900 		ld	a0,0(s2)
 2008 0c00 63020502 		beqz	a0,.L115
 2009              	.LBB127:
  79:src/../h/slabAllocator.hpp ****             Buddy::free(tmp, head->parent->slabSize);
 2010              		.loc 3 79 13
 2011              	.LVL207:
  80:src/../h/slabAllocator.hpp ****             head = head->next;
 2012              		.loc 3 80 13
  80:src/../h/slabAllocator.hpp ****             head = head->next;
 2013              		.loc 3 80 36 is_stmt 0
 2014 0c04 83370503 		ld	a5,48(a0)
  80:src/../h/slabAllocator.hpp ****             head = head->next;
 2015              		.loc 3 80 24
 2016 0c08 83B58704 		ld	a1,72(a5)
 2017 0c0c 97000000 		call	_ZN5Buddy4freeEPvm@plt
 2017      E7800000 
 2018              	.LVL208:
 2019              		.loc 3 81 13 is_stmt 1
 2020              		.loc 3 81 20 is_stmt 0
 2021 0c14 83370900 		ld	a5,0(s2)
 2022              		.loc 3 81 26
 2023 0c18 83B78700 		ld	a5,8(a5)
 2024              		.loc 3 81 18
 2025 0c1c 2330F900 		sd	a5,0(s2)
 2026              	.LBE127:
  78:src/../h/slabAllocator.hpp ****             Slab* tmp = head;
 2027              		.loc 3 78 9
 2028 0c20 6FF0DFFD 		j	.L116
 2029              	.L115:
 2030              	.LVL209:
 2031              	.LBE126:
 2032              	.LBE125:
 149:src/slabAllocator.cpp ****     SlabAllocator::freeObject(SlabAllocator::cache, cache);
 2033              		.loc 1 149 5 is_stmt 1
 149:src/slabAllocator.cpp ****     SlabAllocator::freeObject(SlabAllocator::cache, cache);
 2034              		.loc 1 149 30 is_stmt 0
 2035 0c24 83B50400 		ld	a1,0(s1)
 2036 0c28 17050000 		ld	a0,.LANCHOR0+104
 2036      03350500 
 2037 0c30 97000000 		call	_ZN13SlabAllocator10freeObjectEP5CachePKv
 2037      E7800000 
 2038              	.LVL210:
 150:src/slabAllocator.cpp ****     cache = nullptr;
 2039              		.loc 1 150 5 is_stmt 1
 150:src/slabAllocator.cpp ****     cache = nullptr;
 2040              		.loc 1 150 11 is_stmt 0
 2041 0c38 23B00400 		sd	zero,0(s1)
 151:src/slabAllocator.cpp **** }
 2042              		.loc 1 151 1
 2043 0c3c 83308101 		ld	ra,24(sp)
 2044              		.cfi_restore 1
 2045 0c40 03340101 		ld	s0,16(sp)
 2046              		.cfi_restore 8
GAS LISTING /tmp/ccQD0RUj.s 			page 52


 2047              		.cfi_def_cfa 2, 32
 2048 0c44 83348100 		ld	s1,8(sp)
 2049              		.cfi_restore 9
 2050              	.LVL211:
 2051 0c48 03390100 		ld	s2,0(sp)
 2052              		.cfi_restore 18
 2053 0c4c 13010102 		addi	sp,sp,32
 2054              		.cfi_def_cfa_offset 0
 2055 0c50 67800000 		jr	ra
 2056              		.cfi_endproc
 2057              	.LFE19:
 2059              		.globl	_ZN13SlabAllocator20blocksResponsibleForE
 2060              		.globl	_ZN13SlabAllocator9startAddrE
 2061              		.globl	_ZN13SlabAllocator5namesE
 2062              		.section	.rodata.str1.8
 2063 0163 00000000 		.align	3
 2063      00
 2064              	.LC19:
 2065 0168 42756666 		.string	"Buffer Cache No. 0"
 2065      65722043 
 2065      61636865 
 2065      204E6F2E 
 2065      203000
 2066 017b 00000000 		.align	3
 2066      00
 2067              	.LC20:
 2068 0180 42756666 		.string	"Buffer Cache No. 1"
 2068      65722043 
 2068      61636865 
 2068      204E6F2E 
 2068      203100
 2069 0193 00000000 		.align	3
 2069      00
 2070              	.LC21:
 2071 0198 42756666 		.string	"Buffer Cache No. 2"
 2071      65722043 
 2071      61636865 
 2071      204E6F2E 
 2071      203200
 2072 01ab 00000000 		.align	3
 2072      00
 2073              	.LC22:
 2074 01b0 42756666 		.string	"Buffer Cache No. 3"
 2074      65722043 
 2074      61636865 
 2074      204E6F2E 
 2074      203300
 2075 01c3 00000000 		.align	3
 2075      00
 2076              	.LC23:
 2077 01c8 42756666 		.string	"Buffer Cache No. 4"
 2077      65722043 
 2077      61636865 
 2077      204E6F2E 
 2077      203400
 2078 01db 00000000 		.align	3
 2078      00
GAS LISTING /tmp/ccQD0RUj.s 			page 53


 2079              	.LC24:
 2080 01e0 42756666 		.string	"Buffer Cache No. 5"
 2080      65722043 
 2080      61636865 
 2080      204E6F2E 
 2080      203500
 2081 01f3 00000000 		.align	3
 2081      00
 2082              	.LC25:
 2083 01f8 42756666 		.string	"Buffer Cache No. 6"
 2083      65722043 
 2083      61636865 
 2083      204E6F2E 
 2083      203600
 2084 020b 00000000 		.align	3
 2084      00
 2085              	.LC26:
 2086 0210 42756666 		.string	"Buffer Cache No. 7"
 2086      65722043 
 2086      61636865 
 2086      204E6F2E 
 2086      203700
 2087 0223 00000000 		.align	3
 2087      00
 2088              	.LC27:
 2089 0228 42756666 		.string	"Buffer Cache No. 8"
 2089      65722043 
 2089      61636865 
 2089      204E6F2E 
 2089      203800
 2090 023b 00000000 		.align	3
 2090      00
 2091              	.LC28:
 2092 0240 42756666 		.string	"Buffer Cache No. 9"
 2092      65722043 
 2092      61636865 
 2092      204E6F2E 
 2092      203900
 2093 0253 00000000 		.align	3
 2093      00
 2094              	.LC29:
 2095 0258 42756666 		.string	"Buffer Cache No. 10"
 2095      65722043 
 2095      61636865 
 2095      204E6F2E 
 2095      20313000 
 2096 026c 00000000 		.align	3
 2097              	.LC30:
 2098 0270 42756666 		.string	"Buffer Cache No. 11"
 2098      65722043 
 2098      61636865 
 2098      204E6F2E 
 2098      20313100 
 2099 0284 00000000 		.align	3
 2100              	.LC31:
 2101 0288 42756666 		.string	"Buffer Cache No. 12"
 2101      65722043 
GAS LISTING /tmp/ccQD0RUj.s 			page 54


 2101      61636865 
 2101      204E6F2E 
 2101      20313200 
 2102              		.globl	_ZN13SlabAllocator5sizeNE
 2103              		.globl	_ZN13SlabAllocator5cacheE
 2104              		.bss
 2105              		.align	3
 2106              		.set	.LANCHOR0,. + 0
 2109              	_ZN13SlabAllocator5sizeNE:
 2110 0000 00000000 		.zero	104
 2110      00000000 
 2110      00000000 
 2110      00000000 
 2110      00000000 
 2113              	_ZN13SlabAllocator5cacheE:
 2114 0068 00000000 		.zero	8
 2114      00000000 
 2117              	_ZN13SlabAllocator9startAddrE:
 2118 0070 00000000 		.zero	8
 2118      00000000 
 2121              	_ZN13SlabAllocator20blocksResponsibleForE:
 2122 0078 00000000 		.zero	8
 2122      00000000 
 2123              		.section	.data.rel.local,"aw"
 2124              		.align	3
 2125              		.set	.LANCHOR1,. + 0
 2128              	_ZN13SlabAllocator5namesE:
 2129 0000 00000000 		.dword	.LC19
 2129      00000000 
 2130 0008 00000000 		.dword	.LC20
 2130      00000000 
 2131 0010 00000000 		.dword	.LC21
 2131      00000000 
 2132 0018 00000000 		.dword	.LC22
 2132      00000000 
 2133 0020 00000000 		.dword	.LC23
 2133      00000000 
 2134 0028 00000000 		.dword	.LC24
 2134      00000000 
 2135 0030 00000000 		.dword	.LC25
 2135      00000000 
 2136 0038 00000000 		.dword	.LC26
 2136      00000000 
 2137 0040 00000000 		.dword	.LC27
 2137      00000000 
 2138 0048 00000000 		.dword	.LC28
 2138      00000000 
 2139 0050 00000000 		.dword	.LC29
 2139      00000000 
 2140 0058 00000000 		.dword	.LC30
 2140      00000000 
 2141 0060 00000000 		.dword	.LC31
 2141      00000000 
 2142              		.text
 2143              	.Letext0:
 2144              		.file 5 "src/../h/../h/../lib/hw.h"
 2145              		.file 6 "src/../h/../h/utility.hpp"
GAS LISTING /tmp/ccQD0RUj.s 			page 55


 2146              		.file 7 "src/../h/../h/consoleUtil.hpp"
 2147              		.file 8 "src/../h/../h/cache_t.hpp"
GAS LISTING /tmp/ccQD0RUj.s 			page 56


DEFINED SYMBOLS
                            *ABS*:0000000000000000 slabAllocator.cpp
     /tmp/ccQD0RUj.s:9      .text:0000000000000000 _ZN13SlabAllocator11shrinkCacheEP5Cache
     /tmp/ccQD0RUj.s:13     .text:0000000000000000 .L0 
     /tmp/ccQD0RUj.s:15     .text:0000000000000000 .L0 
     /tmp/ccQD0RUj.s:16     .text:0000000000000004 .L0 
     /tmp/ccQD0RUj.s:21     .text:0000000000000014 .L0 
     /tmp/ccQD0RUj.s:22     .text:0000000000000014 .L0 
     /tmp/ccQD0RUj.s:23     .text:0000000000000014 .L0 
     /tmp/ccQD0RUj.s:24     .text:0000000000000014 .L0 
     /tmp/ccQD0RUj.s:26     .text:0000000000000018 .L0 
     /tmp/ccQD0RUj.s:30     .text:000000000000001c .L0 
     /tmp/ccQD0RUj.s:31     .text:000000000000001c .L0 
     /tmp/ccQD0RUj.s:35     .text:0000000000000020 .L0 
     /tmp/ccQD0RUj.s:36     .text:0000000000000020 .L0 
     /tmp/ccQD0RUj.s:39     .text:0000000000000028 .L0 
     /tmp/ccQD0RUj.s:40     .text:0000000000000028 .L0 
     /tmp/ccQD0RUj.s:44     .text:0000000000000034 .L0 
     /tmp/ccQD0RUj.s:45     .text:0000000000000034 .L0 
     /tmp/ccQD0RUj.s:47     .text:0000000000000038 .L0 
     /tmp/ccQD0RUj.s:49     .text:000000000000003c .L0 
     /tmp/ccQD0RUj.s:52     .text:0000000000000040 .L0 
     /tmp/ccQD0RUj.s:53     .text:0000000000000040 .L0 
     /tmp/ccQD0RUj.s:55     .text:0000000000000044 .L0 
     /tmp/ccQD0RUj.s:57     .text:0000000000000048 .L0 
     /tmp/ccQD0RUj.s:61     .text:000000000000004c .L0 
     /tmp/ccQD0RUj.s:62     .text:000000000000004c .L0 
     /tmp/ccQD0RUj.s:64     .text:0000000000000054 .L0 
     /tmp/ccQD0RUj.s:66     .text:0000000000000058 .L0 
     /tmp/ccQD0RUj.s:67     .text:0000000000000058 .L0 
     /tmp/ccQD0RUj.s:69     .text:000000000000005c .L0 
     /tmp/ccQD0RUj.s:72     .text:0000000000000060 .L0 
     /tmp/ccQD0RUj.s:75     .text:0000000000000064 .L0 
     /tmp/ccQD0RUj.s:77     .text:0000000000000068 .L0 
     /tmp/ccQD0RUj.s:115    .text:0000000000000068 _ZN13SlabAllocator9printSlabEP4Slab
     /tmp/ccQD0RUj.s:118    .text:0000000000000068 .L0 
     /tmp/ccQD0RUj.s:120    .text:0000000000000068 .L0 
     /tmp/ccQD0RUj.s:122    .text:0000000000000068 .L0 
     /tmp/ccQD0RUj.s:125    .text:000000000000006c .L0 
     /tmp/ccQD0RUj.s:126    .text:0000000000000070 .L0 
     /tmp/ccQD0RUj.s:131    .text:0000000000000080 .L0 
     /tmp/ccQD0RUj.s:132    .text:0000000000000080 .L0 
     /tmp/ccQD0RUj.s:133    .text:0000000000000080 .L0 
     /tmp/ccQD0RUj.s:134    .text:0000000000000080 .L0 
     /tmp/ccQD0RUj.s:136    .text:0000000000000084 .L0 
     /tmp/ccQD0RUj.s:141    .text:0000000000000088 .L0 
     /tmp/ccQD0RUj.s:142    .text:0000000000000088 .L0 
     /tmp/ccQD0RUj.s:149    .text:00000000000000a4 .L0 
     /tmp/ccQD0RUj.s:150    .text:00000000000000a4 .L0 
     /tmp/ccQD0RUj.s:156    .text:00000000000000c0 .L0 
     /tmp/ccQD0RUj.s:157    .text:00000000000000c0 .L0 
     /tmp/ccQD0RUj.s:163    .text:00000000000000dc .L0 
     /tmp/ccQD0RUj.s:164    .text:00000000000000dc .L0 
     /tmp/ccQD0RUj.s:170    .text:00000000000000f8 .L0 
     /tmp/ccQD0RUj.s:171    .text:00000000000000f8 .L0 
     /tmp/ccQD0RUj.s:177    .text:0000000000000114 .L0 
     /tmp/ccQD0RUj.s:178    .text:0000000000000114 .L0 
GAS LISTING /tmp/ccQD0RUj.s 			page 57


     /tmp/ccQD0RUj.s:184    .text:0000000000000130 .L0 
     /tmp/ccQD0RUj.s:185    .text:0000000000000130 .L0 
     /tmp/ccQD0RUj.s:190    .text:0000000000000140 .L0 
     /tmp/ccQD0RUj.s:191    .text:0000000000000140 .L0 
     /tmp/ccQD0RUj.s:196    .text:0000000000000148 .L0 
     /tmp/ccQD0RUj.s:197    .text:0000000000000148 .L0 
     /tmp/ccQD0RUj.s:199    .text:000000000000014c .L0 
     /tmp/ccQD0RUj.s:201    .text:0000000000000150 .L0 
     /tmp/ccQD0RUj.s:207    .text:000000000000016c .L0 
     /tmp/ccQD0RUj.s:211    .text:0000000000000170 .L0 
     /tmp/ccQD0RUj.s:212    .text:0000000000000170 .L0 
     /tmp/ccQD0RUj.s:214    .text:0000000000000174 .L0 
     /tmp/ccQD0RUj.s:216    .text:0000000000000178 .L0 
     /tmp/ccQD0RUj.s:218    .text:000000000000017c .L0 
     /tmp/ccQD0RUj.s:221    .text:0000000000000180 .L0 
     /tmp/ccQD0RUj.s:222    .text:0000000000000180 .L0 
     /tmp/ccQD0RUj.s:228    .text:0000000000000190 .L0 
     /tmp/ccQD0RUj.s:229    .text:0000000000000194 .L0 
     /tmp/ccQD0RUj.s:231    .text:0000000000000198 .L0 
     /tmp/ccQD0RUj.s:232    .text:0000000000000198 .L0 
     /tmp/ccQD0RUj.s:234    .text:000000000000019c .L0 
     /tmp/ccQD0RUj.s:237    .text:00000000000001a0 .L0 
     /tmp/ccQD0RUj.s:240    .text:00000000000001a4 .L0 
     /tmp/ccQD0RUj.s:245    .text:00000000000001ac .L0 
     /tmp/ccQD0RUj.s:277    .text:00000000000001ac _ZN13SlabAllocator10printCacheEP5Cache
     /tmp/ccQD0RUj.s:280    .text:00000000000001ac .L0 
     /tmp/ccQD0RUj.s:282    .text:00000000000001ac .L0 
     /tmp/ccQD0RUj.s:283    .text:00000000000001b0 .L0 
     /tmp/ccQD0RUj.s:288    .text:00000000000001c0 .L0 
     /tmp/ccQD0RUj.s:289    .text:00000000000001c0 .L0 
     /tmp/ccQD0RUj.s:290    .text:00000000000001c0 .L0 
     /tmp/ccQD0RUj.s:291    .text:00000000000001c0 .L0 
     /tmp/ccQD0RUj.s:293    .text:00000000000001c4 .L0 
     /tmp/ccQD0RUj.s:296    .text:00000000000001c8 .L0 
     /tmp/ccQD0RUj.s:297    .text:00000000000001c8 .L0 
     /tmp/ccQD0RUj.s:302    .text:00000000000001d8 .L0 
     /tmp/ccQD0RUj.s:303    .text:00000000000001d8 .L0 
     /tmp/ccQD0RUj.s:307    .text:00000000000001e4 .L0 
     /tmp/ccQD0RUj.s:308    .text:00000000000001e4 .L0 
     /tmp/ccQD0RUj.s:312    .text:00000000000001f4 .L0 
     /tmp/ccQD0RUj.s:313    .text:00000000000001f4 .L0 
     /tmp/ccQD0RUj.s:320    .text:0000000000000218 .L0 
     /tmp/ccQD0RUj.s:321    .text:0000000000000218 .L0 
     /tmp/ccQD0RUj.s:327    .text:0000000000000234 .L0 
     /tmp/ccQD0RUj.s:328    .text:0000000000000234 .L0 
     /tmp/ccQD0RUj.s:334    .text:0000000000000250 .L0 
     /tmp/ccQD0RUj.s:335    .text:0000000000000250 .L0 
     /tmp/ccQD0RUj.s:341    .text:000000000000026c .L0 
     /tmp/ccQD0RUj.s:342    .text:000000000000026c .L0 
     /tmp/ccQD0RUj.s:348    .text:0000000000000288 .L0 
     /tmp/ccQD0RUj.s:349    .text:0000000000000288 .L0 
     /tmp/ccQD0RUj.s:353    .text:000000000000028c .L0 
     /tmp/ccQD0RUj.s:354    .text:000000000000028c .L0 
     /tmp/ccQD0RUj.s:356    .text:0000000000000290 .L0 
     /tmp/ccQD0RUj.s:357    .text:0000000000000290 .L0 
     /tmp/ccQD0RUj.s:363    .text:00000000000002ac .L0 
     /tmp/ccQD0RUj.s:364    .text:00000000000002ac .L0 
GAS LISTING /tmp/ccQD0RUj.s 			page 58


     /tmp/ccQD0RUj.s:367    .text:00000000000002b0 .L0 
     /tmp/ccQD0RUj.s:370    .text:00000000000002b4 .L0 
     /tmp/ccQD0RUj.s:371    .text:00000000000002b4 .L0 
     /tmp/ccQD0RUj.s:375    .text:00000000000002c4 .L0 
     /tmp/ccQD0RUj.s:376    .text:00000000000002c4 .L0 
     /tmp/ccQD0RUj.s:382    .text:00000000000002e0 .L0 
     /tmp/ccQD0RUj.s:383    .text:00000000000002e0 .L0 
     /tmp/ccQD0RUj.s:387    .text:00000000000002e4 .L0 
     /tmp/ccQD0RUj.s:388    .text:00000000000002e4 .L0 
     /tmp/ccQD0RUj.s:390    .text:00000000000002e8 .L0 
     /tmp/ccQD0RUj.s:391    .text:00000000000002e8 .L0 
     /tmp/ccQD0RUj.s:397    .text:0000000000000304 .L0 
     /tmp/ccQD0RUj.s:398    .text:0000000000000304 .L0 
     /tmp/ccQD0RUj.s:401    .text:0000000000000308 .L0 
     /tmp/ccQD0RUj.s:404    .text:000000000000030c .L0 
     /tmp/ccQD0RUj.s:405    .text:000000000000030c .L0 
     /tmp/ccQD0RUj.s:409    .text:000000000000031c .L0 
     /tmp/ccQD0RUj.s:410    .text:000000000000031c .L0 
     /tmp/ccQD0RUj.s:416    .text:0000000000000338 .L0 
     /tmp/ccQD0RUj.s:417    .text:0000000000000338 .L0 
     /tmp/ccQD0RUj.s:421    .text:000000000000033c .L0 
     /tmp/ccQD0RUj.s:422    .text:000000000000033c .L0 
     /tmp/ccQD0RUj.s:424    .text:0000000000000340 .L0 
     /tmp/ccQD0RUj.s:425    .text:0000000000000340 .L0 
     /tmp/ccQD0RUj.s:431    .text:000000000000035c .L0 
     /tmp/ccQD0RUj.s:432    .text:000000000000035c .L0 
     /tmp/ccQD0RUj.s:435    .text:0000000000000360 .L0 
     /tmp/ccQD0RUj.s:438    .text:0000000000000364 .L0 
     /tmp/ccQD0RUj.s:439    .text:0000000000000364 .L0 
     /tmp/ccQD0RUj.s:443    .text:0000000000000374 .L0 
     /tmp/ccQD0RUj.s:444    .text:0000000000000378 .L0 
     /tmp/ccQD0RUj.s:446    .text:000000000000037c .L0 
     /tmp/ccQD0RUj.s:447    .text:000000000000037c .L0 
     /tmp/ccQD0RUj.s:449    .text:0000000000000380 .L0 
     /tmp/ccQD0RUj.s:452    .text:0000000000000384 .L0 
     /tmp/ccQD0RUj.s:455    .text:0000000000000388 .L0 
     /tmp/ccQD0RUj.s:457    .text:000000000000038c .L0 
     /tmp/ccQD0RUj.s:463    .text:000000000000038c _ZN13SlabAllocator14insertIntoListERP4SlabS1_
     /tmp/ccQD0RUj.s:466    .text:000000000000038c .L0 
     /tmp/ccQD0RUj.s:468    .text:000000000000038c .L0 
     /tmp/ccQD0RUj.s:469    .text:0000000000000390 .L0 
     /tmp/ccQD0RUj.s:471    .text:0000000000000394 .L0 
     /tmp/ccQD0RUj.s:473    .text:0000000000000398 .L0 
     /tmp/ccQD0RUj.s:475    .text:0000000000000398 .L0 
     /tmp/ccQD0RUj.s:476    .text:0000000000000398 .L0 
     /tmp/ccQD0RUj.s:478    .text:000000000000039c .L0 
     /tmp/ccQD0RUj.s:480    .text:00000000000003a0 .L0 
     /tmp/ccQD0RUj.s:482    .text:00000000000003a4 .L0 
     /tmp/ccQD0RUj.s:483    .text:00000000000003a4 .L0 
     /tmp/ccQD0RUj.s:486    .text:00000000000003a8 .L0 
     /tmp/ccQD0RUj.s:487    .text:00000000000003a8 .L0 
     /tmp/ccQD0RUj.s:489    .text:00000000000003ac .L0 
     /tmp/ccQD0RUj.s:490    .text:00000000000003ac .L0 
     /tmp/ccQD0RUj.s:492    .text:00000000000003b0 .L0 
     /tmp/ccQD0RUj.s:493    .text:00000000000003b4 .L0 
     /tmp/ccQD0RUj.s:494    .text:00000000000003b4 .L0 
     /tmp/ccQD0RUj.s:496    .text:00000000000003b8 .L0 
GAS LISTING /tmp/ccQD0RUj.s 			page 59


     /tmp/ccQD0RUj.s:498    .text:00000000000003bc .L0 
     /tmp/ccQD0RUj.s:504    .text:00000000000003bc _ZN13SlabAllocator12allocateSlabEP5Cache
     /tmp/ccQD0RUj.s:507    .text:00000000000003bc .L0 
     /tmp/ccQD0RUj.s:509    .text:00000000000003bc .L0 
     /tmp/ccQD0RUj.s:510    .text:00000000000003c0 .L0 
     /tmp/ccQD0RUj.s:516    .text:00000000000003d4 .L0 
     /tmp/ccQD0RUj.s:517    .text:00000000000003d4 .L0 
     /tmp/ccQD0RUj.s:518    .text:00000000000003d4 .L0 
     /tmp/ccQD0RUj.s:519    .text:00000000000003d4 .L0 
     /tmp/ccQD0RUj.s:520    .text:00000000000003d4 .L0 
     /tmp/ccQD0RUj.s:522    .text:00000000000003d8 .L0 
     /tmp/ccQD0RUj.s:525    .text:00000000000003dc .L0 
     /tmp/ccQD0RUj.s:526    .text:00000000000003dc .L0 
     /tmp/ccQD0RUj.s:531    .text:00000000000003e8 .L0 
     /tmp/ccQD0RUj.s:534    .text:00000000000003f0 .L0 
     /tmp/ccQD0RUj.s:535    .text:00000000000003f0 .L0 
     /tmp/ccQD0RUj.s:541    .text:0000000000000400 .L0 
     /tmp/ccQD0RUj.s:542    .text:0000000000000400 .L0 
     /tmp/ccQD0RUj.s:544    .text:0000000000000404 .L0 
     /tmp/ccQD0RUj.s:546    .text:0000000000000408 .L0 
     /tmp/ccQD0RUj.s:548    .text:000000000000040c .L0 
     /tmp/ccQD0RUj.s:550    .text:0000000000000410 .L0 
     /tmp/ccQD0RUj.s:552    .text:0000000000000414 .L0 
     /tmp/ccQD0RUj.s:554    .text:0000000000000418 .L0 
     /tmp/ccQD0RUj.s:556    .text:000000000000041c .L0 
     /tmp/ccQD0RUj.s:557    .text:000000000000041c .L0 
     /tmp/ccQD0RUj.s:559    .text:0000000000000420 .L0 
     /tmp/ccQD0RUj.s:561    .text:0000000000000424 .L0 
     /tmp/ccQD0RUj.s:563    .text:0000000000000428 .L0 
     /tmp/ccQD0RUj.s:565    .text:000000000000042c .L0 
     /tmp/ccQD0RUj.s:566    .text:000000000000042c .L0 
     /tmp/ccQD0RUj.s:568    .text:0000000000000430 .L0 
     /tmp/ccQD0RUj.s:570    .text:0000000000000434 .L0 
     /tmp/ccQD0RUj.s:571    .text:0000000000000434 .L0 
     /tmp/ccQD0RUj.s:575    .text:0000000000000438 .L0 
     /tmp/ccQD0RUj.s:576    .text:0000000000000438 .L0 
     /tmp/ccQD0RUj.s:580    .text:000000000000043c .L0 
     /tmp/ccQD0RUj.s:581    .text:000000000000043c .L0 
     /tmp/ccQD0RUj.s:583    .text:0000000000000440 .L0 
     /tmp/ccQD0RUj.s:585    .text:0000000000000444 .L0 
     /tmp/ccQD0RUj.s:587    .text:0000000000000448 .L0 
     /tmp/ccQD0RUj.s:589    .text:000000000000044c .L0 
     /tmp/ccQD0RUj.s:590    .text:000000000000044c .L0 
     /tmp/ccQD0RUj.s:592    .text:0000000000000450 .L0 
     /tmp/ccQD0RUj.s:594    .text:0000000000000454 .L0 
     /tmp/ccQD0RUj.s:596    .text:0000000000000458 .L0 
     /tmp/ccQD0RUj.s:603    .text:0000000000000460 .L0 
     /tmp/ccQD0RUj.s:604    .text:0000000000000460 .L0 
     /tmp/ccQD0RUj.s:606    .text:0000000000000464 .L0 
     /tmp/ccQD0RUj.s:609    .text:0000000000000468 .L0 
     /tmp/ccQD0RUj.s:613    .text:000000000000046c .L0 
     /tmp/ccQD0RUj.s:614    .text:000000000000046c .L0 
     /tmp/ccQD0RUj.s:616    .text:0000000000000470 .L0 
     /tmp/ccQD0RUj.s:618    .text:0000000000000474 .L0 
     /tmp/ccQD0RUj.s:619    .text:0000000000000474 .L0 
     /tmp/ccQD0RUj.s:621    .text:0000000000000478 .L0 
     /tmp/ccQD0RUj.s:623    .text:000000000000047c .L0 
GAS LISTING /tmp/ccQD0RUj.s 			page 60


     /tmp/ccQD0RUj.s:625    .text:0000000000000480 .L0 
     /tmp/ccQD0RUj.s:627    .text:0000000000000484 .L0 
     /tmp/ccQD0RUj.s:629    .text:0000000000000488 .L0 
     /tmp/ccQD0RUj.s:633    .text:0000000000000490 .L0 
     /tmp/ccQD0RUj.s:641    .text:0000000000000498 .L0 
     /tmp/ccQD0RUj.s:647    .text:00000000000004a0 .L0 
     /tmp/ccQD0RUj.s:655    .text:00000000000004ac .L0 
     /tmp/ccQD0RUj.s:656    .text:00000000000004b0 .L0 
     /tmp/ccQD0RUj.s:658    .text:00000000000004b4 .L0 
     /tmp/ccQD0RUj.s:659    .text:00000000000004b4 .L0 
     /tmp/ccQD0RUj.s:661    .text:00000000000004b8 .L0 
     /tmp/ccQD0RUj.s:663    .text:00000000000004bc .L0 
     /tmp/ccQD0RUj.s:665    .text:00000000000004c0 .L0 
     /tmp/ccQD0RUj.s:668    .text:00000000000004c4 .L0 
     /tmp/ccQD0RUj.s:670    .text:00000000000004c8 .L0 
     /tmp/ccQD0RUj.s:676    .text:00000000000004c8 _ZN13SlabAllocator14removeFromListERP4SlabS1_
     /tmp/ccQD0RUj.s:679    .text:00000000000004c8 .L0 
     /tmp/ccQD0RUj.s:681    .text:00000000000004c8 .L0 
     /tmp/ccQD0RUj.s:682    .text:00000000000004cc .L0 
     /tmp/ccQD0RUj.s:684    .text:00000000000004d0 .L0 
     /tmp/ccQD0RUj.s:686    .text:00000000000004d4 .L0 
     /tmp/ccQD0RUj.s:688    .text:00000000000004d4 .L0 
     /tmp/ccQD0RUj.s:689    .text:00000000000004d4 .L0 
     /tmp/ccQD0RUj.s:691    .text:00000000000004d8 .L0 
     /tmp/ccQD0RUj.s:694    .text:00000000000004dc .L0 
     /tmp/ccQD0RUj.s:695    .text:00000000000004dc .L0 
     /tmp/ccQD0RUj.s:697    .text:00000000000004e0 .L0 
     /tmp/ccQD0RUj.s:699    .text:00000000000004e4 .L0 
     /tmp/ccQD0RUj.s:700    .text:00000000000004e4 .L0 
     /tmp/ccQD0RUj.s:702    .text:00000000000004e8 .L0 
     /tmp/ccQD0RUj.s:705    .text:00000000000004ec .L0 
     /tmp/ccQD0RUj.s:706    .text:00000000000004ec .L0 
     /tmp/ccQD0RUj.s:708    .text:00000000000004f0 .L0 
     /tmp/ccQD0RUj.s:710    .text:00000000000004f4 .L0 
     /tmp/ccQD0RUj.s:711    .text:00000000000004f4 .L0 
     /tmp/ccQD0RUj.s:713    .text:00000000000004f8 .L0 
     /tmp/ccQD0RUj.s:716    .text:00000000000004fc .L0 
     /tmp/ccQD0RUj.s:717    .text:00000000000004fc .L0 
     /tmp/ccQD0RUj.s:719    .text:0000000000000500 .L0 
     /tmp/ccQD0RUj.s:720    .text:0000000000000500 .L0 
     /tmp/ccQD0RUj.s:722    .text:0000000000000504 .L0 
     /tmp/ccQD0RUj.s:723    .text:0000000000000508 .L0 
     /tmp/ccQD0RUj.s:724    .text:0000000000000508 .L0 
     /tmp/ccQD0RUj.s:725    .text:0000000000000508 .L0 
     /tmp/ccQD0RUj.s:727    .text:000000000000050c .L0 
     /tmp/ccQD0RUj.s:730    .text:0000000000000510 .L0 
     /tmp/ccQD0RUj.s:732    .text:0000000000000510 .L0 
     /tmp/ccQD0RUj.s:733    .text:0000000000000510 .L0 
     /tmp/ccQD0RUj.s:735    .text:0000000000000514 .L0 
     /tmp/ccQD0RUj.s:737    .text:000000000000051c .L0 
     /tmp/ccQD0RUj.s:743    .text:000000000000051c _ZN13SlabAllocator4moveERP4SlabS2_S1_
     /tmp/ccQD0RUj.s:746    .text:000000000000051c .L0 
     /tmp/ccQD0RUj.s:748    .text:000000000000051c .L0 
     /tmp/ccQD0RUj.s:749    .text:0000000000000520 .L0 
     /tmp/ccQD0RUj.s:754    .text:0000000000000530 .L0 
     /tmp/ccQD0RUj.s:755    .text:0000000000000530 .L0 
     /tmp/ccQD0RUj.s:756    .text:0000000000000530 .L0 
GAS LISTING /tmp/ccQD0RUj.s 			page 61


     /tmp/ccQD0RUj.s:757    .text:0000000000000530 .L0 
     /tmp/ccQD0RUj.s:759    .text:0000000000000534 .L0 
     /tmp/ccQD0RUj.s:763    .text:000000000000053c .L0 
     /tmp/ccQD0RUj.s:764    .text:000000000000053c .L0 
     /tmp/ccQD0RUj.s:769    .text:0000000000000548 .L0 
     /tmp/ccQD0RUj.s:770    .text:0000000000000548 .L0 
     /tmp/ccQD0RUj.s:775    .text:0000000000000558 .L0 
     /tmp/ccQD0RUj.s:776    .text:000000000000055c .L0 
     /tmp/ccQD0RUj.s:778    .text:0000000000000560 .L0 
     /tmp/ccQD0RUj.s:779    .text:0000000000000560 .L0 
     /tmp/ccQD0RUj.s:781    .text:0000000000000564 .L0 
     /tmp/ccQD0RUj.s:784    .text:0000000000000568 .L0 
     /tmp/ccQD0RUj.s:787    .text:000000000000056c .L0 
     /tmp/ccQD0RUj.s:789    .text:0000000000000570 .L0 
     /tmp/ccQD0RUj.s:795    .text:0000000000000570 _ZN13SlabAllocator12allocateSlotEP4Slab
     /tmp/ccQD0RUj.s:798    .text:0000000000000570 .L0 
     /tmp/ccQD0RUj.s:800    .text:0000000000000570 .L0 
     /tmp/ccQD0RUj.s:801    .text:0000000000000574 .L0 
     /tmp/ccQD0RUj.s:806    .text:0000000000000584 .L0 
     /tmp/ccQD0RUj.s:807    .text:0000000000000584 .L0 
     /tmp/ccQD0RUj.s:808    .text:0000000000000584 .L0 
     /tmp/ccQD0RUj.s:809    .text:0000000000000584 .L0 
     /tmp/ccQD0RUj.s:811    .text:0000000000000588 .L0 
     /tmp/ccQD0RUj.s:816    .text:000000000000058c .L0 
     /tmp/ccQD0RUj.s:817    .text:000000000000058c .L0 
     /tmp/ccQD0RUj.s:821    .text:0000000000000590 .L0 
     /tmp/ccQD0RUj.s:822    .text:0000000000000590 .L0 
     /tmp/ccQD0RUj.s:824    .text:0000000000000594 .L0 
     /tmp/ccQD0RUj.s:829    .text:0000000000000598 .L0 
     /tmp/ccQD0RUj.s:830    .text:0000000000000598 .L0 
     /tmp/ccQD0RUj.s:832    .text:000000000000059c .L0 
     /tmp/ccQD0RUj.s:834    .text:00000000000005a0 .L0 
     /tmp/ccQD0RUj.s:837    .text:00000000000005a8 .L0 
     /tmp/ccQD0RUj.s:840    .text:00000000000005b0 .L0 
     /tmp/ccQD0RUj.s:843    .text:00000000000005b8 .L0 
     /tmp/ccQD0RUj.s:846    .text:00000000000005bc .L0 
     /tmp/ccQD0RUj.s:853    .text:00000000000005c4 .L0 
     /tmp/ccQD0RUj.s:854    .text:00000000000005c4 .L0 
     /tmp/ccQD0RUj.s:857    .text:00000000000005cc .L0 
     /tmp/ccQD0RUj.s:864    .text:00000000000005d4 .L0 
     /tmp/ccQD0RUj.s:865    .text:00000000000005d4 .L0 
     /tmp/ccQD0RUj.s:866    .text:00000000000005d4 .L0 
     /tmp/ccQD0RUj.s:868    .text:00000000000005d8 .L0 
     /tmp/ccQD0RUj.s:873    .text:00000000000005dc .L0 
     /tmp/ccQD0RUj.s:875    .text:00000000000005e0 .L0 
     /tmp/ccQD0RUj.s:878    .text:00000000000005e4 .L0 
     /tmp/ccQD0RUj.s:882    .text:00000000000005e8 .L0 
     /tmp/ccQD0RUj.s:883    .text:00000000000005e8 .L0 
     /tmp/ccQD0RUj.s:890    .text:00000000000005f0 .L0 
     /tmp/ccQD0RUj.s:894    .text:00000000000005f0 .L0 
     /tmp/ccQD0RUj.s:895    .text:00000000000005f0 .L0 
     /tmp/ccQD0RUj.s:897    .text:00000000000005f4 .L0 
     /tmp/ccQD0RUj.s:899    .text:00000000000005f8 .L0 
     /tmp/ccQD0RUj.s:903    .text:00000000000005fc .L0 
     /tmp/ccQD0RUj.s:904    .text:00000000000005fc .L0 
     /tmp/ccQD0RUj.s:906    .text:0000000000000600 .L0 
     /tmp/ccQD0RUj.s:908    .text:0000000000000604 .L0 
GAS LISTING /tmp/ccQD0RUj.s 			page 62


     /tmp/ccQD0RUj.s:910    .text:0000000000000608 .L0 
     /tmp/ccQD0RUj.s:911    .text:0000000000000608 .L0 
     /tmp/ccQD0RUj.s:916    .text:0000000000000614 .L0 
     /tmp/ccQD0RUj.s:917    .text:0000000000000614 .L0 
     /tmp/ccQD0RUj.s:919    .text:0000000000000618 .L0 
     /tmp/ccQD0RUj.s:921    .text:000000000000061c .L0 
     /tmp/ccQD0RUj.s:923    .text:0000000000000620 .L0 
     /tmp/ccQD0RUj.s:926    .text:0000000000000624 .L0 
     /tmp/ccQD0RUj.s:928    .text:0000000000000628 .L0 
     /tmp/ccQD0RUj.s:932    .text:000000000000062c .L0 
     /tmp/ccQD0RUj.s:935    .text:0000000000000630 .L0 
     /tmp/ccQD0RUj.s:940    .text:0000000000000638 .L0 
     /tmp/ccQD0RUj.s:942    .text:000000000000063c .L0 
     /tmp/ccQD0RUj.s:950    .text:0000000000000644 .L0 
     /tmp/ccQD0RUj.s:954    .text:0000000000000648 .L0 
     /tmp/ccQD0RUj.s:955    .text:000000000000064c .L0 
     /tmp/ccQD0RUj.s:957    .text:0000000000000650 .L0 
     /tmp/ccQD0RUj.s:958    .text:0000000000000650 .L0 
     /tmp/ccQD0RUj.s:960    .text:0000000000000654 .L0 
     /tmp/ccQD0RUj.s:962    .text:0000000000000658 .L0 
     /tmp/ccQD0RUj.s:965    .text:000000000000065c .L0 
     /tmp/ccQD0RUj.s:967    .text:0000000000000660 .L0 
     /tmp/ccQD0RUj.s:973    .text:0000000000000660 _ZN13SlabAllocator14allocateObjectEP5Cache
     /tmp/ccQD0RUj.s:976    .text:0000000000000660 .L0 
     /tmp/ccQD0RUj.s:978    .text:0000000000000660 .L0 
     /tmp/ccQD0RUj.s:979    .text:0000000000000664 .L0 
     /tmp/ccQD0RUj.s:984    .text:0000000000000674 .L0 
     /tmp/ccQD0RUj.s:985    .text:0000000000000674 .L0 
     /tmp/ccQD0RUj.s:986    .text:0000000000000674 .L0 
     /tmp/ccQD0RUj.s:987    .text:0000000000000674 .L0 
     /tmp/ccQD0RUj.s:989    .text:0000000000000678 .L0 
     /tmp/ccQD0RUj.s:992    .text:000000000000067c .L0 
     /tmp/ccQD0RUj.s:993    .text:000000000000067c .L0 
     /tmp/ccQD0RUj.s:1000   .text:0000000000000680 .L0 
     /tmp/ccQD0RUj.s:1001   .text:0000000000000680 .L0 
     /tmp/ccQD0RUj.s:1004   .text:0000000000000684 .L0 
     /tmp/ccQD0RUj.s:1005   .text:0000000000000684 .L0 
     /tmp/ccQD0RUj.s:1009   .text:0000000000000690 .L0 
     /tmp/ccQD0RUj.s:1011   .text:0000000000000694 .L0 
     /tmp/ccQD0RUj.s:1018   .text:0000000000000698 .L0 
     /tmp/ccQD0RUj.s:1021   .text:000000000000069c .L0 
     /tmp/ccQD0RUj.s:1023   .text:00000000000006a4 .L0 
     /tmp/ccQD0RUj.s:1024   .text:00000000000006a4 .L0 
     /tmp/ccQD0RUj.s:1026   .text:00000000000006a8 .L0 
     /tmp/ccQD0RUj.s:1027   .text:00000000000006a8 .L0 
     /tmp/ccQD0RUj.s:1029   .text:00000000000006ac .L0 
     /tmp/ccQD0RUj.s:1032   .text:00000000000006b0 .L0 
     /tmp/ccQD0RUj.s:1035   .text:00000000000006b4 .L0 
     /tmp/ccQD0RUj.s:1039   .text:00000000000006b8 .L0 
     /tmp/ccQD0RUj.s:1041   .text:00000000000006b8 .L0 
     /tmp/ccQD0RUj.s:1042   .text:00000000000006b8 .L0 
     /tmp/ccQD0RUj.s:1048   .text:00000000000006bc .L0 
     /tmp/ccQD0RUj.s:1049   .text:00000000000006bc .L0 
     /tmp/ccQD0RUj.s:1052   .text:00000000000006c0 .L0 
     /tmp/ccQD0RUj.s:1053   .text:00000000000006c0 .L0 
     /tmp/ccQD0RUj.s:1057   .text:00000000000006cc .L0 
     /tmp/ccQD0RUj.s:1059   .text:00000000000006d0 .L0 
GAS LISTING /tmp/ccQD0RUj.s 			page 63


     /tmp/ccQD0RUj.s:1066   .text:00000000000006d4 .L0 
     /tmp/ccQD0RUj.s:1068   .text:00000000000006d8 .L0 
     /tmp/ccQD0RUj.s:1069   .text:00000000000006d8 .L0 
     /tmp/ccQD0RUj.s:1073   .text:00000000000006e4 .L0 
     /tmp/ccQD0RUj.s:1075   .text:00000000000006e8 .L0 
     /tmp/ccQD0RUj.s:1076   .text:00000000000006e8 .L0 
     /tmp/ccQD0RUj.s:1082   .text:00000000000006f8 .L0 
     /tmp/ccQD0RUj.s:1083   .text:00000000000006f8 .L0 
     /tmp/ccQD0RUj.s:1084   .text:00000000000006fc .L0 
     /tmp/ccQD0RUj.s:1090   .text:00000000000006fc _ZN13SlabAllocator14allocateBufferEm
     /tmp/ccQD0RUj.s:1093   .text:00000000000006fc .L0 
     /tmp/ccQD0RUj.s:1095   .text:00000000000006fc .L0 
     /tmp/ccQD0RUj.s:1099   .text:00000000000006fc .L0 
     /tmp/ccQD0RUj.s:1100   .text:00000000000006fc .L0 
     /tmp/ccQD0RUj.s:1101   .text:00000000000006fc .L0 
     /tmp/ccQD0RUj.s:1104   .text:0000000000000700 .L0 
     /tmp/ccQD0RUj.s:1105   .text:0000000000000700 .L0 
     /tmp/ccQD0RUj.s:1108   .text:0000000000000704 .L0 
     /tmp/ccQD0RUj.s:1111   .text:0000000000000708 .L0 
     /tmp/ccQD0RUj.s:1112   .text:0000000000000708 .L0 
     /tmp/ccQD0RUj.s:1114   .text:000000000000070c .L0 
     /tmp/ccQD0RUj.s:1117   .text:0000000000000710 .L0 
     /tmp/ccQD0RUj.s:1118   .text:0000000000000710 .L0 
     /tmp/ccQD0RUj.s:1120   .text:0000000000000714 .L0 
     /tmp/ccQD0RUj.s:1123   .text:0000000000000718 .L0 
     /tmp/ccQD0RUj.s:1124   .text:0000000000000718 .L0 
     /tmp/ccQD0RUj.s:1126   .text:000000000000071c .L0 
     /tmp/ccQD0RUj.s:1129   .text:0000000000000720 .L0 
     /tmp/ccQD0RUj.s:1130   .text:0000000000000720 .L0 
     /tmp/ccQD0RUj.s:1132   .text:0000000000000724 .L0 
     /tmp/ccQD0RUj.s:1135   .text:0000000000000728 .L0 
     /tmp/ccQD0RUj.s:1136   .text:0000000000000728 .L0 
     /tmp/ccQD0RUj.s:1138   .text:000000000000072c .L0 
     /tmp/ccQD0RUj.s:1141   .text:0000000000000730 .L0 
     /tmp/ccQD0RUj.s:1142   .text:0000000000000730 .L0 
     /tmp/ccQD0RUj.s:1149   .text:0000000000000734 .L0 
     /tmp/ccQD0RUj.s:1153   .text:0000000000000738 .L0 
     /tmp/ccQD0RUj.s:1154   .text:0000000000000738 .L0 
     /tmp/ccQD0RUj.s:1157   .text:0000000000000740 .L0 
     /tmp/ccQD0RUj.s:1158   .text:0000000000000740 .L0 
     /tmp/ccQD0RUj.s:1161   .text:0000000000000744 .L0 
     /tmp/ccQD0RUj.s:1162   .text:0000000000000744 .L0 
     /tmp/ccQD0RUj.s:1165   .text:0000000000000748 .L0 
     /tmp/ccQD0RUj.s:1171   .text:000000000000074c .L0 
     /tmp/ccQD0RUj.s:1172   .text:000000000000074c .L0 
     /tmp/ccQD0RUj.s:1173   .text:000000000000074c .L0 
     /tmp/ccQD0RUj.s:1176   .text:0000000000000750 .L0 
     /tmp/ccQD0RUj.s:1179   .text:0000000000000758 .L0 
     /tmp/ccQD0RUj.s:1180   .text:000000000000075c .L0 
     /tmp/ccQD0RUj.s:1183   .text:0000000000000764 .L0 
     /tmp/ccQD0RUj.s:1184   .text:0000000000000764 .L0 
     /tmp/ccQD0RUj.s:1186   .text:0000000000000768 .L0 
     /tmp/ccQD0RUj.s:1189   .text:0000000000000768 .L0 
     /tmp/ccQD0RUj.s:1190   .text:0000000000000768 .L0 
     /tmp/ccQD0RUj.s:1191   .text:0000000000000768 .L0 
     /tmp/ccQD0RUj.s:1199   .text:0000000000000784 .L0 
     /tmp/ccQD0RUj.s:1200   .text:0000000000000788 .L0 
GAS LISTING /tmp/ccQD0RUj.s 			page 64


     /tmp/ccQD0RUj.s:1202   .text:000000000000078c .L0 
     /tmp/ccQD0RUj.s:1203   .text:000000000000078c .L0 
     /tmp/ccQD0RUj.s:1205   .text:0000000000000790 .L0 
     /tmp/ccQD0RUj.s:1210   .text:0000000000000794 .L0 
     /tmp/ccQD0RUj.s:1212   .text:0000000000000798 .L0 
     /tmp/ccQD0RUj.s:1213   .text:000000000000079c .L0 
     /tmp/ccQD0RUj.s:1219   .text:000000000000079c _ZN13SlabAllocator11createCacheEPKcmPFvPvES4_
     /tmp/ccQD0RUj.s:1222   .text:000000000000079c .L0 
     /tmp/ccQD0RUj.s:1224   .text:000000000000079c .L0 
     /tmp/ccQD0RUj.s:1225   .text:00000000000007a0 .L0 
     /tmp/ccQD0RUj.s:1233   .text:00000000000007bc .L0 
     /tmp/ccQD0RUj.s:1234   .text:00000000000007bc .L0 
     /tmp/ccQD0RUj.s:1235   .text:00000000000007bc .L0 
     /tmp/ccQD0RUj.s:1236   .text:00000000000007bc .L0 
     /tmp/ccQD0RUj.s:1237   .text:00000000000007bc .L0 
     /tmp/ccQD0RUj.s:1238   .text:00000000000007bc .L0 
     /tmp/ccQD0RUj.s:1239   .text:00000000000007bc .L0 
     /tmp/ccQD0RUj.s:1241   .text:00000000000007c0 .L0 
     /tmp/ccQD0RUj.s:1247   .text:00000000000007d0 .L0 
     /tmp/ccQD0RUj.s:1248   .text:00000000000007d0 .L0 
     /tmp/ccQD0RUj.s:1255   .text:00000000000007e4 .L0 
     /tmp/ccQD0RUj.s:1257   .text:00000000000007e8 .L0 
     /tmp/ccQD0RUj.s:1258   .text:00000000000007e8 .L0 
     /tmp/ccQD0RUj.s:1260   .text:00000000000007ec .L0 
     /tmp/ccQD0RUj.s:1261   .text:00000000000007ec .L0 
     /tmp/ccQD0RUj.s:1263   .text:00000000000007f0 .L0 
     /tmp/ccQD0RUj.s:1264   .text:00000000000007f0 .L0 
     /tmp/ccQD0RUj.s:1266   .text:00000000000007f4 .L0 
     /tmp/ccQD0RUj.s:1268   .text:00000000000007f8 .L0 
     /tmp/ccQD0RUj.s:1270   .text:00000000000007fc .L0 
     /tmp/ccQD0RUj.s:1271   .text:00000000000007fc .L0 
     /tmp/ccQD0RUj.s:1273   .text:0000000000000800 .L0 
     /tmp/ccQD0RUj.s:1274   .text:0000000000000800 .L0 
     /tmp/ccQD0RUj.s:1277   .text:0000000000000808 .L0 
     /tmp/ccQD0RUj.s:1278   .text:0000000000000808 .L0 
     /tmp/ccQD0RUj.s:1284   .text:0000000000000818 .L0 
     /tmp/ccQD0RUj.s:1285   .text:0000000000000818 .L0 
     /tmp/ccQD0RUj.s:1287   .text:0000000000000820 .L0 
     /tmp/ccQD0RUj.s:1289   .text:0000000000000824 .L0 
     /tmp/ccQD0RUj.s:1290   .text:0000000000000824 .L0 
     /tmp/ccQD0RUj.s:1292   .text:0000000000000828 .L0 
     /tmp/ccQD0RUj.s:1295   .text:000000000000082c .L0 
     /tmp/ccQD0RUj.s:1298   .text:0000000000000830 .L0 
     /tmp/ccQD0RUj.s:1301   .text:0000000000000834 .L0 
     /tmp/ccQD0RUj.s:1304   .text:0000000000000838 .L0 
     /tmp/ccQD0RUj.s:1307   .text:000000000000083c .L0 
     /tmp/ccQD0RUj.s:1309   .text:0000000000000840 .L0 
     /tmp/ccQD0RUj.s:1320   .text:0000000000000840 _ZN13SlabAllocator10initializeEPvm
     /tmp/ccQD0RUj.s:1323   .text:0000000000000840 .L0 
     /tmp/ccQD0RUj.s:1325   .text:0000000000000840 .L0 
     /tmp/ccQD0RUj.s:1326   .text:0000000000000844 .L0 
     /tmp/ccQD0RUj.s:1331   .text:0000000000000854 .L0 
     /tmp/ccQD0RUj.s:1332   .text:0000000000000854 .L0 
     /tmp/ccQD0RUj.s:1333   .text:0000000000000854 .L0 
     /tmp/ccQD0RUj.s:1334   .text:0000000000000854 .L0 
     /tmp/ccQD0RUj.s:1336   .text:0000000000000858 .L0 
     /tmp/ccQD0RUj.s:1340   .text:0000000000000860 .L0 
GAS LISTING /tmp/ccQD0RUj.s 			page 65


     /tmp/ccQD0RUj.s:1341   .text:0000000000000860 .L0 
     /tmp/ccQD0RUj.s:1344   .text:0000000000000868 .L0 
     /tmp/ccQD0RUj.s:1345   .text:0000000000000868 .L0 
     /tmp/ccQD0RUj.s:1348   .text:0000000000000874 .L0 
     /tmp/ccQD0RUj.s:1349   .text:0000000000000874 .L0 
     /tmp/ccQD0RUj.s:1351   .text:0000000000000878 .L0 
     /tmp/ccQD0RUj.s:1352   .text:0000000000000878 .L0 
     /tmp/ccQD0RUj.s:1358   .text:0000000000000890 .L0 
     /tmp/ccQD0RUj.s:1360   .text:0000000000000894 .L0 
     /tmp/ccQD0RUj.s:1361   .text:0000000000000894 .L0 
     /tmp/ccQD0RUj.s:1363   .text:0000000000000898 .L0 
     /tmp/ccQD0RUj.s:1364   .text:0000000000000898 .L0 
     /tmp/ccQD0RUj.s:1366   .text:000000000000089c .L0 
     /tmp/ccQD0RUj.s:1367   .text:000000000000089c .L0 
     /tmp/ccQD0RUj.s:1369   .text:00000000000008a0 .L0 
     /tmp/ccQD0RUj.s:1370   .text:00000000000008a0 .L0 
     /tmp/ccQD0RUj.s:1372   .text:00000000000008a4 .L0 
     /tmp/ccQD0RUj.s:1373   .text:00000000000008a4 .L0 
     /tmp/ccQD0RUj.s:1375   .text:00000000000008a8 .L0 
     /tmp/ccQD0RUj.s:1376   .text:00000000000008a8 .L0 
     /tmp/ccQD0RUj.s:1379   .text:00000000000008b0 .L0 
     /tmp/ccQD0RUj.s:1380   .text:00000000000008b0 .L0 
     /tmp/ccQD0RUj.s:1383   .text:00000000000008b8 .L0 
     /tmp/ccQD0RUj.s:1384   .text:00000000000008b8 .L0 
     /tmp/ccQD0RUj.s:1389   .text:00000000000008c8 .L0 
     /tmp/ccQD0RUj.s:1390   .text:00000000000008c8 .L0 
     /tmp/ccQD0RUj.s:1396   .text:00000000000008d0 .L0 
     /tmp/ccQD0RUj.s:1397   .text:00000000000008d0 .L0 
     /tmp/ccQD0RUj.s:1408   .text:00000000000008fc .L0 
     /tmp/ccQD0RUj.s:1412   .text:000000000000090c .L0 
     /tmp/ccQD0RUj.s:1416   .text:0000000000000910 .L0 
     /tmp/ccQD0RUj.s:1420   .text:0000000000000918 .L0 
     /tmp/ccQD0RUj.s:1421   .text:000000000000091c .L0 
     /tmp/ccQD0RUj.s:1423   .text:0000000000000920 .L0 
     /tmp/ccQD0RUj.s:1424   .text:0000000000000920 .L0 
     /tmp/ccQD0RUj.s:1426   .text:0000000000000924 .L0 
     /tmp/ccQD0RUj.s:1429   .text:0000000000000928 .L0 
     /tmp/ccQD0RUj.s:1431   .text:000000000000092c .L0 
     /tmp/ccQD0RUj.s:1433   .text:0000000000000930 .L0 
     /tmp/ccQD0RUj.s:1439   .text:0000000000000930 _ZN13SlabAllocator8freeSlotEP4Slabm
     /tmp/ccQD0RUj.s:1442   .text:0000000000000930 .L0 
     /tmp/ccQD0RUj.s:1444   .text:0000000000000930 .L0 
     /tmp/ccQD0RUj.s:1446   .text:0000000000000930 .L0 
     /tmp/ccQD0RUj.s:1447   .text:0000000000000930 .L0 
     /tmp/ccQD0RUj.s:1449   .text:0000000000000934 .L0 
     /tmp/ccQD0RUj.s:1451   .text:0000000000000938 .L0 
     /tmp/ccQD0RUj.s:1454   .text:0000000000000940 .L0 
     /tmp/ccQD0RUj.s:1459   .text:0000000000000948 .L0 
     /tmp/ccQD0RUj.s:1462   .text:0000000000000950 .L0 
     /tmp/ccQD0RUj.s:1465   .text:0000000000000954 .L0 
     /tmp/ccQD0RUj.s:1466   .text:0000000000000958 .L0 
     /tmp/ccQD0RUj.s:1470   .text:0000000000000964 .L0 
     /tmp/ccQD0RUj.s:1471   .text:0000000000000964 .L0 
     /tmp/ccQD0RUj.s:1472   .text:0000000000000964 .L0 
     /tmp/ccQD0RUj.s:1474   .text:0000000000000968 .L0 
     /tmp/ccQD0RUj.s:1479   .text:000000000000096c .L0 
     /tmp/ccQD0RUj.s:1480   .text:000000000000096c .L0 
GAS LISTING /tmp/ccQD0RUj.s 			page 66


     /tmp/ccQD0RUj.s:1483   .text:0000000000000974 .L0 
     /tmp/ccQD0RUj.s:1490   .text:0000000000000980 .L0 
     /tmp/ccQD0RUj.s:1491   .text:0000000000000980 .L0 
     /tmp/ccQD0RUj.s:1492   .text:0000000000000980 .L0 
     /tmp/ccQD0RUj.s:1497   .text:0000000000000984 .L0 
     /tmp/ccQD0RUj.s:1499   .text:0000000000000988 .L0 
     /tmp/ccQD0RUj.s:1502   .text:000000000000098c .L0 
     /tmp/ccQD0RUj.s:1506   .text:0000000000000990 .L0 
     /tmp/ccQD0RUj.s:1507   .text:0000000000000990 .L0 
     /tmp/ccQD0RUj.s:1513   .text:0000000000000998 .L0 
     /tmp/ccQD0RUj.s:1514   .text:0000000000000998 .L0 
     /tmp/ccQD0RUj.s:1515   .text:0000000000000998 .L0 
     /tmp/ccQD0RUj.s:1520   .text:000000000000099c .L0 
     /tmp/ccQD0RUj.s:1522   .text:00000000000009a0 .L0 
     /tmp/ccQD0RUj.s:1524   .text:00000000000009a4 .L0 
     /tmp/ccQD0RUj.s:1530   .text:00000000000009a8 .L0 
     /tmp/ccQD0RUj.s:1533   .text:00000000000009a8 .L0 
     /tmp/ccQD0RUj.s:1534   .text:00000000000009a8 .L0 
     /tmp/ccQD0RUj.s:1536   .text:00000000000009ac .L0 
     /tmp/ccQD0RUj.s:1537   .text:00000000000009ac .L0 
     /tmp/ccQD0RUj.s:1539   .text:00000000000009b0 .L0 
     /tmp/ccQD0RUj.s:1541   .text:00000000000009b4 .L0 
     /tmp/ccQD0RUj.s:1543   .text:00000000000009b8 .L0 
     /tmp/ccQD0RUj.s:1544   .text:00000000000009b8 .L0 
     /tmp/ccQD0RUj.s:1551   .text:00000000000009c4 .L0 
     /tmp/ccQD0RUj.s:1552   .text:00000000000009c8 .L0 
     /tmp/ccQD0RUj.s:1553   .text:00000000000009c8 .L0 
     /tmp/ccQD0RUj.s:1555   .text:00000000000009cc .L0 
     /tmp/ccQD0RUj.s:1556   .text:00000000000009cc .L0 
     /tmp/ccQD0RUj.s:1558   .text:00000000000009d0 .L0 
     /tmp/ccQD0RUj.s:1561   .text:00000000000009d4 .L0 
     /tmp/ccQD0RUj.s:1565   .text:00000000000009d8 .L0 
     /tmp/ccQD0RUj.s:1569   .text:00000000000009d8 .L0 
     /tmp/ccQD0RUj.s:1571   .text:00000000000009dc .L0 
     /tmp/ccQD0RUj.s:1576   .text:00000000000009e4 .L0 
     /tmp/ccQD0RUj.s:1578   .text:00000000000009e8 .L0 
     /tmp/ccQD0RUj.s:1583   .text:00000000000009f0 .L0 
     /tmp/ccQD0RUj.s:1584   .text:00000000000009f0 .L0 
     /tmp/ccQD0RUj.s:1589   .text:00000000000009fc .L0 
     /tmp/ccQD0RUj.s:1590   .text:00000000000009fc .L0 
     /tmp/ccQD0RUj.s:1592   .text:0000000000000a00 .L0 
     /tmp/ccQD0RUj.s:1599   .text:0000000000000a14 .L0 
     /tmp/ccQD0RUj.s:1600   .text:0000000000000a14 .L0 
     /tmp/ccQD0RUj.s:1601   .text:0000000000000a14 .L0 
     /tmp/ccQD0RUj.s:1602   .text:0000000000000a14 .L0 
     /tmp/ccQD0RUj.s:1606   .text:0000000000000a18 .L0 
     /tmp/ccQD0RUj.s:1612   .text:0000000000000a18 _ZN13SlabAllocator10freeObjectEP5CachePKv
     /tmp/ccQD0RUj.s:1615   .text:0000000000000a18 .L0 
     /tmp/ccQD0RUj.s:1617   .text:0000000000000a18 .L0 
     /tmp/ccQD0RUj.s:1618   .text:0000000000000a1c .L0 
     /tmp/ccQD0RUj.s:1623   .text:0000000000000a2c .L0 
     /tmp/ccQD0RUj.s:1624   .text:0000000000000a2c .L0 
     /tmp/ccQD0RUj.s:1625   .text:0000000000000a2c .L0 
     /tmp/ccQD0RUj.s:1626   .text:0000000000000a2c .L0 
     /tmp/ccQD0RUj.s:1628   .text:0000000000000a30 .L0 
     /tmp/ccQD0RUj.s:1632   .text:0000000000000a38 .L0 
     /tmp/ccQD0RUj.s:1633   .text:0000000000000a38 .L0 
GAS LISTING /tmp/ccQD0RUj.s 			page 67


     /tmp/ccQD0RUj.s:1635   .text:0000000000000a3c .L0 
     /tmp/ccQD0RUj.s:1637   .text:0000000000000a40 .L0 
     /tmp/ccQD0RUj.s:1638   .text:0000000000000a40 .L0 
     /tmp/ccQD0RUj.s:1644   .text:0000000000000a48 .L0 
     /tmp/ccQD0RUj.s:1645   .text:0000000000000a48 .L0 
     /tmp/ccQD0RUj.s:1647   .text:0000000000000a4c .L0 
     /tmp/ccQD0RUj.s:1649   .text:0000000000000a50 .L0 
     /tmp/ccQD0RUj.s:1650   .text:0000000000000a50 .L0 
     /tmp/ccQD0RUj.s:1655   .text:0000000000000a58 .L0 
     /tmp/ccQD0RUj.s:1656   .text:0000000000000a58 .L0 
     /tmp/ccQD0RUj.s:1665   .text:0000000000000a60 .L0 
     /tmp/ccQD0RUj.s:1666   .text:0000000000000a60 .L0 
     /tmp/ccQD0RUj.s:1671   .text:0000000000000a64 .L0 
     /tmp/ccQD0RUj.s:1672   .text:0000000000000a64 .L0 
     /tmp/ccQD0RUj.s:1678   .text:0000000000000a68 .L0 
     /tmp/ccQD0RUj.s:1679   .text:0000000000000a68 .L0 
     /tmp/ccQD0RUj.s:1680   .text:0000000000000a68 .L0 
     /tmp/ccQD0RUj.s:1682   .text:0000000000000a6c .L0 
     /tmp/ccQD0RUj.s:1684   .text:0000000000000a70 .L0 
     /tmp/ccQD0RUj.s:1686   .text:0000000000000a74 .L0 
     /tmp/ccQD0RUj.s:1688   .text:0000000000000a78 .L0 
     /tmp/ccQD0RUj.s:1690   .text:0000000000000a7c .L0 
     /tmp/ccQD0RUj.s:1698   .text:0000000000000a80 .L0 
     /tmp/ccQD0RUj.s:1702   .text:0000000000000a80 .L0 
     /tmp/ccQD0RUj.s:1704   .text:0000000000000a80 .L0 
     /tmp/ccQD0RUj.s:1706   .text:0000000000000a84 .L0 
     /tmp/ccQD0RUj.s:1709   .text:0000000000000a88 .L0 
     /tmp/ccQD0RUj.s:1710   .text:0000000000000a88 .L0 
     /tmp/ccQD0RUj.s:1713   .text:0000000000000a8c .L0 
     /tmp/ccQD0RUj.s:1714   .text:0000000000000a8c .L0 
     /tmp/ccQD0RUj.s:1719   .text:0000000000000a98 .L0 
     /tmp/ccQD0RUj.s:1720   .text:0000000000000a98 .L0 
     /tmp/ccQD0RUj.s:1728   .text:0000000000000aa0 .L0 
     /tmp/ccQD0RUj.s:1734   .text:0000000000000aa4 .L0 
     /tmp/ccQD0RUj.s:1738   .text:0000000000000aa8 .L0 
     /tmp/ccQD0RUj.s:1739   .text:0000000000000aac .L0 
     /tmp/ccQD0RUj.s:1740   .text:0000000000000aac .L0 
     /tmp/ccQD0RUj.s:1742   .text:0000000000000ab0 .L0 
     /tmp/ccQD0RUj.s:1743   .text:0000000000000ab0 .L0 
     /tmp/ccQD0RUj.s:1745   .text:0000000000000ab4 .L0 
     /tmp/ccQD0RUj.s:1748   .text:0000000000000ab8 .L0 
     /tmp/ccQD0RUj.s:1751   .text:0000000000000abc .L0 
     /tmp/ccQD0RUj.s:1755   .text:0000000000000ac0 .L0 
     /tmp/ccQD0RUj.s:1757   .text:0000000000000ac0 .L0 
     /tmp/ccQD0RUj.s:1758   .text:0000000000000ac0 .L0 
     /tmp/ccQD0RUj.s:1767   .text:0000000000000ac8 .L0 
     /tmp/ccQD0RUj.s:1768   .text:0000000000000ac8 .L0 
     /tmp/ccQD0RUj.s:1773   .text:0000000000000acc .L0 
     /tmp/ccQD0RUj.s:1774   .text:0000000000000acc .L0 
     /tmp/ccQD0RUj.s:1780   .text:0000000000000ad0 .L0 
     /tmp/ccQD0RUj.s:1781   .text:0000000000000ad0 .L0 
     /tmp/ccQD0RUj.s:1782   .text:0000000000000ad0 .L0 
     /tmp/ccQD0RUj.s:1784   .text:0000000000000ad4 .L0 
     /tmp/ccQD0RUj.s:1786   .text:0000000000000ad8 .L0 
     /tmp/ccQD0RUj.s:1788   .text:0000000000000adc .L0 
     /tmp/ccQD0RUj.s:1790   .text:0000000000000ae0 .L0 
     /tmp/ccQD0RUj.s:1792   .text:0000000000000ae4 .L0 
GAS LISTING /tmp/ccQD0RUj.s 			page 68


     /tmp/ccQD0RUj.s:1800   .text:0000000000000ae8 .L0 
     /tmp/ccQD0RUj.s:1804   .text:0000000000000ae8 .L0 
     /tmp/ccQD0RUj.s:1806   .text:0000000000000ae8 .L0 
     /tmp/ccQD0RUj.s:1808   .text:0000000000000aec .L0 
     /tmp/ccQD0RUj.s:1811   .text:0000000000000af0 .L0 
     /tmp/ccQD0RUj.s:1812   .text:0000000000000af0 .L0 
     /tmp/ccQD0RUj.s:1815   .text:0000000000000af4 .L0 
     /tmp/ccQD0RUj.s:1816   .text:0000000000000af4 .L0 
     /tmp/ccQD0RUj.s:1823   .text:0000000000000b04 .L0 
     /tmp/ccQD0RUj.s:1824   .text:0000000000000b04 .L0 
     /tmp/ccQD0RUj.s:1831   .text:0000000000000b0c .L0 
     /tmp/ccQD0RUj.s:1837   .text:0000000000000b0c _ZN13SlabAllocator10freeBufferEPKv
     /tmp/ccQD0RUj.s:1840   .text:0000000000000b0c .L0 
     /tmp/ccQD0RUj.s:1842   .text:0000000000000b0c .L0 
     /tmp/ccQD0RUj.s:1843   .text:0000000000000b10 .L0 
     /tmp/ccQD0RUj.s:1848   .text:0000000000000b20 .L0 
     /tmp/ccQD0RUj.s:1849   .text:0000000000000b20 .L0 
     /tmp/ccQD0RUj.s:1850   .text:0000000000000b20 .L0 
     /tmp/ccQD0RUj.s:1851   .text:0000000000000b20 .L0 
     /tmp/ccQD0RUj.s:1853   .text:0000000000000b24 .L0 
     /tmp/ccQD0RUj.s:1858   .text:0000000000000b28 .L0 
     /tmp/ccQD0RUj.s:1859   .text:0000000000000b28 .L0 
     /tmp/ccQD0RUj.s:1863   .text:0000000000000b2c .L0 
     /tmp/ccQD0RUj.s:1866   .text:0000000000000b34 .L0 
     /tmp/ccQD0RUj.s:1867   .text:0000000000000b34 .L0 
     /tmp/ccQD0RUj.s:1875   .text:0000000000000b54 .L0 
     /tmp/ccQD0RUj.s:1877   .text:0000000000000b58 .L0 
     /tmp/ccQD0RUj.s:1884   .text:0000000000000b60 .L0 
     /tmp/ccQD0RUj.s:1885   .text:0000000000000b64 .L0 
     /tmp/ccQD0RUj.s:1887   .text:0000000000000b68 .L0 
     /tmp/ccQD0RUj.s:1888   .text:0000000000000b68 .L0 
     /tmp/ccQD0RUj.s:1890   .text:0000000000000b6c .L0 
     /tmp/ccQD0RUj.s:1893   .text:0000000000000b70 .L0 
     /tmp/ccQD0RUj.s:1896   .text:0000000000000b74 .L0 
     /tmp/ccQD0RUj.s:1898   .text:0000000000000b78 .L0 
     /tmp/ccQD0RUj.s:1904   .text:0000000000000b78 _ZN13SlabAllocator11deleteCacheERP5Cache
     /tmp/ccQD0RUj.s:1907   .text:0000000000000b78 .L0 
     /tmp/ccQD0RUj.s:1909   .text:0000000000000b78 .L0 
     /tmp/ccQD0RUj.s:1910   .text:0000000000000b7c .L0 
     /tmp/ccQD0RUj.s:1915   .text:0000000000000b8c .L0 
     /tmp/ccQD0RUj.s:1916   .text:0000000000000b8c .L0 
     /tmp/ccQD0RUj.s:1917   .text:0000000000000b8c .L0 
     /tmp/ccQD0RUj.s:1918   .text:0000000000000b8c .L0 
     /tmp/ccQD0RUj.s:1920   .text:0000000000000b90 .L0 
     /tmp/ccQD0RUj.s:1923   .text:0000000000000b94 .L0 
     /tmp/ccQD0RUj.s:1924   .text:0000000000000b94 .L0 
     /tmp/ccQD0RUj.s:1926   .text:0000000000000b98 .L0 
     /tmp/ccQD0RUj.s:1932   .text:0000000000000b9c .L0 
     /tmp/ccQD0RUj.s:1933   .text:0000000000000b9c .L0 
     /tmp/ccQD0RUj.s:1938   .text:0000000000000ba4 .L0 
     /tmp/ccQD0RUj.s:1939   .text:0000000000000ba4 .L0 
     /tmp/ccQD0RUj.s:1940   .text:0000000000000ba4 .L0 
     /tmp/ccQD0RUj.s:1942   .text:0000000000000ba8 .L0 
     /tmp/ccQD0RUj.s:1946   .text:0000000000000bb4 .L0 
     /tmp/ccQD0RUj.s:1947   .text:0000000000000bb4 .L0 
     /tmp/ccQD0RUj.s:1949   .text:0000000000000bb8 .L0 
     /tmp/ccQD0RUj.s:1951   .text:0000000000000bbc .L0 
GAS LISTING /tmp/ccQD0RUj.s 			page 69


     /tmp/ccQD0RUj.s:1954   .text:0000000000000bc0 .L0 
     /tmp/ccQD0RUj.s:1960   .text:0000000000000bc4 .L0 
     /tmp/ccQD0RUj.s:1961   .text:0000000000000bc4 .L0 
     /tmp/ccQD0RUj.s:1963   .text:0000000000000bc8 .L0 
     /tmp/ccQD0RUj.s:1969   .text:0000000000000bcc .L0 
     /tmp/ccQD0RUj.s:1970   .text:0000000000000bcc .L0 
     /tmp/ccQD0RUj.s:1975   .text:0000000000000bd4 .L0 
     /tmp/ccQD0RUj.s:1976   .text:0000000000000bd4 .L0 
     /tmp/ccQD0RUj.s:1977   .text:0000000000000bd4 .L0 
     /tmp/ccQD0RUj.s:1979   .text:0000000000000bd8 .L0 
     /tmp/ccQD0RUj.s:1983   .text:0000000000000be4 .L0 
     /tmp/ccQD0RUj.s:1984   .text:0000000000000be4 .L0 
     /tmp/ccQD0RUj.s:1986   .text:0000000000000be8 .L0 
     /tmp/ccQD0RUj.s:1988   .text:0000000000000bec .L0 
     /tmp/ccQD0RUj.s:1991   .text:0000000000000bf0 .L0 
     /tmp/ccQD0RUj.s:1997   .text:0000000000000bf4 .L0 
     /tmp/ccQD0RUj.s:1998   .text:0000000000000bf4 .L0 
     /tmp/ccQD0RUj.s:2000   .text:0000000000000bf8 .L0 
     /tmp/ccQD0RUj.s:2006   .text:0000000000000bfc .L0 
     /tmp/ccQD0RUj.s:2007   .text:0000000000000bfc .L0 
     /tmp/ccQD0RUj.s:2012   .text:0000000000000c04 .L0 
     /tmp/ccQD0RUj.s:2013   .text:0000000000000c04 .L0 
     /tmp/ccQD0RUj.s:2014   .text:0000000000000c04 .L0 
     /tmp/ccQD0RUj.s:2016   .text:0000000000000c08 .L0 
     /tmp/ccQD0RUj.s:2020   .text:0000000000000c14 .L0 
     /tmp/ccQD0RUj.s:2021   .text:0000000000000c14 .L0 
     /tmp/ccQD0RUj.s:2023   .text:0000000000000c18 .L0 
     /tmp/ccQD0RUj.s:2025   .text:0000000000000c1c .L0 
     /tmp/ccQD0RUj.s:2028   .text:0000000000000c20 .L0 
     /tmp/ccQD0RUj.s:2034   .text:0000000000000c24 .L0 
     /tmp/ccQD0RUj.s:2035   .text:0000000000000c24 .L0 
     /tmp/ccQD0RUj.s:2040   .text:0000000000000c38 .L0 
     /tmp/ccQD0RUj.s:2041   .text:0000000000000c38 .L0 
     /tmp/ccQD0RUj.s:2043   .text:0000000000000c3c .L0 
     /tmp/ccQD0RUj.s:2044   .text:0000000000000c40 .L0 
     /tmp/ccQD0RUj.s:2046   .text:0000000000000c44 .L0 
     /tmp/ccQD0RUj.s:2047   .text:0000000000000c44 .L0 
     /tmp/ccQD0RUj.s:2049   .text:0000000000000c48 .L0 
     /tmp/ccQD0RUj.s:2052   .text:0000000000000c4c .L0 
     /tmp/ccQD0RUj.s:2054   .text:0000000000000c50 .L0 
     /tmp/ccQD0RUj.s:2056   .text:0000000000000c54 .L0 
     /tmp/ccQD0RUj.s:2121   .bss:0000000000000078 _ZN13SlabAllocator20blocksResponsibleForE
     /tmp/ccQD0RUj.s:2117   .bss:0000000000000070 _ZN13SlabAllocator9startAddrE
     /tmp/ccQD0RUj.s:2128   .data.rel.local:0000000000000000 _ZN13SlabAllocator5namesE
     /tmp/ccQD0RUj.s:2109   .bss:0000000000000000 _ZN13SlabAllocator5sizeNE
     /tmp/ccQD0RUj.s:2113   .bss:0000000000000068 _ZN13SlabAllocator5cacheE
     /tmp/ccQD0RUj.s:2106   .bss:0000000000000000 .LANCHOR0
     /tmp/ccQD0RUj.s:2125   .data.rel.local:0000000000000000 .LANCHOR1
     /tmp/ccQD0RUj.s:2148   .text:0000000000000c54 .L0 
     /tmp/ccQD0RUj.s:82     .rodata.str1.8:0000000000000000 .LC0
     /tmp/ccQD0RUj.s:142    .text:0000000000000088 .L0 
     /tmp/ccQD0RUj.s:85     .rodata.str1.8:0000000000000008 .LC1
     /tmp/ccQD0RUj.s:144    .text:0000000000000094 .L0 
     /tmp/ccQD0RUj.s:150    .text:00000000000000a4 .L0 
     /tmp/ccQD0RUj.s:88     .rodata.str1.8:0000000000000018 .LC2
     /tmp/ccQD0RUj.s:152    .text:00000000000000b0 .L0 
     /tmp/ccQD0RUj.s:157    .text:00000000000000c0 .L0 
GAS LISTING /tmp/ccQD0RUj.s 			page 70


     /tmp/ccQD0RUj.s:91     .rodata.str1.8:0000000000000030 .LC3
     /tmp/ccQD0RUj.s:159    .text:00000000000000cc .L0 
     /tmp/ccQD0RUj.s:164    .text:00000000000000dc .L0 
     /tmp/ccQD0RUj.s:94     .rodata.str1.8:0000000000000048 .LC4
     /tmp/ccQD0RUj.s:166    .text:00000000000000e8 .L0 
     /tmp/ccQD0RUj.s:171    .text:00000000000000f8 .L0 
     /tmp/ccQD0RUj.s:97     .rodata.str1.8:0000000000000060 .LC5
     /tmp/ccQD0RUj.s:173    .text:0000000000000104 .L0 
     /tmp/ccQD0RUj.s:178    .text:0000000000000114 .L0 
     /tmp/ccQD0RUj.s:100    .rodata.str1.8:0000000000000070 .LC6
     /tmp/ccQD0RUj.s:180    .text:0000000000000120 .L0 
     /tmp/ccQD0RUj.s:103    .rodata.str1.8:0000000000000090 .LC7
     /tmp/ccQD0RUj.s:185    .text:0000000000000130 .L0 
     /tmp/ccQD0RUj.s:106    .rodata.str1.8:00000000000000b0 .LC8
     /tmp/ccQD0RUj.s:201    .text:0000000000000150 .L0 
     /tmp/ccQD0RUj.s:109    .rodata.str1.8:00000000000000b8 .LC9
     /tmp/ccQD0RUj.s:203    .text:000000000000015c .L0 
     /tmp/ccQD0RUj.s:222    .text:0000000000000180 .L0 
     /tmp/ccQD0RUj.s:250    .rodata.str1.8:00000000000000c0 .LC10
     /tmp/ccQD0RUj.s:297    .text:00000000000001c8 .L0 
     /tmp/ccQD0RUj.s:308    .text:00000000000001e4 .L0 
     /tmp/ccQD0RUj.s:313    .text:00000000000001f4 .L0 
     /tmp/ccQD0RUj.s:314    .text:00000000000001fc .L0 
     /tmp/ccQD0RUj.s:253    .rodata.str1.8:00000000000000d0 .LC11
     /tmp/ccQD0RUj.s:316    .text:0000000000000208 .L0 
     /tmp/ccQD0RUj.s:321    .text:0000000000000218 .L0 
     /tmp/ccQD0RUj.s:256    .rodata.str1.8:00000000000000e8 .LC12
     /tmp/ccQD0RUj.s:323    .text:0000000000000224 .L0 
     /tmp/ccQD0RUj.s:328    .text:0000000000000234 .L0 
     /tmp/ccQD0RUj.s:259    .rodata.str1.8:00000000000000f8 .LC13
     /tmp/ccQD0RUj.s:330    .text:0000000000000240 .L0 
     /tmp/ccQD0RUj.s:335    .text:0000000000000250 .L0 
     /tmp/ccQD0RUj.s:262    .rodata.str1.8:0000000000000110 .LC14
     /tmp/ccQD0RUj.s:337    .text:000000000000025c .L0 
     /tmp/ccQD0RUj.s:342    .text:000000000000026c .L0 
     /tmp/ccQD0RUj.s:265    .rodata.str1.8:0000000000000128 .LC15
     /tmp/ccQD0RUj.s:344    .text:0000000000000278 .L0 
     /tmp/ccQD0RUj.s:357    .text:0000000000000290 .L0 
     /tmp/ccQD0RUj.s:359    .text:000000000000029c .L0 
     /tmp/ccQD0RUj.s:371    .text:00000000000002b4 .L0 
     /tmp/ccQD0RUj.s:376    .text:00000000000002c4 .L0 
     /tmp/ccQD0RUj.s:268    .rodata.str1.8:0000000000000138 .LC16
     /tmp/ccQD0RUj.s:378    .text:00000000000002d0 .L0 
     /tmp/ccQD0RUj.s:391    .text:00000000000002e8 .L0 
     /tmp/ccQD0RUj.s:393    .text:00000000000002f4 .L0 
     /tmp/ccQD0RUj.s:405    .text:000000000000030c .L0 
     /tmp/ccQD0RUj.s:410    .text:000000000000031c .L0 
     /tmp/ccQD0RUj.s:271    .rodata.str1.8:0000000000000148 .LC17
     /tmp/ccQD0RUj.s:412    .text:0000000000000328 .L0 
     /tmp/ccQD0RUj.s:425    .text:0000000000000340 .L0 
     /tmp/ccQD0RUj.s:427    .text:000000000000034c .L0 
     /tmp/ccQD0RUj.s:439    .text:0000000000000364 .L0 
     /tmp/ccQD0RUj.s:1193   .text:000000000000076c .L0 
     /tmp/ccQD0RUj.s:1248   .text:00000000000007d0 .L0 
     /tmp/ccQD0RUj.s:1345   .text:0000000000000868 .L0 
     /tmp/ccQD0RUj.s:1352   .text:0000000000000878 .L0 
     /tmp/ccQD0RUj.s:1314   .rodata.str1.8:0000000000000158 .LC18
GAS LISTING /tmp/ccQD0RUj.s 			page 71


     /tmp/ccQD0RUj.s:1384   .text:00000000000008b8 .L0 
     /tmp/ccQD0RUj.s:1398   .text:00000000000008d4 .L0 
     /tmp/ccQD0RUj.s:1408   .text:00000000000008fc .L0 
     /tmp/ccQD0RUj.s:1868   .text:0000000000000b38 .L0 
     /tmp/ccQD0RUj.s:2036   .text:0000000000000c28 .L0 
     /tmp/ccQD0RUj.s:59     .text:000000000000004c .L2
     /tmp/ccQD0RUj.s:33     .text:0000000000000020 .L3
     /tmp/ccQD0RUj.s:243    .text:00000000000001a8 .L10
     /tmp/ccQD0RUj.s:209    .text:0000000000000170 .L8
     /tmp/ccQD0RUj.s:194    .text:0000000000000148 .L13
     /tmp/ccQD0RUj.s:368    .text:00000000000002b4 .L15
     /tmp/ccQD0RUj.s:351    .text:000000000000028c .L16
     /tmp/ccQD0RUj.s:402    .text:000000000000030c .L17
     /tmp/ccQD0RUj.s:385    .text:00000000000002e4 .L18
     /tmp/ccQD0RUj.s:436    .text:0000000000000364 .L19
     /tmp/ccQD0RUj.s:419    .text:000000000000033c .L20
     /tmp/ccQD0RUj.s:484    .text:00000000000003a8 .L23
     /tmp/ccQD0RUj.s:637    .text:0000000000000498 .L30
     /tmp/ccQD0RUj.s:599    .text:0000000000000460 .L27
     /tmp/ccQD0RUj.s:578    .text:000000000000043c .L28
     /tmp/ccQD0RUj.s:645    .text:00000000000004a0 .L31
     /tmp/ccQD0RUj.s:650    .text:00000000000004a8 .L32
     /tmp/ccQD0RUj.s:611    .text:000000000000046c .L29
     /tmp/ccQD0RUj.s:653    .text:00000000000004ac .L26
     /tmp/ccQD0RUj.s:729    .text:0000000000000510 .L39
     /tmp/ccQD0RUj.s:703    .text:00000000000004ec .L36
     /tmp/ccQD0RUj.s:714    .text:00000000000004fc .L37
     /tmp/ccQD0RUj.s:692    .text:00000000000004dc .L35
     /tmp/ccQD0RUj.s:945    .text:0000000000000644 .L51
     /tmp/ccQD0RUj.s:849    .text:00000000000005c4 .L53
     /tmp/ccQD0RUj.s:819    .text:0000000000000590 .L50
     /tmp/ccQD0RUj.s:930    .text:000000000000062c .L54
     /tmp/ccQD0RUj.s:938    .text:0000000000000638 .L47
     /tmp/ccQD0RUj.s:914    .text:0000000000000614 .L49
     /tmp/ccQD0RUj.s:952    .text:0000000000000648 .L42
     /tmp/ccQD0RUj.s:879    .text:00000000000005e8 .L46
     /tmp/ccQD0RUj.s:900    .text:00000000000005fc .L48
     /tmp/ccQD0RUj.s:1013   .text:0000000000000698 .L56
     /tmp/ccQD0RUj.s:995    .text:0000000000000680 .L57
     /tmp/ccQD0RUj.s:1038   .text:00000000000006b8 .L62
     /tmp/ccQD0RUj.s:1061   .text:00000000000006d4 .L59
     /tmp/ccQD0RUj.s:1044   .text:00000000000006bc .L60
     /tmp/ccQD0RUj.s:1019   .text:000000000000069c .L55
     /tmp/ccQD0RUj.s:1166   .text:000000000000074c .L64
     /tmp/ccQD0RUj.s:1150   .text:0000000000000738 .L65
     /tmp/ccQD0RUj.s:1208   .text:0000000000000794 .L67
     /tmp/ccQD0RUj.s:1283   .text:0000000000000818 .L72
     /tmp/ccQD0RUj.s:1414   .text:0000000000000910 .L77
     /tmp/ccQD0RUj.s:1394   .text:00000000000008d0 .L79
     /tmp/ccQD0RUj.s:1598   .text:0000000000000a14 .L88
     /tmp/ccQD0RUj.s:1564   .text:00000000000009d8 .L82
     /tmp/ccQD0RUj.s:1574   .text:00000000000009e4 .L91
     /tmp/ccQD0RUj.s:1581   .text:00000000000009f0 .L92
     /tmp/ccQD0RUj.s:1547   .text:00000000000009c4 .L80
     /tmp/ccQD0RUj.s:1503   .text:0000000000000990 .L83
     /tmp/ccQD0RUj.s:1525   .text:00000000000009a8 .L85
     /tmp/ccQD0RUj.s:1642   .text:0000000000000a48 .L94
GAS LISTING /tmp/ccQD0RUj.s 			page 72


     /tmp/ccQD0RUj.s:1653   .text:0000000000000a58 .L95
     /tmp/ccQD0RUj.s:1668   .text:0000000000000a64 .L98
     /tmp/ccQD0RUj.s:1723   .text:0000000000000aa0 .L103
     /tmp/ccQD0RUj.s:1660   .text:0000000000000a60 .L97
     /tmp/ccQD0RUj.s:1730   .text:0000000000000aa4 .L96
     /tmp/ccQD0RUj.s:1754   .text:0000000000000ac0 .L105
     /tmp/ccQD0RUj.s:1770   .text:0000000000000acc .L102
     /tmp/ccQD0RUj.s:1736   .text:0000000000000aa8 .L99
     /tmp/ccQD0RUj.s:1762   .text:0000000000000ac8 .L101
     /tmp/ccQD0RUj.s:1881   .text:0000000000000b60 .L106
     /tmp/ccQD0RUj.s:1861   .text:0000000000000b2c .L108
     /tmp/ccQD0RUj.s:1955   .text:0000000000000bc4 .L111
     /tmp/ccQD0RUj.s:1928   .text:0000000000000b9c .L112
     /tmp/ccQD0RUj.s:1992   .text:0000000000000bf4 .L113
     /tmp/ccQD0RUj.s:1965   .text:0000000000000bcc .L114
     /tmp/ccQD0RUj.s:2029   .text:0000000000000c24 .L115
     /tmp/ccQD0RUj.s:2002   .text:0000000000000bfc .L116
     /tmp/ccQD0RUj.s:2064   .rodata.str1.8:0000000000000168 .LC19
     /tmp/ccQD0RUj.s:2067   .rodata.str1.8:0000000000000180 .LC20
     /tmp/ccQD0RUj.s:2070   .rodata.str1.8:0000000000000198 .LC21
     /tmp/ccQD0RUj.s:2073   .rodata.str1.8:00000000000001b0 .LC22
     /tmp/ccQD0RUj.s:2076   .rodata.str1.8:00000000000001c8 .LC23
     /tmp/ccQD0RUj.s:2079   .rodata.str1.8:00000000000001e0 .LC24
     /tmp/ccQD0RUj.s:2082   .rodata.str1.8:00000000000001f8 .LC25
     /tmp/ccQD0RUj.s:2085   .rodata.str1.8:0000000000000210 .LC26
     /tmp/ccQD0RUj.s:2088   .rodata.str1.8:0000000000000228 .LC27
     /tmp/ccQD0RUj.s:2091   .rodata.str1.8:0000000000000240 .LC28
     /tmp/ccQD0RUj.s:2094   .rodata.str1.8:0000000000000258 .LC29
     /tmp/ccQD0RUj.s:2097   .rodata.str1.8:0000000000000270 .LC30
     /tmp/ccQD0RUj.s:2100   .rodata.str1.8:0000000000000288 .LC31
     /tmp/ccQD0RUj.s:4795   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccQD0RUj.s:6883   .debug_str:00000000000002f8 .LASF159
     /tmp/ccQD0RUj.s:6985   .debug_str:00000000000006d6 .LASF160
     /tmp/ccQD0RUj.s:7139   .debug_str:0000000000000baa .LASF161
     /tmp/ccQD0RUj.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccQD0RUj.s:2143   .text:0000000000000c54 .Letext0
     /tmp/ccQD0RUj.s:6803   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccQD0RUj.s:7055   .debug_str:00000000000008df .LASF0
     /tmp/ccQD0RUj.s:6979   .debug_str:0000000000000674 .LASF1
     /tmp/ccQD0RUj.s:7007   .debug_str:0000000000000773 .LASF2
     /tmp/ccQD0RUj.s:6965   .debug_str:00000000000005e3 .LASF3
     /tmp/ccQD0RUj.s:6927   .debug_str:00000000000004e5 .LASF4
     /tmp/ccQD0RUj.s:6841   .debug_str:000000000000016d .LASF5
     /tmp/ccQD0RUj.s:7011   .debug_str:00000000000007a2 .LASF6
     /tmp/ccQD0RUj.s:6977   .debug_str:0000000000000661 .LASF7
     /tmp/ccQD0RUj.s:7099   .debug_str:0000000000000a74 .LASF8
     /tmp/ccQD0RUj.s:6909   .debug_str:000000000000046f .LASF9
     /tmp/ccQD0RUj.s:7029   .debug_str:0000000000000808 .LASF10
     /tmp/ccQD0RUj.s:7085   .debug_str:00000000000009fb .LASF11
     /tmp/ccQD0RUj.s:6845   .debug_str:000000000000017b .LASF12
     /tmp/ccQD0RUj.s:6811   .debug_str:000000000000002c .LASF13
     /tmp/ccQD0RUj.s:6853   .debug_str:00000000000001bc .LASF14
     /tmp/ccQD0RUj.s:7047   .debug_str:000000000000088d .LASF15
     /tmp/ccQD0RUj.s:6871   .debug_str:00000000000002b4 .LASF16
     /tmp/ccQD0RUj.s:7015   .debug_str:00000000000007ba .LASF17
     /tmp/ccQD0RUj.s:6877   .debug_str:00000000000002df .LASF18
     /tmp/ccQD0RUj.s:6875   .debug_str:00000000000002d9 .LASF41
GAS LISTING /tmp/ccQD0RUj.s 			page 73


     /tmp/ccQD0RUj.s:6867   .debug_str:0000000000000283 .LASF162
     /tmp/ccQD0RUj.s:7137   .debug_str:0000000000000ba5 .LASF86
     /tmp/ccQD0RUj.s:6963   .debug_str:00000000000005d8 .LASF19
     /tmp/ccQD0RUj.s:7089   .debug_str:0000000000000a33 .LASF21
     /tmp/ccQD0RUj.s:6989   .debug_str:00000000000006fd .LASF23
     /tmp/ccQD0RUj.s:7027   .debug_str:00000000000007f6 .LASF25
     /tmp/ccQD0RUj.s:6895   .debug_str:0000000000000440 .LASF20
     /tmp/ccQD0RUj.s:6817   .debug_str:0000000000000073 .LASF22
     /tmp/ccQD0RUj.s:6941   .debug_str:000000000000054a .LASF55
     /tmp/ccQD0RUj.s:6955   .debug_str:00000000000005a2 .LASF57
     /tmp/ccQD0RUj.s:7109   .debug_str:0000000000000acd .LASF24
     /tmp/ccQD0RUj.s:7115   .debug_str:0000000000000b00 .LASF26
     /tmp/ccQD0RUj.s:7041   .debug_str:000000000000085c .LASF27
     /tmp/ccQD0RUj.s:7045   .debug_str:000000000000087c .LASF28
     /tmp/ccQD0RUj.s:7001   .debug_str:000000000000074c .LASF29
     /tmp/ccQD0RUj.s:6993   .debug_str:0000000000000712 .LASF163
     /tmp/ccQD0RUj.s:6879   .debug_str:00000000000002e7 .LASF30
     /tmp/ccQD0RUj.s:6959   .debug_str:00000000000005c7 .LASF31
     /tmp/ccQD0RUj.s:6839   .debug_str:0000000000000168 .LASF32
     /tmp/ccQD0RUj.s:6885   .debug_str:00000000000003c8 .LASF33
     /tmp/ccQD0RUj.s:6995   .debug_str:0000000000000719 .LASF34
     /tmp/ccQD0RUj.s:7067   .debug_str:0000000000000964 .LASF35
     /tmp/ccQD0RUj.s:7103   .debug_str:0000000000000aa8 .LASF36
     /tmp/ccQD0RUj.s:7113   .debug_str:0000000000000ae2 .LASF38
     /tmp/ccQD0RUj.s:7035   .debug_str:0000000000000840 .LASF37
     /tmp/ccQD0RUj.s:7051   .debug_str:00000000000008c0 .LASF39
     /tmp/ccQD0RUj.s:7127   .debug_str:0000000000000b7e .LASF164
     /tmp/ccQD0RUj.s:6821   .debug_str:00000000000000a0 .LASF165
     /tmp/ccQD0RUj.s:6897   .debug_str:0000000000000445 .LASF40
     /tmp/ccQD0RUj.s:6915   .debug_str:0000000000000490 .LASF42
     /tmp/ccQD0RUj.s:6849   .debug_str:00000000000001aa .LASF43
     /tmp/ccQD0RUj.s:7005   .debug_str:0000000000000767 .LASF44
     /tmp/ccQD0RUj.s:7095   .debug_str:0000000000000a65 .LASF45
     /tmp/ccQD0RUj.s:6911   .debug_str:000000000000047d .LASF46
     /tmp/ccQD0RUj.s:7077   .debug_str:00000000000009bd .LASF118
     /tmp/ccQD0RUj.s:6961   .debug_str:00000000000005cc .LASF47
     /tmp/ccQD0RUj.s:7025   .debug_str:00000000000007e9 .LASF48
     /tmp/ccQD0RUj.s:7003   .debug_str:000000000000075d .LASF49
     /tmp/ccQD0RUj.s:6913   .debug_str:0000000000000486 .LASF50
     /tmp/ccQD0RUj.s:7071   .debug_str:0000000000000985 .LASF51
     /tmp/ccQD0RUj.s:6973   .debug_str:0000000000000650 .LASF52
     /tmp/ccQD0RUj.s:7037   .debug_str:0000000000000847 .LASF53
     /tmp/ccQD0RUj.s:7009   .debug_str:0000000000000786 .LASF54
     /tmp/ccQD0RUj.s:6943   .debug_str:0000000000000554 .LASF56
     /tmp/ccQD0RUj.s:6807   .debug_str:0000000000000006 .LASF58
     /tmp/ccQD0RUj.s:6827   .debug_str:00000000000000e4 .LASF59
     /tmp/ccQD0RUj.s:7049   .debug_str:00000000000008a3 .LASF60
     /tmp/ccQD0RUj.s:7053   .debug_str:00000000000008d5 .LASF61
     /tmp/ccQD0RUj.s:6889   .debug_str:00000000000003ff .LASF62
     /tmp/ccQD0RUj.s:6999   .debug_str:000000000000072d .LASF166
     /tmp/ccQD0RUj.s:6923   .debug_str:00000000000004cb .LASF63
     /tmp/ccQD0RUj.s:7033   .debug_str:000000000000081c .LASF64
     /tmp/ccQD0RUj.s:6903   .debug_str:0000000000000456 .LASF65
     /tmp/ccQD0RUj.s:7079   .debug_str:00000000000009c8 .LASF66
     /tmp/ccQD0RUj.s:6935   .debug_str:0000000000000508 .LASF67
     /tmp/ccQD0RUj.s:6825   .debug_str:00000000000000c2 .LASF68
     /tmp/ccQD0RUj.s:6975   .debug_str:000000000000065b .LASF69
GAS LISTING /tmp/ccQD0RUj.s 			page 74


     /tmp/ccQD0RUj.s:6847   .debug_str:000000000000018b .LASF70
     /tmp/ccQD0RUj.s:6929   .debug_str:00000000000004ec .LASF71
     /tmp/ccQD0RUj.s:6947   .debug_str:0000000000000568 .LASF72
     /tmp/ccQD0RUj.s:6931   .debug_str:00000000000004f2 .LASF73
     /tmp/ccQD0RUj.s:6907   .debug_str:0000000000000466 .LASF74
     /tmp/ccQD0RUj.s:7013   .debug_str:00000000000007b5 .LASF75
     /tmp/ccQD0RUj.s:7125   .debug_str:0000000000000b79 .LASF76
     /tmp/ccQD0RUj.s:6925   .debug_str:00000000000004db .LASF77
     /tmp/ccQD0RUj.s:7039   .debug_str:0000000000000850 .LASF78
     /tmp/ccQD0RUj.s:7091   .debug_str:0000000000000a4d .LASF79
     /tmp/ccQD0RUj.s:7131   .debug_str:0000000000000b8f .LASF80
     /tmp/ccQD0RUj.s:6901   .debug_str:000000000000044f .LASF81
     /tmp/ccQD0RUj.s:7105   .debug_str:0000000000000aae .LASF83
     /tmp/ccQD0RUj.s:6865   .debug_str:000000000000027b .LASF82
     /tmp/ccQD0RUj.s:6939   .debug_str:0000000000000537 .LASF84
     /tmp/ccQD0RUj.s:7119   .debug_str:0000000000000b3d .LASF85
     /tmp/ccQD0RUj.s:7081   .debug_str:00000000000009e6 .LASF87
     /tmp/ccQD0RUj.s:6921   .debug_str:00000000000004bb .LASF88
     /tmp/ccQD0RUj.s:6917   .debug_str:000000000000049c .LASF89
     /tmp/ccQD0RUj.s:6823   .debug_str:00000000000000b5 .LASF90
     /tmp/ccQD0RUj.s:6905   .debug_str:000000000000045f .LASF91
     /tmp/ccQD0RUj.s:7069   .debug_str:0000000000000977 .LASF92
     /tmp/ccQD0RUj.s:6937   .debug_str:0000000000000514 .LASF93
     /tmp/ccQD0RUj.s:7135   .debug_str:0000000000000b99 .LASF94
     /tmp/ccQD0RUj.s:6813   .debug_str:000000000000003c .LASF95
     /tmp/ccQD0RUj.s:6881   .debug_str:00000000000002ec .LASF96
     /tmp/ccQD0RUj.s:6983   .debug_str:00000000000006ad .LASF97
     /tmp/ccQD0RUj.s:6997   .debug_str:0000000000000720 .LASF98
     /tmp/ccQD0RUj.s:7087   .debug_str:0000000000000a0a .LASF99
     /tmp/ccQD0RUj.s:7061   .debug_str:0000000000000944 .LASF100
     /tmp/ccQD0RUj.s:6837   .debug_str:0000000000000140 .LASF101
     /tmp/ccQD0RUj.s:6967   .debug_str:00000000000005f1 .LASF102
     /tmp/ccQD0RUj.s:7075   .debug_str:0000000000000995 .LASF103
     /tmp/ccQD0RUj.s:7023   .debug_str:00000000000007da .LASF104
     /tmp/ccQD0RUj.s:6869   .debug_str:0000000000000289 .LASF105
     /tmp/ccQD0RUj.s:7093   .debug_str:0000000000000a56 .LASF106
     /tmp/ccQD0RUj.s:7059   .debug_str:000000000000091f .LASF107
     /tmp/ccQD0RUj.s:7111   .debug_str:0000000000000ad9 .LASF108
     /tmp/ccQD0RUj.s:7101   .debug_str:0000000000000a84 .LASF109
     /tmp/ccQD0RUj.s:6833   .debug_str:0000000000000112 .LASF110
     /tmp/ccQD0RUj.s:6949   .debug_str:000000000000056d .LASF111
     /tmp/ccQD0RUj.s:6945   .debug_str:000000000000055d .LASF112
     /tmp/ccQD0RUj.s:6835   .debug_str:000000000000011d .LASF113
     /tmp/ccQD0RUj.s:6809   .debug_str:0000000000000022 .LASF114
     /tmp/ccQD0RUj.s:7117   .debug_str:0000000000000b19 .LASF115
     /tmp/ccQD0RUj.s:6861   .debug_str:0000000000000246 .LASF116
     /tmp/ccQD0RUj.s:6857   .debug_str:00000000000001f6 .LASF117
     /tmp/ccQD0RUj.s:6953   .debug_str:000000000000059c .LASF119
     /tmp/ccQD0RUj.s:6891   .debug_str:000000000000041c .LASF120
     /tmp/ccQD0RUj.s:6829   .debug_str:00000000000000ee .LASF121
     /tmp/ccQD0RUj.s:6919   .debug_str:00000000000004a6 .LASF122
     /tmp/ccQD0RUj.s:6991   .debug_str:0000000000000703 .LASF123
     /tmp/ccQD0RUj.s:6855   .debug_str:00000000000001c8 .LASF124
     /tmp/ccQD0RUj.s:6873   .debug_str:00000000000002ca .LASF125
     /tmp/ccQD0RUj.s:7057   .debug_str:00000000000008f1 .LASF126
     /tmp/ccQD0RUj.s:7133   .debug_str:0000000000000b94 .LASF127
     /tmp/ccQD0RUj.s:6887   .debug_str:00000000000003d9 .LASF128
GAS LISTING /tmp/ccQD0RUj.s 			page 75


     /tmp/ccQD0RUj.s:7063   .debug_str:0000000000000950 .LASF129
     /tmp/ccQD0RUj.s:6859   .debug_str:000000000000021d .LASF130
     /tmp/ccQD0RUj.s:7123   .debug_str:0000000000000b6b .LASF131
     /tmp/ccQD0RUj.s:7121   .debug_str:0000000000000b42 .LASF132
     /tmp/ccQD0RUj.s:6987   .debug_str:00000000000006ec .LASF133
     /tmp/ccQD0RUj.s:6981   .debug_str:0000000000000681 .LASF134
     /tmp/ccQD0RUj.s:7107   .debug_str:0000000000000ac0 .LASF135
     /tmp/ccQD0RUj.s:6971   .debug_str:0000000000000625 .LASF136
     /tmp/ccQD0RUj.s:7043   .debug_str:0000000000000871 .LASF137
     /tmp/ccQD0RUj.s:6969   .debug_str:00000000000005fe .LASF138
     /tmp/ccQD0RUj.s:6851   .debug_str:00000000000001b6 .LASF139
     /tmp/ccQD0RUj.s:7141   .debug_str:0000000000000bdb .LASF140
     /tmp/ccQD0RUj.s:6819   .debug_str:0000000000000086 .LASF141
     /tmp/ccQD0RUj.s:6831   .debug_str:00000000000000f8 .LASF142
     /tmp/ccQD0RUj.s:6893   .debug_str:0000000000000422 .LASF143
     /tmp/ccQD0RUj.s:6863   .debug_str:0000000000000251 .LASF144
     /tmp/ccQD0RUj.s:744    .text:000000000000051c .LFB25
     /tmp/ccQD0RUj.s:790    .text:0000000000000570 .LFE25
     /tmp/ccQD0RUj.s:7019   .debug_str:00000000000007c6 .LASF145
     /tmp/ccQD0RUj.s:5819   .debug_loc:0000000000000000 .LLST10
     /tmp/ccQD0RUj.s:7017   .debug_str:00000000000007bf .LASF146
     /tmp/ccQD0RUj.s:5833   .debug_loc:0000000000000039 .LLST11
     /tmp/ccQD0RUj.s:6899   .debug_str:000000000000044a .LASF147
     /tmp/ccQD0RUj.s:5851   .debug_loc:0000000000000085 .LLST12
     /tmp/ccQD0RUj.s:767    .text:0000000000000548 .LVL71
     /tmp/ccQD0RUj.s:773    .text:0000000000000558 .LVL72
     /tmp/ccQD0RUj.s:677    .text:00000000000004c8 .LFB24
     /tmp/ccQD0RUj.s:738    .text:000000000000051c .LFE24
     /tmp/ccQD0RUj.s:464    .text:000000000000038c .LFB23
     /tmp/ccQD0RUj.s:499    .text:00000000000003bc .LFE23
     /tmp/ccQD0RUj.s:278    .text:00000000000001ac .LFB22
     /tmp/ccQD0RUj.s:458    .text:000000000000038c .LFE22
     /tmp/ccQD0RUj.s:5869   .debug_loc:00000000000000d1 .LLST4
     /tmp/ccQD0RUj.s:7097   .debug_str:0000000000000a6f .LASF148
     /tmp/ccQD0RUj.s:5887   .debug_loc:000000000000011d .LLST5
     /tmp/ccQD0RUj.s:300    .text:00000000000001d8 .LVL26
     /tmp/ccQD0RUj.s:305    .text:00000000000001e4 .LVL27
     /tmp/ccQD0RUj.s:310    .text:00000000000001f4 .LVL28
     /tmp/ccQD0RUj.s:318    .text:0000000000000218 .LVL29
     /tmp/ccQD0RUj.s:325    .text:0000000000000234 .LVL30
     /tmp/ccQD0RUj.s:332    .text:0000000000000250 .LVL31
     /tmp/ccQD0RUj.s:339    .text:000000000000026c .LVL32
     /tmp/ccQD0RUj.s:346    .text:0000000000000288 .LVL33
     /tmp/ccQD0RUj.s:361    .text:00000000000002ac .LVL35
     /tmp/ccQD0RUj.s:373    .text:00000000000002c4 .LVL37
     /tmp/ccQD0RUj.s:380    .text:00000000000002e0 .LVL38
     /tmp/ccQD0RUj.s:395    .text:0000000000000304 .LVL40
     /tmp/ccQD0RUj.s:407    .text:000000000000031c .LVL42
     /tmp/ccQD0RUj.s:414    .text:0000000000000338 .LVL43
     /tmp/ccQD0RUj.s:429    .text:000000000000035c .LVL45
     /tmp/ccQD0RUj.s:441    .text:0000000000000374 .LVL47
     /tmp/ccQD0RUj.s:116    .text:0000000000000068 .LFB21
     /tmp/ccQD0RUj.s:246    .text:00000000000001ac .LFE21
     /tmp/ccQD0RUj.s:5894   .debug_loc:0000000000000140 .LLST2
     /tmp/ccQD0RUj.s:189    .text:0000000000000140 .LBB36
     /tmp/ccQD0RUj.s:219    .text:0000000000000180 .LBE36
     /tmp/ccQD0RUj.s:5916   .debug_loc:000000000000019f .LLST3
GAS LISTING /tmp/ccQD0RUj.s 			page 76


     /tmp/ccQD0RUj.s:205    .text:000000000000016c .LVL18
     /tmp/ccQD0RUj.s:147    .text:00000000000000a4 .LVL10
     /tmp/ccQD0RUj.s:154    .text:00000000000000c0 .LVL11
     /tmp/ccQD0RUj.s:161    .text:00000000000000dc .LVL12
     /tmp/ccQD0RUj.s:168    .text:00000000000000f8 .LVL13
     /tmp/ccQD0RUj.s:175    .text:0000000000000114 .LVL14
     /tmp/ccQD0RUj.s:182    .text:0000000000000130 .LVL15
     /tmp/ccQD0RUj.s:187    .text:0000000000000140 .LVL16
     /tmp/ccQD0RUj.s:224    .text:0000000000000190 .LVL20
     /tmp/ccQD0RUj.s:10     .text:0000000000000000 .LFB20
     /tmp/ccQD0RUj.s:78     .text:0000000000000068 .LFE20
     /tmp/ccQD0RUj.s:5928   .debug_loc:00000000000001d6 .LLST0
     /tmp/ccQD0RUj.s:5946   .debug_loc:0000000000000222 .LLST1
     /tmp/ccQD0RUj.s:42     .text:0000000000000034 .LVL3
     /tmp/ccQD0RUj.s:1905   .text:0000000000000b78 .LFB19
     /tmp/ccQD0RUj.s:2057   .text:0000000000000c54 .LFE19
     /tmp/ccQD0RUj.s:5962   .debug_loc:000000000000026c .LLST59
     /tmp/ccQD0RUj.s:1929   .text:0000000000000b9c .LBB119
     /tmp/ccQD0RUj.s:1958   .text:0000000000000bc4 .LBE119
     /tmp/ccQD0RUj.s:5980   .debug_loc:00000000000002b8 .LLST60
     /tmp/ccQD0RUj.s:1935   .text:0000000000000ba4 .LBB121
     /tmp/ccQD0RUj.s:1952   .text:0000000000000bc0 .LBE121
     /tmp/ccQD0RUj.s:5987   .debug_loc:00000000000002db .LLST61
     /tmp/ccQD0RUj.s:1944   .text:0000000000000bb4 .LVL200
     /tmp/ccQD0RUj.s:1966   .text:0000000000000bcc .LBB122
     /tmp/ccQD0RUj.s:1995   .text:0000000000000bf4 .LBE122
     /tmp/ccQD0RUj.s:5994   .debug_loc:00000000000002fe .LLST62
     /tmp/ccQD0RUj.s:1972   .text:0000000000000bd4 .LBB124
     /tmp/ccQD0RUj.s:1989   .text:0000000000000bf0 .LBE124
     /tmp/ccQD0RUj.s:6001   .debug_loc:0000000000000321 .LLST63
     /tmp/ccQD0RUj.s:1981   .text:0000000000000be4 .LVL204
     /tmp/ccQD0RUj.s:2003   .text:0000000000000bfc .LBB125
     /tmp/ccQD0RUj.s:2032   .text:0000000000000c24 .LBE125
     /tmp/ccQD0RUj.s:6008   .debug_loc:0000000000000344 .LLST64
     /tmp/ccQD0RUj.s:2009   .text:0000000000000c04 .LBB127
     /tmp/ccQD0RUj.s:2026   .text:0000000000000c20 .LBE127
     /tmp/ccQD0RUj.s:6015   .debug_loc:0000000000000367 .LLST65
     /tmp/ccQD0RUj.s:2018   .text:0000000000000c14 .LVL208
     /tmp/ccQD0RUj.s:2038   .text:0000000000000c38 .LVL210
     /tmp/ccQD0RUj.s:1220   .text:000000000000079c .LFB18
     /tmp/ccQD0RUj.s:1310   .text:0000000000000840 .LFE18
     /tmp/ccQD0RUj.s:6022   .debug_loc:000000000000038a .LLST29
     /tmp/ccQD0RUj.s:7073   .debug_str:0000000000000990 .LASF149
     /tmp/ccQD0RUj.s:6040   .debug_loc:00000000000003d6 .LLST30
     /tmp/ccQD0RUj.s:6058   .debug_loc:0000000000000422 .LLST31
     /tmp/ccQD0RUj.s:6076   .debug_loc:000000000000046e .LLST32
     /tmp/ccQD0RUj.s:6094   .debug_loc:00000000000004ba .LLST33
     /tmp/ccQD0RUj.s:1251   .text:00000000000007e0 .LVL127
     /tmp/ccQD0RUj.s:1281   .text:0000000000000818 .LVL129
     /tmp/ccQD0RUj.s:1838   .text:0000000000000b0c .LFB17
     /tmp/ccQD0RUj.s:1899   .text:0000000000000b78 .LFE17
     /tmp/ccQD0RUj.s:7031   .debug_str:0000000000000817 .LASF150
     /tmp/ccQD0RUj.s:6105   .debug_loc:00000000000004f0 .LLST57
     /tmp/ccQD0RUj.s:1857   .text:0000000000000b28 .LBB109
     /tmp/ccQD0RUj.s:1882   .text:0000000000000b60 .LBE109
     /tmp/ccQD0RUj.s:6123   .debug_loc:000000000000053c .LLST58
     /tmp/ccQD0RUj.s:1873   .text:0000000000000b54 .LVL192
GAS LISTING /tmp/ccQD0RUj.s 			page 77


     /tmp/ccQD0RUj.s:1613   .text:0000000000000a18 .LFB16
     /tmp/ccQD0RUj.s:1832   .text:0000000000000b0c .LFE16
     /tmp/ccQD0RUj.s:6139   .debug_loc:0000000000000586 .LLST43
     /tmp/ccQD0RUj.s:6161   .debug_loc:00000000000005e5 .LLST44
     /tmp/ccQD0RUj.s:7129   .debug_str:0000000000000b87 .LASF151
     /tmp/ccQD0RUj.s:6183   .debug_loc:0000000000000644 .LLST45
     /tmp/ccQD0RUj.s:1661   .text:0000000000000a60 .LBB87
     /tmp/ccQD0RUj.s:6751   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccQD0RUj.s:6194   .debug_loc:000000000000067a .LLST46
     /tmp/ccQD0RUj.s:6201   .debug_loc:000000000000069d .LLST47
     /tmp/ccQD0RUj.s:6212   .debug_loc:00000000000006d3 .LLST48
     /tmp/ccQD0RUj.s:6223   .debug_loc:0000000000000709 .LLST49
     /tmp/ccQD0RUj.s:1676   .text:0000000000000a68 .LBB90
     /tmp/ccQD0RUj.s:1693   .text:0000000000000a80 .LBE90
     /tmp/ccQD0RUj.s:6239   .debug_loc:0000000000000753 .LLST50
     /tmp/ccQD0RUj.s:1707   .text:0000000000000a88 .LBB93
     /tmp/ccQD0RUj.s:1724   .text:0000000000000aa0 .LBE93
     /tmp/ccQD0RUj.s:6246   .debug_loc:0000000000000776 .LLST51
     /tmp/ccQD0RUj.s:1717   .text:0000000000000a98 .LVL173
     /tmp/ccQD0RUj.s:1763   .text:0000000000000ac8 .LBB98
     /tmp/ccQD0RUj.s:6268   .debug_loc:00000000000007b7 .LLST52
     /tmp/ccQD0RUj.s:6275   .debug_loc:00000000000007da .LLST53
     /tmp/ccQD0RUj.s:6286   .debug_loc:0000000000000810 .LLST54
     /tmp/ccQD0RUj.s:1778   .text:0000000000000ad0 .LBB101
     /tmp/ccQD0RUj.s:1795   .text:0000000000000ae8 .LBE101
     /tmp/ccQD0RUj.s:6302   .debug_loc:000000000000085a .LLST55
     /tmp/ccQD0RUj.s:1809   .text:0000000000000af0 .LBB104
     /tmp/ccQD0RUj.s:1826   .text:0000000000000b0c .LBE104
     /tmp/ccQD0RUj.s:6309   .debug_loc:000000000000087d .LLST56
     /tmp/ccQD0RUj.s:1821   .text:0000000000000b04 .LVL188
     /tmp/ccQD0RUj.s:1641   .text:0000000000000a48 .LVL164
     /tmp/ccQD0RUj.s:1652   .text:0000000000000a58 .LVL165
     /tmp/ccQD0RUj.s:1440   .text:0000000000000930 .LFB15
     /tmp/ccQD0RUj.s:1607   .text:0000000000000a18 .LFE15
     /tmp/ccQD0RUj.s:6331   .debug_loc:00000000000008be .LLST37
     /tmp/ccQD0RUj.s:7065   .debug_str:000000000000095e .LASF152
     /tmp/ccQD0RUj.s:6357   .debug_loc:0000000000000930 .LLST38
     /tmp/ccQD0RUj.s:6378   .debug_loc:000000000000097f .LLST39
     /tmp/ccQD0RUj.s:6389   .debug_loc:00000000000009b5 .LLST40
     /tmp/ccQD0RUj.s:1488   .text:0000000000000980 .LBB64
     /tmp/ccQD0RUj.s:1495   .text:0000000000000984 .LBE64
     /tmp/ccQD0RUj.s:6400   .debug_loc:00000000000009eb .LLST41
     /tmp/ccQD0RUj.s:1511   .text:0000000000000998 .LBB66
     /tmp/ccQD0RUj.s:1518   .text:000000000000099c .LBE66
     /tmp/ccQD0RUj.s:6407   .debug_loc:0000000000000a0e .LLST42
     /tmp/ccQD0RUj.s:1546   .text:00000000000009c4 .LVL153
     /tmp/ccQD0RUj.s:1587   .text:00000000000009fc .LVL159
     /tmp/ccQD0RUj.s:1595   .text:0000000000000a10 .LVL160
     /tmp/ccQD0RUj.s:1091   .text:00000000000006fc .LFB14
     /tmp/ccQD0RUj.s:1214   .text:000000000000079c .LFE14
     /tmp/ccQD0RUj.s:6414   .debug_loc:0000000000000a31 .LLST24
     /tmp/ccQD0RUj.s:7083   .debug_str:00000000000009f5 .LASF153
     /tmp/ccQD0RUj.s:6434   .debug_loc:0000000000000a7f .LLST25
     /tmp/ccQD0RUj.s:1096   .text:00000000000006fc .LBB57
     /tmp/ccQD0RUj.s:1145   .text:0000000000000734 .LBE57
     /tmp/ccQD0RUj.s:6457   .debug_loc:0000000000000adf .LLST26
     /tmp/ccQD0RUj.s:1146   .text:0000000000000734 .LBB59
GAS LISTING /tmp/ccQD0RUj.s 			page 78


     /tmp/ccQD0RUj.s:1170   .text:000000000000074c .LBE59
     /tmp/ccQD0RUj.s:6468   .debug_loc:0000000000000b15 .LLST27
     /tmp/ccQD0RUj.s:6475   .debug_loc:0000000000000b38 .LLST28
     /tmp/ccQD0RUj.s:1197   .text:0000000000000784 .LVL123
     /tmp/ccQD0RUj.s:974    .text:0000000000000660 .LFB13
     /tmp/ccQD0RUj.s:1085   .text:00000000000006fc .LFE13
     /tmp/ccQD0RUj.s:6482   .debug_loc:0000000000000b5b .LLST18
     /tmp/ccQD0RUj.s:6504   .debug_loc:0000000000000bba .LLST19
     /tmp/ccQD0RUj.s:996    .text:0000000000000680 .LBB51
     /tmp/ccQD0RUj.s:1016   .text:0000000000000698 .LBE51
     /tmp/ccQD0RUj.s:6523   .debug_loc:0000000000000c16 .LLST20
     /tmp/ccQD0RUj.s:1002   .text:0000000000000684 .LBB53
     /tmp/ccQD0RUj.s:1014   .text:0000000000000698 .LBE53
     /tmp/ccQD0RUj.s:6530   .debug_loc:0000000000000c39 .LLST21
     /tmp/ccQD0RUj.s:1007   .text:0000000000000690 .LVL95
     /tmp/ccQD0RUj.s:1045   .text:00000000000006bc .LBB54
     /tmp/ccQD0RUj.s:1064   .text:00000000000006d4 .LBE54
     /tmp/ccQD0RUj.s:6537   .debug_loc:0000000000000c5c .LLST22
     /tmp/ccQD0RUj.s:1050   .text:00000000000006c0 .LBB56
     /tmp/ccQD0RUj.s:1062   .text:00000000000006d4 .LBE56
     /tmp/ccQD0RUj.s:6544   .debug_loc:0000000000000c7f .LLST23
     /tmp/ccQD0RUj.s:1055   .text:00000000000006cc .LVL101
     /tmp/ccQD0RUj.s:1071   .text:00000000000006e4 .LVL103
     /tmp/ccQD0RUj.s:1078   .text:00000000000006f4 .LVL104
     /tmp/ccQD0RUj.s:796    .text:0000000000000570 .LFB12
     /tmp/ccQD0RUj.s:968    .text:0000000000000660 .LFE12
     /tmp/ccQD0RUj.s:6551   .debug_loc:0000000000000ca2 .LLST13
     /tmp/ccQD0RUj.s:6585   .debug_loc:0000000000000d3a .LLST14
     /tmp/ccQD0RUj.s:6601   .debug_loc:0000000000000d84 .LLST15
     /tmp/ccQD0RUj.s:6612   .debug_loc:0000000000000dba .LLST16
     /tmp/ccQD0RUj.s:861    .text:00000000000005d4 .LBB44
     /tmp/ccQD0RUj.s:871    .text:00000000000005dc .LBE44
     /tmp/ccQD0RUj.s:6619   .debug_loc:0000000000000ddd .LLST17
     /tmp/ccQD0RUj.s:913    .text:0000000000000614 .LVL85
     /tmp/ccQD0RUj.s:505    .text:00000000000003bc .LFB11
     /tmp/ccQD0RUj.s:671    .text:00000000000004c8 .LFE11
     /tmp/ccQD0RUj.s:6626   .debug_loc:0000000000000e00 .LLST6
     /tmp/ccQD0RUj.s:6644   .debug_loc:0000000000000e4c .LLST7
     /tmp/ccQD0RUj.s:574    .text:0000000000000438 .LBB38
     /tmp/ccQD0RUj.s:600    .text:0000000000000460 .LBE38
     /tmp/ccQD0RUj.s:6663   .debug_loc:0000000000000ea8 .LLST8
     /tmp/ccQD0RUj.s:607    .text:0000000000000468 .LBB40
     /tmp/ccQD0RUj.s:638    .text:0000000000000498 .LBE40
     /tmp/ccQD0RUj.s:6679   .debug_loc:0000000000000ef2 .LLST9
     /tmp/ccQD0RUj.s:529    .text:00000000000003e8 .LVL53
     /tmp/ccQD0RUj.s:539    .text:0000000000000400 .LVL55
     /tmp/ccQD0RUj.s:1321   .text:0000000000000840 .LFB10
     /tmp/ccQD0RUj.s:1434   .text:0000000000000930 .LFE10
     /tmp/ccQD0RUj.s:6805   .debug_str:0000000000000000 .LASF154
     /tmp/ccQD0RUj.s:6690   .debug_loc:0000000000000f28 .LLST34
     /tmp/ccQD0RUj.s:6815   .debug_str:000000000000006a .LASF155
     /tmp/ccQD0RUj.s:6708   .debug_loc:0000000000000f74 .LLST35
     /tmp/ccQD0RUj.s:1388   .text:00000000000008c8 .LBB61
     /tmp/ccQD0RUj.s:1418   .text:0000000000000918 .LBE61
     /tmp/ccQD0RUj.s:6726   .debug_loc:0000000000000fc0 .LLST36
     /tmp/ccQD0RUj.s:1406   .text:00000000000008fc .LVL140
     /tmp/ccQD0RUj.s:1342   .text:0000000000000868 .LVL136
GAS LISTING /tmp/ccQD0RUj.s 			page 79


     /tmp/ccQD0RUj.s:1386   .text:00000000000008c8 .LVL137
     /tmp/ccQD0RUj.s:6933   .debug_str:00000000000004fd .LASF156
     /tmp/ccQD0RUj.s:7021   .debug_str:00000000000007cf .LASF157
     /tmp/ccQD0RUj.s:6951   .debug_str:0000000000000597 .LASF158
     /tmp/ccQD0RUj.s:6957   .debug_str:00000000000005b8 .LASF167
     /tmp/ccQD0RUj.s:6843   .debug_str:0000000000000174 .LASF168
     /tmp/ccQD0RUj.s:747    .text:000000000000051c .LVL69
     /tmp/ccQD0RUj.s:765    .text:0000000000000540 .LVL70
     /tmp/ccQD0RUj.s:785    .text:0000000000000568 .LVL74
     /tmp/ccQD0RUj.s:782    .text:0000000000000564 .LVL73
     /tmp/ccQD0RUj.s:281    .text:00000000000001ac .LVL24
     /tmp/ccQD0RUj.s:298    .text:00000000000001d0 .LVL25
     /tmp/ccQD0RUj.s:453    .text:0000000000000384 .LVL49
     /tmp/ccQD0RUj.s:350    .text:000000000000028c .LVL34
     /tmp/ccQD0RUj.s:450    .text:0000000000000380 .LVL48
     /tmp/ccQD0RUj.s:119    .text:0000000000000068 .LVL8
     /tmp/ccQD0RUj.s:145    .text:000000000000009c .LVL9
     /tmp/ccQD0RUj.s:238    .text:00000000000001a0 .LVL22
     /tmp/ccQD0RUj.s:242    .text:00000000000001a8 .LVL23
     /tmp/ccQD0RUj.s:193    .text:0000000000000148 .LVL17
     /tmp/ccQD0RUj.s:235    .text:000000000000019c .LVL21
     /tmp/ccQD0RUj.s:14     .text:0000000000000000 .LVL0
     /tmp/ccQD0RUj.s:32     .text:0000000000000020 .LVL2
     /tmp/ccQD0RUj.s:70     .text:000000000000005c .LVL6
     /tmp/ccQD0RUj.s:29     .text:000000000000001c .LVL1
     /tmp/ccQD0RUj.s:50     .text:0000000000000040 .LVL4
     /tmp/ccQD0RUj.s:58     .text:000000000000004c .LVL5
     /tmp/ccQD0RUj.s:73     .text:0000000000000060 .LVL7
     /tmp/ccQD0RUj.s:1908   .text:0000000000000b78 .LVL197
     /tmp/ccQD0RUj.s:1927   .text:0000000000000b9c .LVL198
     /tmp/ccQD0RUj.s:2050   .text:0000000000000c48 .LVL211
     /tmp/ccQD0RUj.s:1956   .text:0000000000000bc4 .LVL201
     /tmp/ccQD0RUj.s:1937   .text:0000000000000ba4 .LVL199
     /tmp/ccQD0RUj.s:1964   .text:0000000000000bcc .LVL202
     /tmp/ccQD0RUj.s:1993   .text:0000000000000bf4 .LVL205
     /tmp/ccQD0RUj.s:1974   .text:0000000000000bd4 .LVL203
     /tmp/ccQD0RUj.s:2001   .text:0000000000000bfc .LVL206
     /tmp/ccQD0RUj.s:2030   .text:0000000000000c24 .LVL209
     /tmp/ccQD0RUj.s:2011   .text:0000000000000c04 .LVL207
     /tmp/ccQD0RUj.s:1223   .text:000000000000079c .LVL125
     /tmp/ccQD0RUj.s:1249   .text:00000000000007d8 .LVL126
     /tmp/ccQD0RUj.s:1296   .text:000000000000082c .LVL131
     /tmp/ccQD0RUj.s:1299   .text:0000000000000830 .LVL132
     /tmp/ccQD0RUj.s:1305   .text:0000000000000838 .LVL134
     /tmp/ccQD0RUj.s:1302   .text:0000000000000834 .LVL133
     /tmp/ccQD0RUj.s:1253   .text:00000000000007e4 .LVL128
     /tmp/ccQD0RUj.s:1293   .text:0000000000000828 .LVL130
     /tmp/ccQD0RUj.s:1841   .text:0000000000000b0c .LVL189
     /tmp/ccQD0RUj.s:1860   .text:0000000000000b2c .LVL191
     /tmp/ccQD0RUj.s:1894   .text:0000000000000b70 .LVL196
     /tmp/ccQD0RUj.s:1856   .text:0000000000000b28 .LVL190
     /tmp/ccQD0RUj.s:1878   .text:0000000000000b5c .LVL193
     /tmp/ccQD0RUj.s:1880   .text:0000000000000b60 .LVL194
     /tmp/ccQD0RUj.s:1891   .text:0000000000000b6c .LVL195
     /tmp/ccQD0RUj.s:1616   .text:0000000000000a18 .LVL162
     /tmp/ccQD0RUj.s:1639   .text:0000000000000a44 .LVL163
     /tmp/ccQD0RUj.s:1749   .text:0000000000000ab8 .LVL178
GAS LISTING /tmp/ccQD0RUj.s 			page 80


     /tmp/ccQD0RUj.s:1753   .text:0000000000000ac0 .LVL179
     /tmp/ccQD0RUj.s:1746   .text:0000000000000ab4 .LVL177
     /tmp/ccQD0RUj.s:1729   .text:0000000000000aa4 .LVL175
     /tmp/ccQD0RUj.s:1735   .text:0000000000000aa8 .LVL176
     /tmp/ccQD0RUj.s:1819   .text:0000000000000afc .LVL187
     /tmp/ccQD0RUj.s:1657   .text:0000000000000a5c .LVL166
     /tmp/ccQD0RUj.s:1722   .text:0000000000000aa0 .LVL174
     /tmp/ccQD0RUj.s:1659   .text:0000000000000a60 .LVL167
     /tmp/ccQD0RUj.s:1667   .text:0000000000000a64 .LVL168
     /tmp/ccQD0RUj.s:1691   .text:0000000000000a80 .LVL170
     /tmp/ccQD0RUj.s:1711   .text:0000000000000a8c .LVL171
     /tmp/ccQD0RUj.s:1675   .text:0000000000000a68 .LVL169
     /tmp/ccQD0RUj.s:1715   .text:0000000000000a90 .LVL172
     /tmp/ccQD0RUj.s:1759   .text:0000000000000ac4 .LVL180
     /tmp/ccQD0RUj.s:1761   .text:0000000000000ac8 .LVL181
     /tmp/ccQD0RUj.s:1769   .text:0000000000000acc .LVL182
     /tmp/ccQD0RUj.s:1793   .text:0000000000000ae8 .LVL184
     /tmp/ccQD0RUj.s:1813   .text:0000000000000af4 .LVL185
     /tmp/ccQD0RUj.s:1777   .text:0000000000000ad0 .LVL183
     /tmp/ccQD0RUj.s:1817   .text:0000000000000af8 .LVL186
     /tmp/ccQD0RUj.s:1443   .text:0000000000000930 .LVL143
     /tmp/ccQD0RUj.s:1500   .text:000000000000098c .LVL148
     /tmp/ccQD0RUj.s:1559   .text:00000000000009d0 .LVL154
     /tmp/ccQD0RUj.s:1563   .text:00000000000009d8 .LVL155
     /tmp/ccQD0RUj.s:1597   .text:0000000000000a14 .LVL161
     /tmp/ccQD0RUj.s:1455   .text:0000000000000944 .LVL144
     /tmp/ccQD0RUj.s:1457   .text:0000000000000948 .LVL145
     /tmp/ccQD0RUj.s:1504   .text:0000000000000990 .LVL149
     /tmp/ccQD0RUj.s:1573   .text:00000000000009e4 .LVL156
     /tmp/ccQD0RUj.s:1526   .text:00000000000009a8 .LVL152
     /tmp/ccQD0RUj.s:1580   .text:00000000000009f0 .LVL157
     /tmp/ccQD0RUj.s:1585   .text:00000000000009f4 .LVL158
     /tmp/ccQD0RUj.s:1487   .text:0000000000000980 .LVL146
     /tmp/ccQD0RUj.s:1493   .text:0000000000000984 .LVL147
     /tmp/ccQD0RUj.s:1510   .text:0000000000000998 .LVL150
     /tmp/ccQD0RUj.s:1516   .text:000000000000099c .LVL151
     /tmp/ccQD0RUj.s:1094   .text:00000000000006fc .LVL106
     /tmp/ccQD0RUj.s:1106   .text:0000000000000704 .LVL108
     /tmp/ccQD0RUj.s:1109   .text:0000000000000708 .LVL109
     /tmp/ccQD0RUj.s:1168   .text:000000000000074c .LVL119
     /tmp/ccQD0RUj.s:1174   .text:0000000000000750 .LVL120
     /tmp/ccQD0RUj.s:1188   .text:0000000000000768 .LVL121
     /tmp/ccQD0RUj.s:1192   .text:000000000000076c .LVL122
     /tmp/ccQD0RUj.s:1207   .text:0000000000000794 .LVL124
     /tmp/ccQD0RUj.s:1102   .text:0000000000000700 .LVL107
     /tmp/ccQD0RUj.s:1143   .text:0000000000000734 .LVL115
     /tmp/ccQD0RUj.s:1151   .text:0000000000000738 .LVL116
     /tmp/ccQD0RUj.s:977    .text:0000000000000660 .LVL93
     /tmp/ccQD0RUj.s:994    .text:0000000000000680 .LVL94
     /tmp/ccQD0RUj.s:1033   .text:00000000000006b0 .LVL98
     /tmp/ccQD0RUj.s:1037   .text:00000000000006b8 .LVL99
     /tmp/ccQD0RUj.s:1012   .text:0000000000000698 .LVL96
     /tmp/ccQD0RUj.s:1030   .text:00000000000006ac .LVL97
     /tmp/ccQD0RUj.s:1043   .text:00000000000006bc .LVL100
     /tmp/ccQD0RUj.s:1060   .text:00000000000006d4 .LVL102
     /tmp/ccQD0RUj.s:799    .text:0000000000000570 .LVL75
     /tmp/ccQD0RUj.s:876    .text:00000000000005e4 .LVL81
GAS LISTING /tmp/ccQD0RUj.s 			page 81


     /tmp/ccQD0RUj.s:929    .text:000000000000062c .LVL87
     /tmp/ccQD0RUj.s:933    .text:0000000000000630 .LVL88
     /tmp/ccQD0RUj.s:944    .text:0000000000000644 .LVL90
     /tmp/ccQD0RUj.s:951    .text:0000000000000648 .LVL91
     /tmp/ccQD0RUj.s:963    .text:0000000000000658 .LVL92
     /tmp/ccQD0RUj.s:814    .text:000000000000058c .LVL76
     /tmp/ccQD0RUj.s:818    .text:0000000000000590 .LVL77
     /tmp/ccQD0RUj.s:924    .text:0000000000000624 .LVL86
     /tmp/ccQD0RUj.s:880    .text:00000000000005e8 .LVL82
     /tmp/ccQD0RUj.s:937    .text:0000000000000638 .LVL89
     /tmp/ccQD0RUj.s:901    .text:00000000000005fc .LVL84
     /tmp/ccQD0RUj.s:860    .text:00000000000005d4 .LVL79
     /tmp/ccQD0RUj.s:869    .text:00000000000005dc .LVL80
     /tmp/ccQD0RUj.s:508    .text:00000000000003bc .LVL51
     /tmp/ccQD0RUj.s:527    .text:00000000000003e0 .LVL52
     /tmp/ccQD0RUj.s:666    .text:00000000000004c0 .LVL67
     /tmp/ccQD0RUj.s:537    .text:00000000000003f8 .LVL54
     /tmp/ccQD0RUj.s:636    .text:0000000000000498 .LVL62
     /tmp/ccQD0RUj.s:642    .text:000000000000049c .LVL63
     /tmp/ccQD0RUj.s:644    .text:00000000000004a0 .LVL64
     /tmp/ccQD0RUj.s:652    .text:00000000000004ac .LVL66
     /tmp/ccQD0RUj.s:573    .text:0000000000000438 .LVL56
     /tmp/ccQD0RUj.s:577    .text:000000000000043c .LVL57
     /tmp/ccQD0RUj.s:610    .text:000000000000046c .LVL59
     /tmp/ccQD0RUj.s:649    .text:00000000000004a8 .LVL65
     /tmp/ccQD0RUj.s:1324   .text:0000000000000840 .LVL135
     /tmp/ccQD0RUj.s:1393   .text:00000000000008d0 .LVL139
     /tmp/ccQD0RUj.s:1391   .text:00000000000008cc .LVL138
     /tmp/ccQD0RUj.s:1427   .text:0000000000000924 .LVL142
     /tmp/ccQD0RUj.s:2149   .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccQD0RUj.s:815    .text:000000000000058c .LBB41
     /tmp/ccQD0RUj.s:825    .text:0000000000000598 .LBE41
     /tmp/ccQD0RUj.s:827    .text:0000000000000598 .LBB49
     /tmp/ccQD0RUj.s:889    .text:00000000000005f0 .LBE49
     /tmp/ccQD0RUj.s:891    .text:00000000000005f0 .LBB50
     /tmp/ccQD0RUj.s:948    .text:0000000000000644 .LBE50
     /tmp/ccQD0RUj.s:851    .text:00000000000005c4 .LBB43
     /tmp/ccQD0RUj.s:887    .text:00000000000005f0 .LBE43
     /tmp/ccQD0RUj.s:893    .text:00000000000005f0 .LBB46
     /tmp/ccQD0RUj.s:946    .text:0000000000000644 .LBE46
     /tmp/ccQD0RUj.s:1477   .text:000000000000096c .LBB63
     /tmp/ccQD0RUj.s:1528   .text:00000000000009a8 .LBE63
     /tmp/ccQD0RUj.s:1532   .text:00000000000009a8 .LBB68
     /tmp/ccQD0RUj.s:1548   .text:00000000000009c4 .LBE68
     /tmp/ccQD0RUj.s:1567   .text:00000000000009d8 .LBB69
     /tmp/ccQD0RUj.s:1604   .text:0000000000000a18 .LBE69
     /tmp/ccQD0RUj.s:1697   .text:0000000000000a80 .LBE87
     /tmp/ccQD0RUj.s:1699   .text:0000000000000a80 .LBB97
     /tmp/ccQD0RUj.s:1732   .text:0000000000000aa4 .LBE97
     /tmp/ccQD0RUj.s:1663   .text:0000000000000a60 .LBB89
     /tmp/ccQD0RUj.s:1669   .text:0000000000000a64 .LBE89
     /tmp/ccQD0RUj.s:1673   .text:0000000000000a68 .LBB94
     /tmp/ccQD0RUj.s:1695   .text:0000000000000a80 .LBE94
     /tmp/ccQD0RUj.s:1701   .text:0000000000000a80 .LBB95
     /tmp/ccQD0RUj.s:1726   .text:0000000000000aa0 .LBE95
     /tmp/ccQD0RUj.s:1799   .text:0000000000000ae8 .LBE98
     /tmp/ccQD0RUj.s:1801   .text:0000000000000ae8 .LBB108
GAS LISTING /tmp/ccQD0RUj.s 			page 82


     /tmp/ccQD0RUj.s:1830   .text:0000000000000b0c .LBE108
     /tmp/ccQD0RUj.s:1765   .text:0000000000000ac8 .LBB100
     /tmp/ccQD0RUj.s:1771   .text:0000000000000acc .LBE100
     /tmp/ccQD0RUj.s:1775   .text:0000000000000ad0 .LBB105
     /tmp/ccQD0RUj.s:1797   .text:0000000000000ae8 .LBE105
     /tmp/ccQD0RUj.s:1803   .text:0000000000000ae8 .LBB106
     /tmp/ccQD0RUj.s:1828   .text:0000000000000b0c .LBE106

UNDEFINED SYMBOLS
_ZN5Buddy4freeEPvm
_ZN11ConsoleUtil5printEPKciS1_
_ZN11ConsoleUtil11printStringEPKc
HEAP_START_ADDR
_ZN5Buddy5allocEm
_Z6strcpyPKcPc
_ZN5Buddy10initializeEPvm
